// FUNCTION SIGNATURES

resource isolated function get sights(ListSightsHeaders headers = {}, *ListSightsQueries queries) returns DashboardListResponse|error;

resource isolated function put sights/[string sightId](SightName payload, UpdateSightHeaders headers = {}, *UpdateSightQueries queries) returns ShareResponse|error;

resource isolated function post sights/[string sightId]/shares(Share payload, ShareSightHeaders headers = {}, *ShareSightQueries queries) returns TokenResponse|error;


// TYPE DEFINITIONS

public type ListSightsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
}

public type ListSightsQueries record {
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
}

public type DashboardListResponse record {
    *IndexResult;
    *DashboardListData;
}

public type Id decimal;

public type DashboardRename record {
    *Event;
    # The action applied to the specified object
    "RENAME" action?;
    DashboardRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
}

public type SightName record {
    # Dashboard name
    string name?;
}

public type UpdateSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
}

public type UpdateSightQueries record {
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
}

public type ShareResponse record {
    *ItemResult;
    *ShareData;
}

public type Id decimal;

public type DashboardRename record {
    *Event;
    # The action applied to the specified object
    "RENAME" action?;
    DashboardRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
}

public type ShareReportGetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
}

public type ShareSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
}

public type ShareSightQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
}

public type TokenResponse record {
    *Result;
    *TokenData;
}

public type IndexResultUnknownPages record {
    # The current page in the full result set that the data array represents. NOTE when a page number greater than totalPages is requested, the last page is instead returned
    decimal pageNumber?;
    # If the data field value is not empty, returns a static value of -1. When you reach the first empty page after the end of the result set, then all four fields are set with a static value of “0”
    decimal totalPages?;
    # The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included). Unless otherwise specified, this defaults to 100 for most endpoints
    decimal? pageSize?;
    # If the data field value is not empty, returns a static value of -1. When you reach the first empty page after the end of the result set, then all four fields are set with a static value of “0”
    decimal totalCount?;
}

public type DashboardListData record {
    # List of Dashboards
    SightListItem[] data?;
}

public type DashboardTransferOwnershipAdditionalDetails record {
    # New access level of the new owner: `"OWNER"`
    "OWNER" newAccessLevel = "OWNER";
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the new dashboard owner
    @constraint:Int {minValue: 0}
    int newUserId?;
    # Id of the former dashboard owner
    @constraint:Int {minValue: 0}
    int oldUserId?;
    # New access level of the former owner: `"ADMIN"`
    "ADMIN" oldAccessLevel = "ADMIN";
}

public type ItemResult GenericResult;

# Represents the Headers record for the operation: getWebhook
public type GetWebhookHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
}

public type ShareData record {
    Sight result?;
}

public type FormDelete record {
    *Event;
    # The action applied to the specified object
    "DELETE" action?;
    FormActivateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
}

public type Result ItemResult;

# A template can be used to create a sheet
public type Template record {
    # Type of global template. Only applicable to blank public templates
    "BLANK_SHEET"|"PROJECT_SHEET"|"TASK_LIST" globalTemplate?;
    # URL to the small preview image for this template. Only applicable to non-blank public templates
    string image?;
    # URL to the large preview image for this template. Only applicable to non-blank public templates
    string largeImage?;
    # Indicates whether the template is blank. Only applicable to public templates
    boolean blank?;
    // ... (additional fields omitted for brevity)
}

public type TokenData record {
    Share|Share[] result?;
}

public type IndexResultUnknownPages record {
    # The current page in the full result set that the data array represents. NOTE when a page number greater than totalPages is requested, the last page is instead returned
    decimal pageNumber?;
    # If the data field value is not empty, returns a static value of -1. When you reach the first empty page after the end of the result set, then all four fields are set with a static value of “0”
    decimal totalPages?;
    # The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included). Unless otherwise specified, this defaults to 100 for most endpoints
    decimal? pageSize?;
    # If the data field value is not empty, returns a static value of -1. When you reach the first empty page after the end of the result set, then all four fields are set with a static value of “0”
    decimal totalCount?;
}

public type ListSightsQueries record {
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
}

public type SightListItem SightResult;

public type RowMoveResponse record {
    *GenericResult;
    *RowMoveData;
}

public type DashboardTransferOwnershipAdditionalDetails record {
    # New access level of the new owner: `"OWNER"`
    "OWNER" newAccessLevel = "OWNER";
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the new dashboard owner
    @constraint:Int {minValue: 0}
    int newUserId?;
    # Id of the former dashboard owner
    @constraint:Int {minValue: 0}
    int oldUserId?;
    # New access level of the former owner: `"ADMIN"`
    "ADMIN" oldAccessLevel = "ADMIN";
}

public type AccessLevel "ADMIN"|"COMMENTER"|"EDITOR"|"EDITOR_SHARE"|"OWNER"|"VIEWER";

# Represents the Headers record for the operation: get-sight-publish-status
public type GetSightPublishStatusHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
}

public type Email record {
    # Array of recipients
    Recipient[] sendTo?;
    # Indicates whether to send a copy of the email to the sender
    boolean ccMe?;
    # The subject of the email
    string subject?;
    # The message of the email
    string message?;
}

public type UserIdAlternateemailsBody AddAlternateEmail|UsersuserIdalternateemailsOneOf2;

# Specifies the type of a column property. Valid values include various column data types such as CHECKBOX, CONTACT_LIST, DATE, PICKLIST, and others
public type PropertiesType "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER";

public type SchemasSheet record {
    Timestamp createdAt?;
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    Timestamp modifiedAt?;
    # Sheet name
    Name name?;
    # Sheet Id
    Id id?;
    Source 'source?;
    # URL that represents a direct link to the sheet in Smartsheet
    Permalink permalink?;
    # A number that is incremented every time a sheet is modified
    Version version?;
}

public type GenericResult record {
    # * '0' Success
    # * '3' Partial Success of Bulk Operation
    0|3 resultCode?;
    # Message that indicates the outcome of the request. (One of SUCCESS or PARTIAL_SUCCESS.)
    "PARTIAL_SUCCESS"|"SUCCESS" message?;
}

public type WebhookListResponse record {
    *GenericResult;
    *WebhookListData;
}

public type AccessLevel "ADMIN"|"COMMENTER"|"EDITOR"|"EDITOR_SHARE"|"OWNER"|"VIEWER";

# Represents the Headers record for the operation: get-sight-publish-status
public type GetSightPublishStatusHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
}

public type TokensGetOrRefreshQueries record {
    # refresh_token value that came with the access token
    @http:Query {name: "refresh_token"}
    string refreshToken?;
    # Authorization code acquired after user selects "Allow" in the Web login UI
    string code?;
    # Must be set to "authorization_code"
    @http:Query {name: "grant_type"}
    "authorization_code"|"refresh_token" grantType;
    # (Optional) Must use either this value or hash. Plain text method for sending this value. For example, client_secret={app_secret}. Encryption occurs at the HTTPS level
    @http:Query {name: "client_secret"}
    string clientSecret?;
    // ... (additional fields omitted for brevity)
}

public type SightPublish record {
    # URL for 'Read-Only Full' view of the published dashboard. Only returned in a response if readOnlyFullEnabled = true
    string readOnlyFullUrl?;
    # If true, a rich version of the dashboard is published with the ability to use shortcuts and widget interactions
    boolean readOnlyFullEnabled;
    # Indicates who can access the 'Read-Only Full' view of the published dashboard. Only returned in the response if **readOnlyFullEnabled = true**.
    # * **ALL** - available to anyone who has the link.
    # * **ORG** - available only to members of the dashboard owner's Smartsheet organization account.
    # * **SHARED** - available only to users shared to the item.
    #
    # ---
    # If **readOnlyFullEnabled** is set to true in the request, but **readOnlyFullAccessibleBy** is not specified, the value of **readOnlyFullAccessibleBy** defaults to the organization-level 'Dashboard Publishing' setting (if the dashboard owner belongs to an organization account) or to **ALL** (if the dashboard owner does not belong to an organization account)
    "ALL"|"ORG" readOnlyFullAccessibleBy?;
}

public type FormDelete record {
    *Event;
    # The action applied to the specified object
    "DELETE" action?;
    FormActivateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
}

public type EventUnionData AccesstokenAuthorize|AccesstokenRefresh|AccesstokenRevoke|AccountBulkUpdate|AccountDownloadLoginHistory|AccountDownloadPublishedItemsReport|AccountDownloadSheetAccessReport|AccountDownloadUserList|AccountImportUsers|AccountListSheets|AccountRename|AccountUpdateMainContact|AttachmentCreate|AttachmentDelete|AttachmentLoad|AttachmentSend|AttachmentUpdate|DashboardAddPublish|DashboardAddShare|DashboardAddShareMember|DashboardAddWorkspaceShare|DashboardCreate|DashboardDelete|DashboardLoad|DashboardMove|DashboardPurge|DashboardRemovePublish|DashboardRemoveShare|DashboardRemoveShareMember|DashboardRemoveWorkspaceShare|DashboardRename|DashboardRestore|DashboardSaveAsNew|DashboardTransferOwnership|DashboardUpdate|DiscussionCreate|DiscussionDelete|DiscussionSend|DiscussionSendcomment|DiscussionUpdate|FolderCreate|FolderDelete|FolderExport|FolderRename|FolderRequestBackup|FolderSaveAsNew|FormActivate|FormCreate|FormDeactivate|FormDelete|FormUpdate|GroupAddMember|GroupCreate1|GroupDelete|GroupDownloadSheetAccessReport|GroupRemoveMember|GroupRename|GroupTransferOwnership|GroupUpdate1|ReportAddShare|ReportAddShareMember|ReportAddWorkspaceShare|ReportCreate|ReportDelete|ReportExport|ReportLoad|ReportMove|ReportPurge|ReportRemoveShare|ReportRemoveShareMember|ReportRemoveWorkspaceShare|ReportRename|ReportRestore|ReportSaveAsNew|ReportSendAsAttachment|ReportTransferOwnership|ReportUpdate|SheetAddShare|SheetAddShareMember|SheetAddWorkspaceShare|SheetCopyRow|SheetCreate|SheetCreateCellLink|SheetDelete|SheetExport|SheetLoad|SheetMove|SheetMoveRow|SheetPurge|SheetRemoveShare|SheetRemoveShareMember|SheetRemoveWorkspaceShare|SheetRename|SheetRequestBackup|SheetRestore|SheetSaveAsNew|SheetSaveAsTemplate|SheetSendAsAttachment|SheetSendRow|SheetTransferOwnership|SheetUpdate|UpdateRequestCreate|UserAcceptInvite|UserAddToAccount|UserDeclineInvite|UserDownloadSheetAccessReport|UserRemoveFromAccount|UserRemoveFromGroups|UserRemoveShares|UserSendInvite|UserSendPasswordReset|UserTransferOwnedGroups|UserTransferOwnedItems|UserUpdateUser|WorkspaceAddShare|WorkspaceAddShareMember|WorkspaceCreate|WorkspaceCreateRecurringBackup|WorkspaceDelete|WorkspaceDeleteRecurringBackup|WorkspaceExport|WorkspaceRemoveShare|WorkspaceRemoveShareMember|WorkspaceRename|WorkspaceRequestBackup|WorkspaceSaveAsNew|WorkspaceTransferOwnership|WorkspaceUpdateRecurringBackup;

public type AutomationRule record {
    # A timestamp of when the rule was originally added
    Timestamp createdAt?;
    # Machine-readable reason a rule is disabled:
    # * `APPROVAL_COLUMN_MISSING` This rule's approval status column has been deleted.
    #
    # * `APPROVAL_COLUMN_WRONG_TYPE` The approval column must be a dropdown column.
    #
    # * `AUTOMATION_NOT_ENABLED_FOR_ORG` To create or edit automated actions,
    # you need to upgrade your organization account to a Business or Enterprise plan.
    // ... (additional fields omitted for brevity)
}

public type FormActivateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the form's sheet
    @constraint:Int {minValue: 0}
    int sheetId?;
}

public type Type "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER";

# Represents the Queries record for the operation: list-webhooks
public type ListWebhooksQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
}

public type TemplateItemData record {
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # The report's name
    string name?;
    # It is `true` if the report is a sheet summary; otherwise it is a row report
    boolean isSummaryReport?;
    # The report's unique identifier
    decimal id?;
    # URL to the report in Smartsheet
    string permalink?;
}

public type ImageUrlMap record {
    # Milliseconds before the URLs within imageUrls expire
    decimal urlExpiresInMillis?;
    ImageUrl[] imageUrls?;
}


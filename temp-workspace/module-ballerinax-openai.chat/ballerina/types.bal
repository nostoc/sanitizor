// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/constraint;
import ballerina/http;

# If the audio output modality is requested, this object contains data
# about the audio response from the model. [Learn more](/docs/guides/audio).
public type ChatCompletionResponseMessage_audio record {
    # Unique identifier for this audio response.
    string id;
    # The Unix timestamp (in seconds) for when this audio response will
    # no longer be accessible on the server for use in multi-turn
    # conversations.
    int expires_at;
    # Base64 encoded audio bytes generated by the model, in the format
    # specified in the request.
    string data;
    # Transcript of the audio generated by the model.
    string transcript;
};

# Static predicted output content, such as the content of a text file that is
# being regenerated.
public type PredictionContent record {
    # The type of the predicted content you want to provide. This type is
    # currently always `content`.
    "content" 'type;
    # The content that should be matched when generating a model response.
    # If generated tokens would match this content, the entire model response
    # can be returned much more quickly.
    string|ChatCompletionRequestMessageContentPartText[] content;
};

# Options for streaming response. Only set this when you set `stream: true`.
public type ChatCompletionStreamOptions record {
    # If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.
    boolean include_usage?;
};

public type ChatCompletionTokenLogprob record {
    # The token.
    string token;
    # The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
    decimal logprob;
    # A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
    int[]? bytes;
    # List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
    ChatCompletionTokenLogprob_top_logprobs[] top_logprobs;
};

public type ChatCompletionRequestMessage ChatCompletionRequestSystemMessage|ChatCompletionRequestUserMessage|ChatCompletionRequestAssistantMessage|ChatCompletionRequestToolMessage|ChatCompletionRequestFunctionMessage;

public type ChatCompletionRequestUserMessageContentPart ChatCompletionRequestMessageContentPartText|ChatCompletionRequestMessageContentPartImage|ChatCompletionRequestMessageContentPartAudio;

# The function that the model called.
public type ChatCompletionMessageToolCall_function record {
    # The name of the function to call.
    string name;
    # The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    string arguments;
};

public type ChatCompletionRequestSystemMessageContentPart ChatCompletionRequestMessageContentPartText;

public type AssistantsNamedToolChoice_function record {
    # The name of the function to call.
    string name;
};

public type ChatCompletionRequestAssistantMessage record {
    # The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
    string|ChatCompletionRequestAssistantMessageContentPart[]? content?;
    # The refusal message by the assistant.
    string? refusal?;
    # The role of the messages author, in this case `assistant`.
    "assistant" role;
    # An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    string name?;
    ChatCompletionRequestAssistantMessage_audio? audio?;
    ChatCompletionMessageToolCalls tool_calls?;
    ChatCompletionRequestAssistantMessage_function_call? function_call?;
};

# Controls which (if any) tool is called by the model.
# `none` means the model will not call any tool and instead generates a message.
# `auto` means the model can pick between generating a message or calling one or more tools.
# `required` means the model must call one or more tools.
# Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
# 
# `none` is the default when no tools are present. `auto` is the default if tools are present.
public type ChatCompletionToolChoiceOption "none"|"auto"|"required"|ChatCompletionNamedToolChoice;

# Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
# 
# # Deprecated
@deprecated
public type ChatCompletionResponseMessage_function_call record {
    # The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    string arguments;
    # The name of the function to call.
    string name;
};

public type ChatCompletionRequestToolMessageContentPart ChatCompletionRequestMessageContentPartText;

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# Breakdown of tokens used in a completion.
public type CompletionUsage_completion_tokens_details record {
    # When using Predicted Outputs, the number of tokens in the
    # prediction that appeared in the completion.
    int accepted_prediction_tokens?;
    # Audio input tokens generated by the model.
    int audio_tokens?;
    # Tokens generated by the model for reasoning.
    int reasoning_tokens?;
    # When using Predicted Outputs, the number of tokens in the
    # prediction that did not appear in the completion. However, like
    # reasoning tokens, these tokens are still counted in the total
    # completion tokens for purposes of billing, output, and context window
    # limits.
    int rejected_prediction_tokens?;
};

# The schema for the response format, described as a JSON Schema object.
public type ResponseFormatJsonSchemaSchema record {
};

public type ChatCompletionRequestUserMessage record {
    # The contents of the user message.
    string|ChatCompletionRequestUserMessageContentPart[] content;
    # The role of the messages author, in this case `user`.
    "user" role;
    # An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    string name?;
};

# The tool calls generated by the model, such as function calls.
public type ChatCompletionMessageToolCalls ChatCompletionMessageToolCall[];

# Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
public type ChatCompletionFunctionCallOption record {
    # The name of the function to call.
    string name;
};

@deprecated
public type ChatCompletionFunctions record {
    # A description of what the function does, used by the model to choose when and how to call the function.
    string description?;
    # The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    string name;
    FunctionParameters parameters?;
};

# Learn about [audio inputs](/docs/guides/audio).
# + input_audio - The type of the content part. Always `input_audio`.
public type ChatCompletionRequestMessageContentPartAudio record {
    # The type of the content part. Always `input_audio`.
    "input_audio" 'type;
    ChatCompletionRequestMessageContentPartAudio_input_audio input_audio;
};

public type ChatCompletionTool record {
    # The type of the tool. Currently, only `function` is supported.
    "function" 'type;
    FunctionObject 'function;
};

public type ChatCompletionRequestSystemMessage record {
    # The contents of the system message.
    string|ChatCompletionRequestSystemMessageContentPart[] content;
    # The role of the messages author, in this case `system`.
    "system" role;
    # An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    string name?;
};

public type ChatCompletionRequestMessageContentPartImage_image_url record {
    # Either a URL of the image or the base64 encoded image data.
    string url;
    # Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
    "auto"|"low"|"high" detail = "auto";
};

# Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
public type ParallelToolCalls boolean;

public type ChatCompletionTokenLogprob_top_logprobs record {
    # The token.
    string token;
    # The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
    decimal logprob;
    # A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
    int[]? bytes;
};

public type ResponseFormatJsonSchema_json_schema record {
    # A description of what the response format is for, used by the model to determine how to respond in the format.
    string description?;
    # The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    string name;
    ResponseFormatJsonSchemaSchema schema?;
    # Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).
    boolean? strict = false;
};

# Learn about [image inputs](/docs/guides/vision).
# + image_url - The type of the content part. Always `image_url`.
public type ChatCompletionRequestMessageContentPartImage record {
    # The type of the content part.
    "image_url" 'type;
    ChatCompletionRequestMessageContentPartImage_image_url image_url;
};

# Learn about [text inputs](/docs/guides/text-generation).
public type ChatCompletionRequestMessageContentPartText record {
    # The type of the content part.
    "text" 'type;
    # The text content.
    string text;
};

# The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. 
# 
# Omitting `parameters` defines a function with an empty parameter list.
public type FunctionParameters record {
};

# Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
# 
# # Deprecated
@deprecated
public type ChatCompletionRequestAssistantMessage_function_call record {
    # The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    string arguments;
    # The name of the function to call.
    string name;
};

# Specifies a tool the model should use. Use to force the model to call a specific function.
# + function - The type of the tool. Always `function`.
public type ChatCompletionNamedToolChoice record {
    # The type of the tool. Currently, only `function` is supported.
    "function" 'type;
    AssistantsNamedToolChoice_function 'function;
};

# Output types that you would like the model to generate for this request.
# Most models are capable of generating text, which is the default:
# 
# `["text"]`
# 
# The `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To
# request that this model generate both text and audio responses, you can
# use:
# 
# `["text", "audio"]`
public type ChatCompletionModalities ("text"|"audio")[]?;

public type CreateChatCompletionResponse_choices record {
    # The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    # `length` if the maximum number of tokens specified in the request was reached,
    # `content_filter` if content was omitted due to a flag from our content filters,
    # `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
    "stop"|"length"|"tool_calls"|"content_filter"|"function_call" finish_reason;
    # The index of the choice in the list of choices.
    int index;
    ChatCompletionResponseMessage message;
    CreateChatCompletionResponse_logprobs? logprobs;
};

public type FunctionObject record {
    # A description of what the function does, used by the model to choose when and how to call the function.
    string description?;
    # The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    string name;
    FunctionParameters parameters?;
    # Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
    boolean? strict = false;
};

public type ResponseFormatJsonSchema record {
    # The type of response format being defined: `json_schema`
    "json_schema" 'type;
    ResponseFormatJsonSchema_json_schema json_schema;
};

# Breakdown of tokens used in the prompt.
public type CompletionUsage_prompt_tokens_details record {
    # Audio input tokens present in the prompt.
    int audio_tokens?;
    # Cached tokens present in the prompt.
    int cached_tokens?;
};

public type CreateChatCompletionRequest record {
    # A list of messages comprising the conversation so far. Depending on the
    # [model](/docs/models) you use, different message types (modalities) are
    # supported, like [text](/docs/guides/text-generation),
    # [images](/docs/guides/vision), and [audio](/docs/guides/audio).
    @constraint:Array {minLength: 1}
    ChatCompletionRequestMessage[] messages;
    # ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.
    string|"o1-preview"|"o1-preview-2024-09-12"|"o1-mini"|"o1-mini-2024-09-12"|"gpt-4o"|"gpt-4o-2024-11-20"|"gpt-4o-2024-08-06"|"gpt-4o-2024-05-13"|"gpt-4o-realtime-preview"|"gpt-4o-realtime-preview-2024-10-01"|"gpt-4o-audio-preview"|"gpt-4o-audio-preview-2024-10-01"|"chatgpt-4o-latest"|"gpt-4o-mini"|"gpt-4o-mini-2024-07-18"|"gpt-4-turbo"|"gpt-4-turbo-2024-04-09"|"gpt-4-0125-preview"|"gpt-4-turbo-preview"|"gpt-4-1106-preview"|"gpt-4-vision-preview"|"gpt-4"|"gpt-4-0314"|"gpt-4-0613"|"gpt-4-32k"|"gpt-4-32k-0314"|"gpt-4-32k-0613"|"gpt-3.5-turbo"|"gpt-3.5-turbo-16k"|"gpt-3.5-turbo-0301"|"gpt-3.5-turbo-0613"|"gpt-3.5-turbo-1106"|"gpt-3.5-turbo-0125"|"gpt-3.5-turbo-16k-0613" model;
    # Whether or not to store the output of this chat completion request
    # for use in our [model distillation](/docs/guides/distillation) or [evals](/docs/guides/evals) products.
    boolean? store = false;
    # Developer-defined tags and values used for filtering completions
    # in the [dashboard](https://platform.openai.com/chat-completions).
    record {|string...;|}? metadata?;
    # Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    # 
    # [See more information about frequency and presence penalties.](/docs/guides/text-generation)
    decimal? frequency_penalty = 0;
    # Modify the likelihood of specified tokens appearing in the completion.
    # 
    # Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    record {|int...;|}? logit_bias?;
    # Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
    boolean? logprobs = false;
    # An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
    int? top_logprobs?;
    # The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.
    # 
    # This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series models](/docs/guides/reasoning).
    # 
    # # Deprecated
    @deprecated
    int? max_tokens?;
    # An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
    int? max_completion_tokens?;
    # How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
    int? n = 1;
    ChatCompletionModalities? modalities?;
    # Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
    # which can greatly improve response times when large parts of the model
    # response are known ahead of time. This is most common when you are
    # regenerating a file with only minor changes to most of the content.
    PredictionContent? prediction?;
    CreateChatCompletionRequest_audio? audio?;
    # Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    # 
    # [See more information about frequency and presence penalties.](/docs/guides/text-generation)
    decimal? presence_penalty = 0;
    # An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4o mini](/docs/models#gpt-4o-mini), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
    # 
    # Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
    # 
    # Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
    # 
    # **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
    ResponseFormatText|ResponseFormatJsonObject|ResponseFormatJsonSchema response_format?;
    # This feature is in Beta.
    # If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
    # Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
    int? seed?;
    # Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
    #   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
    #   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
    #   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
    #   - When not set, the default behavior is 'auto'.
    # 
    #   When this parameter is set, the response body will include the `service_tier` utilized.
    "auto"|"default"? service_tier = "auto";
    # Up to 4 sequences where the API will stop generating further tokens.
    string|string[]? stop?;
    # If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
    boolean? 'stream = false;
    ChatCompletionStreamOptions? stream_options?;
    # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    # 
    # We generally recommend altering this or `top_p` but not both.
    decimal? temperature = 1;
    # An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    # 
    # We generally recommend altering this or `temperature` but not both.
    decimal? top_p = 1;
    # A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
    ChatCompletionTool[] tools?;
    ChatCompletionToolChoiceOption tool_choice?;
    ParallelToolCalls parallel_tool_calls?;
    # A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
    string user?;
    # Deprecated in favor of `tool_choice`.
    # 
    # Controls which (if any) function is called by the model.
    # `none` means the model will not call a function and instead generates a message.
    # `auto` means the model can pick between generating a message or calling a function.
    # Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
    # 
    # `none` is the default when no functions are present. `auto` is the default if functions are present.
    # 
    # # Deprecated
    @deprecated
    "none"|"auto"|ChatCompletionFunctionCallOption function_call?;
    # Deprecated in favor of `tools`.
    # 
    # A list of functions the model may generate JSON inputs for.
    # 
    # # Deprecated
    @constraint:Array {maxLength: 128, minLength: 1}
    @deprecated
    ChatCompletionFunctions[] functions?;
};

# Log probability information for the choice.
public type CreateChatCompletionResponse_logprobs record {
    # A list of message content tokens with log probability information.
    ChatCompletionTokenLogprob[]? content;
    # A list of message refusal tokens with log probability information.
    ChatCompletionTokenLogprob[]? refusal;
};

# Parameters for audio output. Required when audio output is requested with
# `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
public type CreateChatCompletionRequest_audio record {
    # The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).
    "alloy"|"ash"|"ballad"|"coral"|"echo"|"sage"|"shimmer"|"verse" voice;
    # Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
    # `opus`, or `pcm16`.
    "wav"|"mp3"|"flac"|"opus"|"pcm16" format;
};

# Usage statistics for the completion request.
# + completion_tokens_details - Breakdown of tokens used in the completion.
# + prompt_tokens_details - Breakdown of tokens used in the prompt.
public type CompletionUsage record {
    # Number of tokens in the generated completion.
    int completion_tokens;
    # Number of tokens in the prompt.
    int prompt_tokens;
    # Total number of tokens used in the request (prompt + completion).
    int total_tokens;
    CompletionUsage_completion_tokens_details completion_tokens_details?;
    CompletionUsage_prompt_tokens_details prompt_tokens_details?;
};

public type ChatCompletionRequestMessageContentPartAudio_input_audio record {
    # Base64 encoded audio data.
    string data;
    # The format of the encoded audio data. Currently supports "wav" and "mp3".
    "wav"|"mp3" format;
};

public type ResponseFormatText record {
    # The type of response format being defined: `text`
    "text" 'type;
};

# Represents a chat completion response returned by model, based on the provided input.
# + usage - Usage statistics for the completion request.
public type CreateChatCompletionResponse record {
    # A unique identifier for the chat completion.
    string id;
    # A list of chat completion choices. Can be more than one if `n` is greater than 1.
    CreateChatCompletionResponse_choices[] choices;
    # The Unix timestamp (in seconds) of when the chat completion was created.
    int created;
    # The model used for the chat completion.
    string model;
    # The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
    "scale"|"default"? service_tier?;
    # This fingerprint represents the backend configuration that the model runs with.
    # 
    # Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
    string? system_fingerprint?;
    # The object type, which is always `chat.completion`.
    "chat.completion" 'object;
    CompletionUsage usage?;
};

@deprecated
public type ChatCompletionRequestFunctionMessage record {
    # The role of the messages author, in this case `function`.
    "function" role;
    # The contents of the function message.
    string? content;
    # The name of the function to call.
    string name;
};

public type ChatCompletionRequestToolMessage record {
    # The role of the messages author, in this case `tool`.
    "tool" role;
    # The contents of the tool message.
    string|ChatCompletionRequestToolMessageContentPart[] content;
    # Tool call that this message is responding to.
    string tool_call_id;
};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

public type ChatCompletionMessageToolCall record {
    # The ID of the tool call.
    string id;
    # The type of the tool. Currently, only `function` is supported.
    "function" 'type;
    ChatCompletionMessageToolCall_function 'function;
};

public type ChatCompletionRequestAssistantMessageContentPart ChatCompletionRequestMessageContentPartText|ChatCompletionRequestMessageContentPartRefusal;

public type ResponseFormatJsonObject record {
    # The type of response format being defined: `json_object`
    "json_object" 'type;
};

# A chat completion message generated by the model.
# + tool_calls - The tool calls generated by the model, such as function calls.
# + audio - If the audio output modality is requested, this object contains data about the audio response from the model.
# + function_call - Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
public type ChatCompletionResponseMessage record {
    # The contents of the message.
    string? content;
    # The refusal message generated by the model.
    string? refusal;
    ChatCompletionMessageToolCalls tool_calls?;
    # The role of the author of this message.
    "assistant" role;
    ChatCompletionResponseMessage_function_call function_call?;
    ChatCompletionResponseMessage_audio? audio?;
};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

public type ChatCompletionRequestMessageContentPartRefusal record {
    # The type of the content part.
    "refusal" 'type;
    # The refusal message generated by the model.
    string refusal;
};

# Data about a previous audio response from the model. 
# [Learn more](/docs/guides/audio).
public type ChatCompletionRequestAssistantMessage_audio record {
    # Unique identifier for a previous audio response from the model.
    string id;
};

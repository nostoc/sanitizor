import ballerina/io;
import ballerinax/hubspot.marketing.events;

configurable string accessToken = ?;

public function main() returns error? {
    events:Client hubspotClient = check new({
        auth: {
            token: accessToken
        }
    });

    string externalEventId = "marketing-event-2024-001";
    string subscriberState = "registered";
    
    events:MarketingEventSubscriber[] subscribers = [
        {
            vid: 12345,
            interactionDateTime: 1703721600000,
            properties: {"registration_source": "website"}
        },
        {
            vid: 67890,
            interactionDateTime: 1703722200000,
            properties: {"registration_source": "email"}
        },
        {
            vid: 11111,
            interactionDateTime: 1703722800000,
            properties: {"registration_source": "social"}
        }
    ];

    events:BatchInputMarketingEventSubscriber payload = {
        inputs: subscribers
    };

    io:println("Registering attendees for marketing event...");
    var registrationResult = hubspotClient->postAttendanceExternalEventIdSubscriberState(
        externalEventId, 
        subscriberState, 
        payload
    );
    
    if registrationResult is error {
        io:println("Error registering attendees: " + registrationResult.message());
        return registrationResult;
    } else {
        io:println("Successfully registered attendees");
        io:println(registrationResult);
    }

    string attendedState = "attended";
    events:MarketingEventSubscriber[] attendedSubscribers = [
        {
            vid: 12345,
            interactionDateTime: 1703808000000,
            properties: {"attendance_type": "in_person"}
        },
        {
            vid: 67890,
            interactionDateTime: 1703808300000,
            properties: {"attendance_type": "virtual"}
        }
    ];

    events:BatchInputMarketingEventSubscriber attendedPayload = {
        inputs: attendedSubscribers
    };

    io:println("Recording event attendance...");
    var attendanceResult = hubspotClient->postAttendanceExternalEventIdSubscriberState(
        externalEventId,
        attendedState,
        attendedPayload
    );

    if attendanceResult is error {
        io:println("Error recording attendance: " + attendanceResult.message());
        return attendanceResult;
    } else {
        io:println("Successfully recorded attendance");
        io:println(attendanceResult);
    }

    int marketingEventId = 123456789;
    
    io:println("Retrieving participation breakdown data...");
    var participationResult = hubspotClient->getParticipations(marketingEventId);
    
    if participationResult is error {
        io:println("Error retrieving participation data: " + participationResult.message());
        return participationResult;
    } else {
        io:println("Participation breakdown data:");
        io:println(participationResult);
    }
}
// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

public type WorkspaceIdCopyBody ContainerDestinationForCopy;

public type ProofVersionResponse record {
    *GenericResult;
    # Object containing zero or more media items, including images, videos, and documents, for review, editing, or approval
    Proof result?;
};

public type DiscussionCreate record {
    *Event;
    # The action applied to the specified object
    "CREATE" action?;
    DiscussionCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DISCUSSION" objectType?;
};

public type TemplateItemData record {
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # The report's name
    string name?;
    # It is `true` if the report is a sheet summary; otherwise it is a row report
    boolean isSummaryReport?;
    # The report's unique identifier
    decimal id?;
    # URL to the report in Smartsheet
    string permalink?;
};

public type AttachmentLoadAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the sheet that contains the attachment. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Name of the compressed file containing the multiple attachments downloaded at once. (Only included if more than one attachment was selected to be downloaded in the same user action. Please notice that multi-attachment download action allows the user to specify the name of the zip file that shoud include all attachments, which is what is being provided here. The download of a single attachment uses the attachment name as the download file name and it cannot be changed, and it isn't provided in this event because it is provided in the ATTACHMENT-CREATE event or by querying Smartsheet API with the attachment ID)
    string multiFileDownloadName?;
    # Id of the workspace that directly contains the attachment. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

public type SentUpdateRequestListData record {
    # list of Sent Update Requests
    SentUpdateRequest[] data?;
};

# Represents the Headers record for the operation: reactivate-user
public type ReactivateUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: rows-sort
public type RowsSortHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: share-report-get
public type ShareReportGetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Represents the Headers record for the operation: deleteWebhook
public type DeleteWebhookHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: delete-alternate-email
public type DeleteAlternateEmailHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
#
# # Deprecated
@deprecated
public type ReadOnlyFullShowToolbar boolean;

public type WebhookListResponse record {
    *GenericResult;
    *WebhookListData;
};

public type DashboardTransferOwnershipAdditionalDetails record {
    # New access level of the new owner: `"OWNER"`
    "OWNER" newAccessLevel = "OWNER";
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the new dashboard owner
    @constraint:Int {minValue: 0}
    int newUserId?;
    # Id of the former dashboard owner
    @constraint:Int {minValue: 0}
    int oldUserId?;
    # New access level of the former owner: `"ADMIN"`
    "ADMIN" oldAccessLevel = "ADMIN";
};

public type FavoritesBody Favorite|FavoritesOneOf2;

# Represents the Queries record for the operation: attachments-listOnSheet
public type AttachmentsListOnSheetQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type SummaryFieldListResponse record {
    *IndexResult;
    # List of Summary Fields
    SummaryField[] data?;
};

public type AttachmentSendAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the sheet that contains the attachment. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the recipientGroupId property below isn't included)
    string recipientEmail?;
    # Id of the workspace that directly contains the attachment. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

public type SearchResultItem record {
    # Search result parent object name
    string parentObjectName?;
    # Search result parent object Id
    decimal parentObjectId?;
    # Search result parent object type (dashboard, folder, report, sheet, template, or workspace)
    string parentObjectType?;
    # Search result text excerpt
    string text?;
    # Search result object Id
    decimal objectId?;
    # Additional info about the search result item. If the item has a discussion or attachment belonging to a proof, the context data includes the URL of that proof (e.g., "proofUrl: https://app.smartsheet.com/b/proofs/sheets/abc123/proofs/def456")
    string[] contextData?;
    # Search result object type (attachment, dashboard, discussion, folder, report, row, sheet, summaryField, template, or workspace)
    string objectType?;
};

public type WebhookResponse record {
    *GenericResult;
    *WebhookData;
};

# Describes the dashboard's publish settings
public type SightPublish record {
    # URL for 'Read-Only Full' view of the published dashboard. Only returned in a response if readOnlyFullEnabled = true
    string readOnlyFullUrl?;
    # If true, a rich version of the dashboard is published with the ability to use shortcuts and widget interactions
    boolean readOnlyFullEnabled;
    # Indicates who can access the 'Read-Only Full' view of the published dashboard. Only returned in the response if **readOnlyFullEnabled = true**.
    # * **ALL** - available to anyone who has the link.
    # * **ORG** - available only to members of the dashboard owner's Smartsheet organization account.
    # * **SHARED** - available only to users shared to the item.
    #
    # ---
    # If **readOnlyFullEnabled** is set to true in the request, but **readOnlyFullAccessibleBy** is not specified, the value of **readOnlyFullAccessibleBy** defaults to the organization-level 'Dashboard Publishing' setting (if the dashboard owner belongs to an organization account) or to **ALL** (if the dashboard owner does not belong to an organization account)
    "ALL"|"ORG" readOnlyFullAccessibleBy?;
};

public type HomeContentsData record {
    # List of Sheets
    SheetList[] data?;
};

# Indicates which view the user has set for a read-only, default view of the published sheet. Must be one of the listed enum values
public type ReadOnlyFullDefaultView "CALENDAR"|"CARD"|"GRID";

# Represents the Headers record for the operation: updaterequests-create
public type UpdaterequestsCreateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: automationrule-update
public type AutomationruleUpdateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type DashboardCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The source object used to create the dashboard, currently only 'global_template' is valid
    string sourceType?;
    # Id of the global template that was used to create the dashboard. (Specific to `Create New` actions)
    @constraint:Int {minValue: 0}
    int sourceGlobalTemplateId?;
    # Id of the source dashboard. (Specific to `Save As New` actions). 
    @constraint:Int {minValue: 0}
    int sourceObjectId?;
    # Name of the newly created dashboard
    string dashboardName?;
};

public type FilteredEventsRequest record {
    # The target managed plan for which to list events. Authorized if the caller is a licensed user on either the target managed plan or the main plan in EPM hierarchy
    decimal managedPlanId?;
    # Indicates next set of events to return. Use value of `nextStreamPosition` returned from the previous call.
    # You must pass in a value for either `since` or `streamPosition` and never both
    string streamPosition?;
    # Array of sheet Ids used to filter events. Only events related to the specified sheet Ids are returned
    string[] sheetIds?;
    # Array of workspace Ids used to filter events. Only events related to the specified workspace Ids are returned
    string[] workspaceIds?;
    # If true, dates are accepted and returned in Unix epoch time (milliseconds since midnight on January 1, 1970 in UTC time).
    # Default is false, which means ISO-8601 format
    boolean numericDates = false;
    # The latest time up to which events are included in the response. Events after this time are excluded. The `to` field requires using the `since` body field (above). This field is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained date-based queries. Therefore, resolution is limited to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
    #
    # If `to` is a future time, the current time is used. If `to` equals the `since` time, an empty data value is returned. If `to` is before the `since` time, an error is returned
    string to?;
    # Maximum number of events to return as response to this call.
    # Must be between 1 through 10,000 (inclusive).
    # Defaults to 1,000 if not specified
    @constraint:Int {minValue: 1, maxValue: 10000}
    int maxCount = 1000;
    # The earliest time from which events are included in the response. Events before this time are excluded. This field is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained date-based queries. Therefore, resolution is limited to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
    #
    # You must pass in a value for either `since` or `streamPosition` and never both
    string since?;
};

# Represents the Headers record for the operation: attachments-listOnSheet
public type AttachmentsListOnSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type WorkspaceCreateRecurringBackupAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether attachments should be included in the recurring backup
    boolean includeAttachments?;
    # Indicates whether an email should be sent to the workspace's owner every time a recurring backup completes
    boolean sendCompletionEmail?;
};

public type WorkspaceResponse record {
    *GenericResult;
    *WorkspaceData;
};

public type AutomationRuleListResponse record {
    *IndexResult;
    *AutomationRuleListData;
};

public type FolderDelete record {
    *Event;
    # The action applied to the specified object
    "DELETE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

# Represents the Headers record for the operation: share-report-get
public type ShareReportGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: get-sheetPublish
public type GetSheetPublishHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# CrossSheetReference object to create which will refer to the entire columns in the range from startColumnId to endColumnId
public type CrossSheetReferenceRequestWithColumnIds record {
    # Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References
    string name?;
    # Defines beginning edge of range when specifying one or more columns. Must be used with endColumnId
    decimal startColumnId?;
    # Sheet Id of source sheet
    decimal sourceSheetId?;
    # Defines ending edge of range when specifying one or more columns. Must be used with startColumnId
    decimal endColumnId?;
};

# Represents the Headers record for the operation: proofs-create
public type ProofsCreateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type HomeFoldersBody Folder;

public type AccountBulkUpdate record {
    *Event;
    # The action applied to the specified object
    "BULK_UPDATE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

public type ReportPurge record {
    *Event;
    # The action applied to the specified object
    "PURGE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

public type SheetRemoveShareMember record {
    *Event;
    # The action applied to the specified object
    "REMOVE_SHARE_MEMBER" action?;
    SheetRemoveShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type AttachmentVersionResponse record {
    *GenericResult;
    # Attachment Object
    Attachment result?;
};

public type DashboardRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the dashboard
    string newName?;
    # Previous name of the dashboard
    string oldName?;
};

public type ReportsreportIdsharesOneOf2 Share[];

public type GroupRename record {
    *Event;
    # The action applied to the specified object
    "RENAME" action?;
    GroupRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

public type GroupMembersData record {
    # List of Group Members
    GroupMember[] members?;
};

public type RowResponse GetRowObject;

public type SheetUpdate record {
    *Event;
    # The action applied to the specified object
    "UPDATE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# When applicable for PICKLIST column type. Array of the options available for the field
public type PropertiesOptions string[];

public type DashboardSaveAsNew record {
    *Event;
    # The action applied to the specified object
    "SAVE_AS_NEW" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Describes the sheet's publish settings
public type SheetPublish record {
    # Indicates which view the user has set for a read-write, default view of the published sheet. Must be one of the listed enum values
    "CALENDAR"|"CARD"|"GRID" readWriteDefaultView?;
    # Indicates who can access the 'Read-Only Full' view of the published sheet:
    # * ALL - available to anyone who has the link.
    # * ORG - available only to members of the sheet owner's Smartsheet organization account.
    # * SHARED - available only to users shared to the item.
    #
    # Only returned in the response if **readOnlyFullEnabled = true**
    "ALL"|"ORG"|"SHARED" readOnlyFullAccessibleBy?;
    # If **true**,a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions
    boolean readWriteEnabled?;
    # URL for **iCal** view of the published sheet. Only returned in a response if **icalEnabled = true**
    anydata icalUrl?;
    # Indicates which view the user has set for a read-only, default view of the published sheet. Must be one of the listed enum values
    "CALENDAR"|"CARD"|"GRID" readOnlyFullDefaultView?;
    # **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
    #
    # # Deprecated
    @deprecated
    boolean readWriteShowToolbar?;
    # URL for 'Read-Only Full' view of the published sheet. Only returned in a response if **readOnlyFullEnabled = true
    string readOnlyFullUrl?;
    # If **true**, a webcal is available for the calendar in the sheet
    boolean icalEnabled?;
    # If **true**, a rich version of the sheet is published with the ability to download row attachments and discussions
    boolean readOnlyFullEnabled?;
    # URL for 'Edit by Anyone' view of the published sheet. Only returned in a response if **readWriteEnabled = true**
    string readWriteUrl?;
    # URL for 'Read-Only' view of the published sheet when SSL is enabled
    string readOnlyLiteSslUrl?;
    # URL for 'Read-Only HTML' view of the published sheet. Only returned in a response if **readOnlyLiteEnabled = true**
    string readOnlyLiteUrl?;
    # If **true**, a lightweight version of the sheet is published without row attachments and discussions
    boolean readOnlyLiteEnabled?;
    # **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
    #
    # # Deprecated
    @deprecated
    boolean readOnlyFullShowToolbar?;
    # Indicates who can access the 'Edit by Anyone' view of the published sheet:
    # * ALL - available to anyone who has the link.
    # * ORG - available only to members of the sheet owner's Smartsheet organization account.
    # * SHARED - available only to users shared to the item.
    #
    # Only returned in the response if **readWriteEnabled = true**
    "ALL"|"ORG"|"SHARED" readWriteAccessibleBy?;
};

public type ReportMoveAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the parent container of the report. (Specific to move events where a folder containing the report is moved to a folder in a different workspace, indicates that the report has moved to a new workspace but is still within the same folder)
    @constraint:Int {minValue: 0}
    int parentContainerId?;
    # Id of the destination folder for the move event. (Specific to actions where the report was moved to a different folder)
    @constraint:Int {minValue: 0}
    int newParentContainerId?;
    # Name of the destination folder for the move event. (Specific to actions where the report was moved to a different folder)
    string folderName?;
    # Id of the workspace the report is currently in. If the move was between two workspaces the `workspaceId` will be the Id of the destination workspace
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Queries record for the operation: proofs-listAttachments
public type ProofsListAttachmentsQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Can contain dashboards, folders, reports, sheets, or templates
public type FolderSimpleResponse record {
    # Folder name
    string name?;
};

public type FormDelete record {
    *Event;
    # The action applied to the specified object
    "DELETE" action?;
    FormActivateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
};

# Updates User for the following attributes:
#
# * **admin** (required).
# * **licensedSheetCreator** (required).
# * **firstName** (optional).
# * **groupAdmin** (optional).
# * **lastName** (optional).
# * **resourceViewer** (optional)
public type UserUpdate record {
    # User's first name
    string firstName?;
    # User's last name
    string lastName?;
    # Indicates whether the user is a group admin (can create and edit groups)
    boolean groupAdmin = false;
    # Indicates whether the user is a resource viewer (can access resource views)
    boolean resourceViewer = false;
    # Indicates whether the user is a system admin (can manage user accounts and organization account)
    boolean admin = false;
    # Indicates whether the user is a licensed user (can create and own sheets)
    boolean licensedSheetCreator = false;
};

public type SheetsBody SheetToCreate|SheetToCreateFromTemplate;

public type ShareCreateData record {
    SightResult result?;
};

# Represents the Headers record for the operation: is-favorite
public type IsFavoriteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # UserId of the user
    @http:Header {name: "x-smar-sc-actor-id"}
    string xSmarScActorId?;
};

# Represents the Queries record for the operation: addImageToCell
public type AddImageToCellQueries record {
    # Url-encoded alternate text for the image
    string altText?;
    # You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    boolean overrideValidation = false;
};

public type UserProfileImageData record {
    # List of Groups
    Group[] data?;
};

public type Email record {
    # Array of recipients
    Recipient[] sendTo?;
    # Indicates whether to send a copy of the email to the sender
    boolean ccMe?;
    # The subject of the email
    string subject?;
    # The message of the email
    string message?;
};

public type ProofRequestCreateResponse record {
    *GenericResult;
    *ProofRequestCreateData;
};

public type WorkspaceShareListResponse record {
    *IndexResult;
    *WorkspaceShareListData;
};

# Represents the project settings dependencies for a specific sheet. Project settings may be updated on sheets that the user has editor access
public type ProjectSettings record {
    # Non-working days for a project sheet
    string[] nonWorkingDays?;
    # Working days for a project sheet
    ("MONDAY"|"TUESDAY"|"WEDNESDAY"|"THURSDAY"|"FRIDAY"|"SATURDAY"|"SUNDAY")[] workingDays?;
    # Length of a workday for a project sheet
    @constraint:Number {minValue: 1, maxValue: 24}
    decimal lengthOfDay?;
};

public type WorkspacesworkspaceIdsharesOneOf2 Share[];

public type SheetSendRowAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether the row(s) were sent with their respective attachments
    boolean includeAttachments?;
    # Number of rows sent
    @constraint:Int {minValue: 1}
    int rowCount?;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the `recipientGroupId` property below isn't included)
    string recipientEmail?;
    # Indicates whether the row(s) were sent with their respective discussion comments
    boolean includeDiscussions?;
};

# Represents the Queries record for the operation: updaterequests-list
public type UpdaterequestsListQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type SheetIdSharesBody Share|SheetssheetIdsharesOneOf2;

public type AlternateEmailResponse record {
    *SearchResult;
    *AlternateEmailData;
};

# Represents the Queries record for the operation: get-sight
public type GetSightQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of optional elements to include in the response:
    # * **objectValue** - when used in combination with a **level** query parameter, includes the email addresses for multi-contact data.
    # * **source** - the Source object for any Sight that was created from another Sight, if any
    "objectValue"|"source" include?;
    # Specifies whether new functionality, such as multi-contact data is returned in a backwards-compatible, text format (**level=0**, default), multi-contact data (**level=2**), multi-picklist data (**level=3**), or Metric widget with sheet summary (**level=4**)
    int level = 0;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
};

# Indicates whether summary field values are restricted to the type
public type Validation boolean;

public type DiscussionCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the sheet row containing the discussion. (this property is included only if the discussion is on a sheet row)
    @constraint:Int {minValue: 0}
    int sheetRowId?;
    # Id of the sheet the discussion is on. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Id of the workspace the discussion is directly on. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Headers record for the operation: getSheet
public type GetSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # The Accept request-header field can be used to specify certain media types which are acceptable for the response
    @http:Header {name: "Accept"}
    string accept?;
};

# Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
public type AccessLevel "ADMIN"|"COMMENTER"|"EDITOR"|"EDITOR_SHARE"|"OWNER"|"VIEWER";

# Represents the Headers record for the operation: get-sight-publish-status
public type GetSightPublishStatusHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type AccountRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the organization account
    string newName?;
    # Previous name of the organization account
    string oldName?;
};

# Represents the Headers record for the operation: comments-create
public type CommentsCreateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type SheetPublishResponse record {
    *GenericResult;
    *SheetPublishData;
};

public type AccesstokenRevoke record {
    *Event;
    # The action applied to the specified object
    "REVOKE" action?;
    AccesstokenRevokeAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCESS_TOKEN" objectType?;
};

# Represents the Headers record for the operation: proofs-deleteVersion
public type ProofsDeleteVersionHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
#
# # Deprecated
@deprecated
public type ReadWriteShowToolbar boolean;

# Represents the Headers record for the operation: add-favorite
public type AddFavoriteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # UserId of the user
    @http:Header {name: "x-smar-sc-actor-id"}
    string xSmarScActorId?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: get-current-user
public type GetCurrentUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: attachments-versionsDelete
public type AttachmentsVersionsDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type WorkspaceUpdateRecurringBackup record {
    *Event;
    # The action applied to the specified object
    "UPDATE_RECURRING_BACKUP" action?;
    FolderRequestBackupAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

public type TimestampWriteable TimestampDateTime|TimestampNumber;

# Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated
public type AutoNumberFormat record {
    # The prefix. Can include the date tokens:
    # * {DD}
    # * {MM}
    # * {YY}
    # * {YYYY}
    string prefix?;
    # The starting number for the auto-id
    decimal startingNumber?;
    # Indicates zero-padding. Must be between 0 and 10 "0" (zero) characters
    string fill?;
    # The suffix. Can include the date tokens:
    # * {DD}
    # * {MM}
    # * {YY}
    # * {YYYY}
    string suffix?;
};

# Indicates whether the field is locked
public type Locked boolean;

# Represents the Headers record for the operation: copy-workspace
public type CopyWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://api.smartsheet.com/2.0/token";
|};

public type DashboardAddWorkspaceShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user.
    #
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the dashboard
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that the workspace was shared to. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that the workspace was shared to. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that was shared to the group or user
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Queries record for the operation: getSheet
public type GetSheetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of optional elements to include in the response:
    # * **attachments** - includes the metadata for sheet-level and row-level attachments. To include discussion attachments, both attachments and discussions must be present in the include list.
    # * **columnType** -includes columnType attribute in the row's cells indicating the type of the column the cell resides in.
    # * **crossSheetReferences** - includes the cross-sheet references
    # * **discussions** - includes sheet-level and row-level discussions. To include discussion attachments, both attachments and discussions must be present in the include list.
    # * **filters** - includes filteredOut attribute indicating if the row should be displayed or hidden according to the sheet's filters.
    # * **filterDefinitions** - includes type of filter, operators used, and criteria
    # * **format** -  includes column, row, cell, and summary fields formatting.
    # * **ganttConfig** - includes Gantt chart details.
    # * **objectValue** - when used in combination with a level query parameter, includes the email addresses for multi-contact data.
    # * **ownerInfo** - includes the owner's email address and the owner's user Id.
    # * **rowPermalink** - includes permalink attribute that represents a direct link to the row in the Smartsheet application.
    # * **source** - adds the Source object indicating which report, sheet  Sight (aka dashboard), or template the sheet was created from, if any.
    # * **writerInfo** - includes createdBy and modifiedBy attributes on the row or summary fields, indicating the row or summary field's creator, and last modifier
    "attachments"|"columnType"|"crossSheetReferences"|"discussions"|"filters"|"filterDefinitions"|"format"|"ganttConfig"|"objectValue"|"ownerInfo"|"rowPermalink"|"source"|"writerInfo" include?;
    # Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    int level = 0;
    # A comma-separated list of row Ids on which to filter the rows included in the result
    string rowIds?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # applies to PDF format only
    "LETTER"|"LEGAL"|"WIDE"|"ARCHD"|"A4"|"A3"|"A2"|"A1"|"A0" paperSize = "LETTER";
    # If version specified is still the current sheet version, then returns an abbreviated Sheet object with only the sheet version property. Otherwise, if the sheet has been modified, returns the complete Sheet object. Intended to allow clients with a cached copy to make sure they have the latest version
    int ifVersionAfter?;
    # Overrides the existing include={filters} parameter if both are supplied. Applies the given filter (if accessible by the calling user) and marks the affected rows as "filteredOut": true
    string filterId?;
    # A comma-separated list of column ids. The response contains only the specified columns in the "columns" array, and individual rows' "cells" array only contains cells in the specified columns
    string columnIds?;
    # A comma-separated list of row numbers on which to filter the rows included in the result. Non-existent row numbers are ignored
    string rowNumbers?;
    # A comma-separated list of element types to exclude from the response:
    # * **filteredOutRows** - excludes filtered-out rows from response payload if a sheet filter is applied; includes total number of filtered rows
    # * **linkInFromCellDetails** - excludes the following attributes from the **cell.linkInFromCell** object: `columnId`, `rowId`, `status`
    # * **linksOutToCellsDetails** - excludes the following attributes from the **cell.linksOutToCells** array elements: `columnId`, `rowId`, `status`
    # * **nonexistentCells** - excludes empty cells
    "filteredOutRows"|"linkInFromCellDetails"|"linksOutToCellsDetails"|"nonexistentCells" exclude?;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
    # Filter to return only rows that have been modified since the date/time provided. Date should be in ISO-8601 format
    Timestamp rowsModifiedSince?;
};

# All objects a user has access to, including dashboards, folders, reports, sheets, and templates
public type Home record {
    # Reports accessible to the user
    Report[] reports?;
    # Sheets accessible to the user
    Sheet[] sheets?;
    # Folders accessible to the user
    Folder[] folders?;
    # Dashboards (Sights) accessible to the user
    Sight[] sights?;
    # Templates accessible to the user
    Template[] templates?;
};

public type GroupMembersResponse record {
    *Group;
    *GroupMembersData;
};

public type Report Sheet;

# Sheet imported from CSV / XLSX file
public type SheetImported record {
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # Sheet name
    Name name?;
    # Sheet Id
    Id id?;
    # Container type. Has 'sheet' value for the imported sheet
    string 'type?;
    # URL that represents a direct link to the sheet in Smartsheet
    Permalink permalink?;
};

public type SummaryFieldBulkCreateResponse record {
    *Result;
    *SummaryFieldBulkCreateData;
};

# Represents the Queries record for the operation: tokens-getOrRefresh
public type TokensGetOrRefreshQueries record {
    # refresh_token value that came with the access token
    @http:Query {name: "refresh_token"}
    string refreshToken?;
    # Authorization code acquired after user selects "Allow" in the Web login UI
    string code?;
    # Must be set to "authorization_code"
    @http:Query {name: "grant_type"}
    "authorization_code"|"refresh_token" grantType;
    # (Optional) Must use either this value or hash. Plain text method for sending this value. For example, client_secret={app_secret}. Encryption occurs at the HTTPS level
    @http:Query {name: "client_secret"}
    string clientSecret?;
    # The client Id you obtained when you registered your app
    @http:Query {name: "client_id"}
    string clientId;
    # (Optional) Must use either this value or client_secret. SHA-256 hash of your app secret concatenated with a pipe and the authorization code. For example, hash={SHA_256(app_secret|code)}
    string hash?;
    # **Deprecated** If supplied, must match the redirect URI you registered for your app
    #
    # # Deprecated
    @http:Query {name: "redirect_url"}
    @deprecated
    string redirectUrl?;
};

public type AttachmentListResponse record {
    *GenericResult;
    *AttachmentListData;
};

public type EventUnionData AccesstokenAuthorize|AccesstokenRefresh|AccesstokenRevoke|AccountBulkUpdate|AccountDownloadLoginHistory|AccountDownloadPublishedItemsReport|AccountDownloadSheetAccessReport|AccountDownloadUserList|AccountImportUsers|AccountListSheets|AccountRename|AccountUpdateMainContact|AttachmentCreate|AttachmentDelete|AttachmentLoad|AttachmentSend|AttachmentUpdate|DashboardAddPublish|DashboardAddShare|DashboardAddShareMember|DashboardAddWorkspaceShare|DashboardCreate|DashboardDelete|DashboardLoad|DashboardMove|DashboardPurge|DashboardRemovePublish|DashboardRemoveShare|DashboardRemoveShareMember|DashboardRemoveWorkspaceShare|DashboardRename|DashboardRestore|DashboardSaveAsNew|DashboardTransferOwnership|DashboardUpdate|DiscussionCreate|DiscussionDelete|DiscussionSend|DiscussionSendcomment|DiscussionUpdate|FolderCreate|FolderDelete|FolderExport|FolderRename|FolderRequestBackup|FolderSaveAsNew|FormActivate|FormCreate|FormDeactivate|FormDelete|FormUpdate|GroupAddMember|GroupCreate1|GroupDelete|GroupDownloadSheetAccessReport|GroupRemoveMember|GroupRename|GroupTransferOwnership|GroupUpdate1|ReportAddShare|ReportAddShareMember|ReportAddWorkspaceShare|ReportCreate|ReportDelete|ReportExport|ReportLoad|ReportMove|ReportPurge|ReportRemoveShare|ReportRemoveShareMember|ReportRemoveWorkspaceShare|ReportRename|ReportRestore|ReportSaveAsNew|ReportSendAsAttachment|ReportTransferOwnership|ReportUpdate|SheetAddShare|SheetAddShareMember|SheetAddWorkspaceShare|SheetCopyRow|SheetCreate|SheetCreateCellLink|SheetDelete|SheetExport|SheetLoad|SheetMove|SheetMoveRow|SheetPurge|SheetRemoveShare|SheetRemoveShareMember|SheetRemoveWorkspaceShare|SheetRename|SheetRequestBackup|SheetRestore|SheetSaveAsNew|SheetSaveAsTemplate|SheetSendAsAttachment|SheetSendRow|SheetTransferOwnership|SheetUpdate|UpdateRequestCreate|UserAcceptInvite|UserAddToAccount|UserDeclineInvite|UserDownloadSheetAccessReport|UserRemoveFromAccount|UserRemoveFromGroups|UserRemoveShares|UserSendInvite|UserSendPasswordReset|UserTransferOwnedGroups|UserTransferOwnedItems|UserUpdateUser|WorkspaceAddShare|WorkspaceAddShareMember|WorkspaceCreate|WorkspaceCreateRecurringBackup|WorkspaceDelete|WorkspaceDeleteRecurringBackup|WorkspaceExport|WorkspaceRemoveShare|WorkspaceRemoveShareMember|WorkspaceRename|WorkspaceRequestBackup|WorkspaceSaveAsNew|WorkspaceTransferOwnership|WorkspaceUpdateRecurringBackup;

public type AutomationRule record {
    # A timestamp of when the rule was originally added
    Timestamp createdAt?;
    # Machine-readable reason a rule is disabled:
    # * `APPROVAL_COLUMN_MISSING` This rule's approval status column has been deleted.
    #
    # * `APPROVAL_COLUMN_WRONG_TYPE` The approval column must be a dropdown column.
    #
    # * `AUTOMATION_NOT_ENABLED_FOR_ORG` To create or edit automated actions,
    # you need to upgrade your organization account to a Business or Enterprise plan.
    #
    # * `COLUMN_MISSING` A column referenced by this rule has been deleted.
    #
    # * `COLUMN_TYPE_INCOMPATIBLE` A column referenced by this rule has been changed to an incompatible column type.
    #
    # * `NO_POTENTIAL_RECIPIENTS` This rule has no recipients that will be able to receive
    # notifications based on this sheet's permission settings or this account's approved domain sharing list.
    #
    # * `NO_VALID_SELECTED_COLUMNS` All selected columns for this rule have been deleted
    "APPROVAL_COLUMN_MISSING"|"APPROVAL_COLUMN_WRONG_TYPE"|"AUTOMATION_NOT_ENABLED_FOR_ORG"|"COLUMN_MISSING"|"COLUMN_TYPE_INCOMPATIBLE"|"NO_POTENTIAL_RECIPIENTS"|"NO_VALID_SELECTED_COLUMNS" disabledReason?;
    # `User` object containing `name` and `email` of the creator of this rule
    MiniUser createdBy?;
    # The datetime for when the change was made to the rule
    Timestamp modifiedAt?;
    # Rule name as shown in the UI
    string name?;
    # If true, indicates that the current user can modify the rule
    boolean userCanModify?;
    # An [AutomationAction object](/api/smartsheet/openapi/automationrules/automationaction) containing information for this rule, such as type, recipients, and frequency
    anydata action?;
    # `User` object containing the `name` and `email` of the user that made the change
    MiniUser modifiedBy?;
    # AutomationRule Id
    decimal id?;
    # Descriptive reason a rule is disabled
    string disabledReasonText?;
    # If true, indicates that the rule is active
    boolean enabled?;
};

public type SheetSendAsAttachment record {
    *Event;
    # The action applied to the specified object
    "SEND_AS_ATTACHMENT" action?;
    SheetSendAsAttachmentAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type GroupMemberAdd record {
    # Group member's email address
    string email?;
};

public type SheetCreate record {
    *Event;
    # The action applied to the specified object
    "CREATE" action?;
    SheetCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type ColumnUpdateData record {
    UpdateColumn result?;
};

public type ReportRemoveWorkspaceShare record {
    *Event;
    # The action applied to the specified object
    "REMOVE_WORKSPACE_SHARE" action?;
    DashboardRemoveWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Represents the Queries record for the operation: is-favorite
public type IsFavoriteQueries record {
    # A comma-separated list of optional elements to include in the response
    "directId"|"name" include?;
};

# Represents the Queries record for the operation: get-current-user
public type GetCurrentUserQueries record {
    # When specified with a value of 'groups', response includes an array of groups (groupId, name, and description only) that the user is a member of
    "groups" include?;
};

# Represents the Headers record for the operation: sentupdaterequests-list
public type SentupdaterequestsListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Queries record for the operation: list-sights
public type ListSightsQueries record {
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: copy-rows
public type CopyRowsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type GroupDownloadSheetAccessReport record {
    *Event;
    # The action applied to the specified object
    "DOWNLOAD_SHEET_ACCESS_REPORT" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

public type ReportRemoveShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that was added to the report's sharing list. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the report's sharing list. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# Represents the Queries record for the operation: list-groups
public type ListGroupsQueries record {
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: add-group-members
public type AddGroupMembersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type AttachmentDeleteAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the sheet that contains the attachment. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Id of the workspace that directly contains the attachment. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

public type UserDownloadSheetAccessReport record {
    *Event;
    # The action applied to the specified object
    "DOWNLOAD_SHEET_ACCESS_REPORT" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Represents the Queries record for the operation: row-discussions-list
public type RowDiscussionsListQueries record {
    # A comma-separated list of optional elements to include in the response:
    # * **attachments** - effective only if comments is present, otherwise ignored
    # * **comments** - include all comments in threads
    "attachments"|"comments" include?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type SheetRemoveShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that was removed from the sheet's sharing list. (Specific to remove share from group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was removed from the sheet's sharing list. (Specific to remove share from user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# Specifies the recipient of an [Email]($ref: 'Email.yaml#/components/schemas/Email'). The recipient may be either an individual or a group. To specify an individual, set the **email** attribute; to specify a group, set the **groupId** attribute. Either **email** and **groupId** may be set, but not both
public type RecipientIndividual record {
    # The email address of an individual recipient
    string email?;
};

# Represents the Headers record for the operation: list-sheets
public type ListSheetsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ProofCreateResponse GenericResult;

# If **true**, a rich version of the sheet is published with the ability to download row attachments and discussions
public type ReadOnlyFullEnabled boolean;

# Represents the Queries record for the operation: list-sheets
public type ListSheetsQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of optional elements to include in the response:
    # * **sheetVersion** - current version number of each sheet, should not be combined with pagination
    # * **source** - the Source object for any sheet that was created from another sheet, if any
    "sheetVersion"|"source" include?;
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Indicates which view the user has set for a read-write, default view of the published sheet. Must be one of the listed enum values
public type ReadWriteDefaultView "CALENDAR"|"CARD"|"GRID";

# Represents the Headers record for the operation: set-sheetPublish
public type SetSheetPublishHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: delete-sheet-share
public type DeleteSheetShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Can contain dashboards, folders, reports, sheets, or templates
public type FolderNameOnly record {
    # Folder name
    string name?;
};

# Sheet Id
public type Id decimal;

public type DashboardRename record {
    *Event;
    # The action applied to the specified object
    "RENAME" action?;
    DashboardRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

public type FolderRequestBackup record {
    *Event;
    # The action applied to the specified object
    "REQUEST_BACKUP" action?;
    FolderRequestBackupAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

# Represents the Headers record for the operation: attachments-delete
public type AttachmentsDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Queries record for the operation: list-contacts
public type ListContactsQueries record {
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type SheetCreateCellLinkAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of sheet referenced by the cell link
    @constraint:Int {minValue: 0}
    int cellLinkSourceSheetId?;
};

# Represents the Queries record for the operation: sentupdaterequests-list
public type SentupdaterequestsListQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type ProofRequestActionListData record {
    # list of proof request actions
    ProofRequestAction[] data?;
};

public type UserProfileData record {
    # User Object
    User result?;
};

public type AccountDownloadSheetAccessReport record {
    *Event;
    # The action applied to the specified object
    "DOWNLOAD_SHEET_ACCESS_REPORT" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

public type FormActivate record {
    *Event;
    # The action applied to the specified object
    "ACTIVATE" action?;
    FormActivateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
};

public type DashboardListing record {
    Timestamp createdAt?;
    Timestamp modifiedAt?;
    # Asset name
    string name?;
    # Asset Id
    decimal id?;
    # URL that represents a direct link to the asset in Smartsheet
    string permalink?;
};

public type ProofDetailListData record {
    # list of all proofs
    Proof[] data?;
};

# Represents the Queries record for the operation: copy-rows
public type CopyRowsQueries record {
    # A comma-separated list of row elements to copy in addition to the cell data:
    # * **all** - specify a value of **all** to include everything (attachments, children, and discussions).
    # * **attachments**
    # * **children** -  if specified, any child rows of the rows specified in the request are also copied to the destination sheet, and parent-child relationships amongst rows are preserved within the destination sheet; if not specified, only the rows specified in the request are copied.
    # * **discussions**
    "all"|"attachments"|"children"|"discussions" include?;
    # **true** or **false**: default is **false**. If set to **true**, specifying row Ids that do not exist within the source sheet does not cause an error response. If omitted or set to **false**, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are copied)
    boolean ignoreRowsNotFound = false;
};

# If **true**, a webcal is available for the calendar in the sheet
public type IcalEnabled boolean;

# Represents the Headers record for the operation: tokens-getOrRefresh
public type TokensGetOrRefreshHeaders record {
    # Required for POST and PUT requests. Defines the structure for the response
    @http:Header {name: "Content-Type"}
    "application/x-www-form-urlencoded" contentType?;
};

public type WorkspaceDelete record {
    *Event;
    # The action applied to the specified object
    "DELETE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# A list of fieldIds corresponding to all summary fields that were successfully deleted
public type SummaryFieldDeleteData record {
    # List of field IDs for summary fields that were successfully deleted
    decimal[] result?;
};

# Display width of the column in pixels
public type Width decimal;

public type UpdateRowsObject record {
    Timestamp createdAt?;
    # Indicates whether the row is expanded or collapsed
    boolean expanded?;
    # Cells objects
    CellObjectForRows[] cells?;
    Timestamp modifiedAt?;
    # Row Id
    decimal id?;
    # Row number within the sheet
    @constraint:Number {minValue: 1}
    decimal rowNumber?;
    # The row number of the parent
    decimal parentRowNumber?;
    # Sheet version number that is incremented every time a sheet is modified
    decimal version?;
    # The Id of the parent
    decimal parentId?;
};

public type SharedSecret record {
    # Value for the shared secret
    string sharedSecret?;
};

public type DashboardTransferOwnership record {
    *Event;
    # The action applied to the specified object
    "TRANSFER_OWNERSHIP" action?;
    DashboardTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Represents the Queries record for the operation: columns-listOnSheet
public type ColumnsListOnSheetQueries record {
    # Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    int level = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type SheetAddShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the user. 
    #
    # Note that this access level represents the access level that has been granted to the user via group membership; it is not the user's effective access level for the sheet
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group the user was added to
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the sheet is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

public type WorkspaceRemoveShareMember record {
    *Event;
    # The action applied to the specified object
    "REMOVE_SHARE_MEMBER" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

public type SheetIdRowsBody1 Row|SheetssheetIdrowsOneOf21;

# Represents the Headers record for the operation: proofs-createProofRequests
public type ProofsCreateProofRequestsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type UpdateSheet record {
    # Represents individual user settings for a specific sheet. User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet)
    SheetUserSettings userSettings?;
    # Sheet name
    string name?;
    # Represents the project settings dependencies for a specific sheet. Project settings may be updated on sheets that the user has editor access
    ProjectSettings projectSettings?;
};

public type ProofRequestAction record {
    # Proof request action status
    "APPROVED"|"PENDING"|"REJECTED" actionStatus?;
    # `User` object containing `name` and `email` of the user performing the action
    MiniUser user?;
};

# Represents the Headers record for the operation: proofs-deleteProofRequests
public type ProofsDeleteProofRequestsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type CommentCreateResponse record {
    *GenericResult;
    Comment result?;
};

public type WorkspaceData record {
    WorkspaceListing result?;
};

public type FolderContentItemData record {
    # The folder's name
    string name?;
    # The folder's unique identifier
    decimal id?;
    # URL to the folder in Smartsheet
    string permalink?;
};

# Represents the Queries record for the operation: get-folder
public type GetFolderQueries record {
    # A comma-separated list of optional elements to include in the response:
    # * **source** - adds the Source object indicating which object the folder was created from, if any
    # * **distributionLink**
    # * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned.
    # * **sheetVersion**
    # * **permalinks**
    "source"|"distributionLink"|"ownerInfo"|"sheetVersion" include?;
};

public type SheetLoad record {
    *Event;
    # The action applied to the specified object
    "LOAD" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Headers record for the operation: SetReportPublish
public type SetReportPublishHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type DashboardAddWorkspaceShare record {
    *Event;
    # The action applied to the specified object
    "ADD_WORKSPACE_SHARE" action?;
    DashboardAddWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

public type CommentUpdateResponse GenericResult;

public type UserSendPasswordReset record {
    *Event;
    # The action applied to the specified object
    "SEND_PASSWORD_RESET" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

public type ShareCreateResponse record {
    *ItemResult;
    *ShareCreateData;
};

public type SheetRemoveShare record {
    *Event;
    # The action applied to the specified object
    "REMOVE_SHARE" action?;
    SheetRemoveShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type SheetEmail Email;

public type SheetTransferOwnership record {
    *Event;
    # The action applied to the specified object
    "TRANSFER_OWNERSHIP" action?;
    ReportTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Specifies the recipient of an email. The recipient may be either an individual or a group. To specify an individual, set the email attribute; to specify a group, set the groupId attribute. Either email and groupId may be set, but not both
public type Recipient RecipientIndividual|RecipientGroup;

# Represents the Queries record for the operation: discussion-listAttachments
public type DiscussionListAttachmentsQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: add-alternate-email
public type AddAlternateEmailHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type DiscussionSendAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether the discussion was sent with its respective attachments
    boolean includeAttachments?;
    # Id of the sheet row containing the discussion. (this property is included only if the discussion is on a sheet row)
    @constraint:Int {minValue: 0}
    int sheetRowId?;
    # Id of the sheet the discussion is on. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the `recipientGroupId` property below isn't included)
    string recipientEmail?;
    # Id of the workspace the discussion is directly on. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

public type EventFilterResponse record {
    *StreamResult;
    *EventFilterData;
};

# Represents the Headers record for the operation: discussion-listAttachments
public type DiscussionListAttachmentsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ReportLoad record {
    *Event;
    # The action applied to the specified object
    "LOAD" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

public type RowMapping record {
    # Row Id in the source sheet
    decimal 'from?;
    # Row Id in the destination sheet
    decimal to?;
};

public type CrossSheetReference record {
    # Defines beginning edge of range when specifying one or more rows. To specify an entire row, omit the startColumnId and endColumnId parameters
    decimal startRowId?;
    # Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References
    string name?;
    # Defines beginning edge of range when specifying one or more columns. To specify an entire column, omit the startRowId and endRowId parameters
    decimal startColumnId?;
    # Sheet Id of source sheet
    decimal sourceSheetId?;
    # Defines ending edge of range when specifying one or more columns. To specify an entire column, omit the startRowId and endRowId parameters
    decimal endColumnId?;
    # Defines ending edge of range when specifying one or more rows. To specify an entire row, omit the startColumnId and endColumnId parameters
    decimal endRowId?;
    # Cross-sheet reference Id, guaranteed unique within referencing sheet
    decimal id?;
    # Status of request:
    # * 'BLOCKED' - A reference is downstream of a circular issue.
    # * 'BROKEN' - The data source location (column, row or sheet) was deleted.
    # * 'CIRCULAR' - The formula reference is self referencing and cannot be resolved.
    # * 'DISABLED' - Updating the reference is temporarily disabled due to maintenance.
    # * 'INVALID/UNKNOWN' - The reference is new and had not been validated.
    # * 'NOT_SHARED' - No common shared users.
    # * 'OK' - The reference is in a good state
    "BLOCKED"|"BROKEN"|"CIRCULAR"|"DISABLED"|"INVALID/UNKNOWN"|"NOT-SHARED"|"OK" status?;
};

public type Row record {
    # Describes this row's conditional format. Only returned if the include query string parameter contains format and this row has a conditional format applied
    string conditionalFormat?;
    # Attachments on row. Only returned if the include query string parameter contains attachments
    Attachment[] attachments?;
    # URL that represents a direct link to the row in Smartsheet. Only returned if the include query string parameter contains rowPermalink
    string permaLink?;
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # Columns of row. Only returned if the include query string parameter contains columns
    Column[] columns?;
    Timestamp modifiedAt?;
    # Discussions on the row. Only returned if the include query string parameter contains discussions
    Discussion[] discussions?;
    # Format descriptor. Only returned if the include query string parameter contains format and this row has a non-default format applied
    string format?;
    # Sheet version number that is incremented every time a sheet is modified
    decimal version?;
    Timestamp createdAt?;
    # Indicates whether the row is expanded or collapsed
    boolean expanded?;
    # Cells belonging to the row
    Cell[] cells?;
    # User object containing name and email of the creator of this row
    MiniUser createdBy?;
    # Indicates if the row is filtered out by a column filter. Only returned if the include query string parameter contains filters
    boolean filteredOut?;
    # Only returned, with a value of true, if the sheet is a project sheet with dependencies enabled and this row is in the critical path
    boolean inCriticalPath?;
    # Parent sheet Id
    decimal sheetId?;
    # Indicates whether the row is locked for the requesting user
    boolean lockedForUser?;
    # User object containing name and email of the last person to modify this row
    MiniUser modifiedBy?;
    # Row Id
    decimal id?;
    # Object containing zero or more media items, including images, videos, and documents, for review, editing, or approval
    Proof proof?;
    # Indicates whether the row is locked
    boolean locked?;
    # Row number within the sheet
    @constraint:Number {minValue: 1}
    decimal rowNumber?;
    # Sibling Id
    decimal siblingId?;
};

public type ReportPublish record {
    # URL for 'Read-Only Full' view of the published report.
    #
    # Only returned in a response if **readOnlyFullEnabled** = **true**
    string readOnlyFullUrl?;
    # (Required) If **true**, a rich version of the report is published with the ability to download row
    # attachments and discussions
    boolean readOnlyFullEnabled?;
    # Indicates who can access the 'Read-Only Full' view of the published report:
    # * If **ALL**, it is available to anyone who has the link.
    # * If **ORG**, it is available only to members of the report owner's Smartsheet organization account.
    # * If **SHARED**, it is available only to users shared to the item.
    #
    # Only returned in a response if **readOnlyFullEnabled** = **true**
    string readOnlyFullAccessibleBy?;
    # **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar.
    # If **false**, hides the toolbar
    #
    # # Deprecated
    @deprecated
    boolean readOnlyFullShowToolbar?;
    # Indicates which view the user has set for a read-only, default view of the published report. Must be one of
    # the following values: **CALENDAR**, **CARD**, or **GRID**
    string readOnlyFullDefaultView?;
};

public type WorkspaceRemoveShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that was removed from the workspace's sharing list. (Specific to remove share from group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was removed from the workspace's sharing list. (Specific to remove share from user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# Represents the Headers record for the operation: get-contact
public type GetContactHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: share-workspace-get
public type ShareWorkspaceGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type UpdateRequestCreate record {
    *Event;
    # The action applied to the specified object
    "CREATE" action?;
    UpdateRequestCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "UPDATE_REQUEST" objectType?;
};

# Represents the Headers record for the operation: get-folder
public type GetFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: updaterequests-list
public type UpdaterequestsListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it
public type Format string;

public type SummaryResponse record {
    *GenericResult;
    *SummaryData;
};

public type TimestampDateTime string;

# Represents the Headers record for the operation: columns-listOnSheet
public type ColumnsListOnSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type CopyOrMoveRowResult record {
    # The Id of the destination sheet
    decimal destinationSheetId?;
    # Array of rowMapping objects
    RowMapping[] rowMappings?;
};

# Represents the Headers record for the operation: addImageToCell
public type AddImageToCellHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    @http:Header {name: "Content-Disposition"}
    string contentDisposition?;
    # Must be set to the size of the file, in bytes. For example to determine file size using in UNIX:
    # $ ls -l ProgressReport.docx
    # 5463 ProgressReport.docx
    @http:Header {name: "Content-Length"}
    int contentLength?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type UserUpdateUser record {
    *Event;
    # The action applied to the specified object
    "UPDATE_USER" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

public type SheetssheetIdsharesOneOf2 Share[];

# A list of created summary fields
public type SummaryFieldBulkCreateData record {
    # List of summary fields created by the operation
    SummaryField[] result?;
};

public type DiscussionCreationRequest record {
    # Comment
    CommentRequest comment?;
};

public type SheetAddShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    #
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the sheet
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that was added to the sheet's sharing list. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the sheet's sharing list. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

public type WorkspaceExportAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The format that the workspace was exported ("excel" or "pdf"). Notice that the same value "excel" is displayed either when exporting to Microsoft Excel or when exporting to Google Sheets
    "excel"|"pdf" formatType?;
};

public type ColumnListResponse record {
    *IndexResult;
    *ColumnListData;
};

public type ProofListResponse record {
    *GenericResult;
    *ProofListData;
};

# Represents the Headers record for the operation: discussion-delete
public type DiscussionDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type FolderCreateData record {
    # Updated User Properties
    AlternateEmail[] data?;
};

public type SummaryField record {
    # Represents a hyperlink, which can be a URL or a link to a report, sheet, or dashboard
    Hyperlink hyperlink?;
    # Represents an image object, including its unique ID, dimensions, and alternate text
    Image image?;
    # When applicable for PICKLIST column type
    string symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST
    ContactOption[] contactOptions?;
    Timestamp modifiedAt?;
    # The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it
    string format?;
    # Field index or position. This number is zero-based
    decimal index?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # Arbitrary name, must be unique within summary
    string title?;
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Visual representation of cell contents, as presented to the user in the UI
    string displayValue?;
    Timestamp createdAt?;
    # User object containing name and email of the creator of this summary field
    MiniUser createdBy?;
    # When applicable for PICKLIST column type. Array of the options available for the field
    string[] options?;
    # The formula for a cell, if set
    string formula?;
    # Indicates whether the field is locked for the requesting user
    boolean lockedForUser?;
    # User object containing name and email of the user who most recently modified this summary field
    MiniUser modifiedBy?;
    # SummaryField Id
    decimal id?;
    # Indicates whether the field is locked
    boolean locked?;
    # Indicates whether summary field values are restricted to the type
    boolean validation?;
};

public type GroupTransferOwnershipAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the former group owner
    @constraint:Int {minValue: 0}
    int oldOwnerUserId?;
    # Id of the new group owner
    @constraint:Int {minValue: 0}
    int newOwnerUserId?;
};

public type CopyOrMoveRowDirective record {
    # The Ids of the rows to move or copy from the source sheet
    decimal[] rowIds?;
    CopyOrMoveRowDestination to?;
};

public type Sheet record {
    # Indicates whether multi-select is enabled
    boolean isMultiPicklistEnabled?;
    WorkspaceListing workspace?;
    # Array of Attachment objects.
    # Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **attachments**
    Attachment[] attachments?;
    Column[] columns?;
    Timestamp modifiedAt?;
    # Array of Discussion objects
    # Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **discussions**
    Discussion[] discussions?;
    Source 'source?;
    # Describes the current user's editing permissions for a specific sheet
    SheetUserPermissions userPermissions?;
    # User Id of the sheet owner
    decimal ownerId?;
    # Indicates that resource management is enabled
    boolean resourceManagementEnabled?;
    # The sheet is enabled for cell images to be uploaded
    boolean cellImageUploadEnabled?;
    # Indicates whether a sheet summary is present
    boolean hasSummaryFields?;
    # Indicates whether "Gantt View" is enabled
    boolean ganttEnabled?;
    Timestamp createdAt?;
    # Resource Management type. Indicates the type of RM that is enabled
    "NONE"|"LEGACY_RESOURCE_MANAGEMENT"|"RESOURCE_MANAGEMENT_BY_SMARTSHEET" resourceManagementType?;
    # Sheet Id
    decimal id?;
    # The total number of rows in the sheet
    decimal totalRowCount?;
    # Email address of the sheet owner
    string owner?;
    # Represents the entire summary, or a list of defined fields and values, for a specific sheet
    SheetSummary summary?;
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # Returned only if the sheet belongs to an expired trial (value = **true**)
    boolean readOnly?;
    Row[] rows?;
    # The Id of the template from which to create the sheet. This attribute can be specified in a request, but is never present in a response
    decimal fromId?;
    # A number that is incremented every time a sheet is modified
    decimal version?;
    # Array of enum strings (see [Attachment.attachmentType](/api/smartsheet/openapi/attachments) indicating the allowable attachment options for the current user and sheet
    string[] effectiveAttachmentOptions?;
    # Indicates whether dependencies are enabled
    boolean dependenciesEnabled?;
    # Returned only if there are column filters on the sheet. Value = **true** if "show parent rows" is enabled for the filters
    boolean showParentRowsForFilters?;
    # Represents individual user settings for a specific sheet. User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet)
    SheetUserSettings userSettings?;
    # Array of CrossSheetReference objects.
    # Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **crossSheetReferences**
    CrossSheetReference[] crossSheetReferences?;
    # Sheet name
    string name?;
    # URL that represents a direct link to the sheet in Smartsheet
    string permalink?;
    # **Deprecated** Returned only if the user has marked this sheet as a favorite in their Home tab (value = **true**)
    #
    # # Deprecated
    @deprecated
    boolean favorite?;
    # Represents the project settings dependencies for a specific sheet. Project settings may be updated on sheets that the user has editor access
    ProjectSettings projectSettings?;
};

public type ProofDetailListResponse record {
    *IndexResult;
    *ProofDetailListData;
};

# Represents the Headers record for the operation: update-group
public type UpdateGroupHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: delete-summary-fields
public type DeleteSummaryFieldsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Sheet to create from template
public type SheetToCreateFromTemplate record {
    # Sheet name
    Name name?;
    # Template Id from which to create the sheet
    decimal fromId?;
};

# Represents the Queries record for the operation: list-sight-shares
public type ListSightSharesQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group)
    "ITEM"|"WORKSPACE" sharingInclude?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type GridListing record {
    # Asset name
    string name?;
    # Asset Id
    decimal id?;
    # URL that represents a direct link to the asset in Smartsheet
    string permalink?;
};

# Represents the Queries record for the operation: delete-rows
public type DeleteRowsQueries record {
    # A comma-separated list of row Ids
    string ids;
    # **true** or **false**. If set to **false** and any of the specified row Ids are not found, no rows are deleted, and the "not found" [error](/api/smartsheet/openapi/schemas/error) is returned
    boolean ignoreRowsNotFound = false;
};

# Represents the Headers record for the operation: set-sight-publish-status
public type SetSightPublishStatusHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type AlternateEmailData record {
    SearchResultItem[] result?;
};

public type RowCopyData record {
    UpdateRowsObject[] result?;
};

public type FolderCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of folder that was copied to create the new folder. (Only included if the folder was created as a result of a *save as new* or *copy*)
    @constraint:Int {minValue: 0}
    int sourceFolderId?;
    # Name of the destination folder for the move event. (Specific to actions where the folder was moved to a different folder)
    string folderName?;
};

# Represents the Queries record for the operation: list-report-shares
public type ListReportSharesQueries record {
    # When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group)
    "ITEM"|"WORKSPACE" sharingInclude?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type AlternateEmailListResponse record {
    *IndexResult;
    *AlternateEmailListData;
};

# Represents the Headers record for the operation: create-workspace
public type CreateWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type Currency record {
    # The currency symbol
    string symbol?;
    # The ISO 4217 currency code
    string code?;
};

public type ContactData record {
    Favorite[] data?;
};

public type SheetssheetIdrowsOneOf21 Row[];

public type SheetRemoveWorkspaceShare record {
    *Event;
    # The action applied to the specified object
    "REMOVE_WORKSPACE_SHARE" action?;
    DashboardRemoveWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type AutomationRuleResponse AutomationRule;

public type RowAttachmentListResponse record {
    *IndexResult;
    *RowAttachmentListData;
};

public type FolderSaveAsNew record {
    *Event;
    # The action applied to the specified object
    "SAVE_AS_NEW" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

public type AbstractDatetimeObjectValue record {
    # Datetime, in the **date-time** format defined by <a href="https://tools.ietf.org/html/rfc3339#section-5.6" target="_blank" rel="noopener noreferrer">RFC 3339, section 5.6</a>
    string value?;
    # Object representing a calculated datetime
    "ABSTRACT_DATETIME" objectType?;
};

# Represents the Headers record for the operation: attachments-versionList
public type AttachmentsVersionListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type WorkspacesworkspaceIdBody record {
    # Workspace name
    string name?;
};

public type AccesstokenRevokeAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The ID of the user who owns this token
    @constraint:Int {minValue: 0}
    int tokenUserId?;
    # Four or more characters used as a mnemonic to represent this access token. Even though this value serves as a visual token differentiator, this value isn't an Id because it isn't guaranteed to be unique across all tokens. This value is the same displayed by Smartsheet UI for each access token listed under Apps & Integrations > API Access
    string tokenDisplayValue?;
};

public type AccesstokenAuthorize record {
    *Event;
    # The action applied to the specified object
    "AUTHORIZE" action?;
    AccesstokenAuthorizeAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCESS_TOKEN" objectType?;
};

public type TemplateListData record {
    # List of all accessible reports, referenced by their ID, name, access level, and summary report flag values
    TemplateItemData[] data?;
};

# Represents the Queries record for the operation: attachments-versionList
public type AttachmentsVersionListQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type ProofRequestCreateData record {
    ProofRequest result?;
};

public type UserSendInvite record {
    *Event;
    # The action applied to the specified object
    "SEND_INVITE" action?;
    UserAddToAccountAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Represents the Headers record for the operation: delete-rows
public type DeleteRowsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type UserListData record {
    # List of User Objects
    User[] data?;
};

public type Group record {
    # Group owner’s email address
    string owner?;
    Timestamp createdAt?;
    Timestamp modifiedAt?;
    # Group name
    string name?;
    # Group description
    string description?;
    # Group Id
    decimal id?;
    # Group owner's user Id
    decimal ownerId?;
};

public type SheetAddShare record {
    *Event;
    # The action applied to the specified object
    "ADD_SHARE" action?;
    SheetAddShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type SheetPublishData record {
    # Describes the sheet's publish settings
    SheetPublish result?;
};

public type ColumnResponse GetColumn;

# Represents the Queries record for the operation: share-sheet-get
public type ShareSheetGetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Represents the Queries record for the operation: delete-summary-fields
public type DeleteSummaryFieldsQueries record {
    # If **true**, the operation will succeed even if some fieldIds are not found
    boolean ignoreSummaryFieldsNotFound = false;
    # A comma-separated list of Sheet Summary Field Ids
    string ids;
};

public type DateObjectValue record {
    # Date in the **full-date** format defined by [(https://tools.ietf.org/html/rfc3339#section-5.6" target="_blank" rel="noopener noreferrer">RFC 3339, section 5.6]</a>
    string value?;
    # Object representing a date
    "DATE" objectType?;
};

public type Timestamp TimestampDateTime|TimestampNumber;

# Represents the Headers record for the operation: attachments-attachToComment
public type AttachmentsAttachToCommentHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type DashboardAddShareMember record {
    *Event;
    # The action applied to the specified object
    "ADD_SHARE_MEMBER" action?;
    DashboardAddShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Represents the Headers record for the operation: list-sight-shares
public type ListSightSharesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type SheetExport record {
    *Event;
    # The action applied to the specified object
    "EXPORT" action?;
    SheetExportAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type WorkspaceShareListData record {
    WorkspaceListing[] data?;
};

public type ContactResponse record {
    *IndexResult;
    *ContactData;
};

# Represents the Queries record for the operation: move-rows
public type MoveRowsQueries record {
    # A comma-separate list of row elements to move in addition to the cell data
    "attachments"|"discussions" include?;
    # **true** or **false**: default is **false**. If set to **true**, specifying row Ids that do not exist within the source sheet does not cause an error response. If omitted or set to **false**, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are moved)
    boolean ignoreRowsNotFound = false;
};

# Represents the Headers record for the operation: update-sheet-share
public type UpdateSheetShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type UserDeclineInvite record {
    *Event;
    # The action applied to the specified object
    "DECLINE_INVITE" action?;
    UserDeclineInviteAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

public type FolderIdFoldersBody Folder;

public type AccesstokenRefreshAdditionalDetails record {
    # Date and time when this access token expires
    string tokenExpirationTimestamp?;
    # Email address of the user responsible for the event
    string emailAddress;
    # Four or more characters used as a mnemonic to represent this access token. Even though this value serves as a visual token differentiator, this value isn't an Id because it isn't guaranteed to be unique across all tokens. This value is the same displayed by Smartsheet UI for each access token listed under Apps & Integrations > API Access
    string tokenDisplayValue?;
};

public type SheetRestore record {
    *Event;
    # The action applied to the specified object
    "RESTORE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type MultiRowEmail RowEmail;

# Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST
public type PropertiesContactOptions ContactOption[];

# Represents the Headers record for the operation: create-sheet-in-workspace
public type CreateSheetInWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type GroupResponse record {
    *IndexResult;
    *GroupData;
};

# Represents the Queries record for the operation: create-workspace
public type CreateWorkspaceQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of elements to include:
    # * **all**
    # * **attachments**
    # * **brand**
    # * **cellLinks** - includes cross-sheet references
    # * **data** - includes formatting
    # * **discussions** - includes comments
    # * **filters**
    # * **forms**
    # * **ruleRecipients**
    # * **rules**
    # * **shares**
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    "all"|"attachments"|"brand"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares" include?;
    # A comma-separated list of references to NOT re-map for the newly created folder
    "cellLinks"|"reports"|"sheetHyperlinks"|"sights" skipRemap?;
};

public type HomeFolderCreateResponse record {
    *GenericResult;
    *HomeFolderCreateData;
};

public type Webhook record {
    *UpdateWebhookRequest;
    *WebhookAllOf2;
};

public type SharesshareIdBody record {
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
};

# Represents the Queries record for the operation: share-workspace-get
public type ShareWorkspaceGetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

public type FolderIdMoveBody ContainerDestinationForMove;

# Represents the Headers record for the operation: share-sheet-get
public type ShareSheetGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Queries record for the operation: update-sight
public type UpdateSightQueries record {
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
};

public type FavoriteData record {
    AutomationRule result?;
};

public type WorkspaceDeleteRecurringBackup record {
    *Event;
    # The action applied to the specified object
    "DELETE_RECURRING_BACKUP" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

public type DashboardDelete record {
    *Event;
    # The action applied to the specified object
    "DELETE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Represents the Queries record for the operation: copy-folder
public type CopyFolderQueries record {
    # A comma-separated list of elements to copy:
    # * **attachments**
    # * **cellLinks** - includes cross-sheet references
    # * **data** - includes formatting
    # * **discussions** - includes comments
    # * **filters**
    # * **forms**
    # * **ruleRecipients** -- includes notification recipients, must also include rules when using this attribute
    # * **rules** -- includes notifications and workflow rules
    # * **shares** |
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares" include?;
    # A comma-separated list of references to NOT re-map for the newly created folder
    "cellLinks"|"reports"|"sheetHyperlinks"|"sights" skipRemap?;
    # When specified with a value of **sheetHyperlinks**, excludes this category from the response
    "sheetHyperlinks" exclude?;
};

public type GroupCreateData record {
    Group result?;
};

# Represents the Headers record for the operation: attachments-versionUpload
public type AttachmentsVersionUploadHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: import-sheet-into-workspace
public type ImportSheetIntoWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    @http:Header {name: "Content-Disposition"}
    string contentDisposition?;
    # Required for POST request to import a sheet from CSV/XLSX file.
    # * For CSV files, use: Content-Type: text/csv
    # * For XLSX files, use: Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
    @http:Header {name: "Content-Type"}
    "text/csv"|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" contentType;
};

# Sheet created from scratch using the specified columns
public type SheetCreated record {
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # An array of Column objects, each defining the properties and configuration of a column in a sheet. See the Column schema for details on individual column attributes
    Columns columns?;
    # Sheet name
    Name name?;
    # Sheet Id
    Id id?;
    # URL that represents a direct link to the sheet in Smartsheet
    Permalink permalink?;
};

public type UpdateRequest record {
    *MultiRowEmail;
    *UpdateRequestAllOf2;
};

public type SearchResponse record {
    *IndexResult;
    *SearchResultData;
};

public type CrossSheetReferenceData record {
    # Can contain dashboards, folders, reports, sheets, or templates
    Folder result?;
};

public type ItemResult GenericResult;

# Represents the Headers record for the operation: getWebhook
public type GetWebhookHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: list-sheet-shares
public type ListSheetSharesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type WorkspaceListResponse record {
    *IndexResult;
    *WorkspaceListData;
};

# Represents the Queries record for the operation: getReport
public type GetReportQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of optional elements to include in the response:
    # * **attachments**
    # * **discussions**
    # * **proofs**
    # * **format**
    # * **objectValue** - when used in combination with a level query parameter, includes the email addresses for multi-contact data
    # * **scope** - adds the report's scope to the response
    # * **source** - adds the Source object indicating which report the report was created from, if any
    # * **sourceSheets**
    "attachments"|"discussions"|"proofs"|"format"|"objectValue"|"scope"|"source"|"sourceSheets" include?;
    # specifies whether new functionality, such as multi-contact data is returned in a backwards-compatible, text format (level=0, default), multi-contact data (level=1), or multi-picklist data (level=3)
    int level = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # A comma-separated list of optional elements to not include in the response
    "linkInFromCellDetails"|"linksOutToCellsDetails" exclude?;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type SentUpdateRequestListResponse record {
    *IndexResult;
    *SentUpdateRequestListData;
};

public type WorkspaceSaveAsNew record {
    *Event;
    # The action applied to the specified object
    "SAVE_AS_NEW" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Represents the Headers record for the operation: update-sight
public type UpdateSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type DiscussionUpdate record {
    *Event;
    # The action applied to the specified object
    "UPDATE" action?;
    DiscussionCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DISCUSSION" objectType?;
};

public type ColumnCreateData record {
    AddColumns[] result?;
};

public type ContainerDestinationForMove record {
    # Type of destination container.
    #
    # The `"home"` enum is **Deprecated** since March 25, 2025, and will be removed
    "folder"|"home"|"workspace"? destinationType?;
    # The ID of the destination container
    decimal destinationId;
};

public type SheetMove record {
    *Event;
    # The action applied to the specified object
    "MOVE" action?;
    SheetMoveAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Headers record for the operation: copy-folder
public type CopyFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: import-sheet-into-workspace
public type ImportSheetIntoWorkspaceQueries record {
    # Desired name of the sheet
    string sheetName;
    # A zero-based integer indicating the row number to use for column names. Rows before this are omitted.
    # If not specified, the default values are Column1, Column2, etc
    decimal headerRowIndex?;
    # A zero-based integer indicating the column to designate as primary
    decimal primaryColumnIndex = 0;
};

# Represents the Headers record for the operation: sentupdaterequest-get
public type SentupdaterequestGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type SummaryFieldCreateResponse record {
    *Result;
    *SummaryFieldCreateData;
};

# Represents the Queries record for the operation: share-sheet
public type ShareSheetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
};

public type ImageUrlMap record {
    # Milliseconds before the URLs within imageUrls expire
    decimal urlExpiresInMillis?;
    ImageUrl[] imageUrls?;
};

public type GroupDelete record {
    *Event;
    # The action applied to the specified object
    "DELETE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

public type UserAddToAccountAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Comma-delimited list of user types, e.g. `SYSTEM_ADMIN`, `LICENSED_USER`, `GROUP_ADMIN`, `RESOURCE_VIEWER`, `JIRA_ADMIN`, `JIRA_USER`, `SALESFORCE_ADMIN`, `SALESFORCE_USER`. 
    #
    # The full list of available user types can be seen <a href="https://help.smartsheet.com/learning-track/shared-users/user-types-and-permissions" target="_blank" rel="noopener noreferrer">here</a>. Please notice that user types Unlicensed User and Free Collaborator are not applicable for this event
    string userTypes?;
};

# Represents the Queries record for the operation: update-sheet-share
public type UpdateSheetShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

public type ColumnObjectAttributes record {
    # When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)
    string symbol?;
    ContactOption contactOptions?;
    # Indicates whether the column is hidden
    boolean hidden?;
    # The format descriptor (see [Cell formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the **include** query string parameter contains **format** and this column has a non-default format applied to it
    string format?;
    # Column index or position. This number is zero-based
    decimal index?;
    # Column description
    string description?;
    # Column title
    string title?;
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Read only. The level of the column type. Each element in the array is set to one of the following values:
    # * **0**: TEXT_NUMBER, CONTACT_LIST, or PICKLIST
    # * **1**: MULTI_CONTACT_LIST
    # * **2**: MULTI_PICKLIST
    #
    # See [Versioning and changes](/api/smartsheet/guides/basics/versioning-and-changes)
    decimal version?;
    # Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated
    AutoNumberFormat autoNumberFormat?;
    string[] options?;
    # Display width of the column in pixels
    decimal width?;
    # The formula for a column, if set, for instance **=data@row**
    string formula?;
    # Indicates whether the column is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request
    boolean lockedForUser?;
    # See [System Columns](/api/smartsheet/openapi/columns)
    "AUTO_NUMBER"|"CREATED_BY"|"CREATED_DATE"|"MODIFIED_BY"|"MODIFIED_DATE" systemColumnType?;
    # Indicates whether the column is locked. In a response, a value of **true** indicates that the column has been locked by the sheet owner or the admin
    boolean locked?;
    # Indicates whether validation has been enabled for the column (value = **true**)
    boolean validation?;
};

public type SheetAddWorkspaceShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    #
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the sheet
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that the workspace was shared to. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that the workspace was shared to. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that was shared to the group or user
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

public type SheetSaveAsTemplate record {
    *Event;
    # The action applied to the specified object
    "SAVE_AS_TEMPLATE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type UpdateRequestListData record {
    # list of UpdateRequest objects
    UpdateRequest[] data?;
};

# Represents the Headers record for the operation: move-sight
public type MoveSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type UserResponse record {
    *Result;
    *UserData;
};

public type ProofRequestBody Email;

# Represents the Headers record for the operation: get-crosssheet-reference
public type GetCrosssheetReferenceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ColumnListData record {
    GetColumn[] data?;
};

public type EventStreamData record {
    # List of Events
    EventUnionData[] data?;
};

public type RowEmail Email;

# Represents the Queries record for the operation: delete-report-share
public type DeleteReportShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Sheet created from template
public type SheetCreatedFromTemplate record {
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # Sheet name
    Name name?;
    # Sheet Id
    Id id?;
    # URL that represents a direct link to the sheet in Smartsheet
    Permalink permalink?;
};

public type UpdateWebhookRequest record {
    *CreateWebhookRequest;
    *UpdateWebhookRequestAllOf2;
};

# Represents the Queries record for the operation: copy-workspace
public type CopyWorkspaceQueries record {
    # A comma-separated list of elements to include:
    # * **all**
    # * **attachments**
    # * **brand**
    # * **cellLinks** - includes cross-sheet references
    # * **data** - includes formatting
    # * **discussions** - includes comments
    # * **filters**
    # * **forms**
    # * **ruleRecipients**
    # * **rules**
    # * **shares**
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    "all"|"attachments"|"brand"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares" include?;
    # A comma-separated list of references to NOT re-map for the newly created folder
    "cellLinks"|"reports"|"sheetHyperlinks"|"sights" skipRemap?;
};

public type SummaryFieldCreateData record {
    # A list of updated summary fields
    SummaryField[] result?;
};

public type RowAttachmentListData record {
    # List of cell history objects
    CellHistory[] data?;
};

public type UserDeclineInviteAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    "ACCEPT_FAILED_REMOVED_FROM_ORG"|"ACCEPT_FAILED_IN_OTHER_ORG"|"ACCEPT_FAILED_IS_PAID_USER"|"ACCEPT_FAILED_NEEDS_LICENSE"|"ACCEPT_FAILED_INSUFFICIENT_LICENSES"|"ACCEPT_FAILED_NOT_ELIGIBLE_FOR_TRIAL"|"ACCEPT_FAILED"|"ACCEPT_FAILED_NEEDS_GROUP_ADMIN_ROLE"|"ACCEPT_FAILED_UAP_VIOLATION"|"DECLINE_SUCCESS" declineReason?;
};

public type AttachmentUpdate record {
    *Event;
    # The action applied to the specified object
    "UPDATE" action?;
    AttachmentDeleteAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ATTACHMENT" objectType?;
};

public type AccesstokenRefresh record {
    *Event;
    # The action applied to the specified object
    "REFRESH" action?;
    AccesstokenRefreshAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCESS_TOKEN" objectType?;
};

public type DashboardAddPublish record {
    *Event;
    # The action applied to the specified object
    "ADD_PUBLISH" action?;
    DashboardAddPublishAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Represents the Queries record for the operation: list-home-contents
public type ListHomeContentsQueries record {
    # A comma-separated list of optional elements to include in the response:
    # * **source** - adds the Source object indicating which object the folder was created from, if any
    # * **distributionLink**
    # * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned.
    # * **sheetVersion**
    # * **permalinks**
    "source"|"distributionLink"|"ownerInfo"|"sheetVersion" include?;
};

# Represents the Headers record for the operation: row-discussions-list
public type RowDiscussionsListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: list-home-contents
public type ListHomeContentsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: column-delete
public type ColumnDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ReportIdSharesBody Share|ReportsreportIdsharesOneOf2;

# Represents the Headers record for the operation: proofs-delete
public type ProofsDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type SheetDelete record {
    *Event;
    # The action applied to the specified object
    "DELETE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Headers record for the operation: delete-report-share
public type DeleteReportShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: automationrules-list
public type AutomationrulesListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ServerInfo record {
    # Contains all of the lookup tables that the format descriptor indexes refer to. Here the examples show the formatting options, the default value is used to denote each option. NOTE -- Indexes and their values are guaranteed never to change or be removed for a given major API version.  However, new values could potentially be added to the ends of lookup tables. Because of this possibility, your code should handle the case where a cell might contain a format index value greater than the size of a lookup table your app has loaded. Your application should check for that case and reload the format tables if necessary
    FormatTables formats?;
    # Array of strings representing all Smartsheet-supported locales
    string[] supportedLocales?;
};

# Represents the Headers record for the operation: add-user
public type AddUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type WorkspaceCreateData record {
    # Can contain dashboards, folders, reports, sheets, and templates
    Workspace result?;
};

public type UpdateRequestCreateData record {
    UpdateRequest result?;
};

public type HomeFolderCreateData record {
    # Updated User Properties
    UserProfileImageResponse[] data?;
};

public type SummaryFieldAddImage record {
    # Represents an image object, including its unique ID, dimensions, and alternate text
    Image image?;
    Timestamp createdAt?;
    Timestamp modifiedAt?;
    # Field index or position. This number is zero-based
    decimal index?;
    # Indicates whether the field is locked for the requesting user
    boolean lockedForUser?;
    # The formula for a cell, if set
    string formula?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # SummaryField Id
    decimal id?;
    # Arbitrary name, must be unique within summary
    string title?;
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Indicates whether the field is locked
    boolean locked?;
    # Sheet version number that is incremented every time a sheet is modified
    decimal version?;
};

# Represents the Headers record for the operation: get-sight
public type GetSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type WorkspaceRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the workspace
    string newName?;
    # Previous name of the workspace
    string oldName?;
};

public type DashboardRemoveWorkspaceShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that was removed from the workspace. (Specific to remove share from group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was removed from the workspace. (Specific to remove share from user actions)
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace the group or user was removed from
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# See [Column Types](/api/smartsheet/openapi/columns)
public type Type "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER";

# Represents the Queries record for the operation: list-webhooks
public type ListWebhooksQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type ProofVersionListData record {
    # list of proof versions
    Proof[] data?;
};

public type Share record {
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    Timestamp modifiedAt?;
    # The subject of the email that is optionally sent to notify the recipient. You can specify this attribute
    # in a request, but it is never present in a response
    string subject?;
    # Group Id if the share is a group share, else null
    decimal groupId?;
    # The type of this share. One of the following values: GROUP or USER
    string 'type?;
    # The message included in the body of the email that is optionally sent to the recipient. You can specify
    # this attribute in a request, but it is never present in a response
    string message?;
    # User Id if the share is a user share, else null
    decimal userId?;
    Timestamp createdAt?;
    # Indicates whether to send a copy of the email to the sharer of the sheet. You can specify this attribute
    # in a request, but it is never present in a response
    boolean ccMe?;
    # The scope of this share. One of the following values:
    # * **ITEM**: an item-level share (that is, the specific object to which the share applies is shared with
    # the user or group).
    # * **WORKSPACE**: a workspace-level share (that is, the workspace that contains the object to which the
    # share applies is shared with the user or group)
    string scope?;
    # If a user share and user is also a contact, the user's full name. If a group share, the group's name
    string name?;
    # Share Id.
    #
    # **NOTE**: unlike other Smartsheet object Ids, this Id is an alphanumeric string
    string id?;
    # User's primary email address for user shares; null for group shares
    string email?;
};

public type DashboardRemoveShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that was removed from the dashboard's sharing list. (Specific to remove share from group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was removed from the dashboard's sharing list. (Specific to remove share from user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

public type DiscussionSendcomment record {
    *Event;
    # The action applied to the specified object
    "SEND_COMMENT" action?;
    DiscussionSendcommentAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DISCUSSION" objectType?;
};

# Represents the Queries record for the operation: add-user
public type AddUserQueries record {
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
};

public type SheetRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the sheet
    string newName?;
    # Previous name of the sheet
    string oldName?;
};

# Represents the Queries record for the operation: automationrules-list
public type AutomationrulesListQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type MultiContactObjectValue record {
    # List of Contacts
    ContactObjectValue[] value?;
    # Object containing a list of Contacts
    "MULTI_CONTACT" objectType?;
};

public type WebhookAllOf2 record {
    # API client name corresponding to third-party app that created the webhook. Read-only. Only present if webhook was created by third-party app
    string apiClientName?;
    Timestamp createdAt?;
    # Details about the reason the webhook was disabled. Read-only. Only present when enabled=false
    string disabledDetails?;
    WebhookStats stats?;
    Timestamp modifiedAt?;
    # API client Id corresponding to third-party app that created the webhook. Read-only. Only present if webhook was created by third-party app
    string apiClientId?;
    # Webhook Id
    decimal id?;
    # Shared secret for this Webhook, randomly generated by Smartsheet. Read-only. See [Authenticating Callbacks](/api/smartsheet/openapi/webhooks) for details about how this value can be used
    string sharedSecret?;
    # Webhook status. Read-only. See Webhook Status for list of possible values
    "DISABLED_ADMINISTRATIVE"|"DISABLED_APP_REVOKED"|"DISABLED_BY_OWNER"|"DISABLED_CALLBACK_FAILED"|"DISABLED_SCOPE_INACCESSIBLE"|"DISABLED_VERIFICATION_FAILED"|"ENABLED"|"NEW_NOT_VERIFIED" status?;
};

public type PublicTemplateListData record {
    Share[] result?;
};

public type GenericResult record {
    # * '0' Success
    # * '3' Partial Success of Bulk Operation
    0|3 resultCode?;
    # Message that indicates the outcome of the request. (One of SUCCESS or PARTIAL_SUCCESS.)
    "PARTIAL_SUCCESS"|"SUCCESS" message?;
};

# The formula for a cell, if set
public type Formula string;

# The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
public type ObjectValue AbstractDatetimeObjectValue|CheckboxObjectValue|ContactObjectValue|DateObjectValue|DatetimeObjectValue|DurationObjectValue|MultiContactObjectValue|MultiPicklistObjectValue|PredecessorList;

public type AttachmentDelete record {
    *Event;
    # The action applied to the specified object
    "DELETE" action?;
    AttachmentDeleteAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ATTACHMENT" objectType?;
};

public type EventStreamResponse record {
    *StreamResult;
    *EventStreamData;
};

# See [System Columns](/api/smartsheet/openapi/columns)
public type SystemColumnType "AUTO_NUMBER"|"CREATED_BY"|"CREATED_DATE"|"MODIFIED_BY"|"MODIFIED_DATE";

# Represents the Headers record for the operation: share-sheet
public type ShareSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: sentupdaterequest-delete
public type SentupdaterequestDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type CellHistory Cell;

public type AttachmentResponse Attachment;

# Represents the Headers record for the operation: resetSharedSecret
public type ResetSharedSecretHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Indicates who can access the 'Edit by Anyone' view of the published sheet:
# * ALL - available to anyone who has the link.
# * ORG - available only to members of the sheet owner's Smartsheet organization account.
# * SHARED - available only to users shared to the item.
#
# Only returned in the response if **readWriteEnabled = true**
public type ReadWriteAccessibleBy "ALL"|"ORG"|"SHARED";

public type GroupMembersListResponse record {
    *GenericResult;
    *GroupMembersListData;
};

# Represents the Queries record for the operation: proofs-listDiscussions
public type ProofsListDiscussionsQueries record {
    # A comma-separated list of optional elements to include in the response:
    # * **attachments** - effective only if comments is present, otherwise ignored
    # * **comments** - include all comments in threads
    "attachments"|"comments" include?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: attachments-attachToSheet
public type AttachmentsAttachToSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type DashboardAddShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    #
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the dashboard
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that was added to the dashboard's sharing list. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the dashboard's sharing list. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

public type DashboardRemoveShare record {
    *Event;
    # The action applied to the specified object
    "REMOVE_SHARE" action?;
    DashboardRemoveShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

public type TokenResponse record {
    *Result;
    *TokenData;
};

public type WorkspaceFolderCreateResponse record {
    *Result;
    *WorkspaceFolderCreateData;
};

public type SheetCreateCellLink record {
    *Event;
    # The action applied to the specified object
    "CREATE_CELL_LINK" action?;
    SheetCreateCellLinkAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type TimestampNumber decimal;

public type CommentResponse Comment;

public type UserCreateData record {
};

public type DashboardRemoveWorkspaceShare record {
    *Event;
    # The action applied to the specified object
    "REMOVE_WORKSPACE_SHARE" action?;
    DashboardRemoveWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

public type ReportAddWorkspaceShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    #
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the report
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that the workspace was shared to. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that the workspace was shared to. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that was shared to the group or user
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

public type UserCreateResponse record {
    *SearchResult;
    *UserCreateData;
};

public type ProofRequest ProofRequestBody;

# Represents the Headers record for the operation: proofs-listDiscussions
public type ProofsListDiscussionsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type DiscussionResponse Discussion;

public type ColumnToCreateASheet record {
    # When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)
    Symbol symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**
    ContactOptions contactOptions?;
    # Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated
    AutoNumberFormat autoNumberFormat?;
    # Array of the options available for the column
    Options options?;
    # Display width of the column in pixels
    Width width?;
    # See [System Columns](/api/smartsheet/openapi/columns)
    SystemColumnType systemColumnType?;
    # Column title
    Title title?;
    # See [Column Types](/api/smartsheet/openapi/columns)
    Type 'type?;
    # Returned only if the column is the Primary Column (value = **true**)
    Primary primary?;
};

# An array of GroupMemberAdd objects, each specifying the email address of a user to be added to a group
public type GroupMembersAddArray GroupMemberAdd[];

# Represents the Headers record for the operation: proofs-listAttachments
public type ProofsListAttachmentsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: move-rows
public type MoveRowsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: delete-sight
public type DeleteSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type WebhooksAllOf2 record {
};

public type ReportPublishResponse record {
    *ItemResult;
    *ReportPublishData;
};

public type CrossSheetReferenceListData record {
    ComponentsSchemasSheet result?;
};

# Represents the Queries record for the operation: create-sheet-in-workspace
public type CreateSheetInWorkspaceQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Additional parameter to create a sheet from template.
    # A comma-separated list of elements to copy from the template
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules" include?;
};

public type ReportRemoveShare record {
    *Event;
    # The action applied to the specified object
    "REMOVE_SHARE" action?;
    ReportRemoveShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Represents the Headers record for the operation: list-webhooks
public type ListWebhooksHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Queries record for the operation: column-get
public type ColumnGetQueries record {
    # Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    int level = 0;
};

public type GroupAddMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the user that was added to the group
    @constraint:Int {minValue: 0}
    int memberUserId?;
};

# Represents the Headers record for the operation: list-events
public type ListEventsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Strongly recommended to make sure payload is compressed. Must be set to one of the following values:
    # * deflate
    # * gzip
    @http:Header {name: "Accept-Encoding"}
    "deflate"|"gzip" acceptEncoding?;
};

public type SummaryData record {
    SummaryFieldAddImage result?;
};

public type ReportAddShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    #
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the report
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that was added to the report's sharing list. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the report's sharing list. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# Represents the Headers record for the operation: delete-group
public type DeleteGroupHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Queries record for the operation: proofs-getAllProofs
public type ProofsGetAllProofsQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: proofs-getAllProofs
public type ProofsGetAllProofsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ProofRequestActionListResponse record {
    *IndexResult;
    *ProofRequestActionListData;
};

public type WorkspaceShareCreateData record {
    SharedSecret result?;
};

public type GroupMembersListData record {
    GroupMember|GroupMember[] result?;
};

# Represents the Headers record for the operation: rows-addToSheet
public type RowsAddToSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type DurationObjectValue record {
    # Number of days
    float days?;
    # Object representing a duration in days
    "DURATION" objectType?;
};

public type WorkspaceIdSharesBody Share|WorkspacesworkspaceIdsharesOneOf2;

public type ReportExport record {
    *Event;
    # The action applied to the specified object
    "EXPORT" action?;
    ReportExportAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Represents the Queries record for the operation: rows-addToSheet
public type RowsAddToSheetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # When specified with a value of true, enables partial success for this bulk operation. See [Bulk operations > Partial success](/api/smartsheet/guides/advanced-topics/scalability-options) for more information
    boolean allowPartialSuccess = false;
    # You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    boolean overrideValidation = false;
};

public type UpdateRequestCreateResponse record {
    *Result;
    *UpdateRequestCreateData;
};

public type GroupMember record {
    # Group member's first name
    string firstName?;
    # Group member's last name
    string lastName?;
    # Group member's full name
    string name?;
    # Group member's user Id
    decimal id?;
    # Group member's email address
    string email?;
};

# Represents the Headers record for the operation: getReportPublish
public type GetReportPublishHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type GroupRemoveMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the user that was removed from the group
    @constraint:Int {minValue: 0}
    int memberUserId?;
};

# Contains all of the lookup tables that the format descriptor indexes refer to. Here the examples show the formatting options, the default value is used to denote each option. NOTE -- Indexes and their values are guaranteed never to change or be removed for a given major API version.  However, new values could potentially be added to the ends of lookup tables. Because of this possibility, your code should handle the case where a cell might contain a format index value greater than the size of a lookup table your app has loaded. Your application should check for that case and reload the format tables if necessary
public type FormatTables record {
    # The default setting is "default" which is equivalent to "top"
    string[] verticalAlign?;
    # The default setting is "none". Typically this is black text and a white background
    string[] color?;
    # Format used for dates
    string[] dateFormat?;
    # Indicates if the text is underlined
    string[] underline?;
    # Indicates if the text is bold
    string[] bold?;
    # Indicates if the text is italic
    string[] italic?;
    # Font family used for the text
    FontFamily[] fontFamily?;
    # A format descriptor where each element describes the formats the Smartsheet Web app displays for format values that have not been set. Each value refers to an index of the following options
    string defaults?;
    # Format used for numbers
    string[] numberFormat?;
    # The default setting is "default" which is equivalent to "left"
    string[] horizontalAlign?;
    # Indicates if the text is wrapped
    string[] textWrap?;
    # Currency code
    Currency[] currency?;
    # Font size of the text
    string[] fontSize?;
    # Indicates if the text has a strikethrough
    string[] strikethrough?;
    # Number of decimal places
    string[] decimalCount?;
    # Character used as thousands separator
    string[] thousandsSeparator?;
};

public type DiscussionCreateData record {
    # list of discussions
    Discussion[] data?;
};

public type SheetSendRow record {
    *Event;
    # The action applied to the specified object
    "SEND_ROW" action?;
    SheetSendRowAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type UsersuserIdalternateemailsOneOf2 AddAlternateEmail[];

public type WorkspaceFolderListData record {
    # list of Webhooks
    Webhook[] data?;
};

public type SightListItem SightResult;

public type RowMoveResponse record {
    *GenericResult;
    *RowMoveData;
};

# Object containing a list of references to rows on which the current row depends
public type PredecessorList record {
    # List of references to rows on which the current row depends
    Predecessor[] predecessors?;
    # Indicates the type of the object. For PredecessorList, this will always be 'PREDECESSOR_LIST'
    "PREDECESSOR_LIST" objectType?;
};

# Represents the Queries record for the operation: list-events
public type ListEventsQueries record {
    # The target managed plan for which to list events. Authorized if the
    # caller is a system administrator on either the target managed plan or
    # the main plan in EPM hierarchy
    decimal managedPlanId?;
    # Indicates next set of events to return. Use value of
    # `nextStreamPosition` returned from the previous call.
    #
    # This parameter is required if `since` is not used
    string streamPosition?;
    # If `true`, dates are accepted and returned in Unix epoch time
    # (milliseconds since midnight on January 1, 1970 in UTC time).
    #
    # Default is `false`, which means ISO-8601 format
    boolean numericDates = false;
    # The latest time up to which events are included in the response. Events after this time are excluded.
    #
    # This parameter requires using the `since` parameter. 
    #
    # The date-time value is resolved to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
    #
    # Logic:
    #
    # - If `to` is a future time, the current time is used.
    # - If `to` equals the `since` time, an empty data value is returned.
    # - If `to` is before the `since` time, a validation error is returned.
    #
    # > **IMPORTANT:** This parameter is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained, date-based queries
    string to?;
    # Maximum number of events to return as response to this call.
    # Must be between 1 through 10,000 (inclusive).
    # Defaults to 1,000 if not specified
    @constraint:Int {minValue: 1, maxValue: 10000}
    int:Signed32 maxCount = 1000;
    # The earliest time from which events are included in the response. Events before this time are excluded.
    #
    # This parameter is required if `streamPosition` is not used.
    #
    # The date-time value is resolved to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
    #
    # > **IMPORTANT:** To keep event responses manageable and prevent timeouts, also specify the `to` query parameter.
    #
    # > **IMPORTANT:** This parameter is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained, date-based queries
    string since?;
};

public type CrossSheetReferenceResponse record {
    *Result;
    *CrossSheetReferenceData;
};

public type AttachmentVersionListResponse record {
    *IndexResult;
    *AttachmentVersionListData;
};

# Represents the Headers record for the operation: columns-addToSheet
public type ColumnsAddToSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# An array of Column objects, each defining the properties and configuration of a column in a sheet. See the Column schema for details on individual column attributes
public type Columns Column[];

public type DiscussionDelete record {
    *Event;
    # The action applied to the specified object
    "DELETE" action?;
    DiscussionCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DISCUSSION" objectType?;
};

public type FolderExportAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The format that the folder was exported. Notice that the same value "excel" is displayed either when exporting to Microsoft Excel or when exporting to Google Sheets
    "excel"|"pdf" formatType?;
};

public type IndexResultUnknownPages record {
    # The current page in the full result set that the data array represents. NOTE when a page number greater than totalPages is requested, the last page is instead returned
    decimal pageNumber?;
    # If the data field value is not empty, returns a static value of -1. When you reach the first empty page after the end of the result set, then all four fields are set with a static value of “0”
    decimal totalPages?;
    # The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included). Unless otherwise specified, this defaults to 100 for most endpoints
    decimal? pageSize?;
    # If the data field value is not empty, returns a static value of -1. When you reach the first empty page after the end of the result set, then all four fields are set with a static value of “0”
    decimal totalCount?;
};

public type WorkspaceCreateResponse record {
    *Result;
    *WorkspaceCreateData;
};

public type RowMoveData record {
    AddRowsObject[] result?;
};

public type AttachmentCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the sheet that contains the attachment. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Name of the attachment
    string attachmentName?;
    # Id of the workspace that directly contains the attachment. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Headers record for the operation: list-crosssheet-references
public type ListCrosssheetReferencesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type DashboardAddPublishAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates who can use the link to view the dashboard: `"ALL"` (accessible to any person with the link), `"ORG"` (accessible only by those belonging to the org)
    "ALL"|"ORG" accessibleBy?;
    # Indicates permissions granted to users with a valid link. All dashboard publishes are read only: `"read_only"`
    "read_only" publishType?;
    # Indicates format of the published dashboard. Dashboards are published in a rich media format: `"FULL"`,
    "FULL" publishFormat?;
};

# Represents a hyperlink, which can be a URL or a link to a report, sheet, or dashboard
public type Hyperlink record {
    # If non-null, this hyperlink is a link to the report with this Id
    decimal reportId?;
    # If non-null, this hyperlink is a link to the sheet with this Id
    decimal sheetId?;
    # If non-null, this hyperlink is a link to the dashboard with this Id
    decimal sightId?;
    # When the hyperlink is a URL link, this property contains the URL value. When the hyperlink is a dashboard/report/sheet link (that is, dashboardId, reportId, or sheetId is non-null), this property contains the permalink to the dashboard, report, or sheet
    string url?;
};

# Attachment Object
public type Attachment record {
    # Attachment creation date and time
    Timestamp createdAt?;
    # Attachment sub type. Note--Folder type is for EGNYTE values and the rest are GOOGLE_DRIVE values
    "DOCUMENT"|"DRAWING"|"FOLDER"|"PDF"|"PRESENTATION"|"SPREADSHEET" attachmentSubType?;
    # Attachment type. Note--Dropbox, Egnyte, and Evernote are not supported for Smartsheet.gov accounts
    "BOX_COM"|"DROPBOX"|"EGNYTE"|"EVERNOTE"|"FILE"|"GOOGLE_DRIVE"|"LINK"|"ONEDRIVE"|"TRELLO" attachmentType?;
    # `User` object containing `name` and `email` of the user who created this attachment
    MiniUser createdBy?;
    # Attachment temporary URL time to live (files only)
    decimal urlExpiresInMillis?;
    # Attachment name
    string name?;
    # Attachment Id
    decimal id?;
    # Attachment MIME type
    string mimeType?;
    # The size of the file, if the attachmentType is FILE
    decimal sizeInKb?;
    # The Id of the parent
    decimal parentId?;
    # The type of object the attachment belongs to
    "COMMENT"|"PROOF"|"ROW"|"SHEET" parentType?;
    # Attachment temporary URL (files only)
    string url?;
};

# Field index or position. This number is zero-based
public type Index decimal;

public type DashboardRemovePublish record {
    *Event;
    # The action applied to the specified object
    "REMOVE_PUBLISH" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

public type FolderIdSheetsBody SheetToCreate|SheetToCreateFromTemplate;

public type UpdateRequestCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether the row(s) were sent with their respective attachments
    boolean includeAttachments?;
    # Id of the sheet that owns the rows sent in the update request
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Number of rows sent in the update request
    @constraint:Int {minValue: 1}
    int rowCount?;
    # Indicates whether the row(s) were sent with their respective discussion comments
    boolean includeDiscussions?;
};

# Represents the Queries record for the operation: list-summary-fields
public type ListSummaryFieldsQueries record {
    # A comma-separated list of elements to include in the response.
    # * **format**: includes format info for cells, rows, and summary fields
    # * **writerInfo**: includes createdBy and modifiedBy attributes for rows and summary fields
    "format"|"writerInfo" include?;
    # A comma-separated list of elements to not include in the response.
    # * **displayValue**: excludes displayValue info for cells, rows, and summary fields
    # * **image**: excludes image attributes for cells and summary fields
    # * **imageAltText**: excludes alt text for cells and summary fields
    "displayValue"|"image"|"imageAltText" exclude?;
};

public type DashboardLoad record {
    *Event;
    # The action applied to the specified object
    "LOAD" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Describes the sheet's publish settings. Used as a request body to set publish status
public type SheetPublishRequest record {
    # Indicates which view the user has set for a read-write, default view of the published sheet. Must be one of the listed enum values
    ReadWriteDefaultView readWriteDefaultView?;
    # If **true**, a webcal is available for the calendar in the sheet
    IcalEnabled icalEnabled?;
    # If **true**, a rich version of the sheet is published with the ability to download row attachments and discussions
    ReadOnlyFullEnabled readOnlyFullEnabled?;
    # Indicates who can access the 'Read-Only Full' view of the published sheet:
    # * ALL - available to anyone who has the link.
    # * ORG - available only to members of the sheet owner's Smartsheet organization account.
    # * SHARED - available only to users shared to the item.
    #
    # Only returned in the response if **readOnlyFullEnabled = true**
    ReadOnlyFullAccessibleBy readOnlyFullAccessibleBy?;
    # If **true**, a lightweight version of the sheet is published without row attachments and discussions
    ReadOnlyLiteEnabled readOnlyLiteEnabled?;
    # **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
    ReadOnlyFullShowToolbar readOnlyFullShowToolbar?;
    # If **true**,a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions
    ReadWriteEnabled readWriteEnabled?;
    # Indicates which view the user has set for a read-only, default view of the published sheet. Must be one of the listed enum values
    ReadOnlyFullDefaultView readOnlyFullDefaultView?;
    # Indicates who can access the 'Edit by Anyone' view of the published sheet:
    # * ALL - available to anyone who has the link.
    # * ORG - available only to members of the sheet owner's Smartsheet organization account.
    # * SHARED - available only to users shared to the item.
    #
    # Only returned in the response if **readWriteEnabled = true**
    ReadWriteAccessibleBy readWriteAccessibleBy?;
    # **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
    ReadWriteShowToolbar readWriteShowToolbar?;
};

public type AttachmentSend record {
    *Event;
    # The action applied to the specified object
    "SEND" action?;
    AttachmentSendAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ATTACHMENT" objectType?;
};

# A number that is incremented every time a sheet is modified
public type Version decimal;

# Represents the Queries record for the operation: share-report
public type ShareReportQueries record {
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
};

# Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**
public type ContactOptions ContactOption[];

# Represents individual user settings for a specific sheet. User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet)
public type SheetUserSettings record {
    # Does this user have "Show Critical Path" turned on for this sheet? **NOTE**: This setting only has an effect on project sheets with dependencies enabled
    boolean criticalPathEnabled?;
    # Does this user have "Display Summary Tasks" turned on for this sheet? Applies only to sheets where "Calendar View" has been configured
    boolean displaySummaryTasks?;
};

public type DashboardListData record {
    # List of Dashboards
    SightListItem[] data?;
};

# SummaryField Id
public type PropertiesId decimal;

# Represents the Headers record for the operation: delete-sight-share
public type DeleteSightShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type CreateWebhookRequest record {
    # ID of the object to subscribed to. Specified when a webhook is created and cannot be changed
    @constraint:Int {minValue: 0}
    int scopeObjectId?;
    # Scope of the subscription. Currently, the only supported value is
    # "sheet". Specified when a webhook is created and cannot be changed
    "sheet" scope?;
    # Webhook name
    string name?;
    # HTTPS URL where callbacks are sent
    string callbackUrl?;
    # Limits the webhook to monitor specific columns designated by an array of sheet column IDs. 
    CreateWebhookRequestSubscope subscope?;
    # Webhook version. Currently, the only supported value is 1. This attribute is intended to ensure backward compatibility as new webhook functionality is released. For example, a webhook with a version of 1 is guaranteed to always be sent callback objects that are compatible with the version 1 release of webhooks
    @constraint:Number {minValue: 1, maxValue: 1}
    decimal version?;
    # Array of the events that are subscribed to. Currently, must be an array of size 1 that contains the string value '\*.\*' (asterisk period asterisk), which means "all objects" and "all events"
    string[] events?;
};

# In a project sheet, represents a value in a duration cell, or a lag value of a predecessor
public type Duration record {
    # If true, indicates this duration represents elapsed time, which ignores non-working time
    boolean elapsed?;
    # The number of milliseconds for this duration
    decimal milliseconds?;
    # The number of hours for this duration
    decimal hours?;
    # When used as a predecessor's lag value, indicates whether the lag is negative (if true), or positive (false). The individual duration values themselves (for example, days, hours, or minutes) is always positive
    boolean negative?;
    # The number of seconds for this duration
    decimal seconds?;
    # The number of weeks for this duration
    decimal weeks?;
    # The number of minutes for this duration
    decimal minutes?;
    # The number of days for this duration
    decimal days?;
    # Indicates the type of the object. For Duration, this will always be 'DURATION'
    "DURATION" objectType?;
};

# Represents the Headers record for the operation: get-alternate-email
public type GetAlternateEmailHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: getReports
public type GetReportsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: update-user
public type UpdateUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Queries record for the operation: update-workspace
public type UpdateWorkspaceQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Represents the Queries record for the operation: share-workspace
public type ShareWorkspaceQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
};

# Represents the Headers record for the operation: deactivate-user
public type DeactivateUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type DiscussionSendcommentAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether the discussion comment (or discussion comment reply) was sent with its respective attachments
    boolean includeAttachments?;
    # Id of the sheet row containing the discussion. (this property is included only if the discussion is on a sheet row)
    @constraint:Int {minValue: 0}
    int sheetRowId?;
    # Id of the comment
    @constraint:Int {minValue: 0}
    int commentId?;
    # Id of the sheet the discussion is on. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the `recipientGroupId` property below isn't included)
    string recipientEmail?;
    # Id of the workspace the discussion is directly on. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Queries record for the operation: list-folders
public type ListFoldersQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: list-folders
public type ListFoldersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: discussion-get
public type DiscussionGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type Discussion record {
    # Array of attachments on discussion comments. Only returned if the include query string parameter contains attachments
    Attachment[] commentAttachments?;
    # Array of comments in discussion. Only returned if the include query string parameter contains comments
    Comment[] comments?;
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # `User` object containing `name` and `email` of the user who created the discussion
    MiniUser createdBy?;
    # Indicates whether the user can modify the discussion
    boolean readOnly?;
    # Discussion Id
    decimal id?;
    Timestamp lastCommentedAt?;
    # Title automatically created by duplicating the first 100 characters of top-level comment
    string title?;
    # The Id of the associated row or sheet
    decimal parentId?;
    # Type of parent object
    "ROW"|"SHEET" parentType?;
    # Number of comments in the discussion
    decimal commentCount?;
    # `User` object containing `name` and `email` of the user who last commented on the discussion
    MiniUser lastCommentedUser?;
};

public type RowCopyResponse record {
    *GenericResult;
    *RowCopyData;
};

# If **true**,a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions
public type ReadWriteEnabled boolean;

public type UserProfileResponse record {
    *GenericResult;
    *UserProfileData;
};

public type AccountImportUsers record {
    *Event;
    # The action applied to the specified object
    "IMPORT_USERS" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

public type SheetResponse Sheet;

public type SheetMoveRow record {
    *Event;
    # The action applied to the specified object
    "MOVE_ROW" action?;
    SheetMoveRowAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type FolderCopyResponse record {
    *GenericResult;
    *FolderCopyData;
};

public type AutomationRuleUpdateResponse record {
    *Result;
    *FavoriteData;
};

public type WebhookListData record {
    # Sheet imported from CSV / XLSX file
    SheetImported result?;
};

# Represents the Headers record for the operation: update-report-share
public type UpdateReportShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ProofVersionListResponse record {
    *IndexResult;
    *ProofVersionListData;
};

# Represents the Headers record for the operation: column-get
public type ColumnGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents a user's profile image including its unique ID, width, and height
public type ProfileImage record {
    # Unique image Id
    string imageId?;
    # Image width
    string width?;
    # Image height
    string height?;
};

# Represents the Headers record for the operation: automationrule-delete
public type AutomationruleDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Sheet to create from scratch using the specified columns
public type SheetToCreate record {
    # List of columns to include in the new sheet
    ColumnToCreateASheet[] columns?;
    # Sheet name
    Name name?;
};

# Represents the Headers record for the operation: share-report
public type ShareReportHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type UpdateRequestAllOf2 record {
    # The date and time for when this request was originally created. Read-only
    Timestamp createdAt?;
    # The schedule for which update requests are sent out
    Schedule schedule?;
    # The date and time for when the last change was made to this request. Read-only
    Timestamp modifiedAt?;
    # Id of the update request
    decimal id?;
    # `User` object containing `name` and `email` of the sender
    MiniUser sentBy?;
};

public type WorkspaceListData record {
    # list of Templates
    Template[] data?;
};

# Represents the Headers record for the operation: delete-folder
public type DeleteFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type UpdateProofStatusRequest record {
    boolean isCompleted?;
};

public type Schedule record {
    # The day within the month.
    #
    # Valid range is 1 to 28.
    #
    # This attribute is applicable to the following schedule type:
    # * **MONTHLY**
    #
    # For more details, refer to the Table of Schedule Object’s Attributes below
    @constraint:Number {minValue: 1, maxValue: 31}
    decimal dayOfMonth?;
    # A string array consists of one or more of the following values:
    # * **DAY**, **WEEKDAY**, **WEEKEND**
    # * **SUNDAY**, **MONDAY**, **TUESDAY**, **WEDNESDAY**, **THURSDAY**, **FRIDAY**, **SATURDAY**
    #
    # The subset of values applicable to the schedule type are as followed:
    #
    # | Value         | Daily schedule | Weekly schedule | Monthly schedule |
    # |---------------|----------------|-----------------|------------------|
    # | **DAY**       |                |                 |       **✓**      |
    # | **WEEKDAY**   |      **✓**     |                 |       **✓**      |
    # | **WEEKEND**   |                |                 |       **✓**      |
    # | **SUNDAY**    |                |      **✓**      |       **✓**      |
    # | **MONDAY**    |                |      **✓**      |       **✓**      |
    # | **TUESDAY**   |                |      **✓**      |       **✓**      |
    # | **WEDNESDAY** |                |      **✓**      |       **✓**      |
    # | **THURSDAY**  |                |      **✓**      |       **✓**      |
    # | **FRIDAY**    |                |      **✓**      |       **✓**      |
    # | **SATURDAY**  |                |      **✓**      |       **✓**      |
    #
    # For more details, refer to the Table of Schedule Object’s Attributes below
    ("DAY"|"WEEKDAY"|"WEEKEND"|"SUNDAY"|"MONDAY"|"TUESDAY"|"WEDNESDAY"|"THURSDAY"|"FRIDAY"|"SATURDAY")[] dayDescriptors?;
    # Must be one of the following values:
    # * **FIRST** or **LAST**
    # * **SECOND**, **THIRD**, or **FOURTH**
    #
    # This attribute is applicable to the following schedule type:
    # * **MONTHLY**
    #
    # For more details, refer to the Table of Schedule Object’s Attributes below
    "FIRST"|"LAST"|"SECOND"|"THIRD"|"FOURTH" dayOrdinal?;
    Timestamp lastSentAt?;
    # Frequency on which the request is delivered. The unit is a function of the **type** attribute. For example,
    # for **MONTHLY** schedule, **repeatEvery=1** means every month.
    #
    # Valid range is 1 to 99.
    #
    # This attribute is applicable to the following schedule types: **DAILY**, **WEEKLY**, **MONTHLY**, or **YEARLY**.
    # For more details, refer to the Table of Schedule Object’s Attributes below
    @constraint:Number {minValue: 1, maxValue: 99}
    decimal repeatEvery?;
    # Type of schedule
    "ONCE"|"DAILY"|"WEEKLY"|"MONTHLY"|"YEARLY" 'type?;
    TimestampWriteable endAt?;
    Timestamp nextSendAt?;
    TimestampWriteable startAt?;
};

public type CrossSheetReferenceListResponse record {
    *Result;
    *CrossSheetReferenceListData;
};

# Represents the Queries record for the operation: list-crosssheet-references
public type ListCrosssheetReferencesQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Queries record for the operation: list-users
public type ListUsersQueries record {
    # If the API request is submitted by a system administrator and when specified with a value of 'lastLogin', response includes a lastLogin attribute for each user that indicates the Last login date/time of the user.
    #
    # **Note** If the number of users included in the response is > 100, you must paginate your query to see the lastLogin attribute. For large responses, the lastLogin attribute is never included
    string include?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
    # Comma-separated list of email addresses on which to filter the results
    string email?;
};

public type WorkspaceShareCreateResponse record {
    *Result;
    *WorkspaceShareCreateData;
};

public type CellHistoryData record {
    # Can contain dashboards, folders, reports, sheets, or templates
    FolderSimpleResponse result?;
};

public type UserAddToAccount record {
    *Event;
    # The action applied to the specified object
    "ADD_TO_ACCOUNT" action?;
    UserAddToAccountAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

public type WebhookData record {
    SheetCreated|SheetCreatedFromTemplate result?;
};

public type FavoritesResultData record {
    Favorite|Favorite[] result?;
};

# Represents the Headers record for the operation: list-users
public type ListUsersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type WorkspaceListing record {
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # Workspace name
    string name?;
    # Workspace Id
    decimal id?;
    # URL that represents a direct link to the workspace in Smartsheet
    string permalink?;
};

public type CopyOrMoveRowDestination record {
    # The Id of the destination sheet
    decimal sheetId?;
};

public type AlternateEmail record {
    # AlternateEmail Id
    decimal id?;
    # Indicates whether the alternate email address has been confirmed
    boolean confirmed?;
    # User's alternate email address
    string email?;
};

public type Token record {
    # A credential that can be used by a client to access the Smartsheet API
    @jsondata:Name {value: "access_token"}
    string accessToken?;
    # A credential tied to the access token that can be used to obtain a fresh access token with the same permissions, without further involvement from a user
    @jsondata:Name {value: "refresh_token"}
    string refreshToken?;
    # How an access token will be generated and presented. Smartsheet uses the bearer parameter, which means essentially give access to the bearer of this token
    @jsondata:Name {value: "token_type"}
    string tokenType?;
    # Number of seconds token is valid once issued
    @jsondata:Name {value: "expires_in"}
    decimal expiresIn = 604799;
};

public type WorkspaceRequestBackup record {
    *Event;
    # The action applied to the specified object
    "REQUEST_BACKUP" action?;
    FolderRequestBackupAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Represents an image object, including its unique ID, dimensions, and alternate text
public type Image record {
    # Alternate text for the image
    string altText?;
    # Original width (in pixels) of the uploaded image
    decimal width?;
    # Image Id
    string id?;
    # Original height (in pixels) of the uploaded image
    decimal height?;
};

# Represents the Queries record for the operation: get-favorites
public type GetFavoritesQueries record {
    # A comma-separated list of optional elements to include in the response
    "directId"|"name" include?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: create-sheet-in-folder
public type CreateSheetInFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Create group request
public type GroupCreate1 record {
    # An array of GroupMemberAdd objects, each specifying the email address of a user to be added to a group
    GroupMembersAddArray members?;
    # **name** (required)
    #
    # Must be unique within the organization account
    string name?;
    # **description** (optional)
    string description?;
};

public type ReportTransferOwnershipAdditionalDetails record {
    # New access level of the new owner: `"OWNER"`
    "OWNER" newAccessLevel = "OWNER";
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the new owner
    @constraint:Int {minValue: 0}
    int newUserId?;
    # Id of the former owner
    @constraint:Int {minValue: 0}
    int oldUserId?;
    # New access level of the former owner: `"ADMIN"`
    "ADMIN" oldAccessLevel = "ADMIN";
};

public type RowCreateResponse record {
    *Result;
    *RowCreateData;
};

public type ShareData record {
    Sight result?;
};

public type DashboardUpdate record {
    *Event;
    # The action applied to the specified object
    "UPDATE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# When applicable for PICKLIST column type
public type PropertiesSymbol string;

# Represents the Headers record for the operation: move-folder
public type MoveFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: list-sheet-shares
public type ListSheetSharesQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group)
    "ITEM"|"WORKSPACE" sharingInclude?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type FolderListData record {
    # list of attachments
    AlternateEmail[] data?;
};

public type WorkspaceIdSheetsBody SheetToCreate|SheetToCreateFromTemplate;

public type ReportCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Name of the new report
    string reportName?;
    # Type of object used to create the new report
    "report"|"globale_template" sourceType?;
    # Id of report that was copied to create the new report. (Only included if the report was created as a result of a *copy* or *save as new*)
    @constraint:Int {minValue: 0}
    int sourceObjectId?;
    # Id of the global template that was used to create the new report (Only included if the report was created using a global template. "New Blank Report" is a global template)
    @constraint:Int {minValue: 0}
    int sourceGlobalTemplateId?;
};

public type ReportCreate record {
    *Event;
    # The action applied to the specified object
    "CREATE" action?;
    ReportCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

public type UserTransferOwnedGroups record {
    *Event;
    # The action applied to the specified object
    "TRANSFER_OWNED_GROUPS" action?;
    GroupTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

public type SheetList record {
    # Empty string
    string owner?;
    # Sheet name
    string name?;
    # Sheet Id
    decimal id?;
    # Set to a static value of "0"
    decimal ownerId?;
};

# Represents the Headers record for the operation: list-alternate-emails
public type ListAlternateEmailsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ReportRemoveShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that the user was removed from
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of user that was removed from the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the report is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Headers record for the operation: sheet-send
public type SheetSendHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type ReportTransferOwnership record {
    *Event;
    # The action applied to the specified object
    "TRANSFER_OWNERSHIP" action?;
    ReportTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

public type UserTransferOwnedItems record {
    *Event;
    # The action applied to the specified object
    "TRANSFER_OWNED_ITEMS" action?;
    GroupTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

public type SheetssheetIdrowsOneOf2 Row[];

# Represents the Headers record for the operation: update-workspace
public type UpdateWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type FolderIdCopyBody ContainerDestinationForCopy;

public type WorkspaceShareDeleteResponse Result;

# Represents the Headers record for the operation: remove-user
public type RemoveUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Queries record for the operation: copy-sheet
public type CopySheetQueries record {
    # A comma-separated list of elements to copy:
    # * **attachments**
    # * **cellLinks** - includes cross-sheet references
    # * **data** - includes formatting
    # * **discussions** - includes comments
    # * **filters**
    # * **forms**
    # * **ruleRecipients** -- includes notification recipients, must also include rules when using this attribute
    # * **rules** -- includes notifications and workflow rules
    # * **shares** |
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares" include?;
    # When specified with a value of **sheetHyperlinks**, excludes this category from the response
    "sheetHyperlinks" exclude?;
};

# Represents the Queries record for the operation: list-workspaces
public type ListWorkspacesQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: copy-sheet
public type CopySheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type AddColumns record {
    # Array of the options available for the column
    string[] options?;
    # Display width of the column in pixels
    decimal width?;
    # Column index or position. This number is zero-based
    decimal index?;
    # Column Id
    decimal id?;
    # Column title
    string title?;
    # See [Column Types](/api/smartsheet/openapi/columns)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Indicates whether validation has been enabled for the column (value = **true**)
    boolean validation?;
};

# Represents the Headers record for the operation: add-summary-fields
public type AddSummaryFieldsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Queries record for the operation: list-search-sheet
public type ListSearchSheetQueries record {
    # Text with which to perform the search. Enclose in double-quotes for an exact search
    string query;
};

# Represents the Queries record for the operation: updateSheet
public type UpdateSheetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Represents the Headers record for the operation: get-favorites
public type GetFavoritesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # UserId of the user
    @http:Header {name: "x-smar-sc-actor-id"}
    string xSmarScActorId?;
};

# Can contain dashboards, folders, reports, sheets, or templates
public type Folder record {
    # Reports contained in folder
    GridListing[] reports?;
    # Sheets contained in folder
    GridListing[] sheets?;
    # Folders contained in folder
    Folder[] folders?;
    # Dashboards contained in folder
    DashboardListing[] sights?;
    # Templates contained in folder
    GridListing[] templates?;
    # Folder name
    string name?;
    # Folder Id
    decimal id?;
    # URL that represents a direct link to the folder in Smartsheet
    string permalink?;
    # **Deprecated** Returned only if the user has marked the folder as a favorite in their "Home" tab (value = true)
    #
    # # Deprecated
    @deprecated
    boolean favorite?;
};

# Represents the Headers record for the operation: create-workspace-folder
public type CreateWorkspaceFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: list-summary-fields
public type ListSummaryFieldsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Queries record for the operation: create-sheet-in-folder
public type CreateSheetInFolderQueries record {
    # Additional parameter to create a sheet from template.
    # A comma-separated list of elements to copy from the template
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules" include?;
};

public type SharedSecretData record {
    Folder result?;
};

# Represents the Headers record for the operation: updaterequests-delete
public type UpdaterequestsDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Queries record for the operation: proofs-listRequestActions
public type ProofsListRequestActionsQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type FontFamily record {
    # Platform-independent traits of the font family. Contains one of the listed enum values
    ("sans-serif"|"serif")[] traits?;
    # Name of the font family
    string name?;
};

# Represents the Headers record for the operation: rows-send
public type RowsSendHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: delete-group-members
public type DeleteGroupMembersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: column-updateColumn
public type ColumnUpdateColumnHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ShareUpdateData record {
    # Describes the dashboard's publish settings
    SightPublish result?;
};

# Represents the Queries record for the operation: list-workspace-shares
public type ListWorkspaceSharesQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Limits the webhook to monitor specific columns designated by an array of sheet column IDs. 
public type CreateWebhookRequestSubscope record {
    # Array of IDs of the sheet columns to monitor
    int[] columnIds?;
};

# Represents the Queries record for the operation: row-get
public type RowGetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of elements to include in the response.
    #
    # See [Row Include Flags](/api/smartsheet/openapi/rows).
    #
    # Also supports the **columns** include flag, which adds a columns array that specifies all of the columns for the sheet. This enables you to have the full context of the cells in the row.
    #
    # The **filters** include flag returns a **filteredOut** attribute indicating if the row should be displayed or hidden according to the sheet's filters
    "columns"|"filters" include?;
    # Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    int level = 0;
    # A comma-separated list of element types to exclude from the response:
    # * **filteredOutRows** - excludes filtered-out rows from response payload if a sheet filter is applied; includes total number of filtered rows
    # * **linkInFromCellDetails** - excludes the following attributes from the **cell.linkInFromCell** object: `columnId`, `rowId`, `status`
    # * **linksOutToCellsDetails** - excludes the following attributes from the **cell.linksOutToCells** array elements: `columnId`, `rowId`, `status`
    # * **nonexistentCells** - excludes empty cells
    "filteredOutRows"|"linkInFromCellDetails"|"linksOutToCellsDetails"|"nonexistentCells" exclude?;
};

public type GroupTransferOwnership record {
    *Event;
    # The action applied to the specified object
    "TRANSFER_OWNERSHIP" action?;
    GroupTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

public type AddRowsObject record {
    Timestamp createdAt?;
    # Indicates whether the row is expanded or collapsed
    boolean expanded?;
    # Cells objects
    CellObjectForRows[] cells?;
    Timestamp modifiedAt?;
    # Parent sheet Id
    decimal sheetId?;
    # Row Id
    decimal id?;
    # Row number within the sheet
    @constraint:Number {minValue: 1}
    decimal rowNumber?;
    # Sheet version number that is incremented every time a sheet is modified
    decimal version?;
};

public type SortCriterion record {
    decimal columnId?;
    # Direction of the sort
    "ASCENDING"|"DESCENDING" direction = "ASCENDING";
};

public type UpdateWebhookRequestAllOf2 record {
    # Indicates whether the webhook is on (true) or off (false)
    boolean enabled?;
};

public type UserListResponse record {
    *IndexResult;
    *UserListData;
};

# Represents the Headers record for the operation: attachments-listOnRow
public type AttachmentsListOnRowHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# URL that represents a direct link to the sheet in Smartsheet
public type Permalink string;

# Represents the Headers record for the operation: getReport
public type GetReportHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # The Accept request-header field can be used to specify certain media types which are acceptable for the response
    @http:Header {name: "Accept"}
    string accept?;
};

public type SheetRename record {
    *Event;
    # The action applied to the specified object
    "RENAME" action?;
    SheetRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Headers record for the operation: list-search-sheet
public type ListSearchSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ShareUpdateResponse record {
    *ItemResult;
    *ShareUpdateData;
};

public type DashboardMove record {
    *Event;
    # The action applied to the specified object
    "MOVE" action?;
    DashboardMoveAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

public type Result ItemResult;

# A template can be used to create a sheet
public type Template record {
    # Type of global template. Only applicable to blank public templates
    "BLANK_SHEET"|"PROJECT_SHEET"|"TASK_LIST" globalTemplate?;
    # URL to the small preview image for this template. Only applicable to non-blank public templates
    string image?;
    # URL to the large preview image for this template. Only applicable to non-blank public templates
    string largeImage?;
    # Indicates whether the template is blank. Only applicable to public templates
    boolean blank?;
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # Type of global template
    string name?;
    # Template description
    string description?;
    # Template Id
    decimal id?;
    # Indicates whether the template is blank. Only applicable to public templates
    string[] categories?;
    # Type of template. Only applicable to public templates
    "report"|"sheet" 'type?;
    # Locale of the template. Only applicable to public templates
    "ar_AE"|"ar_BH"|"ar_DZ"|"ar_EG"|"ar_IQ"|"ar_JO"|"ar_KW"|"ar_LB"|"ar_LY"|"ar_MA"|"ar_OM"|"ar_QA"|"ar_SA"|"ar_SD"|"ar_SY"|"ar_TN"|"ar_YE"|"be_BY"|"bg_BG"|"ca_ES"|"cs_CZ"|"da_DK"|"de_AT"|"de_CH"|"de_DE"|"de_LU"|"el_CY"|"el_GR"|"en_AU"|"en_CA"|"en_GB"|"en_IE"|"en_IN"|"en_MT"|"en_NZ"|"en_PH"|"en_SG"|"en_US"|"en_ZA"|"es_AR"|"es_BO"|"es_CL"|"es_CO"|"es_CR"|"es_DO"|"es_EC"|"es_ES"|"es_GT"|"es_HN"|"es_MX"|"es_NI"|"es_PA"|"es_PE"|"es_PR"|"es_PY"|"es_SV"|"es_US"|"es_UY"|"es_VE"|"et_EE"|"fi_FI"|"fr_BE"|"fr_CA"|"fr_CH"|"fr_FR"|"fr_LU"|"ga_IE"|"hi_US"|"hr_HR"|"hu_HU"|"in_ID"|"is_IS"|"it_CH"|"it_IT"|"iw_IL"|"ja_JP"|"ko_KR"|"lt_LT"|"lv_LV"|"mk_MK"|"ms_MY"|"mt_MT"|"nl_BE"|"nl_NL"|"no_NO"|"pl_PL"|"pt_BR"|"pt_PT"|"ro_RO"|"ru_RU"|"sk_SK"|"sl_SI"|"sq_AL"|"sr_BA"|"sr_CS"|"sv_SE"|"th_US"|"tr_TR"|"uk_UA"|"vi_VN"|"zh_CN"|"zh_HK"|"zh_SG"|"zh_TW" locale?;
    # List of search tags for this template. Only applicable to non-blank public templates
    string[] tags?;
};

# Represents the Queries record for the operation: create-folder-folder
public type CreateFolderFolderQueries record {
    # A comma-separated list of elements to copy:
    # * **attachments**
    # * **cellLinks** - includes cross-sheet references
    # * **data** - includes formatting
    # * **discussions** - includes comments
    # * **filters**
    # * **forms**
    # * **ruleRecipients** -- includes notification recipients, must also include rules when using this attribute
    # * **rules** -- includes notifications and workflow rules
    # * **shares** |
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares" include?;
    # A comma-separated list of references to NOT re-map for the newly created folder
    "cellLinks"|"reports"|"sheetHyperlinks"|"sights" skipRemap?;
    # When specified with a value of **sheetHyperlinks**, excludes this category from the response
    "sheetHyperlinks" exclude?;
};

public type FolderContentsData record {
    # Array of all the workspace folders, referenced by their ID, name, and URL
    FolderContentItemData[] data?;
};

public type ReportAddShareMember record {
    *Event;
    # The action applied to the specified object
    "ADD_SHARE_MEMBER" action?;
    ReportAddShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Returned only if the column is the Primary Column (value = **true**)
public type Primary boolean;

public type ReportAddWorkspaceShare record {
    *Event;
    # The action applied to the specified object
    "ADD_WORKSPACE_SHARE" action?;
    ReportAddWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

public type ReportSaveAsNew record {
    *Event;
    # The action applied to the specified object
    "SAVE_AS_NEW" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

public type WorkspacesBody record {
    # Workspace name
    string name?;
};

# Represents the Headers record for the operation: proofs-listRequestActions
public type ProofsListRequestActionsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type Cell record {
    # The format descriptor describing this cell's conditional format. Only returned if the include query string parameter contains **format** and this cell has a conditional format applied
    string conditionalFormat?;
    # Represents a hyperlink, which can be a URL or a link to a report, sheet, or dashboard
    Hyperlink hyperlink?;
    # Represents an image object, including its unique ID, dimensions, and alternate text
    Image image?;
    # The Id of the column that the cell is located in
    decimal columnId?;
    # The format descriptor. Only returned if the include query string parameter contains **format** and this cell has a non-default format applied
    string format?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # (Admin only) Indicates whether the cell value can contain a value outside of the validation limits (value = **true**). When using this parameter, you must also set **strict** to **false** to bypass value type checking. This property is honored for POST or PUT actions that update rows
    boolean overrideValidation?;
    # Visual representation of cell contents, as presented to the user in the UI
    string displayValue?;
    # Only returned if the include query string parameter contains **columnType**
    string columnType?;
    # The formula for a cell, if set, for instance **=COUNTM([Assigned To]3)**. Note that calculation errors or problems with a formula do not cause the API call to return an error code. Instead, the response contains the same value as in the UI, such as **cell.value = "#CIRCULAR REFERENCE"**
    string formula?;
    # Set to **false** to enable lenient parsing. Defaults to **true**. You can specify this attribute in a request, but it is never present in a response
    boolean strict?;
    CellLink linkInFromCell?;
    # A string, number, or a Boolean value -- depending on the cell type and the data in the cell. Cell values larger than 4000 characters are silently truncated. An empty cell returns no value
    string|decimal|boolean value?;
    CellLink[] linksOutToCells?;
};

# User profile image response
public type UserProfileImageResponse record {
    # User's primary email address.
    string email?;
    # User's full name (read-only).
    string name?;
    # User's first name.
    string firstName?;
    # User's last name.
    string lastName?;
    # Represents a user's profile image including its unique ID, width, and height
    ProfileImage profileImage?;
    # User Id.
    decimal id?;
};

# Represents the Queries record for the operation: getReports
public type GetReportsQueries record {
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
};

public type UserImgProfileResponse record {
    *UserProfile;
    *UserProfileImageData;
};

# Represents the Queries record for the operation: remove-user
public type RemoveUserQueries record {
    # **If you're removing the user from your organization**, set this to `true` to remove the user's access to all assets in your organization and plan.
    #
    # **If you're removing the user from your plan**, this parameter is ignored and the user's access to all assets in your organization and plan is removed automatically
    boolean removeFromSharing = false;
    # **If you're removing the user from your organization** and you want to transfer ownership of all the removed user's assets and groups to a qualified user\*, set this parameter to `true` and set the `transferTo` parameter to the ID of the qualified user. The transfer depends on setting the `transferTo` parameter.
    #
    # **If you're removing the user from your plan**, this parameter is ignored.
    #
    # **Warning:** If your asset transfer size exceeds 38k, the transfer fails with a `400` error that prompts you to contact Support for guidance.
    #
    # \*The receiving user must be a <a href="https://help.smartsheet.com/articles/520100-user-types" target="_blank" rel="noopener noreferrer">Group Admin</a> of the group(s) to be transferred
    boolean transferSheets = false;
    # Set this to the ID of a qualified user\* to receive ownership of all groups the removed user owns.
    #
    # **If you're removing the user from your organization** and you set the `transferSheets` parameter to `true`, the operation additionally transfers ownership of all the removed user's assets to the assigned user.
    #
    # **If you're removing the user from your plan** and you don't set this parameter, the operation transfers group ownership to the respective main contact of each group's organization.
    #
    # \*The receiving user must be a <a href="https://help.smartsheet.com/articles/520100-user-types" target="_blank" rel="noopener noreferrer">Group Admin</a> of the groups
    int transferTo?;
};

public type ReportRemoveShareMember record {
    *Event;
    # The action applied to the specified object
    "REMOVE_SHARE_MEMBER" action?;
    ReportRemoveShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Represents the Headers record for the operation: share-workspace
public type ShareWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: delete-workspace-share
public type DeleteWorkspaceShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type GroupData record {
    # List of Groups
    Group[] data?;
};

public type RowListResponse record {
    *GenericResult;
    *RowListData;
};

public type FavoriteResultResponse record {
    *GenericResult;
    *FavoritesResultData;
};

public type FolderCreate record {
    *Event;
    # The action applied to the specified object
    "CREATE" action?;
    FolderCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

# Represents the Queries record for the operation: add-summary-fields
public type AddSummaryFieldsQueries record {
    # Set to true if you want to override the requirement for unique summary field names. Repeated names will be adjusted by appending "(1)" or similar after the field name
    boolean renameIfConflict = false;
};

public type SortSpecifier record {
    # Specifies sort order. Array is in priority order
    SortCriterion[] sortCriteria?;
};

# Represents the Headers record for the operation: tokens-delete
public type TokensDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type RowListData record {
    decimal[] result?;
};

# Container object for additional event-specific properties. Properties depend upon the event type, but all events include an `emailAddress` property, representing the user responsible for the event. 
#
# See [Event types](/api/smartsheet/event-types) for event details, including event-specific `additionalDetails` properties and example event response objects
public type EventAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
};

# Represents the Queries record for the operation: tokens-delete
public type TokensDeleteQueries record {
    # The client Id and user Id is fetched based on the token that is used to make this API call. A value of true deletes all tokens associated to the given client Id and user Id
    boolean deleteAllForApiClient = false;
};

public type UserRemoveShares record {
    *Event;
    # The action applied to the specified object
    "REMOVE_SHARES" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Object containing a Contact
public type ContactObjectValue record {
    # ID of an image associated with the Contact
    string imageId?;
    # Name of the Contact
    string name?;
    # Email address of the Contact
    string email?;
    # The type of this object, always set to 'CONTACT
    "CONTACT" objectType?;
};

public type ImageUrlMapResponse ImageUrlMap;

public type FolderCopyData record {
    # list of alternate email results
    AlternateEmail[] data?;
};

# Object containing zero or more media items, including images, videos, and documents, for review, editing, or approval
public type Proof record {
    # `User` object containing `name` and `email` of the user who last updated the proof
    MiniUser lastUpdatedBy?;
    # Array of Attachment objects. Only returned if the include query string parameter contains attachments
    Attachment[] attachments?;
    # The date and time when the proof was last updated
    Timestamp lastUpdatedAt?;
    # File type for the proof version
    "DOCUMENT"|"IMAGE"|"MIXED"|"NONE"|"VIDEO" proofType?;
    # Proof name. This is the same as primary column value. If the primary column value is empty, name is empty
    string name?;
    # Array of Discussion objects. Only returned if the include query string parameter contains discussions
    Discussion[] discussions?;
    # Proof Id of the proof version
    decimal id?;
    # Proof Id of the original proof version
    decimal originalId?;
    # URL to review a proofing request
    string proofRequestUrl?;
    # The version number of the proof
    decimal version?;
    # Indicates whether the proof is completed
    boolean isCompleted?;
};

# Indicates who can access the 'Read-Only Full' view of the published sheet:
# * ALL - available to anyone who has the link.
# * ORG - available only to members of the sheet owner's Smartsheet organization account.
# * SHARED - available only to users shared to the item.
#
# Only returned in the response if **readOnlyFullEnabled = true**
public type ReadOnlyFullAccessibleBy "ALL"|"ORG"|"SHARED";

public type CellLink record {
    # Sheet name of the linked cell
    string sheetName?;
    # Column Id of the linked cell
    decimal columnId?;
    # Sheet Id of the sheet that the linked cell belongs to
    decimal sheetId?;
    # Row Id of the linked cell
    decimal rowId?;
    # * `BLOCKED` One of several other values indicating unusual error conditions.
    # * `BROKEN` The row or sheet linked to was deleted.
    # * `CIRCULAR` One of several other values indicating unusual error conditions.
    # * `DISABLED` One of several other values indicating unusual error conditions.
    # * `INACCESSIBLE` The sheet linked to cannot be viewed by this user.
    # * `INVALID` One of several other values indicating unusual error conditions.
    # * `NOT_SHARED` One of several other values indicating unusual error conditions.
    # * `OK` The link is in a good state
    "BLOCKED"|"BROKEN"|"CIRCULAR"|"DISABLED"|"INACCESSIBLE"|"INVALID"|"NOT_SHARED"|"OK" status?;
};

# Represents the Headers record for the operation: proofs-createVersion
public type ProofsCreateVersionHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type SheetCopyRowAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Number of rows copied
    @constraint:Int {minValue: 1}
    int rowsCopied?;
    # Indicates whether the row(s) were copied with their respective attachments
    boolean includeAttachments?;
    # Id of sheet from where the rows copied. (Only included when the `objectId` property contains the Id of the destination sheet)
    @constraint:Int {minValue: 0}
    int sourceSheetId?;
    # Id of sheet to where the rows copied. (Only included when the `objectId` property contains the Id of the source sheet)
    @constraint:Int {minValue: 0}
    int destinationSheetId?;
    # Indicates whether the row(s) were copied with their respective discussion comments
    boolean includeDiscussions?;
};

public type Sight SightListItem;

public type SearchResultData record {
    Folder[] result?;
};

public type UserProfile record {
    # Indicates whether the user is a JIRA admin
    boolean jiraAdmin?;
    # Last login time of the current user
    string lastLogin?;
    # Current user's last name
    string lastName?;
    # User's role
    string role?;
    # Indicates whether the user is a system admin (can manage user accounts and organization account)
    boolean admin?;
    # Represents a user's profile image including its unique ID, width, and height
    ProfileImage profileImage?;
    # Current user's locale (see [ServerInfo](/api/smartsheet/openapi/serverinfo/serverinfo))
    string locale?;
    # User's title
    string title?;
    # Indicates whether the user is a registered Salesforce user
    boolean salesforceUser?;
    # Indicates whether the user is a group admin (can create and edit groups)
    boolean groupAdmin?;
    # Indicates whether the user is a resource viewer (can access resource views)
    boolean resourceViewer?;
    # User's company
    string company?;
    # Current user's Id
    decimal id?;
    # User's department
    string department?;
    # Current user's primary email address
    string email?;
    # Timestamp of viewing an <a href="https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only" target="_blank" rel="noopener noreferrer">Enterprise Custom Welcome Screen</a> by the current user
    string customWelcomeScreenViewed?;
    # Current user's time zone Id
    string timeZone?;
    # Current user's first name
    string firstName?;
    # User's mobile phone number
    string mobilePhone?;
    AlternateEmail alternateEmails?;
    # User's work phone number
    string workPhone?;
    # **SUNSET** - The `sheetCount` attribute now holds the value `-1` and is included only if the retrieved user's `status` is `ACTIVE`
    #
    # # Deprecated
    @constraint:Number {minValue: -1, maxValue: -1}
    @deprecated
    decimal sheetCount = -1;
    Account account?;
    # Indicates whether the user is a licensed user (can create and own sheets)
    boolean licensedSheetCreator?;
    # Indicates whether the user is a Salesforce admin
    boolean salesforceAdmin?;
};

public type UserData record {
    Share[] result?;
};

# When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)
public type Symbol string;

public type WorkspaceFolderCreateData record {
    Webhook result?;
};

# Represents the Headers record for the operation: get-sheetVersion
public type GetSheetVersionHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: add-group
public type AddGroupHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type FavoriteResponse Sheet|SheetVersion;

public type FolderCreateResponse record {
    *GenericResult;
    *FolderCreateData;
};

public type WebhookStats record {
    # The number of retries the webhook had performed as of the last callback attempt
    decimal lastCallbackAttemptRetryCount?;
    # When this webhook last made a successful callback
    string lastSuccessfulCallback?;
    # When this webhook last made a callback attempt
    string lastCallbackAttempt?;
};

public type DashboardRemoveShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that the user was removed from
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of user that was removed from the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the dashboard is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

public type FolderRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the folder
    string newName?;
    # Old name of the folder
    string oldName?;
};

# Represents the Headers record for the operation: create-folder-folder
public type CreateFolderFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type ReportAddShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the user. 
    #
    # Note that this access level represents the access level that has been granted to the user via group membership; it is not the user's effective access level for the report
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group the user was added to
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the report is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

public type FormCreate record {
    *Event;
    # The action applied to the specified object
    "CREATE" action?;
    FormCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
};

public type UserRemoveFromAccount record {
    *Event;
    # The action applied to the specified object
    "REMOVE_FROM_ACCOUNT" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

public type Comment record {
    Timestamp createdAt?;
    # Array of attachments on comments
    Attachment[] attachments?;
    # User object containing name and email of the creator of this comment
    MiniUser createdBy?;
    # Discussion Id of discussion that contains comment
    decimal discussionId?;
    Timestamp modifiedAt?;
    # Comment Id
    decimal id?;
    # Comment body
    string text?;
};

public type GetColumn record {
    # When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)
    string symbol?;
    # Column index or position. This number is zero-based
    decimal index?;
    # Column Id
    decimal id?;
    # Column title
    string title?;
    # See [Column Types](/api/smartsheet/openapi/columns)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Indicates whether validation has been enabled for the column (value = **true**)
    boolean validation?;
};

public type ReportAddShare record {
    *Event;
    # The action applied to the specified object
    "ADD_SHARE" action?;
    ReportAddShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Represents the Headers record for the operation: proofs-createDiscussion
public type ProofsCreateDiscussionHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type DashboardRemoveShareMember record {
    *Event;
    # The action applied to the specified object
    "REMOVE_SHARE_MEMBER" action?;
    DashboardRemoveShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# The error caused by the failed item
public type Error record {
    # Custom error code from Smartsheet. See the complete [Error Code List](/api/smartsheet/error-codes)
    decimal errorCode?;
    # The Id of the specific error occurrence. Please include this information when contacting Smartsheet support
    string refId?;
    # Descriptive error message
    string message?;
};

# Represents the Headers record for the operation: list-workspace-shares
public type ListWorkspaceSharesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: copy-sight
public type CopySightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type WorkspaceTransferOwnership record {
    *Event;
    # The action applied to the specified object
    "TRANSFER_OWNERSHIP" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Represents the Queries record for the operation: attachments-listOnRow
public type AttachmentsListOnRowQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type ReportRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the report
    string newName?;
    # Previous name of the report
    string oldName?;
};

public type ContactOption record {
    # Can be a user's name, display name, or free text
    string name?;
    # A parsable email address
    string email?;
};

public type AccountDownloadLoginHistory record {
    *Event;
    # The action applied to the specified object
    "DOWNLOAD_LOGIN_HISTORY" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Can contain dashboards, folders, reports, sheets, and templates
public type Workspace record {
    # Reports contained in the workspace
    GridListing[] reports?;
    # Sheets contained in the workspace
    GridListing[] sheets?;
    # Folders contained in the workspace
    Folder[] folders?;
    # Dashboards contained in the workspace
    DashboardListing[] sights?;
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # Workspace name
    string name?;
    # Workspace Id
    decimal id?;
    # URL that represents a direct link to the workspace in Smartsheet
    string permalink?;
};

# Represents the Queries record for the operation: update-workspace-share
public type UpdateWorkspaceShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

public type DiscussionAttachmentListResponse record {
    *GenericResult;
    Discussion result?;
};

public type SheetAddWorkspaceShare record {
    *Event;
    # The action applied to the specified object
    "ADD_WORKSPACE_SHARE" action?;
    SheetAddWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type ContainerDestinationForCopy record {
    # Name of the newly created object (when copying a dashboard, folder, sheet, or workspace)
    string newName?;
    # Type of destination container.
    #
    # The `"home"` enum is **Deprecated** since March 25, 2025, and will be removed
    "folder"|"home"|"workspace"? destinationType?;
    # The ID of the destination container
    decimal destinationId;
};

# Represents the Queries record for the operation: discussions-list
public type DiscussionsListQueries record {
    # A comma-separated list of optional elements to include in the response:
    # * **attachments** - effective only if comments is present, otherwise ignored
    # * **comments** - include all comments in threads
    "attachments"|"comments" include?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type WorkspaceExport record {
    *Event;
    # The action applied to the specified object
    "EXPORT" action?;
    WorkspaceExportAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Represents the Headers record for the operation: update-folder
public type UpdateFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type AddAlternateEmail record {
    # User's alternate email address
    string email?;
};

public type AccountDownloadPublishedItemsReport record {
    *Event;
    # The action applied to the specified object
    "DOWNLOAD_PUBLISHED_ITEMS_REPORT" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

public type GroupCreateResponse record {
    *GenericResult;
    *GroupCreateData;
};

# Represents the Queries record for the operation: get-workspace
public type GetWorkspaceQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of optional elements to include in the response:
    # * **source** - adds the Source object indicating which object the folder was created from, if any
    # * **distributionLink**
    # * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned.
    # * **sheetVersion**
    # * **permalinks**
    "source"|"distributionLink"|"ownerInfo"|"sheetVersion" include?;
    # If set to `true`, the workspace's entire hierarchy of items and folders is returned
    boolean loadAll = false;
};

# Stream result properties
public type StreamResult record {
    # True if more results are available. This is typically due to event counts
    # exceeding the maxCount parameter passed in
    boolean moreAvailable?;
    # This string should be passed back to the next GET events call to obtain
    # subsequent events
    string nextStreamPosition?;
};

# Represents the Headers record for the operation: get-workspace
public type GetWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type SuccessResult record {
    # * '0' Success
    0 resultCode?;
    # Message that indicates the request was successful
    "SUCCESS" message?;
};

# Represents the Queries record for the operation: proofs-get
public type ProofsGetQueries record {
    # A comma-separated list of optional elements to include in the response
    "attachments"|"discussions" include?;
};

public type SheetRequestBackup record {
    *Event;
    # The action applied to the specified object
    "REQUEST_BACKUP" action?;
    FolderRequestBackupAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# MiniUser Object
public type MiniUser record {
    # User's full name
    string name?;
    # User's email address
    string email?;
};

# Object representing a checkbox
public type CheckboxObjectValue record {
    # true if checked; false otherwise
    boolean value?;
    # Type of this object, always set to 'CHECKBOX'
    "CHECKBOX" objectType?;
};

public type DiscussionListData record {
    CrossSheetReference result?;
};

public type DashboardCreate record {
    *Event;
    "CREATE" action?;
    DashboardCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

public type CellHistoryResponse record {
    *GenericResult;
    *CellHistoryData;
};

# Represents the Headers record for the operation: add-crosssheet-reference
public type AddCrosssheetReferenceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type SheetIdRowsBody Row|SheetssheetIdrowsOneOf2;

# Represents the Headers record for the operation: update-sight-share
public type UpdateSightShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type Predecessor record {
    # In a project sheet, represents a value in a duration cell, or a lag value of a predecessor
    Duration lag?;
    # True if this predecessor is in the critical path
    boolean inCriticalPath?;
    # True if the row referenced by rowId is not a valid row in this sheet, or there is a circular reference (displayed in the Smartsheet app as "#REF") Omitted if false
    boolean invalid?;
    # Type of the predecessor:
    # * FF (Finish-to-Finish) - finish at the same time the predecessor finishes.
    # * FS (Finish-to-Start) - start after the predecessor finishes.
    # * SF (Start-to-Finish) - finish before the predecessor starts.
    # * SS (Start-to-Start) - start at the same time the predecessor starts
    "FF"|"FS"|"SF"|"SS" 'type?;
    # The row number of the predecessor row. Omitted if invalid is true
    decimal rowNumber?;
    # The Id of the predecessor row
    decimal rowId?;
};

# Represents the Headers record for the operation: get-group
public type GetGroupHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type AttachmentCreate record {
    *Event;
    # The action applied to the specified object
    "CREATE" action?;
    AttachmentCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ATTACHMENT" objectType?;
};

# Represents the Headers record for the operation: createWebhook
public type CreateWebhookHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: delete-workspace
public type DeleteWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: list-report-shares
public type ListReportSharesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type AccountListSheets record {
    *Event;
    # The action applied to the specified object
    "LIST_SHEETS" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Represents the Headers record for the operation: row-discussions-create
public type RowDiscussionsCreateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type ReportSendAsAttachmentAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # The format in which the report was sent
    "excel"|"pdf"|"pdf_gantt"|"pdf_calendar" formatType?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the `recipientGroupId` property below isn't included)
    string recipientEmail?;
};

# Represents the Headers record for the operation: delete-favorites-by-type-and-id
public type DeleteFavoritesByTypeAndIdHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # UserId of the user
    @http:Header {name: "x-smar-sc-actor-id"}
    string xSmarScActorId?;
};

# Represents the Queries record for the operation: import-sheet-into-folder
public type ImportSheetIntoFolderQueries record {
    # Desired name of the sheet
    string sheetName;
    # A zero-based integer indicating the row number to use for column names. Rows before this are omitted.
    # If not specified, the default values are Column1, Column2, etc
    decimal headerRowIndex?;
    # A zero-based integer indicating the column to designate as primary
    decimal primaryColumnIndex = 0;
};

public type ProofResponse Proof;

# Represents the Queries record for the operation: update-rows
public type UpdateRowsQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # When specified with a value of true, enables partial success for this bulk operation. See [Bulk operations > Partial success](/api/smartsheet/guides/advanced-topics/scalability-options) for more information
    boolean allowPartialSuccess = false;
    # You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    boolean overrideValidation = false;
};

public type SearchResult record {
    # Array of SearchResultItem objects.
    SearchResultItem[] results?;
    # Total number of search results.
    decimal totalCount?;
};

# Represents the Headers record for the operation: list-search
public type ListSearchHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type InlineBodyItemsApplicationjsonimageurls ImageUrl;

# Represents the Queries record for the operation: delete-favorites-by-type
public type DeleteFavoritesByTypeQueries record {
    # A comma-separated list of Ids of the favorited item
    string objectIds;
};

public type SheetPurge record {
    *Event;
    # The action applied to the specified object
    "PURGE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type SheetCopyRow record {
    *Event;
    # The action applied to the specified object
    "COPY_ROW" action?;
    SheetCopyRowAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type GroupIdMembersBody GroupMember|GroupsgroupIdmembersOneOf2;

# The base object for Event Reporting events. 
#
# > **Note:** Event Reporting is a premium add-on available for Enterprise and Advanced Work Management plans. For details on the Event Reporting add-on, please contact our <a href="https://www.smartsheet.com/contact/sales" target="_blank" rel="noopener noreferrer">Sales Team</a>.
#
# All [event types](/api/smartsheet/event-types) include the Event properties and override the following properties:
#
# - `objectType` (string)
# - `action` (string)
# - `additionalDetails` (object)
#
# See [Event types](/api/smartsheet/event-types) for event descriptions and example event response objects
public type Event record {
    # Unique event identifier
    string eventId?;
    # Name of the access token embedded in the request. This property is omitted
    # if there's no access token in the request (i.e., it isn't an API call) or
    # if the access token wasn't given a name when created (only access tokens
    # generated via the Smartsheet desktop UI can be given a name at creation
    # time)
    string accessTokenName?;
    # The action applied to the specified object, such as CREATE, UPDATE, or DELETE.
    #
    # See [Event types](/api/smartsheet/event-types) for actions associated with each event object type
    string action?;
    # User whose authentication credential is embedded in the request that
    # initiated the event. For example, if the request is an API call with an
    # access token then requestUserId identifies the user whose data can be
    # accessed via the access token (i.e., the user who authorized the creation
    # of the access token). On the other hand, if the request comes from a UI
    # session, then requestUserId identifies the user logged-in to the UI
    decimal requestUserId?;
    # Identifies the client or user agent used to initiate the action
    "WEB_APP"|"MOBILE_IOS"|"MOBILE_ANDROID"|"API_UNDEFINED_APP"|"API_INTEGRATED_APP"|"API_ODBC_DRIVER" 'source?;
    # Container object for additional event-specific properties. Properties depend upon the event type, but all events include an `emailAddress` property, representing the user responsible for the event. 
    #
    # See [Event types](/api/smartsheet/event-types) for event details, including event-specific `additionalDetails` properties and example event response objects
    EventAdditionalDetails additionalDetails?;
    # User assumed as the one who initiated the event. Usually the userId
    # property and the requestUserId property (below) have the same value.
    # However, if the request is an API call with Assume-User header then the
    # userId property identifies the user whose email matches the value in the
    # Assume-User header
    decimal userId?;
    # The identifier of the object impacted by the event
    string objectId?;
    # The type of Smartsheet resource object impacted by the event.
    #
    # See [Event types](/api/smartsheet/event-types) for all the event object types
    string objectType?;
    # Date and time of the event. Defaults to ISO-8601 format. See dates and
    # times for more information
    string eventTimestamp?;
};

public type FormActivateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the form's sheet
    @constraint:Int {minValue: 0}
    int sheetId?;
};

# Object containing a list of strings to choose from
public type MultiPicklistObjectValue record {
    # List of strings to choose from
    string[] values?;
    # Type of this object, always set to 'MULTI_PICKLIST'
    "MULTI_PICKLIST" objectType?;
};

# CrossSheetReference object to create with specified cell range
public type CrossSheetReferenceRequestWithColumnAndRowIds record {
    # Defines beginning edge of range when specifying one or more rows. Must be used with endRowId. To specify an entire row, omit the startColumnId and endColumnId parameters
    decimal startRowId?;
    # Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References
    string name?;
    # Defines beginning edge of range when specifying one or more columns. Must be used with endColumnId. To specify an entire column, omit the startRowId and endRowId parameters
    decimal startColumnId?;
    # Sheet Id of source sheet
    decimal sourceSheetId?;
    # Defines ending edge of range when specifying one or more columns. Must be used with startColumnId. To specify an entire column, omit the startRowId and endRowId parameters
    decimal endColumnId?;
    # Defines ending edge of range when specifying one or more rows. Must be used with startRowId. To specify an entire row, omit the startColumnId and endColumnId parameters
    decimal endRowId?;
};

public type DashboardAddShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the user. 
    #
    # Note that this access level represents the access level that has been granted to the user via group membership; it is not the user's effective access level for the dashboard
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group the user was added to
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the dashboard is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

public type AttachmentListData record {
    Sheet result?;
};

public type ProofAttachmentListResponse record {
    *IndexResult;
    *ProofAttachmentListData;
};

# Represents the Queries record for the operation: list-org-sheets
public type ListOrgSheetsQueries record {
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
};

# Represents the Queries record for the operation: get-contact
public type GetContactQueries record {
    # A comma-separated list of optional elements to include in the response:
    # * **profileImage**
    "profileImage" include?;
};

public type FolderRequestBackupAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether attachments should be included in the recurring backup
    boolean includeAttachments?;
    # Indicates whether an email should be sent to the workspace's owner every time a recurring backup completes
    boolean sendCompletionEmail?;
};

public type ReportRestore record {
    *Event;
    # The action applied to the specified object
    "RESTORE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Represents the Headers record for the operation: updateSheet
public type UpdateSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type SentUpdateRequest record {
    # Recipient object
    Recipient sentTo?;
    # Indicates whether the attachments were included in the email
    boolean includeAttachments?;
    # The Ids of rows where an update is requested
    decimal[] rowIds?;
    # The Ids of columns included in the request
    decimal[] columnIds?;
    # The Id of the originating update request
    decimal updateRequestId?;
    # The subject of the email
    string subject?;
    # The Id of the sent update request
    decimal id?;
    # The date and time for when the sent update request was sent to the recipient
    Timestamp sentAt?;
    # The message of the email. Max 10000 characters
    string message?;
    # Indicates whether the discussions were included in the email
    boolean includeDiscussions?;
    # `User` object containing `name` and `email` of the sender
    MiniUser sentBy?;
    # The status of the sent update request
    "CANCELED"|"COMPLETE"|"PENDING" status?;
};

# Represents the Queries record for the operation: update-sight-share
public type UpdateSightShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

public type DashboardAddShare record {
    *Event;
    # The action applied to the specified object
    "ADD_SHARE" action?;
    DashboardAddShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

public type SheetExportAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The format that the sheet was exported in "png_gantt" (gantt image), "mspdi" (Microsoft Project), "excel", or "pdf"
    "png_gantt"|"mspdi"|"excel"|"pdf" formatType?;
};

public type ReportRename record {
    *Event;
    # The action applied to the specified object
    "RENAME" action?;
    ReportRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Represents the Headers record for the operation: list-summary-fields-paginated
public type ListSummaryFieldsPaginatedHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Sheet name
public type Name string;

# Represents the Headers record for the operation: sendReportViaEmail
public type SendReportViaEmailHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: share-sight
public type ShareSightQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
};

public type RowCreateData record {
    Row result?;
};

public type GetRowObject record {
    Timestamp createdAt?;
    # Indicates whether the row is expanded or collapsed
    boolean expanded?;
    # Cells objects
    CellObjectForRows[] cells?;
    Timestamp modifiedAt?;
    # Parent sheet Id
    decimal sheetId?;
    # Row Id
    decimal id?;
    # Row number within the sheet
    @constraint:Number {minValue: 1}
    decimal rowNumber?;
};

# Represents the Queries record for the operation: share-sight-get
public type ShareSightGetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Represents the Headers record for the operation: cellHistory-get
public type CellHistoryGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: import-sheet-into-folder
public type ImportSheetIntoFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    @http:Header {name: "Content-Disposition"}
    string contentDisposition?;
    # Required for POST request to import a sheet from CSV/XLSX file.
    # * For CSV files, use: Content-Type: text/csv
    # * For XLSX files, use: Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
    @http:Header {name: "Content-Type"}
    "text/csv"|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" contentType;
};

public type ReportMove record {
    *Event;
    # The action applied to the specified object
    "MOVE" action?;
    ReportMoveAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

public type SummaryFieldDeleteResponse record {
    *Result;
    *SummaryFieldDeleteData;
};

public type ImageUrl record {
    # Image Id
    string imageId?;
    # Image width in pixels
    decimal width?;
    # The error caused by the failed item
    Error 'error?;
    # Temporary URL that can be used to retrieve the image. This attribute can be present in a response but is never specified in a request
    string url?;
    # Image height in pixels
    decimal height?;
};

# Represents the Headers record for the operation: move-sheet
public type MoveSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type DashboardListResponse record {
    *IndexResult;
    *DashboardListData;
};

# Represents the Headers record for the operation: get-workspace-folders
public type GetWorkspaceFoldersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type FavoritesOneOf2 Favorite[];

# Represents the Headers record for the operation: proofs-get
public type ProofsGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: update-summary-fields
public type UpdateSummaryFieldsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type SightResult SightName;

public type FormCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Name of the form
    string formName?;
    # Id of the form's sheet
    @constraint:Int {minValue: 0}
    int sheetId?;
};

# Represents the Headers record for the operation: discussions-create
public type DiscussionsCreateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type DashboardPurge record {
    *Event;
    # The action applied to the specified object
    "PURGE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Array of the options available for the column
public type Options string[];

# Represents the Headers record for the operation: list-groups
public type ListGroupsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type UserAcceptInvite record {
    *Event;
    # The action applied to the specified object
    "ACCEPT_INVITE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Represents the Headers record for the operation: list-filtered-events
public type ListFilteredEventsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Strongly recommended to make sure payload is compressed. Must be set to one of the following values:
    # * deflate
    # * gzip
    @http:Header {name: "Accept-Encoding"}
    "deflate"|"gzip" acceptEncoding?;
};

public type ComponentsSchemasSheet record {
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # Sheet name
    Name name?;
    # Sheet Id
    Id id?;
    # URL that represents a direct link to the sheet in Smartsheet
    Permalink permalink?;
};

# Represents the Queries record for the operation: list-summary-fields-paginated
public type ListSummaryFieldsPaginatedQueries record {
    # A comma-separated list of elements to include in the response.
    # * **format**: includes format info for cells, rows, and summary fields
    # * **writerInfo**: includes createdBy and modifiedBy attributes for rows and summary fields
    "format"|"writerInfo" include?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # A comma-separated list of elements to not include in the response.
    # * **displayValue**: excludes displayValue info for cells, rows, and summary fields
    # * **image**: excludes image attributes for cells and summary fields
    # * **imageAltText**: excludes alt text for cells and summary fields
    "displayValue"|"image"|"imageAltText" exclude?;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type ReportPublishData record {
    ReportPublish result?;
};

public type AccountDownloadUserList record {
    *Event;
    # The action applied to the specified object
    "DOWNLOAD_USER_LIST" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Represents the Headers record for the operation: comment-get
public type CommentGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type WorkspaceAddShare record {
    *Event;
    # The action applied to the specified object
    "ADD_SHARE" action?;
    WorkspaceAddShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Represents the Headers record for the operation: update-workspace-share
public type UpdateWorkspaceShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: updateWebhook
public type UpdateWebhookHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type AccountRename record {
    *Event;
    # The action applied to the specified object
    "RENAME" action?;
    AccountRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# CrossSheetReference object to create which will refer to the entire rows in the range from startRowId to endRowId
public type CrossSheetReferenceRequestWithRowIds record {
    # Defines beginning edge of range when specifying one or more rows. Must be used with endRowId
    decimal startRowId?;
    # Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References
    string name?;
    # Sheet Id of source sheet
    decimal sourceSheetId?;
    # Defines ending edge of range when specifying one or more rows. Must be used with startRowId
    decimal endRowId?;
};

public type UpdateRequestListResponse record {
    *IndexResult;
    *UpdateRequestListData;
};

# Column title
public type Title string;

public type HomeContentsResponse record {
    *IndexResultUnknownPages;
    *HomeContentsData;
};

# Represents the Headers record for the operation: proofs-update
public type ProofsUpdateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type FolderRename record {
    *Event;
    # The action applied to the specified object
    "RENAME" action?;
    FolderRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

# Represents the Queries record for the operation: list-search
public type ListSearchQueries record {
    # When specified with a value of **favoriteFlag**, response indicates which returned items are favorites.  favorite -- dashboards, folders, reports, sheets, templates, and workspaces will have the property favorite: true parentObjectFavorite -- attachments, discussions, summary fields, and rows will have the property parentObjectFavorite: true
    string include = "";
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # Text with which to perform the search. Enclose in double-quotes for an exact search
    string query;
    # **Deprecated** When specified with a value of **personalWorkspace**, limits the response to only those items in the user's workspaces
    #
    # # Deprecated
    @deprecated
    string location = "";
    # If search fails, try using an array for each type of this comma-separated list of search filters
    ("attachments"|"cellData"|"comments"|"folderNames"|"reportNames"|"sheetNames"|"sightNames"|"summaryFields"|"templateNames"|"workspaceNames")[] scopes?;
};

public type DiscussionCreateResponse record {
    *IndexResult;
    *DiscussionCreateData;
};

public type ProofListData record {
    Comment result?;
};

public type SheetSendAsAttachmentAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # The format in which the sheet was sent
    "excel"|"pdf"|"pdf_gantt"|"pdf_calendar" formatType?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the `recipientGroupId` property below isn't included)
    string recipientEmail?;
};

public type TokenData record {
    Share|Share[] result?;
};

# Represents the Headers record for the operation: row-get
public type RowGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ReportExportAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The format that the report was exported in "png_gantt" (gantt image), "mspdi" (Microsoft Project), "excel", or "pdf"
    "png_gantt"|"mspdi"|"excel"|"pdf" formatType?;
};

public type Account record {
    # Account name
    string name?;
    # Account Id
    decimal id?;
};

public type TemplateListResponse record {
    *IndexResult;
    *TemplateListData;
};

# Represents the Queries record for the operation: import-sheet-into-sheets-folder
public type ImportSheetIntoSheetsFolderQueries record {
    # Desired name of the sheet
    string sheetName;
    # A zero-based integer indicating the row number to use for column names. Rows before this are omitted.
    # If not specified, the default values are Column1, Column2, etc
    decimal headerRowIndex?;
    # A zero-based integer indicating the column to designate as primary
    decimal primaryColumnIndex = 0;
};

public type WorkspaceCreate record {
    *Event;
    # The action applied to the specified object
    "CREATE" action?;
    WorkspaceCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Represents the Headers record for the operation: delete-sheet-share
public type DeleteSheetShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: create-home-folder
public type CreateHomeFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type GroupAddMember record {
    *Event;
    # The action applied to the specified object
    "ADD_MEMBER" action?;
    GroupAddMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

# Represents the Queries record for the operation: proofs-getVersions
public type ProofsGetVersionsQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# If **true**, a lightweight version of the sheet is published without row attachments and discussions
public type ReadOnlyLiteEnabled boolean;

public type WorkspaceAddShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the user. 
    #
    # Note that this access level represents the access level that has been granted to the user via group membership; it is not the user's effective access level for the workspace
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group the user was added to
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the group
    @constraint:Int {minValue: 0}
    int userId?;
};

# Represents the Headers record for the operation: listImageUrls
public type ListImageUrlsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type CrossSheetReferenceCreateData record {
    CrossSheetReference[] data?;
};

# Represents the Queries record for the operation: update-report-share
public type UpdateReportShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

public type FolderListResponse record {
    *IndexResult;
    *FolderListData;
};

# Represents the Headers record for the operation: attachments-get
public type AttachmentsGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: row-attachments-attachFile
public type RowAttachmentsAttachFileHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: list-contacts
public type ListContactsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type AccesstokenAuthorizeAdditionalDetails record {
    # Date and time when this access token expires
    string tokenExpirationTimestamp?;
    # Email address of the user responsible for the event
    string emailAddress;
    # The name of the app to which this access token was granted. (Only included in cases when the access token was generated for an app)
    string appName?;
    # Comma-delimited list of access scopes granted to this access token. See these [access scopes](/api/smartsheet/guides/advanced-topics/oauth#access-scopes) for details
    string accessScopes?;
    # Name of the newly created access token. (Only included in cases when a name was given to the token)
    string tokenName?;
    # Four or more characters used as a mnemonic to represent this access token. Even though this value serves as a visual token differentiator, this value isn't an Id because it isn't guaranteed to be unique across all tokens. This value is the same displayed by Smartsheet UI for each access token listed under Apps & Integrations > API Access
    string tokenDisplayValue?;
    # The client ID of the app to which this access token was granted. (Only included in cases when the access token was generated for an app)
    string appClientId?;
};

public type WorkspaceCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of workspace that was copied to create the new workspace. (Only included if the workspace was created as a result of a *save as new* or *copy*)
    @constraint:Int {minValue: 0}
    int sourceWorkspaceId?;
    # Name of the workspace
    string workspaceName?;
};

# SummaryField object to create
public type SummaryFieldCreateRequest record {
    # Represents a hyperlink, which can be a URL or a link to a report, sheet, or dashboard
    Hyperlink hyperlink?;
    # Represents an image object, including its unique ID, dimensions, and alternate text
    Image image?;
    # When applicable for PICKLIST column type
    PropertiesSymbol symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST
    PropertiesContactOptions contactOptions?;
    # The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it
    Format format?;
    # Field index or position. This number is zero-based
    Index index?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # Arbitrary name, must be unique within summary
    PropertiesTitle title?;
    # Specifies the type of a column property. Valid values include various column data types such as CHECKBOX, CONTACT_LIST, DATE, PICKLIST, and others
    PropertiesType 'type?;
    # When applicable for PICKLIST column type. Array of the options available for the field
    PropertiesOptions options?;
    # The formula for a cell, if set
    Formula formula?;
    # Indicates whether the field is locked
    Locked locked?;
    # Indicates whether summary field values are restricted to the type
    Validation validation?;
};

public type WorkspaceAddShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    #
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the workspace
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that was added to the workspace's sharing list. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the workspace's sharing list. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

public type CommentCreationRequest record {
    # Comment body
    string text?;
};

# Represents the Queries record for the operation: cellHistory-get
public type CellHistoryGetQueries record {
    # A comma-separated list of elements to copy:
    # * **columnType** - includes the columnType attribute for each Cell object
    # * **objectValue** - when used in combination with a level query parameter, includes the email addresses for a multi-contact cell
    "columnType"|"objectValue" include?;
    # Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    int level = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type SheetVersion record {
    # A number that represents the current sheet version
    decimal version?;
};

# Represents the Queries record for the operation: create-sheet-in-sheets-folder
public type CreateSheetInSheetsFolderQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Additional parameter to create a sheet from template.
    # A comma-separated list of elements to copy from the template
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules" include?;
};

public type CellObjectForRows record {
    # Visual representation of cell contents, as presented to the user in the UI
    string displayValue?;
    # Only returned if the include query string parameter contains **columnType**
    string columnType?;
    # The Id of the column that the cell is located in
    decimal columnId?;
    # A string, number, or a Boolean value -- depending on the cell type and the data in the cell. Cell values larger than 4000 characters are silently truncated. An empty cell returns no value
    string|decimal|boolean value?;
};

# Represents the Headers record for the operation: updaterequests-update
public type UpdaterequestsUpdateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: create-sheet-in-sheets-folder
public type CreateSheetInSheetsFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type DashboardMoveAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the parent container of the dashboard. (Specific to move events where a folder containing the dashboard is moved to a folder in a different workspace, indicates that the dashboard has moved to a new workspace but is still within the same folder)
    @constraint:Int {minValue: 0}
    int parentContainerId?;
    # Id of the destination folder for the move event. (Specific to actions where the dashboard was moved to a different folder)
    @constraint:Int {minValue: 0}
    int newParentContainerId?;
    # Name of the destination folder for the move event. (Specific to actions where the dashboard was moved to a different folder)
    string folderName?;
    # Id of the workspace the dashboard is currently in. If the move was between two workspaces the `workspaceId` will be the Id of the destination workspace
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Headers record for the operation: list-workspaces
public type ListWorkspacesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Queries record for the operation: get-workspace-folders
public type GetWorkspaceFoldersQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Queries record for the operation: templates-listPublic
public type TemplatesListPublicQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Level of public template types. 0 refers to only Sheet types, 1 refers to all types
    0|1 level = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type AttachmentLoad record {
    *Event;
    # The action applied to the specified object
    "LOAD" action?;
    AttachmentLoadAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ATTACHMENT" objectType?;
};

public type UserRemoveFromGroups record {
    *Event;
    # The action applied to the specified object
    "REMOVE_FROM_GROUPS" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

public type CrossSheetReferenceCreateResponse record {
    *IndexResult;
    *CrossSheetReferenceCreateData;
};

# Represents the Headers record for the operation: templates-listPublic
public type TemplatesListPublicHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type AttachmentVersionListData record {
    # list of attachments
    Attachment[] data?;
};

public type AlternateEmailListData record {
    SchemasSheet[] data?;
};

public type AccountBulkUpdateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
};

# Specifies the recipient of an [Email]($ref: 'Email.yaml#/components/schemas/Email'). The recipient may be either an individual or a group. To specify an individual, set the **email** attribute; to specify a group, set the **groupId** attribute. Either **email** and **groupId** may be set, but not both
public type RecipientGroup record {
    # The Id of a group recipient
    decimal groupId?;
};

# Represents the Headers record for the operation: promote-alternate-email
public type PromoteAlternateEmailHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: list-org-sheets
public type ListOrgSheetsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ReportDelete record {
    *Event;
    # The action applied to the specified object
    "DELETE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

public type ContactListResponse record {
    *IndexResult;
    *ContactListData;
};

# Represents the Headers record for the operation: import-sheet-into-sheets-folder
public type ImportSheetIntoSheetsFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    @http:Header {name: "Content-Disposition"}
    string contentDisposition?;
    # Required for POST request to import a sheet from CSV/XLSX file.
    # * For CSV files, use: Content-Type: text/csv
    # * For XLSX files, use: Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
    @http:Header {name: "Content-Type"}
    "text/csv"|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" contentType;
};

public type UserIdAlternateemailsBody AddAlternateEmail|UsersuserIdalternateemailsOneOf2;

# Specifies the type of a column property. Valid values include various column data types such as CHECKBOX, CONTACT_LIST, DATE, PICKLIST, and others
public type PropertiesType "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER";

public type SchemasSheet record {
    Timestamp createdAt?;
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    Timestamp modifiedAt?;
    # Sheet name
    Name name?;
    # Sheet Id
    Id id?;
    Source 'source?;
    # URL that represents a direct link to the sheet in Smartsheet
    Permalink permalink?;
    # A number that is incremented every time a sheet is modified
    Version version?;
};

# Represents the Headers record for the operation: list-sights
public type ListSightsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type EventFilterData record {
    # List of sheet Ids specified in the request that the user does not have access to
    string[] unavailableSheetIds?;
    # List of Events
    Event[] data?;
    # List of workspace Ids specified in the request that the user does not have access to
    string[] unavailableWorkspaceIds?;
};

public type WorkspaceRemoveShare record {
    *Event;
    # The action applied to the specified object
    "REMOVE_SHARE" action?;
    WorkspaceRemoveShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Represents the Headers record for the operation: proofs-attachToProof
public type ProofsAttachToProofHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the entire summary, or a list of defined fields and values, for a specific sheet
public type SheetSummary record {
    # Array of summary (or metadata) fields defined on the sheet
    SummaryField[] fields?;
};

# Represents the Headers record for the operation: home-list-folders
public type HomeListFoldersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type SheetSaveAsNew record {
    *Event;
    # The action applied to the specified object
    "SAVE_AS_NEW" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type AccountUpdateMainContactAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the former main contact
    @constraint:Int {minValue: 0}
    int oldContactUserId?;
    # Id of the new main contact
    @constraint:Int {minValue: 0}
    int newContactUserId?;
};

# Represents the Queries record for the operation: templates-list
public type TemplatesListQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

public type SharedSecretResponse record {
    *GenericResult;
    *SharedSecretData;
};

# Comment
public type CommentRequest record {
    # Comment text
    string text?;
};

# Represents the Queries record for the operation: add-image-summaryField
public type AddImageSummaryFieldQueries record {
    # Url-encoded alternate text for the image
    string altText?;
    # You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    boolean overrideValidation = false;
};

public type GroupRemoveMember record {
    *Event;
    # The action applied to the specified object
    "REMOVE_MEMBER" action?;
    GroupRemoveMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

public type SightName record {
    # Dashboard name
    string name?;
};

public type GroupRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the group
    string newName?;
    # Old name of the group
    string oldName?;
};

# Represents the Headers record for the operation: update-user-profile-image
public type UpdateUserProfileImageHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type DiscussionListResponse record {
    *Result;
    *DiscussionListData;
};

# Represents the Headers record for the operation: comment-delete
public type CommentDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type WorkspaceAddShareMember record {
    *Event;
    # The action applied to the specified object
    "ADD_SHARE_MEMBER" action?;
    WorkspaceAddShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

public type WorkspaceCreateRecurringBackup record {
    *Event;
    # The action applied to the specified object
    "CREATE_RECURRING_BACKUP" action?;
    WorkspaceCreateRecurringBackupAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

public type SheetMoveAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the parent container of the sheet. (Specific to move events where a folder containing the sheet is moved to a folder in a different workspace, indicates that the sheet has moved to a new workspace but is still within the same folder)
    @constraint:Int {minValue: 0}
    int parentContainerId?;
    # Id of the destination folder for the move event. (Specific to actions where the sheet was moved to a different folder)
    @constraint:Int {minValue: 0}
    int newParentContainerId?;
    # Name of the destination folder for the move event. (Specific to actions where the sheet was moved to a different folder)
    string folderName?;
    # Id of the workspace the sheet is currently in. If the move was between two workspaces the `workspaceId` will be the Id of the destination workspace
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

public type SheetMoveRowAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether the row(s) were moved with their respective attachments
    boolean includeAttachments?;
    # Id of sheet from where the rows moved. (Only included when the `objectId` property contains the Id of the destination sheet)
    @constraint:Int {minValue: 0}
    int sourceSheetId?;
    # Number of rows moved
    @constraint:Int {minValue: 1}
    int rowsMoved?;
    # Id of sheet to where the rows moved. (Only included when the `objectId` property contains the Id of the source sheet)
    @constraint:Int {minValue: 0}
    int destinationSheetId?;
    # Indicates whether the row(s) were moved with their respective discussion comments
    boolean includeDiscussions?;
};

public type DiscussionSend record {
    *Event;
    # The action applied to the specified object
    "SEND" action?;
    DiscussionSendAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DISCUSSION" objectType?;
};

public type IndexResult record {
    # The current page in the full result set that the data array represents. NOTE when a page number greater than totalPages is requested, the last page is instead returned
    decimal pageNumber?;
    # The total number of pages in the full result set
    decimal totalPages?;
    # The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included). Unless otherwise specified, this defaults to 100 for most endpoints
    decimal? pageSize?;
    # The total number of items in the full result set
    decimal totalCount?;
};

public type SheetAddShareMember record {
    *Event;
    # The action applied to the specified object
    "ADD_SHARE_MEMBER" action?;
    SheetAddShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

public type AccountUpdateMainContact record {
    *Event;
    # The action applied to the specified object
    "UPDATE_MAIN_CONTACT" action?;
    AccountUpdateMainContactAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Represents the Headers record for the operation: deleteSheet
public type DeleteSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type SheetIdCrosssheetreferencesBody CrossSheetReferenceRequestWithColumnIds|CrossSheetReferenceRequestWithRowIds|CrossSheetReferenceRequestWithColumnAndRowIds;

public type ProofDiscussionListData record {
    # list of proof discussions
    Discussion[] data?;
};

# Represents the Headers record for the operation: get-user
public type GetUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type SheetCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Name of the newly created Sheets
    string sheetName?;
    "sheet"|"template"|"globale_template"|"import" sourceType?;
    # Id of the template used to create the sheet. (Only included if the sheet was created using a template, that is not a global template)
    @constraint:Int {minValue: 0}
    int sourceTemplateId?;
    # Id of sheet that was copied to create the new sheet. (Only included if the sheet was created as a result of a *copy* or *save as new*)
    @constraint:Int {minValue: 0}
    int sourceObjectId?;
    # Id of the global template that was used to create the new sheet (Only included if the sheet was created using a global template)
    @constraint:Int {minValue: 0}
    int sourceGlobalTemplateId?;
};

public type WorkspaceRename record {
    *Event;
    # The action applied to the specified object
    "RENAME" action?;
    WorkspaceRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

public type ShareResponse record {
    *ItemResult;
    *ShareData;
};

public type ColumnCreateResponse record {
    *GenericResult;
    *ColumnCreateData;
};

public type DashboardRestore record {
    *Event;
    # The action applied to the specified object
    "RESTORE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

public type UpdateColumn record {
    # Array of the options available for the column
    string[] options?;
    # Column index or position. This number is zero-based
    decimal index?;
    # Column Id
    decimal id?;
    # Column title
    string title?;
    # See [Column Types](/api/smartsheet/openapi/columns)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Indicates whether validation has been enabled for the column (value = **true**)
    boolean validation?;
};

# Represents the Queries record for the operation: update-summary-fields
public type UpdateSummaryFieldsQueries record {
    # Set to true if you want to override the requirement for unique summary field names. Repeated names will be adjusted by appending "(1)" or similar after the field name
    boolean renameIfConflict = false;
};

public type WebhooksBody record {
    *CreateWebhookRequest;
    *WebhooksAllOf2;
};

public type FolderExport record {
    *Event;
    # The action applied to the specified object
    "EXPORT" action?;
    FolderExportAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

public type FormUpdate record {
    *Event;
    # The action applied to the specified object
    "UPDATE" action?;
    FormActivateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
};

public type Favorite record {
    "folder"|"report"|"sheet"|"sight"|"template"|"workspace" 'type?;
    # The Id of the favorited item. If type is template, only private sheet-type template Id is allowed
    decimal objectId?;
};

# SummaryField object to update
public type SummaryFieldUpdateRequest record {
    # Represents a hyperlink, which can be a URL or a link to a report, sheet, or dashboard
    Hyperlink hyperlink?;
    # Represents an image object, including its unique ID, dimensions, and alternate text
    Image image?;
    # When applicable for PICKLIST column type
    PropertiesSymbol symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST
    PropertiesContactOptions contactOptions?;
    # The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it
    Format format?;
    # Field index or position. This number is zero-based
    Index index?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # Arbitrary name, must be unique within summary
    PropertiesTitle title?;
    # Specifies the type of a column property. Valid values include various column data types such as CHECKBOX, CONTACT_LIST, DATE, PICKLIST, and others
    PropertiesType 'type?;
    # When applicable for PICKLIST column type. Array of the options available for the field
    PropertiesOptions options?;
    # The formula for a cell, if set
    Formula formula?;
    # SummaryField Id
    PropertiesId id?;
    # Indicates whether the field is locked
    Locked locked?;
    # Indicates whether summary field values are restricted to the type
    Validation validation?;
};

# Represents the Headers record for the operation: share-sight-get
public type ShareSightGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# User Object
public type User record {
    # Last login time of the current user
    string lastLogin?;
    # User's last name
    string lastName?;
    # Timestamp of viewing an <a href="https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only" target="_blank" rel="noopener noreferrer">Enterprise Custom Welcome Screen</a> by the current user
    string customWelcomeScreenViewed?;
    # Indicates whether the user is a system admin (can manage user accounts and organization account)
    boolean admin = false;
    # Represents a user's profile image including its unique ID, width, and height
    ProfileImage profileImage?;
    # User's first name
    string firstName?;
    # Indicates whether the user is a group admin (can create and edit groups)
    boolean groupAdmin = false;
    # User's full name (read-only)
    string name?;
    # Indicates whether the user is a resource viewer (can access resource views)
    boolean resourceViewer = false;
    # User Id
    decimal id?;
    # **SUNSET** - The `sheetCount` attribute now holds the value `-1` and is included only if the retrieved user's `status` is `ACTIVE`
    #
    # # Deprecated
    @constraint:Number {minValue: -1, maxValue: -1}
    @deprecated
    decimal sheetCount = -1;
    # User's primary email address
    string email?;
    # Indicates whether the user is a licensed user (can create and own sheets)
    boolean licensedSheetCreator = false;
    # User status, set to one of the listed enum values
    "ACTIVE"|"DECLINED"|"PENDING"|"DEACTIVATED" status?;
};

# Object representing a datetime
public type DatetimeObjectValue record {
    # Datetime, in the **date-time** format defined by <a href="https://tools.ietf.org/html/rfc3339#section-5.6" target="_blank" rel="noopener noreferrer">RFC 3339, section 5.6</a>
    string value?;
    # Type of this object, always set to 'DATETIME'
    "DATETIME" objectType?;
};

# Represents the Queries record for the operation: rows-sort
public type RowsSortQueries record {
    # (Optional) Any of the relevant parameters or query parameters listed for [Get Sheet](/api/smartsheet/openapi/sheets/getsheet)
    @http:Query {name: "include&exclude"}
    string includeExclude?;
};

public type FormDeactivate record {
    *Event;
    # The action applied to the specified object
    "DEACTIVATE" action?;
    FormActivateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
};

# Arbitrary name, must be unique within summary
public type PropertiesTitle string;

public type ProofAttachmentListData record {
    # list of proof attachments
    Attachment[] data?;
};

# Represents the Headers record for the operation: add-image-summaryField
public type AddImageSummaryFieldHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    @http:Header {name: "Content-Disposition"}
    string contentDisposition?;
    # Must be set to the size of the file, in bytes. For example to determine file size using in UNIX:
    # $ ls -l ProgressReport.docx
    # 5463 ProgressReport.docx
    @http:Header {name: "Content-Length"}
    int contentLength?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type Source record {
    # The Id of the dashboard, report, sheet, or template from which the enclosing dashboard, report, sheet, or template was created
    decimal id?;
    # **report**, **sheet**, **sight** (aka dashboard), or **template**
    string 'type?;
};

# Represents the Headers record for the operation: proofs-getVersions
public type ProofsGetVersionsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ReportUpdate record {
    *Event;
    # The action applied to the specified object
    "UPDATE" action?;
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

public type AutomationRuleListData record {
    # list of Automation Rules
    AutomationRule[] data?;
};

public type ReportSendAsAttachment record {
    *Event;
    # The action applied to the specified object
    "SEND_AS_ATTACHMENT" action?;
    ReportSendAsAttachmentAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

public type Column record {
    # When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)
    string symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**
    ContactOption[] contactOptions?;
    # Indicates whether the column is hidden
    boolean hidden?;
    # The format descriptor (see [Cell formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the **include** query string parameter contains **format** and this column has a non-default format applied to it
    string format?;
    # Column description
    string description?;
    # Column index or position. This number is zero-based
    decimal index?;
    # Column title
    string title?;
    # See [Column Types](/api/smartsheet/openapi/columns)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # * `0`: CONTACT_LIST, PICKLIST, or TEXT_NUMBER.
    # * `1`: MULTI_CONTACT_LIST.
    # * `2`: MULTI_PICKLIST
    0|1|2 version?;
    # Set of tags to indicate special columns. Each element in the array is set to one of the listed enum values
    ("CALENDAR_END_DATE"|"CALENDAR_START_DATE"|"CARD_DONE"|"GANTT_ALLOCATION"|"GANTT_ASSIGNED_RESOURCE"|"GANTT_DISPLAY_LABEL"|"GANTT_DURATION"|"GANTT_END_DATE"|"GANTT_PERCENT_COMPLETE"|"GANTT_PREDECESSOR"|"GANTT_START_DATE"|"BASELINE_START_DATE"|"BASELINE_END_DATE"|"BASELINE_VARIANCE")[] tags?;
    # Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated
    AutoNumberFormat autoNumberFormat?;
    # Array of the options available for the column
    string[] options?;
    # Display width of the column in pixels
    decimal width?;
    # The formula for the column, if set
    string formula?;
    # Indicates whether the column is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request
    boolean lockedForUser?;
    # See [System Columns](/api/smartsheet/openapi/columns)
    "AUTO_NUMBER"|"CREATED_BY"|"CREATED_DATE"|"MODIFIED_BY"|"MODIFIED_DATE" systemColumnType?;
    # Column Id
    decimal id?;
    # Indicates whether the column is locked. In a response, a value of **true** indicates that the column has been locked by the sheet owner or the admin
    boolean locked?;
    # Indicates whether validation has been enabled for the column (value = **true**)
    boolean validation?;
    # Returned only if the column is the Primary Column (value = **true**)
    boolean primary?;
};

# Represents the Headers record for the operation: discussions-list
public type DiscussionsListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Updates group properties, including name, description, and owner
public type GroupUpdate1 record {
    # name (Optional)
    #
    # Must be unique within the organization account
    string name?;
    # Description (optional)
    string description?;
    # ownerId (optional)
    #
    # Id of an admin user to whom the group ownership is transferred
    decimal ownerId?;
};

# Describes the current user's editing permissions for a specific sheet
public type SheetUserPermissions record {
    # One of:
    # * ADMIN: full control over fields.
    # * READ_DELETE: sheet is owned by an individual account that doesn't have summary capabilities. If a summary exists, the only possible operations are GET and DELETE fields.
    # * READ_ONLY.
    # * READ_WRITE: can edit values of existing fields, but not create or delete fields, nor modify field type
    "ADMIN"|"READ_DELETE"|"READ_ONLY"|"READ_WRITE" summaryPermissions?;
};

# Represents the Headers record for the operation: share-sight
public type ShareSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: update-rows
public type UpdateRowsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type WorkspaceFolderListResponse record {
    *IndexResult;
    *WorkspaceFolderListData;
};

public type ProofDiscussionListResponse record {
    *IndexResult;
    *ProofDiscussionListData;
};

# Represents the Queries record for the operation: home-list-folders
public type HomeListFoldersQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: updaterequests-get
public type UpdaterequestsGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type ColumnUpdateResponse record {
    *GenericResult;
    *ColumnUpdateData;
};

# Represents the Headers record for the operation: comment-edit
public type CommentEditHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

public type Contact record {
    # Contact's full name
    string name?;
    # Contact Id
    string id?;
    # Contact's email address
    string email?;
};

# Represents the Headers record for the operation: delete-favorites-by-type
public type DeleteFavoritesByTypeHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # UserId of the user
    @http:Header {name: "x-smar-sc-actor-id"}
    string xSmarScActorId?;
};

public type GroupsgroupIdmembersOneOf2 GroupMember[];

public type FolderContentsResponse record {
    *IndexResult;
    *FolderContentsData;
};

public type ContactListData record {
    # List of Contacts
    Contact[] data?;
};

# Represents the Headers record for the operation: templates-list
public type TemplatesListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents the Headers record for the operation: automationrule-get
public type AutomationruleGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type PublicTemplateListResponse record {
    *IndexResult;
    *PublicTemplateListData;
};

public type SheetRemoveShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that the user was removed from
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of user that was removed from the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the sheet is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

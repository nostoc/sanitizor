// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/http;

# Represents the Headers record for the operation: updateSheet
public type UpdateSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type WorkspaceListing record {
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # Workspace name
    string name?;
    # Workspace Id
    decimal id?;
    # URL that represents a direct link to the workspace in Smartsheet
    string permalink?;
};

public type MultiContactObjectValue record {
    # List of Contacts
    ContactObjectValue[] value?;
    # Object containing a list of Contacts
    "MULTI_CONTACT" objectType?;
};

# Attachment Object
public type Attachment record {
    # Attachment creation date and time
    Timestamp createdAt?;
    # Attachment sub type. Note--Folder type is for EGNYTE values and the rest are GOOGLE_DRIVE values
    "DOCUMENT"|"DRAWING"|"FOLDER"|"PDF"|"PRESENTATION"|"SPREADSHEET" attachmentSubType?;
    # Attachment type. Note--Dropbox, Egnyte, and Evernote are not supported for Smartsheet.gov accounts
    "BOX_COM"|"DROPBOX"|"EGNYTE"|"EVERNOTE"|"FILE"|"GOOGLE_DRIVE"|"LINK"|"ONEDRIVE"|"TRELLO" attachmentType?;
    # `User` object containing `name` and `email` of the user who created this attachment
    MiniUser createdBy?;
    # Attachment temporary URL time to live (files only)
    decimal urlExpiresInMillis?;
    # Attachment name
    string name?;
    # Attachment Id
    decimal id?;
    # Attachment MIME type
    string mimeType?;
    # The size of the file, if the attachmentType is FILE
    decimal sizeInKb?;
    # The Id of the parent
    decimal parentId?;
    # The type of object the attachment belongs to
    "COMMENT"|"PROOF"|"ROW"|"SHEET" parentType?;
    # Attachment temporary URL (files only)
    string url?;
};

# Represents an image object, including its unique ID, dimensions, and alternate text
public type Image record {
    # Alternate text for the image
    string altText?;
    # Original width (in pixels) of the uploaded image
    decimal width?;
    # Image Id
    string id?;
    # Original height (in pixels) of the uploaded image
    decimal height?;
};

# Represents the project settings dependencies for a specific sheet. Project settings may be updated on sheets that the user has editor access
public type ProjectSettings record {
    # Non-working days for a project sheet
    string[] nonWorkingDays?;
    # Working days for a project sheet
    ("MONDAY"|"TUESDAY"|"WEDNESDAY"|"THURSDAY"|"FRIDAY"|"SATURDAY"|"SUNDAY")[] workingDays?;
    # Length of a workday for a project sheet
    @constraint:Number {minValue: 1, maxValue: 24}
    decimal lengthOfDay?;
};

public type GenericResult record {
    # * '0' Success
    # * '3' Partial Success of Bulk Operation
    0|3 resultCode?;
    # Message that indicates the outcome of the request. (One of SUCCESS or PARTIAL_SUCCESS.)
    "PARTIAL_SUCCESS"|"SUCCESS" message?;
};

# The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
public type ObjectValue AbstractDatetimeObjectValue|CheckboxObjectValue|ContactObjectValue|DateObjectValue|DatetimeObjectValue|DurationObjectValue|MultiContactObjectValue|MultiPicklistObjectValue|PredecessorList;

public type ErrorDefault record {|
    *http:DefaultStatusCodeResponse;
    Error body;
|};

public type Cell record {
    # The format descriptor describing this cell's conditional format. Only returned if the include query string parameter contains **format** and this cell has a conditional format applied
    string conditionalFormat?;
    # Represents a hyperlink, which can be a URL or a link to a report, sheet, or dashboard
    Hyperlink hyperlink?;
    # Represents an image object, including its unique ID, dimensions, and alternate text
    Image image?;
    # The Id of the column that the cell is located in
    decimal columnId?;
    # The format descriptor. Only returned if the include query string parameter contains **format** and this cell has a non-default format applied
    string format?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # (Admin only) Indicates whether the cell value can contain a value outside of the validation limits (value = **true**). When using this parameter, you must also set **strict** to **false** to bypass value type checking. This property is honored for POST or PUT actions that update rows
    boolean overrideValidation?;
    # Visual representation of cell contents, as presented to the user in the UI
    string displayValue?;
    # Only returned if the include query string parameter contains **columnType**
    string columnType?;
    # The formula for a cell, if set, for instance **=COUNTM([Assigned To]3)**. Note that calculation errors or problems with a formula do not cause the API call to return an error code. Instead, the response contains the same value as in the UI, such as **cell.value = "#CIRCULAR REFERENCE"**
    string formula?;
    # Set to **false** to enable lenient parsing. Defaults to **true**. You can specify this attribute in a request, but it is never present in a response
    boolean strict?;
    CellLink linkInFromCell?;
    # A string, number, or a Boolean value -- depending on the cell type and the data in the cell. Cell values larger than 4000 characters are silently truncated. An empty cell returns no value
    string|decimal|boolean value?;
    CellLink[] linksOutToCells?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# Represents individual user settings for a specific sheet. User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet)
public type SheetUserSettings record {
    # Does this user have "Show Critical Path" turned on for this sheet? **NOTE**: This setting only has an effect on project sheets with dependencies enabled
    boolean criticalPathEnabled?;
    # Does this user have "Display Summary Tasks" turned on for this sheet? Applies only to sheets where "Calendar View" has been configured
    boolean displaySummaryTasks?;
};

# Represents the Headers record for the operation: getSheet
public type GetSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # The Accept request-header field can be used to specify certain media types which are acceptable for the response
    @http:Header {name: "Accept"}
    string accept?;
};

# Represents the Headers record for the operation: deleteSheet
public type DeleteSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

public type SheetVersion record {
    # A number that represents the current sheet version
    decimal version?;
};

public type SuccessResult record {
    # * '0' Success
    0 resultCode?;
    # Message that indicates the request was successful
    "SUCCESS" message?;
};

public type AbstractDatetimeObjectValue record {
    # Datetime, in the **date-time** format defined by <a href="https://tools.ietf.org/html/rfc3339#section-5.6" target="_blank" rel="noopener noreferrer">RFC 3339, section 5.6</a>
    string value?;
    # Object representing a calculated datetime
    "ABSTRACT_DATETIME" objectType?;
};

# In a project sheet, represents a value in a duration cell, or a lag value of a predecessor
public type Duration record {
    # If true, indicates this duration represents elapsed time, which ignores non-working time
    boolean elapsed?;
    # The number of milliseconds for this duration
    decimal milliseconds?;
    # The number of hours for this duration
    decimal hours?;
    # When used as a predecessor's lag value, indicates whether the lag is negative (if true), or positive (false). The individual duration values themselves (for example, days, hours, or minutes) is always positive
    boolean negative?;
    # The number of seconds for this duration
    decimal seconds?;
    # The number of weeks for this duration
    decimal weeks?;
    # The number of minutes for this duration
    decimal minutes?;
    # The number of days for this duration
    decimal days?;
    # Indicates the type of the object. For Duration, this will always be 'DURATION'
    "DURATION" objectType?;
};

# Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
public type AccessLevel "ADMIN"|"COMMENTER"|"EDITOR"|"EDITOR_SHARE"|"OWNER"|"VIEWER";

# MiniUser Object
public type MiniUser record {
    # User's full name
    string name?;
    # User's email address
    string email?;
};

# Object representing a checkbox
public type CheckboxObjectValue record {
    # true if checked; false otherwise
    boolean value?;
    # Type of this object, always set to 'CHECKBOX'
    "CHECKBOX" objectType?;
};

# Object containing a Contact
public type ContactObjectValue record {
    # ID of an image associated with the Contact
    string imageId?;
    # Name of the Contact
    string name?;
    # Email address of the Contact
    string email?;
    # The type of this object, always set to 'CONTACT
    "CONTACT" objectType?;
};

# Object containing zero or more media items, including images, videos, and documents, for review, editing, or approval
public type Proof record {
    # `User` object containing `name` and `email` of the user who last updated the proof
    MiniUser lastUpdatedBy?;
    # Array of Attachment objects. Only returned if the include query string parameter contains attachments
    Attachment[] attachments?;
    # The date and time when the proof was last updated
    Timestamp lastUpdatedAt?;
    # File type for the proof version
    "DOCUMENT"|"IMAGE"|"MIXED"|"NONE"|"VIDEO" proofType?;
    # Proof name. This is the same as primary column value. If the primary column value is empty, name is empty
    string name?;
    # Array of Discussion objects. Only returned if the include query string parameter contains discussions
    Discussion[] discussions?;
    # Proof Id of the proof version
    decimal id?;
    # Proof Id of the original proof version
    decimal originalId?;
    # URL to review a proofing request
    string proofRequestUrl?;
    # The version number of the proof
    decimal version?;
    # Indicates whether the proof is completed
    boolean isCompleted?;
};

public type CellLink record {
    # Sheet name of the linked cell
    string sheetName?;
    # Column Id of the linked cell
    decimal columnId?;
    # Sheet Id of the sheet that the linked cell belongs to
    decimal sheetId?;
    # Row Id of the linked cell
    decimal rowId?;
    # * `BLOCKED` One of several other values indicating unusual error conditions.
    # * `BROKEN` The row or sheet linked to was deleted.
    # * `CIRCULAR` One of several other values indicating unusual error conditions.
    # * `DISABLED` One of several other values indicating unusual error conditions.
    # * `INACCESSIBLE` The sheet linked to cannot be viewed by this user.
    # * `INVALID` One of several other values indicating unusual error conditions.
    # * `NOT_SHARED` One of several other values indicating unusual error conditions.
    # * `OK` The link is in a good state
    "BLOCKED"|"BROKEN"|"CIRCULAR"|"DISABLED"|"INACCESSIBLE"|"INVALID"|"NOT_SHARED"|"OK" status?;
};

public type CrossSheetReference record {
    # Defines beginning edge of range when specifying one or more rows. To specify an entire row, omit the startColumnId and endColumnId parameters
    decimal startRowId?;
    # Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References
    string name?;
    # Defines beginning edge of range when specifying one or more columns. To specify an entire column, omit the startRowId and endRowId parameters
    decimal startColumnId?;
    # Sheet Id of source sheet
    decimal sourceSheetId?;
    # Defines ending edge of range when specifying one or more columns. To specify an entire column, omit the startRowId and endRowId parameters
    decimal endColumnId?;
    # Defines ending edge of range when specifying one or more rows. To specify an entire row, omit the startColumnId and endColumnId parameters
    decimal endRowId?;
    # Cross-sheet reference Id, guaranteed unique within referencing sheet
    decimal id?;
    # Status of request:
    #  * 'BLOCKED' - A reference is downstream of a circular issue.
    #  * 'BROKEN' - The data source location (column, row or sheet) was deleted.
    #  * 'CIRCULAR' - The formula reference is self referencing and cannot be resolved.
    #  * 'DISABLED' - Updating the reference is temporarily disabled due to maintenance.
    #  * 'INVALID/UNKNOWN' - The reference is new and had not been validated.
    #  * 'NOT_SHARED' - No common shared users.
    #  * 'OK' - The reference is in a good state
    "BLOCKED"|"BROKEN"|"CIRCULAR"|"DISABLED"|"INVALID/UNKNOWN"|"NOT-SHARED"|"OK" status?;
};

public type Row record {
    # Describes this row's conditional format. Only returned if the include query string parameter contains format and this row has a conditional format applied
    string conditionalFormat?;
    # Attachments on row. Only returned if the include query string parameter contains attachments
    Attachment[] attachments?;
    # URL that represents a direct link to the row in Smartsheet. Only returned if the include query string parameter contains rowPermalink
    string permaLink?;
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # Columns of row. Only returned if the include query string parameter contains columns
    Column[] columns?;
    Timestamp modifiedAt?;
    # Discussions on the row. Only returned if the include query string parameter contains discussions
    Discussion[] discussions?;
    # Format descriptor. Only returned if the include query string parameter contains format and this row has a non-default format applied
    string format?;
    # Sheet version number that is incremented every time a sheet is modified
    decimal version?;
    Timestamp createdAt?;
    # Indicates whether the row is expanded or collapsed
    boolean expanded?;
    # Cells belonging to the row
    Cell[] cells?;
    # User object containing name and email of the creator of this row
    MiniUser createdBy?;
    # Indicates if the row is filtered out by a column filter. Only returned if the include query string parameter contains filters
    boolean filteredOut?;
    # Only returned, with a value of true, if the sheet is a project sheet with dependencies enabled and this row is in the critical path
    boolean inCriticalPath?;
    # Parent sheet Id
    decimal sheetId?;
    # Indicates whether the row is locked for the requesting user
    boolean lockedForUser?;
    # User object containing name and email of the last person to modify this row
    MiniUser modifiedBy?;
    # Row Id
    decimal id?;
    # Object containing zero or more media items, including images, videos, and documents, for review, editing, or approval
    Proof proof?;
    # Indicates whether the row is locked
    boolean locked?;
    # Row number within the sheet
    @constraint:Number {minValue: 1}
    decimal rowNumber?;
    # Sibling Id
    decimal siblingId?;
};

public type DurationObjectValue record {
    # Number of days
    float days?;
    # Object representing a duration in days
    "DURATION" objectType?;
};

public type Discussion record {
    # Array of attachments on discussion comments. Only returned if the include query string parameter contains attachments
    Attachment[] commentAttachments?;
    # Array of comments in discussion. Only returned if the include query string parameter contains comments
    Comment[] comments?;
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # `User` object containing `name` and `email` of the user who created the discussion
    MiniUser createdBy?;
    # Indicates whether the user can modify the discussion
    boolean readOnly?;
    # Discussion Id
    decimal id?;
    Timestamp lastCommentedAt?;
    # Title automatically created by duplicating the first 100 characters of top-level comment
    string title?;
    # The Id of the associated row or sheet
    decimal parentId?;
    # Type of parent object
    "ROW"|"SHEET" parentType?;
    # Number of comments in the discussion
    decimal commentCount?;
    # `User` object containing `name` and `email` of the user who last commented on the discussion
    MiniUser lastCommentedUser?;
};

public type TimestampNumber decimal;

public type Predecessor record {
    # In a project sheet, represents a value in a duration cell, or a lag value of a predecessor
    Duration lag?;
    # True if this predecessor is in the critical path
    boolean inCriticalPath?;
    # True if the row referenced by rowId is not a valid row in this sheet, or there is a circular reference (displayed in the Smartsheet app as "#REF") Omitted if false
    boolean invalid?;
    # Type of the predecessor:
    #  * FF (Finish-to-Finish) - finish at the same time the predecessor finishes.
    #  * FS (Finish-to-Start) - start after the predecessor finishes.
    #  * SF (Start-to-Finish) - finish before the predecessor starts.
    #  * SS (Start-to-Start) - start at the same time the predecessor starts
    "FF"|"FS"|"SF"|"SS" 'type?;
    # The row number of the predecessor row. Omitted if invalid is true
    decimal rowNumber?;
    # The Id of the predecessor row
    decimal rowId?;
};

# Object representing a datetime
public type DatetimeObjectValue record {
    # Datetime, in the **date-time** format defined by <a href="https://tools.ietf.org/html/rfc3339#section-5.6" target="_blank" rel="noopener noreferrer">RFC 3339, section 5.6</a>
    string value?;
    # Type of this object, always set to 'DATETIME'
    "DATETIME" objectType?;
};

# Represents the Queries record for the operation: updateSheet
public type UpdateSheetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

public type DateObjectValue record {
    # Date in the **full-date** format defined by [(https://tools.ietf.org/html/rfc3339#section-5.6" target="_blank" rel="noopener noreferrer">RFC 3339, section 5.6]</a>
    string value?;
    # Object representing a date
    "DATE" objectType?;
};

public type Timestamp TimestampDateTime|TimestampNumber;

public type Source record {
    # The Id of the dashboard, report, sheet, or template from which the enclosing dashboard, report, sheet, or template was created
    decimal id?;
    # **report**, **sheet**, **sight** (aka dashboard), or **template**
    string 'type?;
};

public type FavoriteResponse Sheet|SheetVersion;

# Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated
public type AutoNumberFormat record {
    # The prefix. Can include the date tokens:
    #   * {DD}
    #   * {MM}
    #   * {YY}
    #   * {YYYY}
    string prefix?;
    # The starting number for the auto-id
    decimal startingNumber?;
    # Indicates zero-padding. Must be between 0 and 10 "0" (zero) characters
    string fill?;
    # The suffix. Can include the date tokens:
    #   * {DD}
    #   * {MM}
    #   * {YY}
    #   * {YYYY}
    string suffix?;
};

# Object containing a list of references to rows on which the current row depends
public type PredecessorList record {
    # List of references to rows on which the current row depends
    Predecessor[] predecessors?;
    # Indicates the type of the object. For PredecessorList, this will always be 'PREDECESSOR_LIST'
    "PREDECESSOR_LIST" objectType?;
};

public type Column record {
    # When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)
    string symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**
    ContactOption[] contactOptions?;
    # Indicates whether the column is hidden
    boolean hidden?;
    # The format descriptor (see [Cell formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the **include** query string parameter contains **format** and this column has a non-default format applied to it
    string format?;
    # Column description
    string description?;
    # Column index or position. This number is zero-based
    decimal index?;
    # Column title
    string title?;
    # See [Column Types](/api/smartsheet/openapi/columns)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # * `0`: CONTACT_LIST, PICKLIST, or TEXT_NUMBER.
    # * `1`: MULTI_CONTACT_LIST.
    # * `2`: MULTI_PICKLIST
    0|1|2 version?;
    # Set of tags to indicate special columns. Each element in the array is set to one of the listed enum values
    ("CALENDAR_END_DATE"|"CALENDAR_START_DATE"|"CARD_DONE"|"GANTT_ALLOCATION"|"GANTT_ASSIGNED_RESOURCE"|"GANTT_DISPLAY_LABEL"|"GANTT_DURATION"|"GANTT_END_DATE"|"GANTT_PERCENT_COMPLETE"|"GANTT_PREDECESSOR"|"GANTT_START_DATE"|"BASELINE_START_DATE"|"BASELINE_END_DATE"|"BASELINE_VARIANCE")[] tags?;
    # Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated
    AutoNumberFormat autoNumberFormat?;
    # Array of the options available for the column
    string[] options?;
    # Display width of the column in pixels
    decimal width?;
    # The formula for the column, if set
    string formula?;
    # Indicates whether the column is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request
    boolean lockedForUser?;
    # See [System Columns](/api/smartsheet/openapi/columns)
    "AUTO_NUMBER"|"CREATED_BY"|"CREATED_DATE"|"MODIFIED_BY"|"MODIFIED_DATE" systemColumnType?;
    # Column Id
    decimal id?;
    # Indicates whether the column is locked. In a response, a value of **true** indicates that the column has been locked by the sheet owner or the admin
    boolean locked?;
    # Indicates whether validation has been enabled for the column (value = **true**)
    boolean validation?;
    # Returned only if the column is the Primary Column (value = **true**)
    boolean primary?;
};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://api.smartsheet.com/2.0/token";
|};

public type TimestampDateTime string;

# Describes the current user's editing permissions for a specific sheet
public type SheetUserPermissions record {
    # One of:
    #   * ADMIN: full control over fields.
    #   * READ_DELETE: sheet is owned by an individual account that doesn't have summary capabilities. If a summary exists, the only possible operations are GET and DELETE fields.
    #   * READ_ONLY.
    #   * READ_WRITE: can edit values of existing fields, but not create or delete fields, nor modify field type
    "ADMIN"|"READ_DELETE"|"READ_ONLY"|"READ_WRITE" summaryPermissions?;
};

# Represents the Queries record for the operation: getSheet
public type GetSheetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of optional elements to include in the response:
    #   * **attachments** - includes the metadata for sheet-level and row-level attachments. To include discussion attachments, both attachments and discussions must be present in the include list.
    #   * **columnType** -includes columnType attribute in the row's cells indicating the type of the column the cell resides in.
    #   * **crossSheetReferences** - includes the cross-sheet references
    #   * **discussions** - includes sheet-level and row-level discussions. To include discussion attachments, both attachments and discussions must be present in the include list.
    #   * **filters** - includes filteredOut attribute indicating if the row should be displayed or hidden according to the sheet's filters.
    #   * **filterDefinitions** - includes type of filter, operators used, and criteria
    #   * **format** -  includes column, row, cell, and summary fields formatting.
    #   * **ganttConfig** - includes Gantt chart details.
    #   * **objectValue** - when used in combination with a level query parameter, includes the email addresses for multi-contact data.
    #   * **ownerInfo** - includes the owner's email address and the owner's user Id.
    #   * **rowPermalink** - includes permalink attribute that represents a direct link to the row in the Smartsheet application.
    #   * **source** - adds the Source object indicating which report, sheet  Sight (aka dashboard), or template the sheet was created from, if any.
    #   * **writerInfo** - includes createdBy and modifiedBy attributes on the row or summary fields, indicating the row or summary field's creator, and last modifier
    "attachments"|"columnType"|"crossSheetReferences"|"discussions"|"filters"|"filterDefinitions"|"format"|"ganttConfig"|"objectValue"|"ownerInfo"|"rowPermalink"|"source"|"writerInfo" include?;
    # Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    int level = 0;
    # A comma-separated list of row Ids on which to filter the rows included in the result
    string rowIds?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # applies to PDF format only
    "LETTER"|"LEGAL"|"WIDE"|"ARCHD"|"A4"|"A3"|"A2"|"A1"|"A0" paperSize = "LETTER";
    # If version specified is still the current sheet version, then returns an abbreviated Sheet object with only the sheet version property. Otherwise, if the sheet has been modified, returns the complete Sheet object. Intended to allow clients with a cached copy to make sure they have the latest version
    int ifVersionAfter?;
    # Overrides the existing include={filters} parameter if both are supplied. Applies the given filter (if accessible by the calling user) and marks the affected rows as "filteredOut": true
    string filterId?;
    # A comma-separated list of column ids. The response contains only the specified columns in the "columns" array, and individual rows' "cells" array only contains cells in the specified columns
    string columnIds?;
    # A comma-separated list of row numbers on which to filter the rows included in the result. Non-existent row numbers are ignored
    string rowNumbers?;
    # A comma-separated list of element types to exclude from the response:
    #   * **filteredOutRows** - excludes filtered-out rows from response payload if a sheet filter is applied; includes total number of filtered rows
    #   * **linkInFromCellDetails** - excludes the following attributes from the **cell.linkInFromCell** object: `columnId`, `rowId`, `status`
    #   * **linksOutToCellsDetails** - excludes the following attributes from the **cell.linksOutToCells** array elements: `columnId`, `rowId`, `status`
    #   * **nonexistentCells** - excludes empty cells
    "filteredOutRows"|"linkInFromCellDetails"|"linksOutToCellsDetails"|"nonexistentCells" exclude?;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
    # Filter to return only rows that have been modified since the date/time provided. Date should be in ISO-8601 format
    Timestamp rowsModifiedSince?;
};

public type Comment record {
    Timestamp createdAt?;
    # Array of attachments on comments
    Attachment[] attachments?;
    # User object containing name and email of the creator of this comment
    MiniUser createdBy?;
    # Discussion Id of discussion that contains comment
    decimal discussionId?;
    Timestamp modifiedAt?;
    # Comment Id
    decimal id?;
    # Comment body
    string text?;
};

# Represents the entire summary, or a list of defined fields and values, for a specific sheet
public type SheetSummary record {
    # Array of summary (or metadata) fields defined on the sheet
    SummaryField[] fields?;
};

# The error caused by the failed item
public type Error record {
    # Custom error code from Smartsheet. See the complete [Error Code List](/api/smartsheet/error-codes)
    decimal errorCode?;
    # The Id of the specific error occurrence. Please include this information when contacting Smartsheet support
    string refId?;
    # Descriptive error message
    string message?;
};

public type AttachmentListResponse record {
    *GenericResult;
    *AttachmentListData;
};

public type SummaryField record {
    # Represents a hyperlink, which can be a URL or a link to a report, sheet, or dashboard
    Hyperlink hyperlink?;
    # Represents an image object, including its unique ID, dimensions, and alternate text
    Image image?;
    # When applicable for PICKLIST column type
    string symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST
    ContactOption[] contactOptions?;
    Timestamp modifiedAt?;
    # The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it
    string format?;
    # Field index or position. This number is zero-based
    decimal index?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # Arbitrary name, must be unique within summary
    string title?;
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Visual representation of cell contents, as presented to the user in the UI
    string displayValue?;
    Timestamp createdAt?;
    # User object containing name and email of the creator of this summary field
    MiniUser createdBy?;
    # When applicable for PICKLIST column type. Array of the options available for the field
    string[] options?;
    # The formula for a cell, if set
    string formula?;
    # Indicates whether the field is locked for the requesting user
    boolean lockedForUser?;
    # User object containing name and email of the user who most recently modified this summary field
    MiniUser modifiedBy?;
    # SummaryField Id
    decimal id?;
    # Indicates whether the field is locked
    boolean locked?;
    # Indicates whether summary field values are restricted to the type
    boolean validation?;
};

public type ContactOption record {
    # Can be a user's name, display name, or free text
    string name?;
    # A parsable email address
    string email?;
};

# Object containing a list of strings to choose from
public type MultiPicklistObjectValue record {
    # List of strings to choose from
    string[] values?;
    # Type of this object, always set to 'MULTI_PICKLIST'
    "MULTI_PICKLIST" objectType?;
};

public type UpdateSheet record {
    # Represents individual user settings for a specific sheet. User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet)
    SheetUserSettings userSettings?;
    # Sheet name
    string name?;
    # Represents the project settings dependencies for a specific sheet. Project settings may be updated on sheets that the user has editor access
    ProjectSettings projectSettings?;
};

public type Sheet record {
    # Indicates whether multi-select is enabled
    boolean isMultiPicklistEnabled?;
    WorkspaceListing workspace?;
    # Array of Attachment objects.
    # Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **attachments**
    Attachment[] attachments?;
    Column[] columns?;
    Timestamp modifiedAt?;
    # Array of Discussion objects
    # Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **discussions**
    Discussion[] discussions?;
    Source 'source?;
    # Describes the current user's editing permissions for a specific sheet
    SheetUserPermissions userPermissions?;
    # User Id of the sheet owner
    decimal ownerId?;
    # Indicates that resource management is enabled
    boolean resourceManagementEnabled?;
    # The sheet is enabled for cell images to be uploaded
    boolean cellImageUploadEnabled?;
    # Indicates whether a sheet summary is present
    boolean hasSummaryFields?;
    # Indicates whether "Gantt View" is enabled
    boolean ganttEnabled?;
    Timestamp createdAt?;
    # Resource Management type. Indicates the type of RM that is enabled
    "NONE"|"LEGACY_RESOURCE_MANAGEMENT"|"RESOURCE_MANAGEMENT_BY_SMARTSHEET" resourceManagementType?;
    # Sheet Id
    decimal id?;
    # The total number of rows in the sheet
    decimal totalRowCount?;
    # Email address of the sheet owner
    string owner?;
    # Represents the entire summary, or a list of defined fields and values, for a specific sheet
    SheetSummary summary?;
    # Specifies the user's level of access or permissions, such as ADMIN, OWNER, EDITOR, or VIEWER
    AccessLevel accessLevel?;
    # Returned only if the sheet belongs to an expired trial (value = **true**)
    boolean readOnly?;
    Row[] rows?;
    # The Id of the template from which to create the sheet. This attribute can be specified in a request, but is never present in a response
    decimal fromId?;
    # A number that is incremented every time a sheet is modified
    decimal version?;
    # Array of enum strings (see [Attachment.attachmentType](/api/smartsheet/openapi/attachments) indicating the allowable attachment options for the current user and sheet
    string[] effectiveAttachmentOptions?;
    # Indicates whether dependencies are enabled
    boolean dependenciesEnabled?;
    # Returned only if there are column filters on the sheet. Value = **true** if "show parent rows" is enabled for the filters
    boolean showParentRowsForFilters?;
    # Represents individual user settings for a specific sheet. User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet)
    SheetUserSettings userSettings?;
    # Array of CrossSheetReference objects.
    # Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **crossSheetReferences**
    CrossSheetReference[] crossSheetReferences?;
    # Sheet name
    string name?;
    # URL that represents a direct link to the sheet in Smartsheet
    string permalink?;
    # **Deprecated** Returned only if the user has marked this sheet as a favorite in their Home tab (value = **true**)
    # 
    # # Deprecated
    @deprecated
    boolean favorite?;
    # Represents the project settings dependencies for a specific sheet. Project settings may be updated on sheets that the user has editor access
    ProjectSettings projectSettings?;
};

public type AttachmentListData record {
    Sheet result?;
};

# Represents a hyperlink, which can be a URL or a link to a report, sheet, or dashboard
public type Hyperlink record {
    # If non-null, this hyperlink is a link to the report with this Id
    decimal reportId?;
    # If non-null, this hyperlink is a link to the sheet with this Id
    decimal sheetId?;
    # If non-null, this hyperlink is a link to the dashboard with this Id
    decimal sightId?;
    # When the hyperlink is a URL link, this property contains the URL value. When the hyperlink is a dashboard/report/sheet link (that is, dashboardId, reportId, or sheetId is non-null), this property contains the permalink to the dashboard, report, or sheet
    string url?;
};

{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "Payments",
    "description" : "Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.",
    "contact" : { },
    "version" : "2.5"
  },
  "externalDocs" : {
    "url" : "https://developer.paypal.com/docs/api/payments/v2/"
  },
  "servers" : [ {
    "url" : "https://api-m.sandbox.paypal.com/v2/payments",
    "description" : "PayPal Sandbox Environment"
  }, {
    "url" : "https://api-m.paypal.com/v2/payments",
    "description" : "PayPal Live Environment"
  } ],
  "tags" : [ {
    "name" : "authorizations",
    "description" : "Use the `/authorizations` resource to show details for, capture payment for, reauthorize, and void authorized payments."
  }, {
    "name" : "captures",
    "description" : "Use the `/captures` resource to show details for and refund a captured payment."
  }, {
    "name" : "refunds",
    "description" : "Use the `/refunds` resource to show refund details."
  }, {
    "name" : "assets",
    "description" : "Assets APIs for Checkout"
  }, {
    "name" : "cancel-payment",
    "description" : "Use the <code>/cancel-payment</code> resource to cancel an order capture or order authorization by <code>PayPal-Request-Id</code>. The merchant triggers the cancel action."
  }, {
    "name" : "find-eligible-methods",
    "description" : "Use the `/find-eligible-methods` resource to show list of eligible payment methods for given customer/order context."
  }, {
    "name" : "payment-resource-operations",
    "description" : "Use the `/payment-resource-operations` resource to show verifications details."
  } ],
  "paths" : {
    "/authorizations/{authorizationId}" : {
      "get" : {
        "tags" : [ "authorizations" ],
        "summary" : "Show details for authorized payment",
        "description" : "Shows details for an authorized payment, by ID.",
        "operationId" : "authorizations.get",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorization_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows authorization details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Authorization2"
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error401"
                }
              }
            }
          },
          "403" : {
            "description" : "The request failed because the caller has insufficient permissions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenAccessErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The request failed because the resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "The request failed because an internal server error occurred."
          },
          "default" : {
            "$ref" : "#/components/responses/default"
          }
        },
        "security" : [ {
          "Oauth2" : [ "https://uri.paypal.com/services/payments/payment/authcapture" ]
        } ]
      }
    },
    "/authorizations/{authorizationId}/capture" : {
      "post" : {
        "tags" : [ "authorizations" ],
        "summary" : "Capture authorized payment",
        "description" : "Captures an authorized payment, by ID.",
        "operationId" : "authorizations.capture",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorization_id"
        }, {
          "$ref" : "#/components/parameters/paypal_request_id"
        }, {
          "$ref" : "#/components/parameters/prefer"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CaptureRequest"
              },
              "examples" : {
                "capture_request" : {
                  "value" : {
                    "amount" : {
                      "value" : "10.99",
                      "currency_code" : "USD"
                    },
                    "invoice_id" : "INVOICE-123",
                    "final_capture" : true,
                    "note_to_payer" : "If the ordered color is not available, we will substitute with a different color free of charge.",
                    "soft_descriptor" : "Bob's Custom Sweaters"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A successful request returns the HTTP <code>201 Created</code> status code and a JSON response body that shows captured payment details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Capture2"
                }
              }
            }
          },
          "400" : {
            "description" : "The request failed because it is not well-formed or is syntactically incorrect or violates schema.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error401"
                }
              }
            }
          },
          "403" : {
            "description" : "The request failed because the caller has insufficient permissions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenAccessErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The request failed because the resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "The request failed because it is semantically incorrect or failed business validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnprocessableContentError"
                }
              }
            }
          },
          "500" : {
            "description" : "The request failed because an internal server error occurred."
          },
          "default" : {
            "$ref" : "#/components/responses/default"
          }
        },
        "security" : [ {
          "Oauth2" : [ "https://uri.paypal.com/services/payments/payment/authcapture" ]
        } ]
      }
    },
    "/authorizations/{authorizationId}/reauthorize" : {
      "post" : {
        "tags" : [ "authorizations" ],
        "summary" : "Reauthorize authorized payment",
        "description" : "Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still available, reauthorize a payment after its initial three-day honor period expires. Within the 29-day authorization period, you can issue multiple re-authorizations after the honor period expires.<br/><br/>If 30 days have transpired since the date of the original authorization, you must create an authorized payment instead of reauthorizing the original authorized payment.<br/><br/>A reauthorized payment itself has a new honor period of three days.<br/><br/>You can reauthorize an authorized payment from 4 to 29 days after the 3-day honor period. The allowed amount depends on context and geography, for example in US it is up to 115% of the original authorized amount, not to exceed an increase of $75 USD.<br/><br/>Supports only the `amount` request parameter.<blockquote><strong>Note:</strong> This request is currently not supported for Partner use cases.</blockquote>",
        "operationId" : "authorizations.reauthorize",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorization_id"
        }, {
          "$ref" : "#/components/parameters/paypal_request_id"
        }, {
          "$ref" : "#/components/parameters/prefer"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReauthorizeRequest"
              },
              "examples" : {
                "reauthorize_request" : {
                  "value" : {
                    "amount" : {
                      "value" : "10.99",
                      "currency_code" : "USD"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A successful request returns the HTTP <code>201 Created</code> status code and a JSON response body that shows the reauthorized payment details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Authorization2"
                }
              }
            }
          },
          "400" : {
            "description" : "The request failed because it is not well-formed or is syntactically incorrect or violates schema.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthorizationReauthorizeErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error401"
                }
              }
            }
          },
          "403" : {
            "description" : "The request failed because the caller has insufficient permissions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenAccessErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The request failed because the resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "The request failed because it either is semantically incorrect or failed business validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthorizationReauthorizeError422Response"
                }
              }
            }
          },
          "500" : {
            "description" : "The request failed because an internal server error occurred."
          },
          "default" : {
            "$ref" : "#/components/responses/default"
          }
        },
        "security" : [ {
          "Oauth2" : [ "https://uri.paypal.com/services/payments/payment/authcapture" ]
        } ]
      }
    },
    "/authorizations/{authorizationId}/void" : {
      "post" : {
        "tags" : [ "authorizations" ],
        "summary" : "Void authorized payment",
        "description" : "Voids, or cancels, an authorized payment, by ID. You cannot void an authorized payment that has been fully captured.",
        "operationId" : "authorizations.void",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorization_id"
        }, {
          "$ref" : "#/components/parameters/paypal_auth_assertion"
        }, {
          "$ref" : "#/components/parameters/prefer"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows authorization details. This response is returned when the Prefer header is set to return=representation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Authorization2"
                }
              }
            }
          },
          "204" : {
            "description" : "A successful request returns the HTTP <code>204 No Content</code> status code with no JSON response body. This response is returned when the Prefer header is set to return=minimal."
          },
          "400" : {
            "description" : "The request failed because it is not well-formed or is syntactically incorrect or violates schema.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error400"
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "The request failed because the caller has insufficient permissions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenAccessErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The request failed because the resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "The request failed because a previous call for the given resource is in progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConflictErrorResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "The request failed because it either is semantically incorrect or failed business validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthorizationVoidValidationError"
                }
              }
            }
          },
          "500" : {
            "description" : "The request failed because an internal server error occurred."
          },
          "default" : {
            "$ref" : "#/components/responses/default"
          }
        },
        "security" : [ {
          "Oauth2" : [ "https://uri.paypal.com/services/payments/payment/authcapture" ]
        } ]
      }
    },
    "/captures/{captureId}" : {
      "get" : {
        "tags" : [ "captures" ],
        "summary" : "Show captured payment details",
        "description" : "Shows details for a captured payment, by ID.",
        "operationId" : "captures.get",
        "parameters" : [ {
          "$ref" : "#/components/parameters/capture_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows captured payment details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Capture2"
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error401"
                }
              }
            }
          },
          "403" : {
            "description" : "The request failed because the caller has insufficient permissions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenAccessErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The request failed because the resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "The request failed because an internal server error occurred."
          },
          "default" : {
            "$ref" : "#/components/responses/default"
          }
        },
        "security" : [ {
          "Oauth2" : [ "https://uri.paypal.com/services/payments/payment/authcapture" ]
        } ]
      }
    },
    "/captures/{captureId}/refund" : {
      "post" : {
        "tags" : [ "captures" ],
        "summary" : "Refund captured payment",
        "description" : "Refunds a captured payment, by ID. For a full refund, include an empty payload in the JSON request body. For a partial refund, include an <code>amount</code> object in the JSON request body.",
        "operationId" : "captures.refund",
        "parameters" : [ {
          "$ref" : "#/components/parameters/capture_id"
        }, {
          "$ref" : "#/components/parameters/paypal_request_id"
        }, {
          "$ref" : "#/components/parameters/prefer"
        }, {
          "$ref" : "#/components/parameters/paypal_auth_assertion"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RefundRequest"
              },
              "examples" : {
                "refund_request" : {
                  "value" : {
                    "amount" : {
                      "value" : "10.00",
                      "currency_code" : "USD"
                    },
                    "invoice_id" : "INVOICE-123",
                    "note_to_payer" : "DefectiveProduct",
                    "payment_instruction" : {
                      "platform_fees" : [ {
                        "amount" : {
                          "currency_code" : "USD",
                          "value" : "1.00"
                        }
                      } ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A successful request returns the HTTP <code>201 Created</code> status code and a JSON response body that shows refund details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Refund"
                }
              }
            }
          },
          "400" : {
            "description" : "The request failed because it is not well-formed or is syntactically incorrect or violates schema.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CapturesRefundError400Response"
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "The request failed because the caller has insufficient permissions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenAccessErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The request failed because the resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "The request failed because a previous call for the given resource is in progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConflictErrorResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "The request failed because it either is semantically incorrect or failed business validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CapturesRefundValidationErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "The request failed because an internal server error occurred."
          },
          "default" : {
            "$ref" : "#/components/responses/default"
          }
        },
        "security" : [ {
          "Oauth2" : [ "https://uri.paypal.com/services/payments/refund" ]
        } ]
      }
    },
    "/refunds/{refundId}" : {
      "get" : {
        "tags" : [ "refunds" ],
        "summary" : "Show refund details",
        "description" : "Shows details for a refund, by ID.",
        "operationId" : "refunds.get",
        "parameters" : [ {
          "$ref" : "#/components/parameters/refund_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows refund details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Refund"
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "The request failed because the caller has insufficient permissions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenAccessErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The request failed because the resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "The request failed because an internal server error occurred."
          },
          "default" : {
            "$ref" : "#/components/responses/default"
          }
        },
        "security" : [ {
          "Oauth2" : [ "https://uri.paypal.com/services/payments/refund" ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Error503" : {
        "title" : "Service Unavailable Error",
        "type" : "object",
        "properties" : {
          "debug_id" : {
            "type" : "string",
            "description" : "The PayPal internal ID. Used for correlation purposes",
            "x-ballerina-name-ignore" : "debugId",
            "x-ballerina-name" : "debugId"
          },
          "name" : {
            "type" : "string",
            "description" : "Error type identifier indicating the service is temporarily unavailable",
            "enum" : [ "SERVICE_UNAVAILABLE" ]
          },
          "links" : {
            "maxItems" : 10000,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS)",
            "items" : {
              "$ref" : "#/components/schemas/ErrorLinkDescription"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "Error message indicating the service is temporarily unavailable",
            "enum" : [ "Service Unavailable." ]
          }
        },
        "description" : "The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime",
        "example" : {
          "name" : "SERVICE_UNAVAILABLE",
          "message" : "Service Unavailable.",
          "debug_id" : "90957fca61718",
          "information_link" : "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
        }
      },
      "INVALIDPARAMETERSYNTAX" : {
        "title" : "INVALID_PARAMETER_SYNTAX",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the request contains a parameter with invalid syntax formatting.",
            "enum" : [ "INVALID_PARAMETER_SYNTAX" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating a field value does not match the required format or syntax rules.",
            "enum" : [ "The value of a field does not conform to the expected format." ]
          }
        },
        "description" : "Error indicating a field value does not match the required format or syntax rules"
      },
      "ErrorLocation" : {
        "type" : "string",
        "description" : "The location of the field that caused the error. Value is `body`, `path`, or `query`",
        "default" : "body",
        "enum" : [ "body", "path", "query" ]
      },
      "SupplementaryPurchaseData" : {
        "title" : "Capture Identifier",
        "type" : "object",
        "properties" : {
          "invoice_id" : {
            "maxLength" : 127,
            "minLength" : 1,
            "pattern" : "^.{1,127}$",
            "type" : "string",
            "description" : "The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives",
            "x-ballerina-name-ignore" : "invoiceId",
            "x-ballerina-name" : "invoiceId"
          },
          "note_to_payer" : {
            "maxLength" : 255,
            "minLength" : 1,
            "pattern" : "^.{1,255}$",
            "type" : "string",
            "description" : "An informational note about this settlement. Appears in both the payer's transaction history and the emails that the payer receives",
            "x-ballerina-name-ignore" : "noteToPayer",
            "x-ballerina-name" : "noteToPayer"
          }
        },
        "description" : "The capture identification-related fields. Includes the invoice ID, custom ID, note to payer, and soft descriptor"
      },
      "CardBrand" : {
        "title" : "Card Brand",
        "maxLength" : 255,
        "minLength" : 1,
        "pattern" : "^[A-Z_]+$",
        "type" : "string",
        "description" : "The card network or brand. Applies to credit, debit, gift, and payment cards",
        "enum" : [ "VISA", "MASTERCARD", "DISCOVER", "AMEX", "SOLO", "JCB", "STAR", "DELTA", "SWITCH", "MAESTRO", "CB_NATIONALE", "CONFIGOGA", "CONFIDIS", "ELECTRON", "CETELEM", "CHINA_UNION_PAY" ]
      },
      "REFUNDAMOUNTEXCEEDED" : {
        "title" : "REFUND_AMOUNT_EXCEEDED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the refund amount requested exceeds the maximum allowed limit.",
            "enum" : [ "REFUND_AMOUNT_EXCEEDED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating the refund amount exceeds the available refundable capture amount.",
            "enum" : [ "The refund amount must be less than or equal to the capture amount that has not yet been refunded." ]
          }
        },
        "description" : "Refund amount exceeds the available capture amount that hasn't been refunded yet"
      },
      "DateTime" : {
        "maxLength" : 64,
        "minLength" : 20,
        "pattern" : "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$",
        "type" : "string",
        "description" : "The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>",
        "format" : "ppaas_date_time_v3"
      },
      "Capture" : {
        "title" : "Capture",
        "type" : "object",
        "description" : "A captured payment",
        "allOf" : [ {
          "$ref" : "#/components/schemas/CaptureStatus"
        }, {
          "$ref" : "#/components/schemas/CaptureAllOf2"
        }, {
          "$ref" : "#/components/schemas/ActivityTimestamps"
        } ]
      },
      "CurrencyCode" : {
        "maxLength" : 3,
        "minLength" : 3,
        "type" : "string",
        "description" : "The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency",
        "format" : "ppaas_common_currency_code_v2"
      },
      "PARTIALREFUNDNOTALLOWED" : {
        "title" : "PARTIAL_REFUND_NOT_ALLOWED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that partial refunds are not permitted for this transaction or payment method.",
            "enum" : [ "PARTIAL_REFUND_NOT_ALLOWED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating partial refunds are not permitted; only full refund amounts allowed.",
            "enum" : [ "You cannot do a refund less than the original capture amount." ]
          }
        },
        "description" : "Indicates that partial refunds are not permitted; only full refunds matching the original capture amount are allowed"
      },
      "Error500" : {
        "title" : "Internal Server Error",
        "type" : "object",
        "properties" : {
          "debug_id" : {
            "type" : "string",
            "description" : "The PayPal internal ID. Used for correlation purposes",
            "x-ballerina-name-ignore" : "debugId",
            "x-ballerina-name" : "debugId"
          },
          "name" : {
            "type" : "string",
            "description" : "Error name identifier indicating an internal server error occurred",
            "enum" : [ "INTERNAL_SERVER_ERROR" ]
          },
          "links" : {
            "maxItems" : 10000,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS)",
            "items" : {
              "$ref" : "#/components/schemas/ErrorLinkDescription"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "Error message indicating an internal server error has occurred on the server",
            "enum" : [ "An internal server error occurred." ]
          }
        },
        "description" : "This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server",
        "example" : {
          "name" : "INTERNAL_SERVER_ERROR",
          "message" : "An internal server error occurred.",
          "debug_id" : "90957fca61718",
          "links" : [ {
            "href" : "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
            "rel" : "information_link"
          } ]
        }
      },
      "DECIMALPRECISION2" : {
        "title" : "DECIMAL_PRECISION",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a decimal precision validation issue with the fixed value \"DECIMAL_PRECISION\".",
            "enum" : [ "DECIMAL_PRECISION" ]
          },
          "description" : {
            "type" : "string",
            "description" : "A string value representing a decimal number with precision limited to 2 decimal places."
          }
        },
        "description" : "Validation issue indicating incorrect decimal precision formatting or configuration"
      },
      "DECIMALPRECISION1" : {
        "title" : "DECIMAL_PRECISION",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Identifies a decimal precision issue with the value \"DECIMAL_PRECISION\".",
            "enum" : [ "DECIMAL_PRECISION" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that currencies supporting decimals are limited to two decimal places only.",
            "enum" : [ "If the currency supports decimals, only two decimal place precision is supported." ]
          }
        },
        "description" : "Validates that decimal currencies use only two decimal place precision"
      },
      "ConflictErrorResponse" : {
        "description" : "HTTP 409 Conflict error response indicating a request conflict with the current resource state",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error409"
        }, {
          "$ref" : "#/components/schemas/Conflict"
        } ]
      },
      "CURRENCYMISMATCH" : {
        "title" : "CURRENCY_MISMATCH",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a currency mismatch error when currencies don't align between related transactions.",
            "enum" : [ "CURRENCY_MISMATCH" ]
          },
          "description" : {
            "type" : "string",
            "description" : "A descriptive message explaining the currency mismatch error or providing additional context."
          }
        },
        "description" : "Error indicating a mismatch between expected and provided currency codes in the transaction"
      },
      "RefundStatus" : {
        "title" : "Refund Status",
        "type" : "object",
        "properties" : {
          "status_details" : {
            "description" : "Additional details and context information related to the current refund status",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RefundStatusDetails"
            } ],
            "x-ballerina-name-ignore" : "statusDetails",
            "x-ballerina-name" : "statusDetails"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the refund",
            "readOnly" : true,
            "enum" : [ "CANCELLED", "FAILED", "PENDING", "COMPLETED" ]
          }
        },
        "description" : "The refund status"
      },
      "REFUNDNOTPERMITTEDDUETOCHARGEBACK" : {
        "title" : "REFUND_NOT_PERMITTED_DUE_TO_CHARGEBACK",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a refund cannot be processed because a chargeback has been initiated for this transaction.",
            "enum" : [ "REFUND_NOT_PERMITTED_DUE_TO_CHARGEBACK" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates refunds are blocked due to a chargeback on the payment method requiring payee contact.",
            "enum" : [ "Refunds are not allowed on this capture due to a chargeback on the card or bank. Please contact the payee to resolve the chargeback." ]
          }
        },
        "description" : "Refunds are not allowed on this capture due to a chargeback on the card or bank"
      },
      "INVALIDPARAMETERSYNTAX1" : {
        "title" : "INVALID_PARAMETER_SYNTAX",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a parameter syntax validation error with the fixed value \"INVALID_PARAMETER_SYNTAX\".",
            "enum" : [ "INVALID_PARAMETER_SYNTAX" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating a field value does not match the required format or syntax rules.",
            "enum" : [ "The value of a field does not conform to the expected format." ]
          }
        },
        "description" : "Error indicating a field value does not conform to the expected format or syntax requirements"
      },
      "Authorizationsreauthorize400Details" : {
        "description" : "Error details for authorization reauthorization 400 responses including missing, invalid length, or syntax parameter errors",
        "anyOf" : [ {
          "$ref" : "#/components/schemas/MISSINGREQUIREDPARAMETER1"
        }, {
          "$ref" : "#/components/schemas/INVALIDSTRINGLENGTH1"
        }, {
          "$ref" : "#/components/schemas/INVALIDSTRINGMAXLENGTH1"
        }, {
          "$ref" : "#/components/schemas/INVALIDPARAMETERSYNTAX1"
        } ]
      },
      "PLATFORMFEEEXCEEDED" : {
        "title" : "PLATFORM_FEE_EXCEEDED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the platform fee has exceeded the allowed limit or threshold.",
            "enum" : [ "PLATFORM_FEE_EXCEEDED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error when platform fee refund amount exceeds available refund balance or no fee was originally captured.",
            "enum" : [ "Platform fee amount specified exceeds the amount that is available for refund. You can only refund up to the available platform fee amount. This error is also returned when no platform_fee was specified or was zero when the payment was captured." ]
          }
        },
        "description" : "Platform fee refund amount exceeds available balance or no platform fee was originally captured"
      },
      "INVALIDPARAMETERSYNTAX2" : {
        "title" : "INVALID_PARAMETER_SYNTAX",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a parameter syntax validation error with the fixed value \"INVALID_PARAMETER_SYNTAX\".",
            "enum" : [ "INVALID_PARAMETER_SYNTAX" ]
          },
          "description" : {
            "type" : "string",
            "description" : "A descriptive message explaining the invalid parameter syntax error encountered."
          }
        },
        "description" : "Error indicating a parameter has invalid syntax format with descriptive details"
      },
      "INVALIDRESOURCEID" : {
        "title" : "INVALID_RESOURCE_ID",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates the specific validation error type when a resource identifier is invalid or not found.",
            "enum" : [ "INVALID_RESOURCE_ID" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating the specified resource ID does not exist and requires verification.",
            "enum" : [ "Specified resource ID does not exist. Please check the resource ID and try again." ]
          }
        },
        "description" : "Error response indicating the specified resource ID does not exist or is invalid"
      },
      "TRANSACTIONREFUSED2" : {
        "title" : "TRANSACTION_REFUSED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates the transaction was refused, with the fixed value \"TRANSACTION_REFUSED\".",
            "enum" : [ "TRANSACTION_REFUSED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "PayPal's internal controls prevent authorization from being captured.",
            "enum" : [ "PayPal's internal controls prevent authorization from being captured." ]
          }
        },
        "description" : "Transaction refused due to PayPal's internal controls preventing authorization capture"
      },
      "Capture2" : {
        "title" : "Capture",
        "type" : "object",
        "description" : "A captured payment",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Capture"
        }, {
          "$ref" : "#/components/schemas/Capture2AllOf2"
        } ]
      },
      "Capture2AllOf2" : {
        "properties" : {
          "supplementary_data" : {
            "$ref" : "#/components/schemas/SupplementaryData"
          },
          "payee" : {
            "$ref" : "#/components/schemas/PayeeBase"
          }
        },
        "description" : "Contains supplementary data and payee information for capture processing"
      },
      "Refund" : {
        "title" : "Refund",
        "type" : "object",
        "description" : "The refund information",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RefundStatus"
        }, {
          "$ref" : "#/components/schemas/RefundAllOf2"
        }, {
          "$ref" : "#/components/schemas/ActivityTimestamps"
        } ]
      },
      "ForbiddenAccessErrorResponse" : {
        "description" : "Error response returned when access to a resource is forbidden due to insufficient permissions",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error403"
        }, {
          "$ref" : "#/components/schemas/Forbidden"
        } ]
      },
      "TRANSACTIONREFUSED" : {
        "title" : "TRANSACTION_REFUSED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a transaction was refused, with the fixed value \"TRANSACTION_REFUSED\".",
            "enum" : [ "TRANSACTION_REFUSED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "PayPal's internal controls prevent authorization from being captured.",
            "enum" : [ "PayPal's internal controls prevent authorization from being captured." ]
          }
        },
        "description" : "PayPal's internal controls prevent authorization from being captured"
      },
      "CaptureStatus" : {
        "title" : "Capture Status",
        "type" : "object",
        "properties" : {
          "status_details" : {
            "description" : "Additional details and context information about the current capture status",
            "allOf" : [ {
              "$ref" : "#/components/schemas/CaptureStatusDetails"
            } ],
            "x-ballerina-name-ignore" : "statusDetails",
            "x-ballerina-name" : "statusDetails"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the captured payment",
            "readOnly" : true,
            "enum" : [ "COMPLETED", "DECLINED", "PARTIALLY_REFUNDED", "PENDING", "REFUNDED", "FAILED" ]
          }
        },
        "description" : "The status of a captured payment"
      },
      "MAXNUMBEROFREFUNDSEXCEEDED" : {
        "title" : "MAX_NUMBER_OF_REFUNDS_EXCEEDED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the maximum allowed number of refunds for this transaction has been exceeded.",
            "enum" : [ "MAX_NUMBER_OF_REFUNDS_EXCEEDED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating the maximum number of refund attempts has been exceeded for a capture.",
            "enum" : [ "You have exceeded the maximum number of refund attempts for this capture." ]
          }
        },
        "description" : "Error indicating the maximum allowed number of refund attempts for a capture has been exceeded"
      },
      "PREVIOUSREQUESTINPROGRESS" : {
        "title" : "PREVIOUS_REQUEST_IN_PROGRESS",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a previous request is still being processed and must complete before a new request can be initiated.",
            "enum" : [ "PREVIOUS_REQUEST_IN_PROGRESS" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating a previous request is still processing and to retry after waiting.",
            "enum" : [ "A previous request on this resource is currently in progress. Please wait for sometime and try again. It is best to space out the initial and the subsequent request(s) to avoid receiving this error." ]
          }
        },
        "description" : "A previous request on this resource is in progress. Wait and retry with spaced intervals"
      },
      "Error404" : {
        "title" : "Not found Error",
        "type" : "object",
        "properties" : {
          "debug_id" : {
            "type" : "string",
            "description" : "The PayPal internal ID. Used for correlation purposes",
            "x-ballerina-name-ignore" : "debugId",
            "x-ballerina-name" : "debugId"
          },
          "name" : {
            "type" : "string",
            "description" : "Error type identifier indicating the requested resource could not be found",
            "enum" : [ "RESOURCE_NOT_FOUND" ]
          },
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information providing specific context about the 404 not found error",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetails"
            }
          },
          "links" : {
            "maxItems" : 10000,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS)",
            "items" : {
              "$ref" : "#/components/schemas/ErrorLinkDescription"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "Error message indicating the requested resource could not be found on the server",
            "enum" : [ "The specified resource does not exist." ]
          }
        },
        "description" : "The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available"
      },
      "SupplementaryData" : {
        "title" : "Supplementary Data",
        "type" : "object",
        "properties" : {
          "related_ids" : {
            "description" : "Array of identifiers linking this supplementary data to related entities or records",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RelatedIds"
            } ],
            "x-ballerina-name-ignore" : "relatedIds",
            "x-ballerina-name" : "relatedIds"
          }
        },
        "description" : "The supplementary data"
      },
      "Error409" : {
        "title" : "Resource Conflict Error",
        "type" : "object",
        "properties" : {
          "debug_id" : {
            "type" : "string",
            "description" : "The PayPal internal ID. Used for correlation purposes",
            "x-ballerina-name-ignore" : "debugId",
            "x-ballerina-name" : "debugId"
          },
          "name" : {
            "type" : "string",
            "description" : "Error type identifier indicating a resource conflict has occurred",
            "enum" : [ "RESOURCE_CONFLICT" ]
          },
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information providing specific context about the conflict condition",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetails"
            }
          },
          "links" : {
            "maxItems" : 10000,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS)",
            "items" : {
              "$ref" : "#/components/schemas/ErrorLinkDescription"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "A standard conflict error message indicating the server detected a request processing conflict",
            "enum" : [ "The server has detected a conflict while processing this request." ]
          }
        },
        "description" : "The server has detected a conflict while processing this request"
      },
      "PAYERCANNOTPAY" : {
        "title" : "PAYER_CANNOT_PAY",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the payer is unable to complete the payment transaction.",
            "enum" : [ "PAYER_CANNOT_PAY" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Standard message indicating the payer cannot complete the transaction and should be contacted for alternative payment methods.",
            "enum" : [ "Payer cannot pay for this transaction. Please contact the payer to find other ways to pay for this transaction." ]
          }
        },
        "description" : "Indicates the payer lacks sufficient funds or means to complete the transaction payment"
      },
      "ReauthorizeRequest" : {
        "title" : "Reauthorize Request",
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Money"
          }
        },
        "description" : "Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still available, reauthorize a payment after its initial three-day honor period expires. You can reauthorize a payment only once from days four to 29.<br/><br/>If 30 days have transpired since the date of the original authorization, you must create an authorized payment instead of reauthorizing the original authorized payment.<br/><br/>A reauthorized payment itself has a new honor period of three days.<br/><br/>You can reauthorize an authorized payment once. The allowed amount depends on context and geography, for example in US it is up to 115% of the original authorized amount, not to exceed an increase of $75 USD.<br/><br/>Supports only the `amount` request parameter.<blockquote><strong>Note:</strong> This request is currently not supported for Partner use cases.</blockquote>"
      },
      "ErrorDetails" : {
        "title" : "Error Details",
        "required" : [ "issue" ],
        "type" : "object",
        "properties" : {
          "field" : {
            "type" : "string",
            "description" : "The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors"
          },
          "issue" : {
            "type" : "string",
            "description" : "The unique, fine-grained application-level error code"
          },
          "description" : {
            "type" : "string",
            "description" : "The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value"
          },
          "location" : {
            "$ref" : "#/components/schemas/ErrorLocation"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the field that caused the error"
          }
        },
        "description" : "The error details. Required for client-side `4XX` errors"
      },
      "INVALIDACCOUNTSTATUS" : {
        "title" : "INVALID_ACCOUNT_STATUS",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates an invalid account status error with the value \"INVALID_ACCOUNT_STATUS\".",
            "enum" : [ "INVALID_ACCOUNT_STATUS" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Account validation failure message indicating the user's account status is invalid.",
            "enum" : [ "Account validations failed for the user." ]
          }
        },
        "description" : "Account validation error indicating the user's account status is invalid or does not meet requirements"
      },
      "Authorization" : {
        "title" : "Authorization",
        "type" : "object",
        "description" : "The authorized payment transaction",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AuthorizationStatus"
        }, {
          "$ref" : "#/components/schemas/AuthorizationAllOf2"
        }, {
          "$ref" : "#/components/schemas/ActivityTimestamps"
        } ]
      },
      "AUTHORIZATIONALREADYCAPTURED1" : {
        "title" : "AUTHORIZATION_ALREADY_CAPTURED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the authorization has already been captured and cannot be processed again.",
            "enum" : [ "AUTHORIZATION_ALREADY_CAPTURED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that the authorization has already been captured and cannot be processed again.",
            "enum" : [ "Authorization has previously been captured." ]
          }
        },
        "description" : "Error indicating that the payment authorization has already been captured and cannot be processed again"
      },
      "REFUNDNOTALLOWED" : {
        "title" : "REFUND_NOT_ALLOWED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a refund is not permitted for this transaction or item.",
            "enum" : [ "REFUND_NOT_ALLOWED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that the captured payment cannot be refunded due to policy restrictions.",
            "enum" : [ "Capture cannot be refunded." ]
          }
        },
        "description" : "Indicates that a captured payment cannot be refunded due to transaction restrictions"
      },
      "TRANSACTIONREFUSED1" : {
        "title" : "TRANSACTION_REFUSED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the transaction was refused, with the fixed value \"TRANSACTION_REFUSED\".",
            "enum" : [ "TRANSACTION_REFUSED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "PayPal's internal controls prevent authorization from being captured.",
            "enum" : [ "PayPal's internal controls prevent authorization from being captured." ]
          }
        },
        "description" : "Transaction refused due to PayPal's internal controls preventing authorization capture"
      },
      "SellerReceivableBreakdown" : {
        "title" : "Seller Receivable Breakdown",
        "required" : [ "gross_amount" ],
        "type" : "object",
        "properties" : {
          "platform_fees" : {
            "maxItems" : 1,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of platform or partner fees, commissions, or brokerage fees that associated with the captured payment",
            "items" : {
              "$ref" : "#/components/schemas/PlatformFee"
            },
            "x-ballerina-name-ignore" : "platformFees",
            "x-ballerina-name" : "platformFees"
          },
          "exchange_rate" : {
            "description" : "Exchange rate applied to convert currency amounts in the seller receivable breakdown",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ExchangeRate"
            } ],
            "x-ballerina-name-ignore" : "exchangeRate",
            "x-ballerina-name" : "exchangeRate"
          },
          "paypal_fee" : {
            "description" : "The PayPal fee amount deducted from the transaction, expressed as a monetary value",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "paypalFee",
            "x-ballerina-name" : "paypalFee"
          },
          "gross_amount" : {
            "description" : "The total gross amount before deductions, represented as a monetary value",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "grossAmount",
            "x-ballerina-name" : "grossAmount"
          },
          "paypal_fee_in_receivable_currency" : {
            "description" : "The PayPal fee amount expressed in the receivable currency for this seller transaction",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "paypalFeeInReceivableCurrency",
            "x-ballerina-name" : "paypalFeeInReceivableCurrency"
          },
          "net_amount" : {
            "description" : "The net amount due to the seller after deducting fees and adjustments from the total receivable",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "netAmount",
            "x-ballerina-name" : "netAmount"
          },
          "receivable_amount" : {
            "description" : "Amount due to the seller, representing the total receivable in monetary terms",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "receivableAmount",
            "x-ballerina-name" : "receivableAmount"
          }
        },
        "description" : "The detailed breakdown of the capture activity. This is not available for transactions that are in pending state"
      },
      "PAYEEACCOUNTLOCKEDORCLOSED" : {
        "title" : "PAYEE_ACCOUNT_LOCKED_OR_CLOSED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the payee's account is either locked or closed, preventing transaction completion.",
            "enum" : [ "PAYEE_ACCOUNT_LOCKED_OR_CLOSED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that the transaction failed because the payee's account is locked or closed.",
            "enum" : [ "Transaction could not complete because payee account is locked or closed." ]
          }
        },
        "description" : "Transaction cannot complete due to payee account being locked or closed"
      },
      "AUTHORIZATIONVOIDED" : {
        "title" : "AUTHORIZATION_VOIDED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that an authorization has been voided, with the fixed value \"AUTHORIZATION_VOIDED\".",
            "enum" : [ "AUTHORIZATION_VOIDED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Status message indicating an authorization has been voided and cannot be captured or reauthorized.",
            "enum" : [ "A voided authorization cannot be captured or reauthorized. " ]
          }
        },
        "description" : "A voided authorization cannot be captured or reauthorized"
      },
      "MISSINGREQUIREDPARAMETER1" : {
        "title" : "MISSING_REQUIRED_PARAMETER",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a required parameter was not provided in the request.",
            "enum" : [ "MISSING_REQUIRED_PARAMETER" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating that a mandatory field or parameter was not provided in the request.",
            "enum" : [ "A required field / parameter is missing." ]
          }
        },
        "description" : "Error indicating a required field or parameter was not provided in the request"
      },
      "PAYERACCOUNTLOCKEDORCLOSED1" : {
        "title" : "PAYER_ACCOUNT_LOCKED_OR_CLOSED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the payer's account is either locked or closed, preventing transaction processing.",
            "enum" : [ "PAYER_ACCOUNT_LOCKED_OR_CLOSED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Account is locked or closed and cannot be used for this transaction.",
            "enum" : [ "The payer account cannot be used for this transaction." ]
          }
        },
        "description" : "Indicates the payer's account is locked or closed and cannot be used for the transaction"
      },
      "PAYERACCOUNTLOCKEDORCLOSED2" : {
        "title" : "PAYER_ACCOUNT_LOCKED_OR_CLOSED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "enum" : [ "PAYER_ACCOUNT_LOCKED_OR_CLOSED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "The payer account cannot be used for this transaction.",
            "enum" : [ "The payer account cannot be used for this transaction." ]
          }
        },
        "description" : "Indicates the payer's account is locked or closed and cannot be used for the transaction"
      },
      "DECIMALSNOTSUPPORTED" : {
        "title" : "DECIMALS_NOT_SUPPORTED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Error code indicating that decimal values are not supported in this context.",
            "enum" : [ "DECIMALS_NOT_SUPPORTED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating the currency does not support decimal values with reference link.",
            "enum" : [ "Currency does not support decimals. Please refer to https://developer.paypal.com/docs/api/reference/currency-codes/ for more information." ]
          }
        },
        "description" : "Error indicating the specified currency does not support decimal values in monetary amounts"
      },
      "NotFoundErrorResponse" : {
        "description" : "Standard HTTP 404 error response indicating the requested resource could not be found",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error404"
        }, {
          "$ref" : "#/components/schemas/NotFound"
        } ]
      },
      "MISSINGREQUIREDPARAMETER2" : {
        "title" : "MISSING_REQUIRED_PARAMETER",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a required parameter is missing from the request.",
            "enum" : [ "MISSING_REQUIRED_PARAMETER" ]
          },
          "description" : {
            "type" : "string",
            "description" : "A descriptive text explaining the missing required parameter and its expected usage."
          }
        },
        "description" : "Error indicating a required parameter was not provided in the API request"
      },
      "Error400" : {
        "title" : "Bad Request Error",
        "type" : "object",
        "properties" : {
          "debug_id" : {
            "type" : "string",
            "description" : "The PayPal internal ID. Used for correlation purposes",
            "x-ballerina-name-ignore" : "debugId",
            "x-ballerina-name" : "debugId"
          },
          "name" : {
            "type" : "string",
            "description" : "Error code indicating the request contains invalid parameters or formatting",
            "enum" : [ "INVALID_REQUEST" ]
          },
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information providing specific context about validation or request issues",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetails"
            }
          },
          "links" : {
            "maxItems" : 10000,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS)",
            "items" : {
              "$ref" : "#/components/schemas/ErrorLinkDescription"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "Error message indicating the request is malformed, syntactically incorrect, or violates schema",
            "enum" : [ "Request is not well-formed, syntactically incorrect, or violates schema." ]
          }
        },
        "description" : "Request is not well-formed, syntactically incorrect, or violates schema"
      },
      "Error401" : {
        "title" : "Unauthorized Error",
        "type" : "object",
        "properties" : {
          "debug_id" : {
            "type" : "string",
            "description" : "The PayPal internal ID. Used for correlation purposes",
            "x-ballerina-name-ignore" : "debugId",
            "x-ballerina-name" : "debugId"
          },
          "name" : {
            "type" : "string",
            "description" : "Error code indicating authentication credentials are missing, invalid, or expired",
            "enum" : [ "AUTHENTICATION_FAILURE" ]
          },
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information providing specific context about the 401 authentication failure",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetails"
            }
          },
          "links" : {
            "maxItems" : 10000,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS)",
            "items" : {
              "$ref" : "#/components/schemas/ErrorLinkDescription"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "Error message indicating authentication failure due to missing or invalid credentials",
            "enum" : [ "Authentication failed due to missing authorization header, or invalid authentication credentials." ]
          }
        },
        "description" : "Authentication failed due to missing Authorization header, or invalid authentication credentials"
      },
      "PAYERCANNOTPAY1" : {
        "title" : "PAYER_CANNOT_PAY",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates the payer is unable to complete the payment transaction.",
            "enum" : [ "PAYER_CANNOT_PAY" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates payer is unable to complete the transaction and requires alternative payment methods.",
            "enum" : [ "Payer cannot pay for this transaction. Please contact the payer to find other ways to pay for this transaction." ]
          }
        },
        "description" : "Indicates the payer cannot complete the transaction and should be contacted for alternative payment methods"
      },
      "Error403" : {
        "title" : "Not Authorized Error",
        "type" : "object",
        "properties" : {
          "debug_id" : {
            "type" : "string",
            "description" : "The PayPal internal ID. Used for correlation purposes",
            "x-ballerina-name-ignore" : "debugId",
            "x-ballerina-name" : "debugId"
          },
          "name" : {
            "type" : "string",
            "description" : "Error code indicating the user is not authorized to perform the requested action",
            "enum" : [ "NOT_AUTHORIZED" ]
          },
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information providing specific context about the 403 Forbidden error",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetails"
            }
          },
          "links" : {
            "maxItems" : 10000,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS)",
            "items" : {
              "$ref" : "#/components/schemas/ErrorLinkDescription"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "Error message indicating the request failed due to insufficient user permissions",
            "enum" : [ "Authorization failed due to insufficient permissions." ]
          }
        },
        "description" : "The client is not authorized to access this resource, although it may have valid credentials. "
      },
      "Error415" : {
        "title" : "Unsupported Media Type Error",
        "type" : "object",
        "properties" : {
          "debug_id" : {
            "type" : "string",
            "description" : "The PayPal internal ID. Used for correlation purposes",
            "x-ballerina-name-ignore" : "debugId",
            "x-ballerina-name" : "debugId"
          },
          "name" : {
            "type" : "string",
            "description" : "Error type identifier indicating the request media type is not supported by the server",
            "enum" : [ "UNSUPPORTED_MEDIA_TYPE" ]
          },
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information providing specific context about the 415 Unsupported Media Type error",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetails"
            }
          },
          "links" : {
            "maxItems" : 10000,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS)",
            "items" : {
              "$ref" : "#/components/schemas/ErrorLinkDescription"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "Error message indicating the server cannot process the request's media type format",
            "enum" : [ "The server does not support the request payload's media type." ]
          }
        },
        "description" : "The server does not support the request payload's media type"
      },
      "PAYEEACCOUNTLOCKEDORCLOSED1" : {
        "title" : "PAYEE_ACCOUNT_LOCKED_OR_CLOSED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the payee's account is either locked or closed, preventing transaction completion.",
            "enum" : [ "PAYEE_ACCOUNT_LOCKED_OR_CLOSED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that the transaction failed due to the payee's account being locked or closed.",
            "enum" : [ "Transaction could not complete because payee account is locked or closed." ]
          }
        },
        "description" : "Indicates the transaction failed because the recipient's account is locked or closed"
      },
      "PREVIOUSLYVOIDED" : {
        "title" : "PREVIOUSLY_VOIDED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the transaction or document has been previously voided in the system.",
            "enum" : [ "PREVIOUSLY_VOIDED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that an authorization was already voided and cannot be voided again.",
            "enum" : [ "Authorization has been previously voided and hence cannot be voided again." ]
          }
        },
        "description" : "Indicates that an authorization has already been voided and cannot be voided again"
      },
      "PLATFORMFEENOTENABLED" : {
        "title" : "PLATFORM_FEE_NOT_ENABLED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that platform fee functionality is not enabled for this account or transaction.",
            "enum" : [ "PLATFORM_FEE_NOT_ENABLED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating the account is not configured to process refunds with platform fees.",
            "enum" : [ "The API Caller account is not setup to be able to process refunds with 'platform_fees'. Please contact your Account Manager. This feature is useful when you want to contribute a portion of the 'platform_fees' you had capture as part of the refund being processed." ]
          }
        },
        "description" : "Account not configured to process refunds with platform fees. Contact Account Manager to enable"
      },
      "MAXCAPTUREAMOUNTEXCEEDED" : {
        "title" : "MAX_CAPTURE_AMOUNT_EXCEEDED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Error code indicating the capture amount exceeds the maximum allowed limit.",
            "enum" : [ "MAX_CAPTURE_AMOUNT_EXCEEDED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message when capture amount exceeds the configured overage limit for the order.",
            "enum" : [ "Capture amount exceeds allowable limit. Please contact customer service or your account manager to request the change to your overage limit. The default overage limit is 115%, which allows the sum of all captures to be up to 115% of the order amount. The ability to over capture is subjected to regulatory approvals." ]
          }
        },
        "description" : "Capture amount exceeds the allowable limit (default 115% of order amount)"
      },
      "CANNOTBEZEROORNEGATIVE1" : {
        "title" : "CANNOT_BE_ZERO_OR_NEGATIVE",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a value cannot be zero or negative, with the fixed value \"CANNOT_BE_ZERO_OR_NEGATIVE\".",
            "enum" : [ "CANNOT_BE_ZERO_OR_NEGATIVE" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Validation message indicating the value must be greater than zero with max two decimal places.",
            "enum" : [ "Must be greater than zero. If the currency supports decimals, only two decimal place precision is supported." ]
          }
        },
        "description" : "Must be greater than zero. If the currency supports decimals, only two decimal place precision is supported"
      },
      "AuthorizationsVoid422" : {
        "properties" : {
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information for failed authorization void operations.",
            "items" : {
              "$ref" : "#/components/schemas/Authorizationsvoid422Details"
            }
          }
        },
        "description" : "Error response for invalid authorization void requests with detailed validation issues"
      },
      "404Details" : {
        "description" : "Details about invalid resource identifier when a 404 error occurs",
        "anyOf" : [ {
          "$ref" : "#/components/schemas/INVALIDRESOURCEID"
        } ]
      },
      "CANNOTBEZEROORNEGATIVE2" : {
        "title" : "CANNOT_BE_ZERO_OR_NEGATIVE",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a value cannot be zero or negative, with the specific issue type being \"CANNOT_BE_ZERO_OR_NEGATIVE\".",
            "enum" : [ "CANNOT_BE_ZERO_OR_NEGATIVE" ]
          },
          "description" : {
            "type" : "string",
            "description" : "A string value that must be greater than zero and cannot be negative."
          }
        },
        "description" : "Validation error indicating a field value cannot be zero or negative and must be a positive number"
      },
      "PAYERACCOUNTLOCKEDORCLOSED" : {
        "title" : "PAYER_ACCOUNT_LOCKED_OR_CLOSED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates the payer's account is either locked or closed, preventing transaction processing.",
            "enum" : [ "PAYER_ACCOUNT_LOCKED_OR_CLOSED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Account is locked or closed and cannot be used for this transaction.",
            "enum" : [ "The payer account cannot be used for this transaction." ]
          }
        },
        "description" : "The payer account is locked or closed and cannot be used for this transaction"
      },
      "400Details" : {
        "description" : "Error details for HTTP 400 Bad Request responses, including invalid parameters, missing fields, or syntax errors",
        "anyOf" : [ {
          "$ref" : "#/components/schemas/INVALIDPARAMETERVALUE"
        }, {
          "$ref" : "#/components/schemas/MISSINGREQUIREDPARAMETER"
        }, {
          "$ref" : "#/components/schemas/INVALIDSTRINGLENGTH"
        }, {
          "$ref" : "#/components/schemas/INVALIDSTRINGMAXLENGTH"
        }, {
          "$ref" : "#/components/schemas/INVALIDPARAMETERSYNTAX"
        } ]
      },
      "AUTHORIZATIONDENIED" : {
        "title" : "AUTHORIZATION_DENIED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the request was denied due to insufficient authorization permissions.",
            "enum" : [ "AUTHORIZATION_DENIED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating that a denied authorization cannot be captured for processing.",
            "enum" : [ "An denied authorization cannot be captured." ]
          }
        },
        "description" : "Error indicating that a denied authorization cannot be captured for processing"
      },
      "PAYEEACCOUNTLOCKEDORCLOSED2" : {
        "title" : "PAYEE_ACCOUNT_LOCKED_OR_CLOSED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the payee's account is either locked or closed, preventing transaction completion.",
            "enum" : [ "PAYEE_ACCOUNT_LOCKED_OR_CLOSED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that the transaction failed due to the payee's account being locked or closed.",
            "enum" : [ "Transaction could not complete because payee account is locked or closed." ]
          }
        },
        "description" : "Transaction cannot complete because the payee's account is locked or closed"
      },
      "CAPTUREFULLYREFUNDED" : {
        "title" : "CAPTURE_FULLY_REFUNDED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a capture has been fully refunded, with the fixed value \"CAPTURE_FULLY_REFUNDED\".",
            "enum" : [ "CAPTURE_FULLY_REFUNDED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that the capture transaction has been completely refunded with no remaining balance.",
            "enum" : [ "The capture has already been fully refunded" ]
          }
        },
        "description" : "Indicates that a payment capture has already been completely refunded and no further refunds are possible"
      },
      "CaptureRequestAllOf2" : {
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Money"
          },
          "invoice_id" : {
            "maxLength" : 127,
            "type" : "string",
            "description" : "The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives."
          },
          "final_capture" : {
            "type" : "boolean",
            "description" : "Indicates whether you can make additional captures against the authorized payment. Set to `true` if you do not intend to capture additional payments against the authorization. Set to `false` if you intend to capture additional payments against the authorization.",
            "default" : false
          },
          "payment_instruction" : {
            "$ref" : "#/components/schemas/PaymentInstruction"
          },
          "note_to_payer" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "An informational note about this settlement. Appears in both the payer's transaction history and the emails that the payer receives."
          },
          "soft_descriptor" : {
            "maxLength" : 22,
            "type" : "string",
            "description" : "The payment descriptor on the payer's account statement."
          }
        },
        "description" : "Additional capture request parameters including amount, invoice details, and payment instructions"
      },
      "RefundRequest" : {
        "title" : "Refund Request",
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Money"
          },
          "custom_id" : {
            "maxLength" : 127,
            "minLength" : 1,
            "pattern" : "^.*$",
            "type" : "string",
            "description" : "The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports. The pattern is defined by an external party and supports Unicode",
            "x-ballerina-name-ignore" : "customId",
            "x-ballerina-name" : "customId"
          },
          "invoice_id" : {
            "maxLength" : 127,
            "minLength" : 1,
            "pattern" : "^.*$",
            "type" : "string",
            "description" : "The API caller-provided external invoice ID for this order. The pattern is defined by an external party and supports Unicode",
            "x-ballerina-name-ignore" : "invoiceId",
            "x-ballerina-name" : "invoiceId"
          },
          "note_to_payer" : {
            "maxLength" : 255,
            "minLength" : 1,
            "pattern" : "^.*$",
            "type" : "string",
            "description" : "The reason for the refund. Appears in both the payer's transaction history and the emails that the payer receives. The pattern is defined by an external party and supports Unicode",
            "x-ballerina-name-ignore" : "noteToPayer",
            "x-ballerina-name" : "noteToPayer"
          },
          "payment_instruction" : {
            "description" : "Payment instruction details specifying how the refund should be processed and delivered to the recipient",
            "allOf" : [ {
              "$ref" : "#/components/schemas/PaymentInstruction2"
            } ],
            "x-ballerina-name-ignore" : "paymentInstruction",
            "x-ballerina-name" : "paymentInstruction"
          }
        },
        "description" : "Refunds a captured payment, by ID. For a full refund, include an empty request body. For a partial refund, include an <code>amount</code> object in the request body"
      },
      "INVALIDSTRINGMAXLENGTH" : {
        "title" : "INVALID_STRING_MAX_LENGTH",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a validation error where a string value exceeds the maximum allowed length.",
            "enum" : [ "INVALID_STRING_MAX_LENGTH" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating that a field value exceeds the maximum allowed length.",
            "enum" : [ "The value of a field is too long." ]
          }
        },
        "description" : "Validation error indicating that a string field value exceeds the maximum allowed length"
      },
      "422Details" : {
        "description" : "Error details for 422 Unprocessable Entity responses, containing specific validation or business rule violation information",
        "anyOf" : [ {
          "$ref" : "#/components/schemas/INVALIDCURRENCYCODE"
        }, {
          "$ref" : "#/components/schemas/CANNOTBEZEROORNEGATIVE"
        }, {
          "$ref" : "#/components/schemas/DECIMALPRECISION"
        }, {
          "$ref" : "#/components/schemas/DECIMALSNOTSUPPORTED"
        }, {
          "$ref" : "#/components/schemas/TRANSACTIONREFUSED"
        }, {
          "$ref" : "#/components/schemas/AUTHORIZATIONVOIDED"
        }, {
          "$ref" : "#/components/schemas/MAXCAPTURECOUNTEXCEEDED"
        }, {
          "$ref" : "#/components/schemas/DUPLICATEINVOICEID"
        }, {
          "$ref" : "#/components/schemas/AUTHCAPTURECURRENCYMISMATCH"
        }, {
          "$ref" : "#/components/schemas/PAYERCANNOTPAY"
        }, {
          "$ref" : "#/components/schemas/AUTHORIZATIONDENIED"
        }, {
          "$ref" : "#/components/schemas/AUTHORIZATIONEXPIRED"
        }, {
          "$ref" : "#/components/schemas/AUTHORIZATIONALREADYCAPTURED"
        }, {
          "$ref" : "#/components/schemas/MAXCAPTUREAMOUNTEXCEEDED"
        }, {
          "$ref" : "#/components/schemas/TRANSACTIONREFUSED1"
        }, {
          "$ref" : "#/components/schemas/PAYEEACCOUNTLOCKEDORCLOSED"
        }, {
          "$ref" : "#/components/schemas/PAYERACCOUNTLOCKEDORCLOSED"
        }, {
          "$ref" : "#/components/schemas/PAYEEACCOUNTRESTRICTED"
        } ]
      },
      "REFUNDISRESTRICTED" : {
        "title" : "REFUND_IS_RESTRICTED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a refund cannot be processed due to policy or system restrictions.",
            "enum" : [ "REFUND_IS_RESTRICTED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates refund must be processed by the original API caller that captured the transaction.",
            "enum" : [ "This refund can only be processed by the API caller that had 'captured' the transaction. If you facilitate your transactions via a platform/partner, please initiate a refund through them." ]
          }
        },
        "description" : "Refund restricted to the API caller that originally captured the transaction"
      },
      "UnprocessableContentError" : {
        "description" : "Error response for requests with valid syntax but semantically incorrect or unprocessable content",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error422"
        }, {
          "$ref" : "#/components/schemas/UnprocessableContent"
        } ]
      },
      "PaymentInstruction2" : {
        "title" : "Payment Instruction",
        "type" : "object",
        "properties" : {
          "platform_fees" : {
            "maxItems" : 1,
            "minItems" : 0,
            "type" : "array",
            "description" : "Specifies the amount that the API caller will contribute to the refund being processed. The amount needs to be lower than platform_fees amount originally captured or the amount that is remaining if multiple refunds have been processed. This field is only applicable to merchants that have been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. Please speak to your account manager if you want to use this capability",
            "items" : {
              "$ref" : "#/components/schemas/PlatformFee"
            },
            "x-ballerina-name-ignore" : "platformFees",
            "x-ballerina-name" : "platformFees"
          }
        },
        "description" : "Any additional payments instructions during refund payment processing. This object is only applicable to merchants that have been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. Please speak to your account manager if you want to use this capability"
      },
      "UnprocessableContent" : {
        "properties" : {
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information for unprocessable content validation failures.",
            "items" : {
              "$ref" : "#/components/schemas/422Details"
            }
          }
        },
        "description" : "Error response containing validation details when request content cannot be processed due to semantic errors"
      },
      "TRANSACTIONDISPUTED" : {
        "title" : "TRANSACTION_DISPUTED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates the transaction has been disputed by the cardholder or financial institution.",
            "enum" : [ "TRANSACTION_DISPUTED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating partial refunds are blocked due to an open dispute case requiring Resolution Center review.",
            "enum" : [ "Partial refunds cannot be offered at this time because there is an open case on this transaction. Visit the PayPal Resolution Center to review this case." ]
          }
        },
        "description" : "Transaction cannot be partially refunded due to an open dispute case in PayPal Resolution Center"
      },
      "PAYEEACCOUNTRESTRICTED1" : {
        "title" : "PAYEE_ACCOUNT_RESTRICTED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the payee's account has restrictions preventing the transaction from being processed.",
            "enum" : [ "PAYEE_ACCOUNT_RESTRICTED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that the payee account has restrictions preventing normal transaction processing.",
            "enum" : [ "Payee account is restricted." ]
          }
        },
        "description" : "Indicates that the payee's account has restrictions preventing payment processing"
      },
      "PAYEEACCOUNTRESTRICTED2" : {
        "title" : "PAYEE_ACCOUNT_RESTRICTED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the payee's account has restrictions preventing the transaction from being processed.",
            "enum" : [ "PAYEE_ACCOUNT_RESTRICTED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that the payee account has restrictions preventing normal transaction processing.",
            "enum" : [ "Payee account is restricted." ]
          }
        },
        "description" : "Indicates that the payee's account has restrictions preventing transaction processing"
      },
      "Email" : {
        "maxLength" : 254,
        "minLength" : 3,
        "pattern" : "(?:[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*|(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])",
        "type" : "string",
        "description" : "The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>",
        "format" : "merchant_common_email_address_v2"
      },
      "AccountId" : {
        "title" : "PayPal Account Identifier",
        "maxLength" : 13,
        "minLength" : 13,
        "pattern" : "^[2-9A-HJ-NP-Z]{13}$",
        "type" : "string",
        "description" : "The account identifier for a PayPal account",
        "format" : "ppaas_payer_id_v3"
      },
      "REAUTHORIZATIONNOTSUPPORTED" : {
        "title" : "REAUTHORIZATION_NOT_SUPPORTED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that reauthorization is not supported for this transaction or payment method.",
            "enum" : [ "REAUTHORIZATION_NOT_SUPPORTED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating reauthorization is not supported for this authorization type.",
            "enum" : [ "A reauthorize cannot be attempted on an authorization_id that is the result of a prior reauthorization or on an authorization made on an Order saved using the `v2/orders/id/save` API." ]
          }
        },
        "description" : "Error indicating reauthorization is not supported for previously reauthorized or saved order authorizations"
      },
      "AuthorizationAllOf2" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The PayPal-generated ID for the authorized payment.",
            "readOnly" : true
          },
          "amount" : {
            "$ref" : "#/components/schemas/Money"
          },
          "invoice_id" : {
            "type" : "string",
            "description" : "The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.",
            "readOnly" : true
          },
          "custom_id" : {
            "maxLength" : 127,
            "type" : "string",
            "description" : "The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports."
          },
          "network_transaction_reference" : {
            "$ref" : "#/components/schemas/NetworkTransactionReference"
          },
          "seller_protection" : {
            "$ref" : "#/components/schemas/SellerProtection"
          },
          "expiration_time" : {
            "$ref" : "#/components/schemas/DateTime"
          },
          "links" : {
            "type" : "array",
            "description" : "An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/LinkDescription"
            }
          }
        },
        "description" : "Contains authorization-specific details including ID, amount, invoice information, seller protection, expiration, and related links"
      },
      "REFUNDFAILEDINSUFFICIENTFUNDS" : {
        "title" : "REFUND_FAILED_INSUFFICIENT_FUNDS",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a refund failure due to insufficient funds in the source account.",
            "enum" : [ "REFUND_FAILED_INSUFFICIENT_FUNDS" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating refund failure due to insufficient funds in PayPal or linked bank account.",
            "enum" : [ "Capture could not be refunded due to insufficient funds. Please check to see if you have sufficient funds in your PayPal account or if the bank account linked to your PayPal account is verified and has sufficient funds." ]
          }
        },
        "description" : "Capture refund failed due to insufficient funds in PayPal account or linked bank account"
      },
      "AUTHORIZATIONALREADYCAPTURED" : {
        "title" : "AUTHORIZATION_ALREADY_CAPTURED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the authorization has already been captured and cannot be processed again.",
            "enum" : [ "AUTHORIZATION_ALREADY_CAPTURED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that the authorization has already been captured and cannot be processed again.",
            "enum" : [ "Authorization has previously been captured." ]
          }
        },
        "description" : "Authorization has already been captured and cannot be processed again"
      },
      "BadRequestErrorResponse" : {
        "description" : "HTTP 400 Bad Request error response containing error details and bad request information",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error400"
        }, {
          "$ref" : "#/components/schemas/BadRequest"
        } ]
      },
      "AuthorizationStatus" : {
        "title" : "Authorization Status",
        "type" : "object",
        "properties" : {
          "status_details" : {
            "description" : "Additional details and context information about the current authorization status",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AuthorizationStatusDetails"
            } ],
            "x-ballerina-name-ignore" : "statusDetails",
            "x-ballerina-name" : "statusDetails"
          },
          "status" : {
            "type" : "string",
            "description" : "The status for the authorized payment",
            "readOnly" : true,
            "enum" : [ "CREATED", "CAPTURED", "DENIED", "PARTIALLY_CAPTURED", "VOIDED", "PENDING" ]
          }
        },
        "description" : "The status fields for an authorized payment"
      },
      "PAYEEACCOUNTRESTRICTED" : {
        "title" : "PAYEE_ACCOUNT_RESTRICTED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the payee's account has restrictions preventing the transaction from being processed.",
            "enum" : [ "PAYEE_ACCOUNT_RESTRICTED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that the payee account has restrictions preventing normal transactions.",
            "enum" : [ "Payee account is restricted." ]
          }
        },
        "description" : "Indicates that the payee's account has restrictions that prevent processing the payment transaction"
      },
      "CaptureStatusDetails" : {
        "title" : "Capture Status Details",
        "type" : "object",
        "properties" : {
          "reason" : {
            "maxLength" : 64,
            "minLength" : 1,
            "pattern" : "^[A-Z_]+$",
            "type" : "string",
            "description" : "The reason why the captured payment status is `PENDING` or `DENIED`",
            "enum" : [ "BUYER_COMPLAINT", "CHARGEBACK", "ECHECK", "INTERNATIONAL_WITHDRAWAL", "OTHER", "PENDING_REVIEW", "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION", "REFUNDED", "TRANSACTION_APPROVED_AWAITING_FUNDING", "UNILATERAL", "VERIFICATION_REQUIRED" ]
          }
        },
        "description" : "The details of the captured payment status"
      },
      "ErrorDefault" : {
        "description" : "The default error response",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/Error400"
        }, {
          "$ref" : "#/components/schemas/Error401"
        }, {
          "$ref" : "#/components/schemas/Error403"
        }, {
          "$ref" : "#/components/schemas/Error404"
        }, {
          "$ref" : "#/components/schemas/Error409"
        }, {
          "$ref" : "#/components/schemas/Error415"
        }, {
          "$ref" : "#/components/schemas/Error422"
        }, {
          "$ref" : "#/components/schemas/Error500"
        }, {
          "$ref" : "#/components/schemas/Error503"
        } ]
      },
      "CANNOTBENEGATIVE" : {
        "title" : "CANNOT_BE_NEGATIVE",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a value cannot be negative when a negative number was provided.",
            "enum" : [ "CANNOT_BE_NEGATIVE" ]
          },
          "description" : {
            "type" : "string",
            "description" : "A descriptive text field that provides details about the item or entity being described."
          }
        },
        "description" : "Validation error indicating a field value cannot be negative when a negative number was provided"
      },
      "PayeeBase" : {
        "title" : "Merchant Base",
        "type" : "object",
        "properties" : {
          "email_address" : {
            "description" : "Email address of the payee for communication and identification purposes",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Email"
            } ],
            "x-ballerina-name-ignore" : "emailAddress",
            "x-ballerina-name" : "emailAddress"
          },
          "merchant_id" : {
            "description" : "Unique identifier for the merchant account associated with the payee",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AccountId"
            } ],
            "x-ballerina-name-ignore" : "merchantId",
            "x-ballerina-name" : "merchantId"
          }
        },
        "description" : "The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee"
      },
      "INVALIDSTRINGLENGTH" : {
        "title" : "INVALID_STRING_LENGTH",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a string validation error where the provided value exceeds allowed length limits.",
            "enum" : [ "INVALID_STRING_LENGTH" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating a field value does not meet the required minimum or maximum length constraints.",
            "enum" : [ "The value of a field is either too short or too long." ]
          }
        },
        "description" : "Indicates a field value that exceeds the minimum or maximum allowed string length constraints"
      },
      "DUPLICATEINVOICEID" : {
        "title" : "DUPLICATE_INVOICE_ID",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Identifies the specific validation issue when a duplicate invoice ID is detected in the system.",
            "enum" : [ "DUPLICATE_INVOICE_ID" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Invoice ID already exists - potential duplicate transaction detected.",
            "enum" : [ "Requested invoice_id has been previously captured. Possible duplicate transaction." ]
          }
        },
        "description" : "Indicates a duplicate invoice ID that has been previously captured, suggesting a possible duplicate transaction"
      },
      "Error422" : {
        "title" : "Unprocessable Entity Error",
        "type" : "object",
        "properties" : {
          "debug_id" : {
            "type" : "string",
            "description" : "The PayPal internal ID. Used for correlation purposes",
            "x-ballerina-name-ignore" : "debugId",
            "x-ballerina-name" : "debugId"
          },
          "name" : {
            "type" : "string",
            "description" : "Error type identifier indicating the request entity could not be processed due to validation issues",
            "enum" : [ "UNPROCESSABLE_ENTITY" ]
          },
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information providing specific validation or processing failure descriptions",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetails"
            }
          },
          "links" : {
            "maxItems" : 10000,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS)",
            "items" : {
              "$ref" : "#/components/schemas/ErrorLinkDescription"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "Error message indicating the request failed due to semantic issues or business validation errors",
            "enum" : [ "The requested action could not be performed, semantically incorrect, or failed business validation." ]
          }
        },
        "description" : "The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request"
      },
      "CapturesRefund422" : {
        "properties" : {
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information for failed capture refund requests.",
            "items" : {
              "$ref" : "#/components/schemas/Capturesrefund422Details"
            }
          }
        },
        "description" : "Error response for capture refund requests with validation or business rule failures (HTTP 422)"
      },
      "INVALIDSTRINGLENGTH2" : {
        "title" : "INVALID_STRING_LENGTH",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a string length validation error with value \"INVALID_STRING_LENGTH\".",
            "enum" : [ "INVALID_STRING_LENGTH" ]
          },
          "description" : {
            "type" : "string",
            "description" : "A string value that does not meet the required length constraints for this field."
          }
        },
        "description" : "Error indicating a string value exceeds the maximum allowed length or falls below the minimum required length"
      },
      "INVALIDSTRINGMAXLENGTH1" : {
        "title" : "INVALID_STRING_MAX_LENGTH",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a string value exceeds the maximum allowed length constraint.",
            "enum" : [ "INVALID_STRING_MAX_LENGTH" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating that a field value exceeds the maximum allowed length.",
            "enum" : [ "The value of a field is too long." ]
          }
        },
        "description" : "Error indicating a field value exceeds the maximum allowed string length"
      },
      "AuthorizationStatusDetails" : {
        "title" : "Auhorization Status Details",
        "type" : "object",
        "properties" : {
          "reason" : {
            "maxLength" : 24,
            "minLength" : 1,
            "pattern" : "^[A-Z_]+$",
            "type" : "string",
            "description" : "The reason why the authorized status is `PENDING`",
            "enum" : [ "PENDING_REVIEW" ]
          }
        },
        "description" : "The details of the authorized payment status"
      },
      "MISSINGREQUIREDPARAMETER" : {
        "title" : "MISSING_REQUIRED_PARAMETER",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a required parameter was not provided in the request.",
            "enum" : [ "MISSING_REQUIRED_PARAMETER" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating that a mandatory field or parameter was not provided in the request.",
            "enum" : [ "A required field / parameter is missing." ]
          }
        },
        "description" : "Error indicating a required field or parameter was not provided in the request"
      },
      "AuthorizationsReauthorize422" : {
        "properties" : {
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information for failed reauthorization attempts.",
            "items" : {
              "$ref" : "#/components/schemas/Authorizationsreauthorize422Details"
            }
          }
        },
        "description" : "Error response for authorization reauthorization failure containing validation details"
      },
      "403Details" : {
        "description" : "Details about permission denied errors when access to a resource is forbidden (HTTP 403)",
        "anyOf" : [ {
          "$ref" : "#/components/schemas/PERMISSIONDENIED"
        } ]
      },
      "INVALIDSTRINGLENGTH1" : {
        "title" : "INVALID_STRING_LENGTH",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a validation error where a string field does not meet the required length constraints.",
            "enum" : [ "INVALID_STRING_LENGTH" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating a field value does not meet the required length constraints.",
            "enum" : [ "The value of a field is either too short or too long." ]
          }
        },
        "description" : "Validation error indicating a field value exceeds minimum or maximum length requirements"
      },
      "401Details" : {
        "description" : "Details about invalid account status causing 401 unauthorized error",
        "anyOf" : [ {
          "$ref" : "#/components/schemas/INVALIDACCOUNTSTATUS"
        } ]
      },
      "AuthorizationReauthorizeErrorResponse" : {
        "description" : "Error response returned when authorization reauthorization request fails with a 400 Bad Request status",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error400"
        }, {
          "$ref" : "#/components/schemas/AuthorizationsReauthorize400"
        } ]
      },
      "CANNOTBEVOIDED" : {
        "title" : "CANNOT_BE_VOIDED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the transaction cannot be voided due to system constraints or business rules.",
            "enum" : [ "CANNOT_BE_VOIDED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating that reauthorizations cannot be voided; the original authorization must be voided instead.",
            "enum" : [ "A reauthorization cannot be voided. Please void the original parent authorization." ]
          }
        },
        "description" : "Error indicating a reauthorization cannot be voided; the original parent authorization must be voided instead"
      },
      "AUTHCAPTURECURRENCYMISMATCH" : {
        "title" : "AUTH_CAPTURE_CURRENCY_MISMATCH",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Currency mismatch between authorization and capture transactions.",
            "enum" : [ "AUTH_CAPTURE_CURRENCY_MISMATCH" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating that the capture currency must match the authorization currency.",
            "enum" : [ "Currency of capture must be the same as currency of authorization." ]
          }
        },
        "description" : "Currency mismatch between authorization and capture transactions - both must use the same currency"
      },
      "INVALIDPARAMETERVALUE" : {
        "title" : "INVALID_PARAMETER_VALUE",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Identifies the specific type of invalid parameter value error encountered during request processing.",
            "enum" : [ "INVALID_PARAMETER_VALUE" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that a field contains an invalid value that does not meet the required criteria.",
            "enum" : [ "The value of a field is invalid." ]
          }
        },
        "description" : "Indicates that a field contains an invalid value that doesn't meet the required format or constraints"
      },
      "BadRequest" : {
        "properties" : {
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information providing specific validation or request processing issues.",
            "items" : {
              "$ref" : "#/components/schemas/400Details"
            }
          }
        },
        "description" : "Contains detailed information about validation errors or malformed request parameters"
      },
      "DUPLICATEINVOICEID1" : {
        "title" : "DUPLICATE_INVOICE_ID",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a duplicate invoice ID issue with the fixed value \"DUPLICATE_INVOICE_ID\".",
            "enum" : [ "DUPLICATE_INVOICE_ID" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Invoice ID was previously used to refund a capture.",
            "enum" : [ "Invoice ID was previously used to refund a capture." ]
          }
        },
        "description" : "Indicates when an invoice ID has already been used for refunding a previous capture transaction"
      },
      "409Details" : {
        "description" : "Details for HTTP 409 Conflict response indicating a previous request is still in progress",
        "anyOf" : [ {
          "$ref" : "#/components/schemas/PREVIOUSREQUESTINPROGRESS"
        } ]
      },
      "Authorizationsreauthorize422Details" : {
        "description" : "Error details for authorization reauthorization failures, including currency, amount, account, and transaction status issues",
        "anyOf" : [ {
          "$ref" : "#/components/schemas/INVALIDCURRENCYCODE1"
        }, {
          "$ref" : "#/components/schemas/CANNOTBEZEROORNEGATIVE1"
        }, {
          "$ref" : "#/components/schemas/DECIMALPRECISION1"
        }, {
          "$ref" : "#/components/schemas/DECIMALSNOTSUPPORTED1"
        }, {
          "$ref" : "#/components/schemas/TRANSACTIONREFUSED2"
        }, {
          "$ref" : "#/components/schemas/AUTHORIZATIONVOIDED1"
        }, {
          "$ref" : "#/components/schemas/PAYERCANNOTPAY1"
        }, {
          "$ref" : "#/components/schemas/AUTHORIZATIONALREADYCAPTURED1"
        }, {
          "$ref" : "#/components/schemas/PAYEEACCOUNTLOCKEDORCLOSED1"
        }, {
          "$ref" : "#/components/schemas/PAYERACCOUNTLOCKEDORCLOSED1"
        }, {
          "$ref" : "#/components/schemas/PAYEEACCOUNTRESTRICTED1"
        }, {
          "$ref" : "#/components/schemas/REAUTHORIZATIONNOTSUPPORTED"
        }, {
          "$ref" : "#/components/schemas/AUTHCURRENCYMISMATCH"
        } ]
      },
      "CANNOTBEZEROORNEGATIVE" : {
        "title" : "CANNOT_BE_ZERO_OR_NEGATIVE",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that a value cannot be zero or negative and must be a positive number.",
            "enum" : [ "CANNOT_BE_ZERO_OR_NEGATIVE" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Validation message indicating the value must be greater than zero with max two decimal places.",
            "enum" : [ "Must be greater than zero. If the currency supports decimals, only two decimal place precision is supported." ]
          }
        },
        "description" : "Validation error indicating a value must be greater than zero with up to two decimal places"
      },
      "Conflict" : {
        "properties" : {
          "details" : {
            "type" : "array",
            "description" : "Array of detailed conflict information explaining specific issues that caused the 409 error.",
            "items" : {
              "$ref" : "#/components/schemas/409Details"
            }
          }
        },
        "description" : "A conflict response containing an array of detailed error information about resource conflicts"
      },
      "REFUNDAMOUNTTOOLOW" : {
        "title" : "REFUND_AMOUNT_TOO_LOW",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the refund amount requested is below the minimum allowed threshold.",
            "enum" : [ "REFUND_AMOUNT_TOO_LOW" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error when refund amount becomes zero after currency conversion due to currency mismatch.",
            "enum" : [ "The amount after applying currency conversion is zero and hence the capture cannot be refunded. The currency conversion is required because the currency of the capture is different than the currency in which the amount was settled into the payee account." ]
          }
        },
        "description" : "Refund amount becomes zero after currency conversion, preventing capture refund processing"
      },
      "INVALIDCURRENCYCODE" : {
        "title" : "INVALID_CURRENCY_CODE",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates an invalid currency code error with the value \"INVALID_CURRENCY_CODE\".",
            "enum" : [ "INVALID_CURRENCY_CODE" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating the currency code is invalid or unsupported by PayPal.",
            "enum" : [ "Currency code is invalid or is not currently supported. Please refer https://developer.paypal.com/docs/api/reference/currency-codes/ for list of supported currency codes." ]
          }
        },
        "description" : "Currency code is invalid or not supported. See PayPal currency codes documentation"
      },
      "PENDINGCAPTURE" : {
        "title" : "PENDING_CAPTURE",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a payment capture is pending completion with value \"PENDING_CAPTURE\".",
            "enum" : [ "PENDING_CAPTURE" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Status message indicating refund cannot be processed due to pending e-check/bank capture.",
            "enum" : [ "Cannot initiate a refund as the capture is pending. Capture is typically pending when the payer has funded the transaction using e-check/bank funded." ]
          }
        },
        "description" : "Payment capture is pending, preventing refund initiation (typically for e-check/bank transfers)"
      },
      "UnauthorizedErrorResponse" : {
        "description" : "Error response returned when the request lacks valid authentication credentials (HTTP 401)",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error401"
        }, {
          "$ref" : "#/components/schemas/Unauthorized"
        } ]
      },
      "ActivityTimestamps" : {
        "title" : "Transaction Date and Time Stamps",
        "type" : "object",
        "properties" : {
          "update_time" : {
            "description" : "Timestamp indicating when the activity was last updated or modified",
            "allOf" : [ {
              "$ref" : "#/components/schemas/DateTime"
            } ],
            "x-ballerina-name-ignore" : "updateTime",
            "x-ballerina-name" : "updateTime"
          },
          "create_time" : {
            "description" : "Timestamp indicating when the activity was created, formatted as a DateTime value",
            "allOf" : [ {
              "$ref" : "#/components/schemas/DateTime"
            } ],
            "x-ballerina-name-ignore" : "createTime",
            "x-ballerina-name" : "createTime"
          }
        },
        "description" : "The date and time stamps that are common to authorized payment, captured payment, and refund transactions"
      },
      "PREVIOUSLYCAPTURED" : {
        "title" : "PREVIOUSLY_CAPTURED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the payment or transaction was previously captured and cannot be processed again.",
            "enum" : [ "PREVIOUSLY_CAPTURED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating an authorization cannot be voided because it was already captured.",
            "enum" : [ "Authorization has been previously captured and hence cannot be voided." ]
          }
        },
        "description" : "Indicates an authorization that was previously captured and cannot be voided"
      },
      "PERMISSIONDENIED" : {
        "title" : "PERMISSION_DENIED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a permission denied error with the fixed value \"PERMISSION_DENIED\".",
            "enum" : [ "PERMISSION_DENIED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating the user lacks permission to access or perform operations on the resource.",
            "enum" : [ "You do not have permission to access or perform operations on this resource." ]
          }
        },
        "description" : "Error indicating insufficient permissions to access or perform operations on the requested resource"
      },
      "CaptureAllOf2" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The PayPal-generated ID for the captured payment.",
            "readOnly" : true
          },
          "amount" : {
            "$ref" : "#/components/schemas/Money"
          },
          "invoice_id" : {
            "type" : "string",
            "description" : "The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.",
            "readOnly" : true
          },
          "custom_id" : {
            "maxLength" : 127,
            "type" : "string",
            "description" : "The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports."
          },
          "network_transaction_reference" : {
            "$ref" : "#/components/schemas/NetworkTransactionReference"
          },
          "seller_protection" : {
            "$ref" : "#/components/schemas/SellerProtection"
          },
          "final_capture" : {
            "type" : "boolean",
            "description" : "Indicates whether you can make additional captures against the authorized payment. Set to `true` if you do not intend to capture additional payments against the authorization. Set to `false` if you intend to capture additional payments against the authorization.",
            "readOnly" : true,
            "default" : false
          },
          "seller_receivable_breakdown" : {
            "$ref" : "#/components/schemas/SellerReceivableBreakdown"
          },
          "disbursement_mode" : {
            "$ref" : "#/components/schemas/DisbursementMode"
          },
          "links" : {
            "type" : "array",
            "description" : "An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/LinkDescription"
            }
          },
          "processor_response" : {
            "$ref" : "#/components/schemas/ProcessorResponse"
          }
        },
        "description" : "A captured payment containing transaction details, amounts, IDs, seller protection, and processing information"
      },
      "Capturesrefund400Details" : {
        "description" : "Details for 400 Bad Request errors in capture refund operations, including missing parameters, invalid syntax, or string length violations",
        "anyOf" : [ {
          "$ref" : "#/components/schemas/MISSINGREQUIREDPARAMETER2"
        }, {
          "$ref" : "#/components/schemas/INVALIDPARAMETERSYNTAX2"
        }, {
          "$ref" : "#/components/schemas/INVALIDSTRINGLENGTH2"
        } ]
      },
      "ErrorLinkDescription" : {
        "title" : "Link Description",
        "required" : [ "href", "rel" ],
        "type" : "object",
        "properties" : {
          "method" : {
            "maxLength" : 6,
            "minLength" : 3,
            "pattern" : "^[A-Z]*$",
            "type" : "string",
            "description" : "The HTTP method required to make the related call",
            "enum" : [ "GET", "POST", "PUT", "DELETE", "PATCH" ]
          },
          "rel" : {
            "maxLength" : 100,
            "minLength" : 0,
            "pattern" : "^.*$",
            "type" : "string",
            "description" : "The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml)"
          },
          "href" : {
            "maxLength" : 20000,
            "minLength" : 0,
            "pattern" : "^.*$",
            "type" : "string",
            "description" : "The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call"
          }
        },
        "description" : "The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information"
      },
      "ExchangeRate" : {
        "title" : "Exchange Rate",
        "type" : "object",
        "properties" : {
          "source_currency" : {
            "description" : "The currency code from which the exchange rate conversion is being made",
            "allOf" : [ {
              "$ref" : "#/components/schemas/CurrencyCode"
            } ],
            "x-ballerina-name-ignore" : "sourceCurrency",
            "x-ballerina-name" : "sourceCurrency"
          },
          "target_currency" : {
            "description" : "The currency code to which the exchange rate converts from the base currency",
            "allOf" : [ {
              "$ref" : "#/components/schemas/CurrencyCode"
            } ],
            "x-ballerina-name-ignore" : "targetCurrency",
            "x-ballerina-name" : "targetCurrency"
          },
          "value" : {
            "type" : "string",
            "description" : "The target currency amount. Equivalent to one unit of the source currency. Formatted as integer or decimal value with one to 15 digits to the right of the decimal point"
          }
        },
        "description" : "The exchange rate that determines the amount to convert from one currency to another currency",
        "readOnly" : true
      },
      "NetworkTransactionReference" : {
        "title" : "Network Transaction Reference",
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "date" : {
            "maxLength" : 4,
            "minLength" : 4,
            "pattern" : "^[0-9]+$",
            "type" : "string",
            "description" : "The date that the transaction was authorized by the scheme. This field may not be returned for all networks. MasterCard refers to this field as \"BankNet reference date"
          },
          "acquirer_reference_number" : {
            "maxLength" : 36,
            "minLength" : 1,
            "pattern" : "^[a-zA-Z0-9]+$",
            "type" : "string",
            "description" : "Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks",
            "x-ballerina-name-ignore" : "acquirerReferenceNumber",
            "x-ballerina-name" : "acquirerReferenceNumber"
          },
          "id" : {
            "maxLength" : 36,
            "minLength" : 9,
            "pattern" : "^[a-zA-Z0-9-]+$",
            "type" : "string",
            "description" : "Transaction reference id returned by the scheme. For Visa and Amex, this is the \"Tran id\" field in response. For MasterCard, this is the \"BankNet reference id\" field in response. For Discover, this is the \"NRID\" field in response. The pattern we expect for this field from Visa/Amex/CB/Discover is numeric, Mastercard/BNPP is alphanumeric and Paysecure is alphanumeric with special character -"
          },
          "network" : {
            "$ref" : "#/components/schemas/CardBrand"
          }
        },
        "description" : "Reference values used by the card network to identify a transaction"
      },
      "ProcessorResponse" : {
        "title" : "Processor Response",
        "type" : "object",
        "properties" : {
          "cvv_code" : {
            "type" : "string",
            "description" : "The card verification value code for for Visa, Discover, Mastercard, or American Express",
            "readOnly" : true,
            "enum" : [ "E", "I", "M", "N", "P", "S", "U", "X", "All others", "0", "1", "2", "3", "4" ],
            "x-ballerina-name-ignore" : "cvvCode",
            "x-ballerina-name" : "cvvCode"
          },
          "response_code" : {
            "type" : "string",
            "description" : "Processor response code for the non-PayPal payment processor errors",
            "readOnly" : true,
            "enum" : [ "0000", "00N7", "0100", "0390", "0500", "0580", "0800", "0880", "0890", "0960", "0R00", "1000", "10BR", "1300", "1310", "1312", "1317", "1320", "1330", "1335", "1340", "1350", "1352", "1360", "1370", "1380", "1382", "1384", "1390", "1393", "5100", "5110", "5120", "5130", "5135", "5140", "5150", "5160", "5170", "5180", "5190", "5200", "5210", "5400", "5500", "5650", "5700", "5710", "5800", "5900", "5910", "5920", "5930", "5950", "6300", "7600", "7700", "7710", "7800", "7900", "8000", "8010", "8020", "8030", "8100", "8110", "8220", "9100", "9500", "9510", "9520", "9530", "9540", "9600", "PCNR", "PCVV", "PP06", "PPRN", "PPAD", "PPAB", "PPAE", "PPAG", "PPAI", "PPAR", "PPAU", "PPAV", "PPAX", "PPBG", "PPC2", "PPCE", "PPCO", "PPCR", "PPCT", "PPCU", "PPD3", "PPDC", "PPDI", "PPDV", "PPDT", "PPEF", "PPEL", "PPER", "PPEX", "PPFE", "PPFI", "PPFR", "PPFV", "PPGR", "PPH1", "PPIF", "PPII", "PPIM", "PPIT", "PPLR", "PPLS", "PPMB", "PPMC", "PPMD", "PPNC", "PPNL", "PPNM", "PPNT", "PPPH", "PPPI", "PPPM", "PPQC", "PPRE", "PPRF", "PPRR", "PPS0", "PPS1", "PPS2", "PPS3", "PPS4", "PPS5", "PPS6", "PPSC", "PPSD", "PPSE", "PPTE", "PPTF", "PPTI", "PPTR", "PPTT", "PPTV", "PPUA", "PPUC", "PPUE", "PPUI", "PPUP", "PPUR", "PPVC", "PPVE", "PPVT" ],
            "x-ballerina-name-ignore" : "responseCode",
            "x-ballerina-name" : "responseCode"
          },
          "payment_advice_code" : {
            "type" : "string",
            "description" : "The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes",
            "readOnly" : true,
            "enum" : [ "01", "02", "03", "21" ],
            "x-ballerina-name-ignore" : "paymentAdviceCode",
            "x-ballerina-name" : "paymentAdviceCode"
          },
          "avs_code" : {
            "type" : "string",
            "description" : "The address verification code for Visa, Discover, Mastercard, or American Express transactions",
            "readOnly" : true,
            "enum" : [ "A", "B", "C", "D", "E", "F", "G", "I", "M", "N", "P", "R", "S", "U", "W", "X", "Y", "Z", "Null", "0", "1", "2", "3", "4" ],
            "x-ballerina-name-ignore" : "avsCode",
            "x-ballerina-name" : "avsCode"
          }
        },
        "description" : "The processor response information for payment requests, such as direct credit card transactions"
      },
      "LinkDescription" : {
        "title" : "Link Description",
        "required" : [ "href", "rel" ],
        "type" : "object",
        "properties" : {
          "method" : {
            "type" : "string",
            "description" : "The HTTP method required to make the related call",
            "enum" : [ "GET", "POST", "PUT", "DELETE", "HEAD", "CONNECT", "OPTIONS", "PATCH" ]
          },
          "rel" : {
            "type" : "string",
            "description" : "The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml)"
          },
          "href" : {
            "type" : "string",
            "description" : "The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call"
          }
        },
        "description" : "The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information"
      },
      "REFUNDCAPTURECURRENCYMISMATCH" : {
        "title" : "REFUND_CAPTURE_CURRENCY_MISMATCH",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a currency mismatch error between the refund and original capture transaction.",
            "enum" : [ "REFUND_CAPTURE_CURRENCY_MISMATCH" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating refund currency must match the original capture currency",
            "enum" : [ "Refund must be in the same currency as the capture" ]
          }
        },
        "description" : "Refund must be in the same currency as the capture"
      },
      "Authorization2AllOf2" : {
        "properties" : {
          "supplementary_data" : {
            "$ref" : "#/components/schemas/SupplementaryData"
          },
          "payee" : {
            "$ref" : "#/components/schemas/PayeeBase"
          }
        },
        "description" : "Contains supplementary data and payee information for authorization processing"
      },
      "PaymentInstruction" : {
        "title" : "Payment Instruction",
        "type" : "object",
        "properties" : {
          "disbursement_mode" : {
            "description" : "The method or channel through which payment funds will be distributed or disbursed to the recipient",
            "allOf" : [ {
              "$ref" : "#/components/schemas/DisbursementMode"
            } ],
            "x-ballerina-name-ignore" : "disbursementMode",
            "x-ballerina-name" : "disbursementMode"
          },
          "platform_fees" : {
            "maxItems" : 1,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of various fees, commissions, tips, or donations. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability",
            "items" : {
              "$ref" : "#/components/schemas/PlatformFee"
            },
            "x-ballerina-name-ignore" : "platformFees",
            "x-ballerina-name" : "platformFees"
          },
          "payee_receivable_fx_rate_id" : {
            "maxLength" : 4000,
            "minLength" : 1,
            "pattern" : "^.*$",
            "type" : "string",
            "description" : "FX identifier generated returned by PayPal to be used for payment processing in order to honor FX rate (for eligible integrations) to be used when amount is settled/received into the payee account",
            "x-ballerina-name-ignore" : "payeeReceivableFxRateId",
            "x-ballerina-name" : "payeeReceivableFxRateId"
          },
          "payee_pricing_tier_id" : {
            "maxLength" : 20,
            "minLength" : 1,
            "pattern" : "^.*$",
            "type" : "string",
            "description" : "This field is only enabled for selected merchants/partners to use and provides the ability to trigger a specific pricing rate/plan for a payment transaction. The list of eligible 'payee_pricing_tier_id' would be provided to you by your Account Manager. Specifying values other than the one provided to you by your account manager would result in an error",
            "x-ballerina-name-ignore" : "payeePricingTierId",
            "x-ballerina-name" : "payeePricingTierId"
          }
        },
        "description" : "Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order"
      },
      "Forbidden" : {
        "properties" : {
          "details" : {
            "type" : "array",
            "description" : "Array of detailed information about the forbidden access error conditions.",
            "items" : {
              "$ref" : "#/components/schemas/403Details"
            }
          }
        },
        "description" : "HTTP 403 Forbidden error response containing an array of detailed error information"
      },
      "AUTHCURRENCYMISMATCH" : {
        "title" : "AUTH_CURRENCY_MISMATCH",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates an authentication currency mismatch error condition.",
            "enum" : [ "AUTH_CURRENCY_MISMATCH" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating currency mismatch between original authorization and reauthorization request.",
            "enum" : [ "The currency specified during reauthorization should be the same as the currency specified in the original authorization. Please check the currency of the authorization for which you are trying to reauthorize and try again." ]
          }
        },
        "description" : "Currency mismatch between original authorization and reauthorization request"
      },
      "Capturesrefund422Details" : {
        "description" : "Error details for HTTP 422 responses when refunding a capture, containing specific validation and business rule violations",
        "anyOf" : [ {
          "$ref" : "#/components/schemas/CANNOTBEZEROORNEGATIVE2"
        }, {
          "$ref" : "#/components/schemas/DECIMALPRECISION2"
        }, {
          "$ref" : "#/components/schemas/DECIMALSNOTSUPPORTED2"
        }, {
          "$ref" : "#/components/schemas/INVALIDCURRENCYCODE2"
        }, {
          "$ref" : "#/components/schemas/CURRENCYMISMATCH"
        }, {
          "$ref" : "#/components/schemas/CANNOTBENEGATIVE"
        }, {
          "$ref" : "#/components/schemas/CAPTUREFULLYREFUNDED"
        }, {
          "$ref" : "#/components/schemas/REFUNDCAPTURECURRENCYMISMATCH"
        }, {
          "$ref" : "#/components/schemas/REFUNDNOTALLOWED"
        }, {
          "$ref" : "#/components/schemas/REFUNDTIMELIMITEXCEEDED"
        }, {
          "$ref" : "#/components/schemas/REFUNDAMOUNTEXCEEDED"
        }, {
          "$ref" : "#/components/schemas/REFUNDAMOUNTTOOLOW"
        }, {
          "$ref" : "#/components/schemas/REFUNDFAILEDINSUFFICIENTFUNDS"
        }, {
          "$ref" : "#/components/schemas/PARTIALREFUNDNOTALLOWED"
        }, {
          "$ref" : "#/components/schemas/MAXNUMBEROFREFUNDSEXCEEDED"
        }, {
          "$ref" : "#/components/schemas/PENDINGCAPTURE"
        }, {
          "$ref" : "#/components/schemas/DUPLICATEINVOICEID1"
        }, {
          "$ref" : "#/components/schemas/PAYEEACCOUNTLOCKEDORCLOSED2"
        }, {
          "$ref" : "#/components/schemas/PAYERACCOUNTLOCKEDORCLOSED2"
        }, {
          "$ref" : "#/components/schemas/PAYEEACCOUNTRESTRICTED2"
        }, {
          "$ref" : "#/components/schemas/REFUNDNOTPERMITTEDDUETOCHARGEBACK"
        }, {
          "$ref" : "#/components/schemas/TRANSACTIONDISPUTED"
        }, {
          "$ref" : "#/components/schemas/PLATFORMFEEEXCEEDED"
        }, {
          "$ref" : "#/components/schemas/REFUNDISRESTRICTED"
        }, {
          "$ref" : "#/components/schemas/PLATFORMFEENOTENABLED"
        } ]
      },
      "Money" : {
        "title" : "Money",
        "required" : [ "currency_code", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "maxLength" : 32,
            "pattern" : "^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$",
            "type" : "string",
            "description" : "The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/api/rest/reference/currency-codes/)"
          },
          "currency_code" : {
            "description" : "The ISO 4217 three-letter currency code indicating the monetary unit for this amount",
            "allOf" : [ {
              "$ref" : "#/components/schemas/CurrencyCode"
            } ],
            "x-ballerina-name-ignore" : "currencyCode",
            "x-ballerina-name" : "currencyCode"
          }
        },
        "description" : "The currency and amount for a financial transaction, such as a balance or payment due"
      },
      "CapturesRefundValidationErrorResponse" : {
        "description" : "Validation error response for capture refund requests, combining standard 422 error format with refund-specific error details",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error422"
        }, {
          "$ref" : "#/components/schemas/CapturesRefund422"
        } ]
      },
      "CapturesRefundError400Response" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error400"
        }, {
          "$ref" : "#/components/schemas/CapturesRefund400"
        } ]
      },
      "AuthorizationReauthorizeError422Response" : {
        "description" : "Error response for authorization reauthorization requests with validation failures (HTTP 422)",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error422"
        }, {
          "$ref" : "#/components/schemas/AuthorizationsReauthorize422"
        } ]
      },
      "Unauthorized" : {
        "properties" : {
          "details" : {
            "type" : "array",
            "description" : "Array of detailed error information for unauthorized access attempts.",
            "items" : {
              "$ref" : "#/components/schemas/401Details"
            }
          }
        },
        "description" : "Response indicating unauthorized access with detailed error information"
      },
      "AuthorizationVoidValidationError" : {
        "description" : "Validation error response for authorization void operations, combining standard 422 error with void-specific error details",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error422"
        }, {
          "$ref" : "#/components/schemas/AuthorizationsVoid422"
        } ]
      },
      "RelatedIds" : {
        "title" : "Related Identifiers",
        "type" : "object",
        "properties" : {
          "authorization_id" : {
            "maxLength" : 20,
            "minLength" : 1,
            "pattern" : "^[A-Z0-9]+$",
            "type" : "string",
            "description" : "Authorization ID related to the resource",
            "x-ballerina-name-ignore" : "authorizationId",
            "x-ballerina-name" : "authorizationId"
          },
          "capture_id" : {
            "maxLength" : 20,
            "minLength" : 1,
            "pattern" : "^[A-Z0-9]+$",
            "type" : "string",
            "description" : "Capture ID related to the resource",
            "x-ballerina-name-ignore" : "captureId",
            "x-ballerina-name" : "captureId"
          },
          "order_id" : {
            "maxLength" : 20,
            "minLength" : 1,
            "pattern" : "^[A-Z0-9]+$",
            "type" : "string",
            "description" : "Order ID related to the resource",
            "x-ballerina-name-ignore" : "orderId",
            "x-ballerina-name" : "orderId"
          }
        },
        "description" : "Identifiers related to a specific resource"
      },
      "SellerProtection" : {
        "title" : "Seller Protection",
        "type" : "object",
        "properties" : {
          "dispute_categories" : {
            "type" : "array",
            "description" : "An array of conditions that are covered for the transaction",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "The condition that is covered for the transaction.",
              "enum" : [ "ITEM_NOT_RECEIVED", "UNAUTHORIZED_TRANSACTION" ]
            },
            "x-ballerina-name-ignore" : "disputeCategories",
            "x-ballerina-name" : "disputeCategories"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates whether the transaction is eligible for seller protection. For information, see [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection)",
            "readOnly" : true,
            "enum" : [ "ELIGIBLE", "PARTIALLY_ELIGIBLE", "NOT_ELIGIBLE" ]
          }
        },
        "description" : "The level of protection offered as defined by [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection)"
      },
      "REFUNDTIMELIMITEXCEEDED" : {
        "title" : "REFUND_TIME_LIMIT_EXCEEDED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the refund request has exceeded the allowed time limit for processing.",
            "enum" : [ "REFUND_TIME_LIMIT_EXCEEDED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating the refund time limit has been exceeded for this capture.",
            "enum" : [ "You are over the time limit to perform a refund on this capture" ]
          }
        },
        "description" : "Indicates that the time limit for processing a refund on the captured payment has been exceeded"
      },
      "CapturesRefund400" : {
        "properties" : {
          "details" : {
            "type" : "array",
            "description" : "Array of error details describing specific issues encountered during the capture refund operation.",
            "items" : {
              "$ref" : "#/components/schemas/Capturesrefund400Details"
            }
          }
        },
        "description" : "Error response for capture refund requests with detailed validation or processing failure information"
      },
      "AUTHORIZATIONVOIDED1" : {
        "title" : "AUTHORIZATION_VOIDED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that an authorization has been voided, with the fixed value \"AUTHORIZATION_VOIDED\".",
            "enum" : [ "AUTHORIZATION_VOIDED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that a voided authorization cannot be captured or reauthorized.",
            "enum" : [ "A voided authorization cannot be captured or reauthorized. " ]
          }
        },
        "description" : "Indicates that a voided authorization cannot be captured or reauthorized"
      },
      "Authorization2" : {
        "title" : "Authorization",
        "type" : "object",
        "description" : "The authorized payment transaction",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Authorization"
        }, {
          "$ref" : "#/components/schemas/Authorization2AllOf2"
        } ]
      },
      "NetAmountBreakdownItem" : {
        "title" : "Net Amount Breakdown Item",
        "type" : "object",
        "properties" : {
          "exchange_rate" : {
            "description" : "The exchange rate used to convert the amount from the original currency to the base currency",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ExchangeRate"
            } ],
            "x-ballerina-name-ignore" : "exchangeRate",
            "x-ballerina-name" : "exchangeRate"
          },
          "converted_amount" : {
            "description" : "The monetary amount converted to a different currency, represented as a Money object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "convertedAmount",
            "x-ballerina-name" : "convertedAmount"
          },
          "payable_amount" : {
            "description" : "The monetary amount that is due to be paid for this breakdown item",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "payableAmount",
            "x-ballerina-name" : "payableAmount"
          }
        },
        "description" : "The net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the merchant holds their funds"
      },
      "AuthorizationsReauthorize400" : {
        "properties" : {
          "details" : {
            "type" : "array",
            "description" : "Array of error details for failed reauthorization requests with specific validation information.",
            "items" : {
              "$ref" : "#/components/schemas/Authorizationsreauthorize400Details"
            }
          }
        },
        "description" : "Bad Request response for authorization reauthorization containing validation error details"
      },
      "DECIMALPRECISION" : {
        "title" : "DECIMAL_PRECISION",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates a decimal precision validation issue with the DECIMAL_PRECISION error type.",
            "enum" : [ "DECIMAL_PRECISION" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Indicates that currencies with decimal support are limited to two decimal places precision.",
            "enum" : [ "If the currency supports decimals, only two decimal place precision is supported." ]
          }
        },
        "description" : "Validates that decimal currencies use only two decimal place precision"
      },
      "DECIMALSNOTSUPPORTED2" : {
        "title" : "DECIMALS_NOT_SUPPORTED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that decimal values are not supported in this context.",
            "enum" : [ "DECIMALS_NOT_SUPPORTED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "A string field indicating that decimal values are not supported in this context."
          }
        },
        "description" : "Error indicating that decimal values are not supported in this context or field"
      },
      "DECIMALSNOTSUPPORTED1" : {
        "title" : "DECIMALS_NOT_SUPPORTED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that decimal values are not supported for this operation or field.",
            "enum" : [ "DECIMALS_NOT_SUPPORTED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating the currency does not support decimal values with reference link.",
            "enum" : [ "Currency does not support decimals. Please refer to https://developer.paypal.com/docs/api/reference/currency-codes/ for more information." ]
          }
        },
        "description" : "Error indicating the specified currency does not support decimal values in monetary amounts"
      },
      "INVALIDCURRENCYCODE2" : {
        "title" : "INVALID_CURRENCY_CODE",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates an invalid currency code error with the fixed value \"INVALID_CURRENCY_CODE\".",
            "enum" : [ "INVALID_CURRENCY_CODE" ]
          },
          "description" : {
            "type" : "string",
            "description" : "A descriptive message explaining the invalid currency code error condition."
          }
        },
        "description" : "Error response indicating an invalid currency code was provided in the request"
      },
      "INVALIDCURRENCYCODE1" : {
        "title" : "INVALID_CURRENCY_CODE",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates an invalid currency code error with the value \"INVALID_CURRENCY_CODE\".",
            "enum" : [ "INVALID_CURRENCY_CODE" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating the provided currency code is invalid or unsupported by PayPal.",
            "enum" : [ "Currency code is invalid or is not currently supported. Please refer https://developer.paypal.com/docs/api/reference/currency-codes/ for list of supported currency codes." ]
          }
        },
        "description" : "Currency code is invalid or not supported. See PayPal currency codes documentation"
      },
      "Authorizationsvoid422Details" : {
        "description" : "Details explaining why an authorization void request failed with a 422 status code",
        "anyOf" : [ {
          "$ref" : "#/components/schemas/PREVIOUSLYCAPTURED"
        }, {
          "$ref" : "#/components/schemas/PREVIOUSLYVOIDED"
        }, {
          "$ref" : "#/components/schemas/CANNOTBEVOIDED"
        } ]
      },
      "MerchantPayableBreakdown" : {
        "title" : "Merchant Payable Breakdown",
        "type" : "object",
        "properties" : {
          "platform_fees" : {
            "maxItems" : 1,
            "minItems" : 0,
            "type" : "array",
            "description" : "An array of platform or partner fees, commissions, or brokerage fees for the refund",
            "items" : {
              "$ref" : "#/components/schemas/PlatformFee"
            },
            "x-ballerina-name-ignore" : "platformFees",
            "x-ballerina-name" : "platformFees"
          },
          "net_amount_in_receivable_currency" : {
            "description" : "The net amount owed to the merchant in the receivable currency after deductions and adjustments",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "netAmountInReceivableCurrency",
            "x-ballerina-name" : "netAmountInReceivableCurrency"
          },
          "total_refunded_amount" : {
            "description" : "Total amount refunded to customers for this merchant, represented as a monetary value",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "totalRefundedAmount",
            "x-ballerina-name" : "totalRefundedAmount"
          },
          "paypal_fee" : {
            "description" : "The PayPal fee amount deducted from the transaction, represented as a monetary value",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "paypalFee",
            "x-ballerina-name" : "paypalFee"
          },
          "gross_amount" : {
            "description" : "The total gross amount before any deductions, expressed as a monetary value",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "grossAmount",
            "x-ballerina-name" : "grossAmount"
          },
          "paypal_fee_in_receivable_currency" : {
            "description" : "The PayPal fee amount expressed in the receivable currency for this merchant transaction",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "paypalFeeInReceivableCurrency",
            "x-ballerina-name" : "paypalFeeInReceivableCurrency"
          },
          "net_amount" : {
            "description" : "The net amount payable to the merchant, representing the final settlement value after deductions",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Money"
            } ],
            "x-ballerina-name-ignore" : "netAmount",
            "x-ballerina-name" : "netAmount"
          },
          "net_amount_breakdown" : {
            "type" : "array",
            "description" : "An array of breakdown values for the net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the payee holds their funds",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/NetAmountBreakdownItem"
            },
            "x-ballerina-name-ignore" : "netAmountBreakdown",
            "x-ballerina-name" : "netAmountBreakdown"
          }
        },
        "description" : "The breakdown of the refund",
        "readOnly" : true
      },
      "RefundStatusDetails" : {
        "title" : "Refund Status Details",
        "type" : "object",
        "properties" : {
          "reason" : {
            "type" : "string",
            "description" : "The reason why the refund has the `PENDING` or `FAILED` status",
            "enum" : [ "ECHECK" ]
          }
        },
        "description" : "The details of the refund status"
      },
      "AUTHORIZATIONEXPIRED" : {
        "title" : "AUTHORIZATION_EXPIRED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the authorization token or credentials have expired and need to be renewed.",
            "enum" : [ "AUTHORIZATION_EXPIRED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating that an expired authorization cannot be processed for capture.",
            "enum" : [ "An expired authorization cannot be captured." ]
          }
        },
        "description" : "Error indicating an authorization has expired and cannot be captured for payment processing"
      },
      "RefundAllOf2" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The PayPal-generated ID for the refund.",
            "readOnly" : true
          },
          "amount" : {
            "$ref" : "#/components/schemas/Money"
          },
          "invoice_id" : {
            "type" : "string",
            "description" : "The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.",
            "readOnly" : true
          },
          "custom_id" : {
            "maxLength" : 127,
            "minLength" : 1,
            "pattern" : "^[A-Za-z0-9-_.,]*$",
            "type" : "string",
            "description" : "The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports."
          },
          "acquirer_reference_number" : {
            "maxLength" : 36,
            "minLength" : 1,
            "pattern" : "^[a-zA-Z0-9]+$",
            "type" : "string",
            "description" : "Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks."
          },
          "note_to_payer" : {
            "type" : "string",
            "description" : "The reason for the refund. Appears in both the payer's transaction history and the emails that the payer receives.",
            "readOnly" : true
          },
          "seller_payable_breakdown" : {
            "$ref" : "#/components/schemas/MerchantPayableBreakdown"
          },
          "payer" : {
            "$ref" : "#/components/schemas/PayeeBase"
          },
          "links" : {
            "type" : "array",
            "description" : "An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/LinkDescription"
            }
          }
        },
        "description" : "A PayPal refund object containing refund details, amount, payer information, and transaction references"
      },
      "CaptureRequest" : {
        "title" : "Capture Request",
        "type" : "object",
        "description" : "Captures either a portion or the full authorized amount of an authorized payment",
        "allOf" : [ {
          "$ref" : "#/components/schemas/SupplementaryPurchaseData"
        }, {
          "$ref" : "#/components/schemas/CaptureRequestAllOf2"
        }, {
          "type" : "object",
          "properties" : {
            "invoice_id" : {
              "maxLength" : 127,
              "minLength" : 1,
              "pattern" : "^.{1,127}$",
              "type" : "string",
              "description" : "The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives",
              "x-ballerina-name-ignore" : "invoiceId",
              "x-ballerina-name" : "invoiceId"
            },
            "note_to_payer" : {
              "maxLength" : 255,
              "minLength" : 1,
              "pattern" : "^.{1,255}$",
              "type" : "string",
              "description" : "An informational note about this settlement. Appears in both the payer's transaction history and the emails that the payer receives",
              "x-ballerina-name-ignore" : "noteToPayer",
              "x-ballerina-name" : "noteToPayer"
            }
          }
        } ]
      },
      "DisbursementMode" : {
        "title" : "Disbursement Mode",
        "maxLength" : 16,
        "minLength" : 1,
        "pattern" : "^[A-Z_]+$",
        "type" : "string",
        "description" : "The funds that are held on behalf of the merchant",
        "default" : "INSTANT",
        "enum" : [ "INSTANT", "DELAYED" ]
      },
      "PlatformFee" : {
        "title" : "Platform Fee",
        "required" : [ "amount" ],
        "type" : "object",
        "properties" : {
          "payee" : {
            "$ref" : "#/components/schemas/PayeeBase"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Money"
          }
        },
        "description" : "The platform or partner fee, commission, or brokerage fee that is associated with the transaction. Not a separate or isolated transaction leg from the external perspective. The platform fee is limited in scope and is always associated with the original payment for the purchase unit"
      },
      "MAXCAPTURECOUNTEXCEEDED" : {
        "title" : "MAX_CAPTURE_COUNT_EXCEEDED",
        "properties" : {
          "issue" : {
            "type" : "string",
            "description" : "Indicates that the maximum number of allowed capture attempts has been exceeded.",
            "enum" : [ "MAX_CAPTURE_COUNT_EXCEEDED" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Error message indicating the maximum capture limit has been reached for an authorization.",
            "enum" : [ "Maxmimum number of allowable captures has been reached. No additional captures are possible for this authorization. Contact Customer Service or your account manager to change the number of captures for a given authorization." ]
          }
        },
        "description" : "Maximum allowable captures reached for this authorization. Contact Customer Service to modify limits"
      },
      "NotFound" : {
        "properties" : {
          "details" : {
            "type" : "array",
            "description" : "Array of detailed information about the 404 not found error conditions.",
            "items" : {
              "$ref" : "#/components/schemas/404Details"
            }
          }
        },
        "description" : "Response schema for 404 Not Found errors containing an array of detailed error information"
      }
    },
    "responses" : {
      "default" : {
        "description" : "The default response.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorDefault"
            }
          }
        }
      }
    },
    "parameters" : {
      "authorization_id" : {
        "name" : "authorizationId",
        "in" : "path",
        "description" : "The PayPal-generated ID for the authorized payment to void",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "paypal_request_id" : {
        "name" : "PayPal-Request-Id",
        "in" : "header",
        "description" : "The server stores keys for 45 days",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        },
        "x-ballerina-name-ignore" : "payPalRequestId",
        "x-ballerina-name" : "payPalRequestId"
      },
      "prefer" : {
        "name" : "Prefer",
        "in" : "header",
        "description" : "The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "default" : "return=minimal"
        },
        "x-ballerina-name-ignore" : "prefer",
        "x-ballerina-name" : "prefer"
      },
      "paypal_auth_assertion" : {
        "name" : "PayPal-Auth-Assertion",
        "in" : "header",
        "description" : "An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).<blockquote><strong>Note:</strong>For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.</blockquote>",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        },
        "x-ballerina-name-ignore" : "payPalAuthAssertion",
        "x-ballerina-name" : "payPalAuthAssertion"
      },
      "capture_id" : {
        "name" : "captureId",
        "in" : "path",
        "description" : "The PayPal-generated ID for the captured payment to refund",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "refund_id" : {
        "name" : "refundId",
        "in" : "path",
        "description" : "The PayPal-generated ID for the refund for which to show details",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "Oauth2" : {
        "type" : "oauth2",
        "description" : "OAuth 2.0 authentication",
        "flows" : {
          "clientCredentials" : {
            "tokenUrl" : "https://api.sandbox.paypal.com/v1/oauth2/token",
            "scopes" : {
              "https://uri.paypal.com/services/payments/payment/authcapture" : "Permission to do non-real time payments like capture on authorization",
              "https://uri.paypal.com/services/payments/refund" : "Permission to initiate a refund on a capture transaction",
              "https://uri.paypal.com/services/payments/non-referenced-credit" : "Permission to initiate non referenced credit",
              "https://uri.paypal.com/services/payments/realtimepayment" : "Permission to do any real time payment, with support for sale/authorize/order intents",
              "https://uri.paypal.com/services/payments/reversepayment" : "Permission to do any reverse payment"
            }
          }
        }
      }
    }
  }
}
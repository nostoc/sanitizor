// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/data.jsondata;
import ballerina/http;

# An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api-m.sandbox.paypal.com/v2/checkout") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Create order
    #
    # + headers - Headers to be sent with the request 
    # + return - A successful response to an idempotent request returns the HTTP `200 OK` status code with a JSON response body that shows order details 
    resource isolated function post orders(OrderRequest payload, OrdersCreateHeaders headers = {}) returns Order|error {
        string resourcePath = string `/orders`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Show order details
    #
    # + id - The ID of the order that the tracking information is associated with
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows order details 
    resource isolated function get orders/[string id](map<string|string[]> headers = {}, *OrdersGetQueries queries) returns Order|error {
        string resourcePath = string `/orders/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update order
    #
    # + id - The ID of the order that the tracking information is associated with
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with an empty object in the JSON response body 
    resource isolated function patch orders/[string id](PatchRequest payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/orders/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Confirm the Order
    #
    # + id - The ID of the order that the tracking information is associated with
    # + headers - Headers to be sent with the request 
    # + return - A successful request indicates that the payment source was added to the Order. A successful request returns the HTTP `200 OK` status code with a JSON response body that shows order details 
    resource isolated function post orders/[string id]/confirm\-payment\-source(ConfirmOrderRequest payload, OrdersConfirmHeaders headers = {}) returns Order|error {
        string resourcePath = string `/orders/${getEncodedUri(id)}/confirm-payment-source`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Authorize payment for order
    #
    # + id - The ID of the order that the tracking information is associated with
    # + headers - Headers to be sent with the request 
    # + return - A successful response to an idempotent request returns the HTTP `200 OK` status code with a JSON response body that shows authorized payment details 
    resource isolated function post orders/[string id]/authorize(OrderAuthorizeRequest payload, OrdersAuthorizeHeaders headers = {}) returns OrderAuthorizeResponse|error {
        string resourcePath = string `/orders/${getEncodedUri(id)}/authorize`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Capture payment for order
    #
    # + id - The ID of the order that the tracking information is associated with
    # + headers - Headers to be sent with the request 
    # + return - A successful response to an idempotent request returns the HTTP `200 OK` status code with a JSON response body that shows captured payment details 
    resource isolated function post orders/[string id]/capture(OrderCaptureRequest payload, OrdersCaptureHeaders headers = {}) returns Order|error {
        string resourcePath = string `/orders/${getEncodedUri(id)}/capture`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Add tracking information for an Order.
    #
    # + id - The ID of the order that the tracking information is associated with
    # + headers - Headers to be sent with the request 
    # + return - A successful response to an idempotent request returns the HTTP `200 OK` status code with a JSON response body that shows tracker details 
    resource isolated function post orders/[string id]/track(OrderTrackerRequest payload, OrdersTrackCreateHeaders headers = {}) returns Order|error {
        string resourcePath = string `/orders/${getEncodedUri(id)}/track`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Update or cancel tracking information for a PayPal order
    #
    # + id - The ID of the order that the tracking information is associated with
    # + trackerId - The order tracking ID
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with an empty object in the JSON response body 
    resource isolated function patch orders/[string id]/trackers/[string trackerId](PatchRequest payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/orders/${getEncodedUri(id)}/trackers/${getEncodedUri(trackerId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }
}

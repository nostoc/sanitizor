// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/data.jsondata;
import ballerina/http;

public isolated client class Client {
    final http:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config = {}, string serviceUrl = "http://localhost:9090/snowpeak") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Snowpeak locations resource
    #
    # + headers - Headers to be sent with the request 
    # + return - Ok 
    resource isolated function get locations(map<string|string[]> headers = {}) returns Locations|error {
        string resourcePath = string `/locations`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Snowpeak rooms resource
    #
    # + id - Unique identification of location
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Ok 
    resource isolated function get locations/[string id]/rooms(map<string|string[]> headers = {}, *GetLocationsIdRoomsQueries queries) returns Rooms|error {
        string resourcePath = string `/locations/${getEncodedUri(id)}/rooms`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Snowpeak create reservation resource
    #
    # + headers - Headers to be sent with the request 
    # + payload - Reservation representation 
    # + return - Created 
    resource isolated function post reservations(Reservation payload, map<string|string[]> headers = {}) returns ReservationReceipt|error {
        string resourcePath = string `/reservations`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/vnd.snowpeak.resort+json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Snowpeak create/update reservation resource
    #
    # + headers - Headers to be sent with the request 
    # + payload - Reservation representation 
    # + return - Ok 
    resource isolated function put reservations/[string id](Reservation payload, map<string|string[]> headers = {}) returns ReservationReceipt|error {
        string resourcePath = string `/reservations/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/vnd.snowpeak.resort+json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Snowpeak cancel reservation resource
    #
    # + id - Unique identification of reservation
    # + headers - Headers to be sent with the request 
    # + return - Ok 
    resource isolated function delete reservations/[string id](map<string|string[]> headers = {}) returns ReservationReceipt|error {
        string resourcePath = string `/reservations/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }
o
    # Snowpeak payment resource
    #
    # + id - Unique identification of reservation
    # + headers - Headers to be sent with the request 
    # + payload - Payment representation 
    # + return - Created 
    resource isolated function post payments/[string id](Payment payload, map<string|string[]> headers = {}) returns PaymentReceipt|error {
        string resourcePath = string `/payments/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/vnd.snowpeak.resort+json");
        return self.clientEp->post(resourcePath, request, headers);
    }
}
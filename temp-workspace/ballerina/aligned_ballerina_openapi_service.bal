// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

listener http:Listener ep0 = new (443, config = {host: "api.smartsheet.com"});

service /'2\.0 on ep0 {
    # Delete Multiple Favorites
    #
    # + favoriteType - The favorite type
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + x\-smar\-sc\-actor\-id - UserId of the user
    # + objectIds - A comma-separated list of Ids of the favorited item
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object)
    # http:DefaultStatusCodeResponse (Generic Error Payload.)
    resource function delete favorites/["folder"|"report"|"sheet"|"sight"|"template"|"workspace" favoriteType](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "x-smar-sc-actor-id"} string? xSmarScActorId, string objectIds) returns GenericResult|ErrorDefault {
    }

    # Delete Favorite
    #
    # + favoriteType - The favorite type
    # + favoriteId - Favorite Id, e.g., sheet Id, report Id
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + x\-smar\-sc\-actor\-id - UserId of the user
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete favorites/["folder"|"report"|"sheet"|"sight"|"template"|"workspace" favoriteType]/[decimal favoriteId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "x-smar-sc-actor-id"} string? xSmarScActorId) returns GenericResult|ErrorDefault {
    }

    # Delete folder
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + folderId - Folder Id where you can create sheets, sights, reports, templates, and other folders
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete folders/[decimal folderId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult|ErrorDefault {
    }

    # Delete Group
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + groupId - Group Id
    # + return - returns can be any of following types 
    # http:Ok (**_This operation is asynchronous,_** _meaning group members may retain their sharing access for a brief period of time after the call returns. For small groups with limited sharing, the operation should complete quickly (within a few seconds). For large groups with many shares, this operation could possibly take more than a minute to complete._
# )
    # http:Unauthorized (Unauthorized.  See Smartsheet Error Code and Message for details.
# )
    # http:NotFound (Not Found.  See Smartsheet Error Code and Message for details.
# )
    resource function delete groups/[decimal groupId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult|ErrorUnauthorized|ErrorNotFound {
    }

    # Delete Group Members
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + groupId - Group Id
    # + userId - User Id
    # + return - returns can be any of following types 
    # http:Ok (**_This operation is asynchronous,_** _meaning the users may not yet have sharing access to sheets for a period of time after this operation returns. For small groups with limited sharing, the operation should complete quickly (within a few seconds). For large groups with many shares, this operation could possibly take more than a minute to complete._
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete groups/[decimal groupId]/members/[decimal userId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult|ErrorDefault {
    }

    # Delete report share
    #
    # + reportId - reportID of the report being accessed
    # + shareId - The unique identifier for the share
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete reports/[decimal reportId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal accessApiLevel = 0) returns Result|ErrorDefault {
    }

    # Delete asset share
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + shareId - The unique identifier for the share
    # + assetType - The type of the asset. Used in combination with assetId to determine the asset
    # + assetId - The id of the asset. Used in combination with assetType to determine the asset.
    # Depending on the asset, this may be a numeric or string value
    # + return - returns can be any of following types 
    # http:Ok (Result object indicating a successful deletion of the share for the specified asset)
    # http:BadRequest (4XX errors typically indicate client input validation failures.)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, "sheet"|"report"|"sight"|"workspace"|"collection"|"file" assetType, string assetId) returns SuccessResult|ErrorBadRequest|ErrorDefault {
    }

    # Delete Sheet
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sheetId - Sheet Id of the sheet being accessed
    # + return - returns can be any of following types 
    # http:Ok (SUCCESS)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete sheets/[decimal sheetId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns SuccessResult|ErrorDefault {
    }

    # Delete Attachment
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + attachmentId - ID of the attachment
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function delete sheets/[decimal sheetId]/attachments/[string attachmentId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult {
    }

    # Delete All Versions
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + attachmentId - ID of the attachment
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function delete sheets/[decimal sheetId]/attachments/[string attachmentId]/versions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult {
    }

    # Delete an Automation Rule
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + automationRuleId - The Id of an Automation Rule
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - Result object 
    resource function delete sheets/[decimal sheetId]/automationrules/[string automationRuleId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns Result {
    }

    # Delete Column
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + columnId - Column Id in the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function delete sheets/[decimal sheetId]/columns/[decimal columnId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult {
    }

    # Delete a comment
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + commentId - ID of the comment
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function delete sheets/[decimal sheetId]/comments/[string commentId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns InlineResponse20039 {
    }

    # Delete a Discussion
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + discussionId - ID of the discussion
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function delete sheets/[decimal sheetId]/discussions/[string discussionId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult {
    }

    # Delete Proof
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function delete sheets/[decimal sheetId]/proofs/[string proofId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult {
    }

    # Delete Proof Requests
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function delete sheets/[decimal sheetId]/proofs/[string proofId]/requests(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult {
    }

    # Delete Proof Version
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function delete sheets/[decimal sheetId]/proofs/[string proofId]/versions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult {
    }

    # Delete Rows
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + ids - A comma-separated list of row Ids
    # + ignoreRowsNotFound - **true** or **false**. If set to **false** and any of the specified row Ids are not found, no rows are deleted, and the "not found" [error](/api/smartsheet/openapi/schemas/error) is returned
    # + return - returns can be any of following types 
    # http:Ok (Returns [Result object](/api/smartsheet/openapi/schemas/result) containing row Ids corresponding to all rows that were successfully deleted (including any child rows of rows specified in the URL))
    # http:NotFound (Not Found.  See Smartsheet Error Code and Message for details.
# )
    resource function delete sheets/[decimal sheetId]/rows(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, string ids, boolean ignoreRowsNotFound = false) returns InlineResponse20059|ErrorNotFound {
    }

    # Delete Sent Update Request
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + sentUpdateRequestId - ID of the sent update request
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - Result object 
    resource function delete sheets/[decimal sheetId]/sentupdaterequests/[string sentUpdateRequestId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns Result {
    }

    # Delete sheet share
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + shareId - The unique identifier for the share
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete sheets/[decimal sheetId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal accessApiLevel = 0) returns Result|ErrorDefault {
    }

    # Delete Summary Fields
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + ids - A comma-separated list of Sheet Summary Field Ids
    # + ignoreSummaryFieldsNotFound - If **true**, the operation will succeed even if some fieldIds are not found
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete sheets/[decimal sheetId]/summary/fields(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, string ids, boolean ignoreSummaryFieldsNotFound = false) returns InlineResponse20067|ErrorDefault {
    }

    # Delete an Update Request
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + updateRequestId - ID of the Update Request
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - Result object 
    resource function delete sheets/[decimal sheetId]/updaterequests/[string updateRequestId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns Result {
    }

    # Delete Dashboard
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sightId - SightID of the sight being accessed
    # + return - returns can be any of following types 
    # http:Ok (Generic response result)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete sights/[string sightId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns InlineResponse20047|ErrorDefault {
    }

    # Delete dashboard share
    #
    # + sightId - SightID of the sight being accessed
    # + shareId - The unique identifier for the share
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete sights/[string sightId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns Result|ErrorDefault {
    }

    # Revoke Access Token
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + deleteAllForApiClient - The client Id and user Id is fetched based on the token that is used to make this API call. A value of true deletes all tokens associated to the given client Id and user Id
    # + return - returns can be any of following types 
    # http:Ok (SUCCESS)
    # http:DefaultStatusCodeResponse (Error Payload)
    resource function delete token(@http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Authorization"} string? authorization, boolean deleteAllForApiClient = false) returns Result|ErrorDefault {
    }

    # Remove User
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + userId - User Id
    # + removeFromSharing - **If you're removing the user from your organization**, set this to `true` to remove the user's access to all assets in your organization and plan.
    # **If you're removing the user from your plan**, this parameter is ignored and the user's access to all assets in your organization and plan is removed automatically
    # + transferSheets - **If you're removing the user from your organization** and you want to transfer ownership of all the removed user's assets and groups to a qualified user\*, set this parameter to `true` and set the `transferTo` parameter to the ID of the qualified user. The transfer depends on setting the `transferTo` parameter.
    # **If you're removing the user from your plan**, this parameter is ignored.
    # **Warning:** If your asset transfer size exceeds 38k, the transfer fails with a `400` error that prompts you to contact Support for guidance.
    # \*The receiving user must be a <a href="https://help.smartsheet.com/articles/520100-user-types" target="_blank" rel="noopener noreferrer">Group Admin</a> of the group(s) to be transferred
    # + transferTo - Set this to the ID of a qualified user\* to receive ownership of all groups the removed user owns.
    # **If you're removing the user from your organization** and you set the `transferSheets` parameter to `true`, the operation additionally transfers ownership of all the removed user's assets to the assigned user.
    # **If you're removing the user from your plan** and you don't set this parameter, the operation transfers group ownership to the respective main contact of each group's organization.
    # \*The receiving user must be a <a href="https://help.smartsheet.com/articles/520100-user-types" target="_blank" rel="noopener noreferrer">Group Admin</a> of the groups
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object
# )
    # http:BadRequest (This can be caused by the following situations:
# 
# - You attempted to remove your plan's main contact.
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 5687,
#     "message": "This person is the main contact for your plan and can't be removed.",
#     "refId": "abcd1234"
#   }
#   ```
# 
# - You cannot remove directory integration-managed users.
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 5666,
#     "message": "This person is managed from your directory service. Please delete them through your directory service instead.",
#     "refId": "abcd1234"
#   }
#   ```
# 
# - The user owns groups but you didn't set the `transferTo` parameter.
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 1121,
#     "message": "transferTo must be provided because user being deleted owns one or more groups.",
#     "refId": "abcd1234"
#   }
#   ```
# 
# - You cannot transfer to the user to be removed.
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 1018,
#     "message": "The value '{userId}' was not valid for the parameter 'transferTo'.",
#     "refId": "abcd1234"
#   }
#   ```
# 
# - The transfer recipient user cannot be found.
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 1019,
#     "message": "Cannot transfer to the user specified. User not found.",
#     "refId": "abcd1234"
#   }
#   ```
# 
# - You cannot transfer to a user in a different organization.
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 1021,
#     "message": "Cannot transfer to the user specified. They are not a member of your account.",
#     "refId": "abcd1234"
#   }
#   ```
# 
# - The user to be removed owns groups but the transfer recipient is not a <a href="https://help.smartsheet.com/articles/520100-user-types" target="_blank" rel="noopener noreferrer">Group Admin</a>.
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 1107,
#     "message": "User specified in transferGroupsTo must be a group admin.",
#     "refId": "abcd1234"
#   }
#   ```
# 
# - The asset transfer size exceeds the threshold.
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 5737,
#     "message": "Sorry we could not complete this transfer ownership request at this time. Contact support@smartsheet.com",
#     "refId": "abcd1234"
#   }
# )
    # http:Forbidden (This can be caused by the following situations:
# 
# - You are not a System Admin.
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 1004,
#     "message": "You are not authorized to perform this action.",
#     "refId": "abcd1234"
#   }
#   ```
# 
# - The user is not in your organization and the user is not internal to your User Subscription Model plan.
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 1004,
#     "message": "You are not authorized to perform this action.",
#     "refId": "abcd1234"
#   }
#   ```
# )
    # http:NotFound (This can be caused by the following situations:
# 
# - The user is not in your organization and you're on a Legacy Collaborator Model plan.
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 1020,
#     "message": "User not found.",
#     "refId": "abcd1234"
#   }
#   ```
# 
# - No user account found (invalid user ID).
# 
#   Example response:
# 
#   ```json
#   {
#     "errorCode": 1020,
#     "message": "User not found.",
#     "refId": "abcd1234"
#   }
#   ```
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete users/[decimal userId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, int? transferTo, boolean removeFromSharing = false, boolean transferSheets = false) returns GenericResult|http:BadRequest|http:Forbidden|http:NotFound|ErrorDefault {
    }

    # Delete Alternate Email
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + userId - User Id
    # + alternateEmailId - Alternate Email Id
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete users/[decimal userId]/alternateemails/[decimal alternateEmailId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult|ErrorDefault {
    }

    # Delete webhook
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + webhookId - The Id of a Webhook
    # + return - Result object 
    resource function delete webhooks/[string webhookId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns InlineResponse20087 {
    }

    # Delete workspace
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + workspaceId - The ID of the workspace
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete workspaces/[string workspaceId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResult|ErrorDefault {
    }

    # Delete workspace share
    #
    # + workspaceId - The ID of the workspace
    # + shareId - The unique identifier for the share
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function delete workspaces/[string workspaceId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns Result|ErrorDefault {
    }

    # List Contacts
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + modifiedSince - When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    # + numericDates - You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of Contact objects)
    # http:Unauthorized (Unauthorized.  See Smartsheet Error Code and Message for details.
# )
    # http:NotFound (Not Found.  See Smartsheet Error Code and Message for details.
# )
    # http:InternalServerError (Internal Server Error.  See Smartsheet Error Code and Message for details.
# )
    resource function get contacts(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, string? modifiedSince, boolean includeAll = false, boolean numericDates = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse200|ErrorUnauthorized|ErrorNotFound|ErrorInternalServerError {
    }

    # Get Contact
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + contactId - contactId of the contact being accessed
    # + include - A comma-separated list of optional elements to include in the response:
    # * **profileImage**
    # + return - returns can be any of following types 
    # http:Ok (Returns Contact object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get contacts/[decimal contactId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "profileImage"? include) returns Contact|ErrorDefault {
    }

    # List events
    #
    # + Accept\-Encoding - Strongly recommended to make sure payload is compressed. Must be set to one of the following values:
    # * deflate
    # * gzip
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + since - The earliest time from which events are included in the response. Events before this time are excluded.
    # This parameter is required if `streamPosition` is not used.
    # The date-time value is resolved to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
    # > **IMPORTANT:** To keep event responses manageable and prevent timeouts, also specify the `to` query parameter.
    # > **IMPORTANT:** This parameter is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained, date-based queries
    # + to - The latest time up to which events are included in the response. Events after this time are excluded.
    # This parameter requires using the `since` parameter. 
    # The date-time value is resolved to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
    # Logic:
    # - If `to` is a future time, the current time is used.
    # - If `to` equals the `since` time, an empty data value is returned.
    # - If `to` is before the `since` time, a validation error is returned.
    # > **IMPORTANT:** This parameter is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained, date-based queries
    # + streamPosition - Indicates next set of events to return. Use value of
    # `nextStreamPosition` returned from the previous call.
    # This parameter is required if `since` is not used
    # + maxCount - Maximum number of events to return as response to this call.
    # Must be between 1 through 10,000 (inclusive).
    # Defaults to 1,000 if not specified
    # + numericDates - If `true`, dates are accepted and returned in Unix epoch time
    # (milliseconds since midnight on January 1, 1970 in UTC time).
    # Default is `false`, which means ISO-8601 format
    # + managedPlanId - The target managed plan for which to list events. Authorized if the
    # caller is a system administrator on either the target managed plan or
    # the main plan in EPM hierarchy
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:BadRequest (A response with this status code can occur in any one of the following conditions:
# 
# - The `to` parameter is earlier than the `since` parameter.
# - Invalid request format.
# - Missing required fields.
# )
    # http:Unauthorized (Unauthorized.  See Smartsheet Error Code and Message for details.
# )
    # http:Forbidden (Forbidden.  See Smartsheet Error Code and Message for details.
# )
    # http:NotFound (Not Found.  See Smartsheet Error Code and Message for details.
# )
    # http:MethodNotAllowed (Method Not Allowed.  See Smartsheet Error Code and Message for details.
# )
    # http:NotAcceptable (Not Acceptable.  See Smartsheet Error Code and Message for details.
# )
    # http:Gone (Gone.  See Smartsheet Error Code and Message for details.
# )
    # http:UnsupportedMediaType (Gone.  See Smartsheet Error Code and Message for details.
# )
    # http:TooManyRequests (Gone.  See Smartsheet Error Code and Message for details.
# )
    # http:InternalServerError (Internal Server Error.  See Smartsheet Error Code and Message for details.
# )
    resource function get events(@http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Accept-Encoding"} "deflate"|"gzip"? acceptEncoding, @http:Header {name: "Authorization"} string? authorization, string? since, string? to, string? streamPosition, decimal? managedPlanId, int:Signed32 maxCount = 1000, boolean numericDates = false) returns InlineResponse2001|ErrorBadRequest|ErrorUnauthorized|ErrorForbidden|ErrorNotFound|ErrorMethodNotAllowed|ErrorNotAcceptable|ErrorGone|ErrorUnsupportedMediaType|ErrorTooManyRequests|ErrorInternalServerError {
    }

    # Get Favorites
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + x\-smar\-sc\-actor\-id - UserId of the user
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + include - A comma-separated list of optional elements to include in the response
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of Favorite objects)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get favorites(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "x-smar-sc-actor-id"} string? xSmarScActorId, "directId"|"name"? include, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse2002|ErrorDefault {
    }

    # Is Favorite
    #
    # + favoriteType - The favorite type
    # + favoriteId - Favorite Id, e.g., sheet Id, report Id
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + x\-smar\-sc\-actor\-id - UserId of the user
    # + include - A comma-separated list of optional elements to include in the response
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get favorites/["folder"|"report"|"sheet"|"sight"|"template"|"workspace" favoriteType]/[decimal favoriteId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "x-smar-sc-actor-id"} string? xSmarScActorId, "directId"|"name"? include) returns Favorite|ErrorDefault {
    }

    # Get folder
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + folderId - Folder Id where you can create sheets, sights, reports, templates, and other folders
    # + include - A comma-separated list of optional elements to include in the response:
    # * **source** - adds the Source object indicating which object the folder was created from, if any
    # * **distributionLink**
    # * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned.
    # * **sheetVersion**
    # * **permalinks**
    # + return - returns can be any of following types 
    # http:Ok (A single Folder object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get folders/[decimal folderId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "source"|"distributionLink"|"ownerInfo"|"sheetVersion"? include) returns Folder|ErrorDefault {
    }

    # List folders
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + folderId - Folder Id where you can create sheets, sights, reports, templates, and other folders
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of Folder objects)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get folders/[decimal folderId]/folders(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse2006|ErrorDefault {
    }

    # Get folder children
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + folderId - The ID of the folder
    # + childrenResourceTypes - A comma-separated list of the child types to include in the response
    # + include - A comma-separated list of optional elements to include in the response:
    # * **source** - adds the Source object indicating which object this resource was created from, if any
    # * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned
    # + numericDates - You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + lastKey - The lastKey token returned from the previous page of results. If not specified,
    # the first page of results is returned
    # + maxItems - The maximum number of items to return in the response
    # + return - returns can be any of following types 
    # http:Ok (An array of asset references with a pagination token if there are more results)
    # http:BadRequest (Bad Request.  See Smartsheet Error Code and Message for details.)
    # http:NotFound (Not Found.  See Smartsheet Error Code and Message for details.
# )
    # http:InternalServerError (Internal Server Error.  See Smartsheet Error Code and Message for details.
# )
    # http:ServiceUnavailable (Service Unavailable.  See Smartsheet Error Code and Message for details.
# )
    resource function get folders/[int folderId]/children(@http:Header {name: "Authorization"} string? authorization, "sheets"|"reports"|"sights"|"folders" childrenResourceTypes, "source"|"ownerInfo"? include, string? lastKey, boolean numericDates = false, decimal accessApiLevel = 0, int maxItems = 100) returns PaginatedChildrenResponse|ErrorBadRequest|ErrorNotFound|ErrorInternalServerError|ErrorServiceUnavailable {
    }

    # Get folder metadata
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + folderId - The ID of the folder
    # + include - A comma-separated list of optional elements to include in the response:
    # * **source** - adds the Source object indicating which object this resource was created from, if any
    # + numericDates - You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    # + return - returns can be any of following types 
    # http:Ok (The metadata of a folder)
    # http:BadRequest (Bad Request.  See Smartsheet Error Code and Message for details.)
    # http:NotFound (Not Found.  See Smartsheet Error Code and Message for details.
# )
    # http:InternalServerError (Internal Server Error.  See Smartsheet Error Code and Message for details.
# )
    # http:ServiceUnavailable (Service Unavailable.  See Smartsheet Error Code and Message for details.
# )
    resource function get folders/[int folderId]/metadata(@http:Header {name: "Authorization"} string? authorization, "source"? include, boolean numericDates = false) returns FolderMetadata|ErrorBadRequest|ErrorNotFound|ErrorInternalServerError|ErrorServiceUnavailable {
    }

    # List Contents
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + include - A comma-separated list of optional elements to include in the response:
    # * **source** - adds the Source object indicating which object the folder was created from, if any
    # * **distributionLink**
    # * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned.
    # * **sheetVersion**
    # * **permalinks**
    # + return - returns can be any of following types 
    # http:Ok (A single Home object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get folders/personal(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "source"|"distributionLink"|"ownerInfo"|"sheetVersion"? include) returns Home|ErrorDefault {
    }

    # List Org Groups
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + modifiedSince - When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    # + numericDates - You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of [Group objects](/api/smartsheet/openapi/groups/group)
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get groups(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, string? modifiedSince, boolean includeAll = false, boolean numericDates = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20010|ErrorDefault {
    }

    # Get Group
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + groupId - Group Id
    # + return - returns can be any of following types 
    # http:Ok ([Group](/api/smartsheet/openapi/groups/group) object that includes the list of [GroupMember](/api/smartsheet/openapi/groupmembers/groupmember) objects
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get groups/[decimal groupId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns InlineResponse20012|ErrorDefault {
    }

    # List Folders in Home
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of Folder objects)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get home/folders(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse2006|ErrorDefault {
    }

    # List Reports
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + modifiedSince - When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    # + return - returns can be any of following types 
    # http:Ok (Object containing an array of all accessible reports, referenced by their ID, name, access level, and summary report flag values
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get reports(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, string? modifiedSince) returns InlineResponse20015|ErrorDefault {
    }

    # Get Report
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Accept - The Accept request-header field can be used to specify certain media types which are acceptable for the response
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + reportId - reportID of the report being accessed
    # + include - A comma-separated list of optional elements to include in the response:
    # * **attachments**
    # * **discussions**
    # * **proofs**
    # * **format**
    # * **objectValue** - when used in combination with a level query parameter, includes the email addresses for multi-contact data
    # * **scope** - adds the report's scope to the response
    # * **source** - adds the Source object indicating which report the report was created from, if any
    # * **sourceSheets**
    # + exclude - A comma-separated list of optional elements to not include in the response
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + level - specifies whether new functionality, such as multi-contact data is returned in a backwards-compatible, text format (level=0, default), multi-contact data (level=1), or multi-picklist data (level=3)
    # + return - returns can be any of following types 
    # http:Ok (The Report that was loaded)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get reports/[decimal reportId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Accept"} string? accept, "attachments"|"discussions"|"proofs"|"format"|"objectValue"|"scope"|"source"|"sourceSheets"? include, "linkInFromCellDetails"|"linksOutToCellsDetails"? exclude, decimal accessApiLevel = 0, decimal pageSize = 100, decimal page = 1, int level = 0) returns anydata {
    }

    # Gets a Report's publish settings
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + reportId - reportID of the report being accessed
    # + return - returns can be any of following types 
    # http:Ok (The Report's publish settings)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get reports/[decimal reportId]/publish(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns ReportPublish|ErrorDefault {
    }

    # List report shares
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + reportId - reportID of the report being accessed
    # + sharingInclude - When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group)
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of Share objects. By default, this operation returns only item-level shares (scope=ITEM). Use the sharingInclude parameter to request that workspace-level shares (include=workspaceShares) also be returned)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get reports/[decimal reportId]/shares(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "ITEM"|"WORKSPACE"? sharingInclude, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20017|ErrorDefault {
    }

    # Get report share
    #
    # + reportId - reportID of the report being accessed
    # + shareId - The unique identifier for the share
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - returns can be any of following types 
    # http:Ok (Returns Share object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get reports/[decimal reportId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal accessApiLevel = 0) returns Share|ErrorDefault {
    }

    # Search Everything
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + query - Text with which to perform the search. Enclose in double-quotes for an exact search
    # + location - **Deprecated** When specified with a value of **personalWorkspace**, limits the response to only those items in the user's workspaces
    # + modifiedSince - When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    # + include - When specified with a value of **favoriteFlag**, response indicates which returned items are favorites.  favorite -- dashboards, folders, reports, sheets, templates, and workspaces will have the property favorite: true parentObjectFavorite -- attachments, discussions, summary fields, and rows will have the property parentObjectFavorite: true
    # + scopes - If search fails, try using an array for each type of this comma-separated list of search filters
    # + return - returns can be any of following types 
    # http:Ok (SearchResult object that contains an array of Search objects (maximum 100))
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get search(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, string query, string? modifiedSince, ("attachments"|"cellData"|"comments"|"folderNames"|"reportNames"|"sheetNames"|"sightNames"|"summaryFields"|"templateNames"|"workspaceNames")[]? scopes, string location = "", string include = "") returns InlineResponse20020|ErrorDefault {
    }

    # Search Sheet
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + query - Text with which to perform the search. Enclose in double-quotes for an exact search
    # + return - returns can be any of following types 
    # http:Ok (SearchResult object containing an array of SearchResultItem objects in a sheet (maximum 100))
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get search/sheets/[decimal sheetId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, string query) returns InlineResponse20021|ErrorDefault {
    }

    # Gets application constants.
    #
    # + return - OK 
    resource function get serverinfo() returns ServerInfo {
    }

    # List asset shares
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + assetType - The type of the asset. Used in combination with assetId to determine the asset
    # + assetId - The id of the asset. Used in combination with assetType to determine the asset.
    # Depending on the asset, this may be a numeric or string value
    # + maxItems - Request query parameter used in endpoints that support token based pagination.
    # The maximum amount of items to return in the response. The default and minimum are 100
    # + lastKey - The lastKey token returned from the previous page of results. If not specified,
    # the first page of results is returned
    # + sharingInclude - When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group)
    # + return - returns can be any of following types 
    # http:Ok (Object containing an array of [Share response](/api/smartsheet/openapi/sharing/shareresponse) objects. By default, this operation returns only item-level shares 
# (scope=ITEM). Use the sharingInclude parameter to request that workspace level shares also be returned.
# 
# The response result will always exist, but the list may be empty if there are no shares for the specified asset
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get shares(@http:Header {name: "Authorization"} string? authorization, "sheet"|"report"|"sight"|"workspace"|"collection"|"file" assetType, string assetId, string? lastKey, "ITEM"|"WORKSPACE"? sharingInclude, int:Signed32 maxItems = 100) returns InlineResponse20022|ErrorDefault {
    }

    # Get asset share
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + shareId - The unique identifier for the share
    # + assetType - The type of the asset. Used in combination with assetId to determine the asset
    # + assetId - The id of the asset. Used in combination with assetType to determine the asset.
    # Depending on the asset, this may be a numeric or string value
    # + return - returns can be any of following types 
    # http:Ok (The share specified by the shareId)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, "sheet"|"report"|"sight"|"workspace"|"collection"|"file" assetType, string assetId) returns ShareResponse|ErrorDefault {
    }

    # List Sheets
    #
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + include - A comma-separated list of optional elements to include in the response:
    # * **sheetVersion** - current version number of each sheet, should not be combined with pagination
    # * **source** - the Source object for any sheet that was created from another sheet, if any
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + modifiedSince - When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    # + numericDates - You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (SUCCESS)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sheets(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "sheetVersion"|"source"? include, string? modifiedSince, decimal accessApiLevel = 0, boolean includeAll = false, boolean numericDates = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20024|ErrorDefault {
    }

    # Get Sheet
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sheetId - Sheet Id of the sheet being accessed
    # + Accept - The Accept request-header field can be used to specify certain media types which are acceptable for the response
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + include - A comma-separated list of optional elements to include in the response:
    # * **attachments** - includes the metadata for sheet-level and row-level attachments. To include discussion attachments, both attachments and discussions must be present in the include list.
    # * **columnType** -includes columnType attribute in the row's cells indicating the type of the column the cell resides in.
    # * **crossSheetReferences** - includes the cross-sheet references
    # * **discussions** - includes sheet-level and row-level discussions. To include discussion attachments, both attachments and discussions must be present in the include list.
    # * **filters** - includes filteredOut attribute indicating if the row should be displayed or hidden according to the sheet's filters.
    # * **filterDefinitions** - includes type of filter, operators used, and criteria
    # * **format** -  includes column, row, cell, and summary fields formatting.
    # * **ganttConfig** - includes Gantt chart details.
    # * **objectValue** - when used in combination with a level query parameter, includes the email addresses for multi-contact data.
    # * **ownerInfo** - includes the owner's email address and the owner's user Id.
    # * **rowPermalink** - includes permalink attribute that represents a direct link to the row in the Smartsheet application.
    # * **source** - adds the Source object indicating which report, sheet  Sight (aka dashboard), or template the sheet was created from, if any.
    # * **writerInfo** - includes createdBy and modifiedBy attributes on the row or summary fields, indicating the row or summary field's creator, and last modifier
    # + exclude - A comma-separated list of element types to exclude from the response:
    # * **filteredOutRows** - excludes filtered-out rows from response payload if a sheet filter is applied; includes total number of filtered rows
    # * **linkInFromCellDetails** - excludes the following attributes from the **cell.linkInFromCell** object: `columnId`, `rowId`, `status`
    # * **linksOutToCellsDetails** - excludes the following attributes from the **cell.linksOutToCells** array elements: `columnId`, `rowId`, `status`
    # * **nonexistentCells** - excludes empty cells
    # + columnIds - A comma-separated list of column ids. The response contains only the specified columns in the "columns" array, and individual rows' "cells" array only contains cells in the specified columns
    # + filterId - Overrides the existing include={filters} parameter if both are supplied. Applies the given filter (if accessible by the calling user) and marks the affected rows as "filteredOut": true
    # + ifVersionAfter - If version specified is still the current sheet version, then returns an abbreviated Sheet object with only the sheet version property. Otherwise, if the sheet has been modified, returns the complete Sheet object. Intended to allow clients with a cached copy to make sure they have the latest version
    # + level - Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + paperSize - applies to PDF format only
    # + rowIds - A comma-separated list of row Ids on which to filter the rows included in the result
    # + rowNumbers - A comma-separated list of row numbers on which to filter the rows included in the result. Non-existent row numbers are ignored
    # + rowsModifiedSince - Filter to return only rows that have been modified since the date/time provided. Date should be in ISO-8601 format
    # + return - returns can be any of following types 
    # http:Ok (The Sheet that was loaded)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sheets/[decimal sheetId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Accept"} string? accept, "attachments"|"columnType"|"crossSheetReferences"|"discussions"|"filters"|"filterDefinitions"|"format"|"ganttConfig"|"objectValue"|"ownerInfo"|"rowPermalink"|"source"|"writerInfo"? include, "filteredOutRows"|"linkInFromCellDetails"|"linksOutToCellsDetails"|"nonexistentCells"? exclude, string? columnIds, string? filterId, int? ifVersionAfter, string? rowIds, string? rowNumbers, string? rowsModifiedSince, decimal accessApiLevel = 0, int level = 0, decimal pageSize = 100, decimal page = 1, "LETTER"|"LEGAL"|"WIDE"|"ARCHD"|"A4"|"A3"|"A2"|"A1"|"A0" paperSize = "LETTER") returns anydata {
    }

    # List Attachments
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - OK 
    resource function get sheets/[decimal sheetId]/attachments(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20027 {
    }

    # Get Attachment
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + attachmentId - ID of the attachment
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function get sheets/[decimal sheetId]/attachments/[string attachmentId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns InlineResponse20029 {
    }

    # List Versions
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + attachmentId - ID of the attachment
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - OK 
    resource function get sheets/[decimal sheetId]/attachments/[string attachmentId]/versions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20027 {
    }

    # List All Automation Rules
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - The list of AutomationRule objects 
    resource function get sheets/[decimal sheetId]/automationrules(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20030 {
    }

    # Get an Automation Rule
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + automationRuleId - The Id of an Automation Rule
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - AutomationRule object 
    resource function get sheets/[decimal sheetId]/automationrules/[string automationRuleId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns InlineResponse20031 {
    }

    # List Columns
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + level - Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - Returns [IndexResult object]() containing an array of [Column objects]() 
    resource function get sheets/[decimal sheetId]/columns(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, int level = 0, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20033 {
    }

    # Get Column
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + columnId - Column Id in the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + level - Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    # + return - SUCCESS 
    resource function get sheets/[decimal sheetId]/columns/[decimal columnId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, int level = 0) returns InlineResponse20035 {
    }

    # Get a comment
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + commentId - ID of the comment
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function get sheets/[decimal sheetId]/comments/[string commentId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns InlineResponse20037 {
    }

    # List Cross-sheet References
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of CrossSheetReference objects)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sheets/[decimal sheetId]/crosssheetreferences(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20041|ErrorDefault {
    }

    # Get Cross-sheet Reference
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sheetId - Sheet Id of the sheet being accessed
    # + crossSheetReferenceId - Cross-sheet Reference Id
    # + return - returns can be any of following types 
    # http:Ok (CrossSheetReference object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sheets/[decimal sheetId]/crosssheetreferences/[decimal crossSheetReferenceId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns CrossSheetReference|ErrorDefault {
    }

    # List Discussions
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + include - A comma-separated list of optional elements to include in the response:
    # * **attachments** - effective only if comments is present, otherwise ignored
    # * **comments** - include all comments in threads
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - OK 
    resource function get sheets/[decimal sheetId]/discussions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "attachments"|"comments"? include, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20043 {
    }

    # Get Discussion
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + discussionId - ID of the discussion
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function get sheets/[decimal sheetId]/discussions/[string discussionId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns InlineResponse20045 {
    }

    # List Discussion Attachments
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + discussionId - ID of the discussion
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - OK 
    resource function get sheets/[decimal sheetId]/discussions/[string discussionId]/attachments(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20027 {
    }

    # List Proofs
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - OK 
    resource function get sheets/[decimal sheetId]/proofs(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20048 {
    }

    # Get Proof
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + include - A comma-separated list of optional elements to include in the response
    # + return - SUCCESS 
    resource function get sheets/[decimal sheetId]/proofs/[string proofId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "attachments"|"discussions"? include) returns InlineResponse20049 {
    }

    # List Proof Attachments
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - OK 
    resource function get sheets/[decimal sheetId]/proofs/[string proofId]/attachments(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20050 {
    }

    # List Proof Discussions
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + include - A comma-separated list of optional elements to include in the response:
    # * **attachments** - effective only if comments is present, otherwise ignored
    # * **comments** - include all comments in threads
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - OK 
    resource function get sheets/[decimal sheetId]/proofs/[string proofId]/discussions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "attachments"|"comments"? include, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20051 {
    }

    # List Proof Request Actions
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - OK 
    resource function get sheets/[decimal sheetId]/proofs/[string proofId]/requestactions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20052 {
    }

    # List Proof Versions
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - OK 
    resource function get sheets/[decimal sheetId]/proofs/[string proofId]/versions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20054 {
    }

    # Get Sheet Publish Status
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sheets/[decimal sheetId]/publish(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns SheetPublish|ErrorDefault {
    }

    # Get Row
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + rowId - Row Id in the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + include - A comma-separated list of elements to include in the response.
    # See [Row Include Flags](/api/smartsheet/openapi/rows).
    # Also supports the **columns** include flag, which adds a columns array that specifies all of the columns for the sheet. This enables you to have the full context of the cells in the row.
    # The **filters** include flag returns a **filteredOut** attribute indicating if the row should be displayed or hidden according to the sheet's filters
    # + exclude - A comma-separated list of element types to exclude from the response:
    # * **filteredOutRows** - excludes filtered-out rows from response payload if a sheet filter is applied; includes total number of filtered rows
    # * **linkInFromCellDetails** - excludes the following attributes from the **cell.linkInFromCell** object: `columnId`, `rowId`, `status`
    # * **linksOutToCellsDetails** - excludes the following attributes from the **cell.linksOutToCells** array elements: `columnId`, `rowId`, `status`
    # * **nonexistentCells** - excludes empty cells
    # + level - Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    # + return - Returns [Row object]() populated according to the specified parameters 
    resource function get sheets/[decimal sheetId]/rows/[decimal rowId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "columns"|"filters"? include, "filteredOutRows"|"linkInFromCellDetails"|"linksOutToCellsDetails"|"nonexistentCells"? exclude, decimal accessApiLevel = 0, int level = 0) returns InlineResponse20060 {
    }

    # List Row Attachments
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + rowId - Row Id in the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - OK 
    resource function get sheets/[decimal sheetId]/rows/[decimal rowId]/attachments(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20027 {
    }

    # List Cell History
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + rowId - Row Id in the sheet being accessed
    # + columnId - Column Id in the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + include - A comma-separated list of elements to copy:
    # * **columnType** - includes the columnType attribute for each Cell object
    # * **objectValue** - when used in combination with a level query parameter, includes the email addresses for a multi-contact cell
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + level - Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sheets/[decimal sheetId]/rows/[decimal rowId]/columns/[decimal columnId]/history(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "columnType"|"objectValue"? include, decimal pageSize = 100, decimal page = 1, int level = 0) returns InlineResponse20062|ErrorDefault {
    }

    # List Discussions with a Row
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + rowId - Row Id in the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + include - A comma-separated list of optional elements to include in the response:
    # * **attachments** - effective only if comments is present, otherwise ignored
    # * **comments** - include all comments in threads
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - OK 
    resource function get sheets/[decimal sheetId]/rows/[decimal rowId]/discussions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "attachments"|"comments"? include, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20043 {
    }

    # List Sent Update Requests
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - The list of SentUpdateRequest objects 
    resource function get sheets/[decimal sheetId]/sentupdaterequests(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20063 {
    }

    # Get Sent Update Request
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + sentUpdateRequestId - ID of the sent update request
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SentUpdateRequest object 
    resource function get sheets/[decimal sheetId]/sentupdaterequests/[string sentUpdateRequestId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns SentUpdateRequest {
    }

    # List sheet shares
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sheetId - Sheet Id of the sheet being accessed
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + sharingInclude - When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group)
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of Share objects. By default, this operation returns only item-level
# shares (scope=ITEM). Use the sharingInclude parameter to request that workspace-level shares
# (include=workspaceShares) also be returned
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sheets/[decimal sheetId]/shares(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "ITEM"|"WORKSPACE"? sharingInclude, decimal accessApiLevel = 0, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20017|ErrorDefault {
    }

    # Get sheet share
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + shareId - The unique identifier for the share
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - returns can be any of following types 
    # http:Ok (Returns Share object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sheets/[decimal sheetId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal accessApiLevel = 0) returns Share|ErrorDefault {
    }

    # Get Sheet Summary
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + include - A comma-separated list of elements to include in the response.
    # * **format**: includes format info for cells, rows, and summary fields
    # * **writerInfo**: includes createdBy and modifiedBy attributes for rows and summary fields
    # + exclude - A comma-separated list of elements to not include in the response.
    # * **displayValue**: excludes displayValue info for cells, rows, and summary fields
    # * **image**: excludes image attributes for cells and summary fields
    # * **imageAltText**: excludes alt text for cells and summary fields
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sheets/[decimal sheetId]/summary(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "format"|"writerInfo"? include, "displayValue"|"image"|"imageAltText"? exclude) returns SheetSummary|ErrorDefault {
    }

    # Get Summary Fields
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + include - A comma-separated list of elements to include in the response.
    # * **format**: includes format info for cells, rows, and summary fields
    # * **writerInfo**: includes createdBy and modifiedBy attributes for rows and summary fields
    # + exclude - A comma-separated list of elements to not include in the response.
    # * **displayValue**: excludes displayValue info for cells, rows, and summary fields
    # * **image**: excludes image attributes for cells and summary fields
    # * **imageAltText**: excludes alt text for cells and summary fields
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sheets/[decimal sheetId]/summary/fields(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "format"|"writerInfo"? include, "displayValue"|"image"|"imageAltText"? exclude, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20064|ErrorDefault {
    }

    # List Update Requests
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - The list of UpdateRequest objects 
    resource function get sheets/[decimal sheetId]/updaterequests(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20069 {
    }

    # Get an Update Request
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + updateRequestId - ID of the Update Request
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - UpdateRequest object 
    resource function get sheets/[decimal sheetId]/updaterequests/[string updateRequestId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns UpdateRequest {
    }

    # Get Sheet Version
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sheets/[decimal sheetId]/version(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns SheetVersion|ErrorDefault {
    }

    # List Dashboards
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + modifiedSince - When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    # + numericDates - You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of Dashboard objects with a subset of attributes
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sights(@http:Header {name: "Authorization"} string? authorization, string? modifiedSince, decimal accessApiLevel = 0, boolean includeAll = false, boolean numericDates = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20072|ErrorDefault {
    }

    # Get Dashboard
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sightId - SightID of the sight being accessed
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + include - A comma-separated list of optional elements to include in the response:
    # * **objectValue** - when used in combination with a **level** query parameter, includes the email addresses for multi-contact data.
    # * **source** - the Source object for any Sight that was created from another Sight, if any
    # + level - Specifies whether new functionality, such as multi-contact data is returned in a backwards-compatible, text format (**level=0**, default), multi-contact data (**level=2**), multi-picklist data (**level=3**), or Metric widget with sheet summary (**level=4**)
    # + numericDates - You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    # + return - returns can be any of following types 
    # http:Ok (Dashboard object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sights/[string sightId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "objectValue"|"source"? include, decimal accessApiLevel = 0, int level = 0, boolean numericDates = false) returns Sight|ErrorDefault {
    }

    # Get Dashboard Publish Status
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sightId - SightID of the sight being accessed
    # + return - returns can be any of following types 
    # http:Ok (SightPublish object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sights/[string sightId]/publish(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns SightPublish|ErrorDefault {
    }

    # List dashboard shares
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + sightId - SightID of the sight being accessed
    # + sharingInclude - When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group)
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of Share objects. By default, this operation returns only item-level
# shares (scope=ITEM). Use the sharingInclude parameter to request that workspace-level shares (scope=WORKSPACE)
# also be returned
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sights/[string sightId]/shares(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "ITEM"|"WORKSPACE"? sharingInclude, decimal accessApiLevel = 0, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20017|ErrorDefault {
    }

    # Get dashboard share
    #
    # + sightId - SightID of the sight being accessed
    # + shareId - The unique identifier for the share
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + return - returns can be any of following types 
    # http:Ok (Returns Share object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get sights/[string sightId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal accessApiLevel = 0) returns Share|ErrorDefault {
    }

    # List user-created templates
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - SUCCESS 
    resource function get templates(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal accessApiLevel = 0, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20076 {
    }

    resource function get templates/'public(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal accessApiLevel = 0, boolean includeAll = false, 0|1 level = 0, decimal page = 1, decimal pageSize = 100) returns InlineResponse20076 {
    }

    # List Users
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + email - Comma-separated list of email addresses on which to filter the results
    # + include - If the API request is submitted by a system administrator and when specified with a value of 'lastLogin', response includes a lastLogin attribute for each user that indicates the Last login date/time of the user.
    # **Note** If the number of users included in the response is > 100, you must paginate your query to see the lastLogin attribute. For large responses, the lastLogin attribute is never included
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + numericDates - You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of [User objects](/api/smartsheet/openapi/users/user)
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get users(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, string? email, string? include, boolean includeAll = false, boolean numericDates = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20077|ErrorDefault {
    }

    # Get User
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + userId - User Id
    # + return - returns can be any of following types 
    # http:Ok (Returns UserProfile object
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get users/[decimal userId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns UserProfile|ErrorDefault {
    }

    # List Alternate Emails
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + userId - User Id
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of [AlternateEmail objects](/api/smartsheet/openapi/alternateemailaddress/alternateemail)
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get users/[decimal userId]/alternateemails(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns InlineResponse20082|ErrorDefault {
    }

    # Get Alternate Email
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + userId - User Id
    # + alternateEmailId - Alternate Email Id
    # + return - returns can be any of following types 
    # http:Ok (Returns [AlternateEmail object](/api/smartsheet/openapi/alternateemailaddress/alternateemail)
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get users/[decimal userId]/alternateemails/[decimal alternateEmailId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns AlternateEmail|ErrorDefault {
    }

    # Get Current User
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + include - When specified with a value of 'groups', response includes an array of groups (groupId, name, and description only) that the user is a member of
    # + return - returns can be any of following types 
    # http:Ok (IndexResultUnknownPages object containing a UserProfile object
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get users/me(@http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Authorization"} string? authorization, "groups"? include) returns InlineResponse20079|ErrorDefault {
    }

    # List Org Sheets
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + modifiedSince - When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    # + return - returns can be any of following types 
    # http:Ok (IndexResultUnknownPages object containing an array of Sheet objects, limited to the following attributes:
# 
# * id
# * name
# * owner: empty string
# * ownerId: (static "0")
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get users/sheets(@http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Authorization"} string? authorization, string? modifiedSince) returns InlineResponse20080|ErrorDefault {
    }

    # List webhooks
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + includeAll - **DEPRECATED - As early as the sunset date specified in this [Changelog entry](/api/smartsheet/changelog#2025-08-04), this parameter will be discontinued (sunset) to reduce latency, mitigate performance issues, and add stability, especially for users with many webhooks.** See the [Changelog entry](/api/smartsheet/changelog#2025-08-04) for migration instructions and details.
    # If true, include all results, that is, do not paginate. Mutually exclusive
    # with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - **DEPRECATED - As early as the sunset date specified in this [Changelog entry](/api/smartsheet/changelog#2025-08-04), the unlimited value range will be discontinued (sunset) to reduce latency, mitigate performance issues, and add stability, especially for users with many webhooks.** See the [Changelog entry](/api/smartsheet/changelog#2025-08-04) for migration instructions and details.
    # The maximum number of items to return per page. Unless otherwise stated for a
    # specific endpoint, defaults to 100. If only page is specified, defaults to a
    # page size of 100. For reports, the default is 100 rows. If you need larger
    # sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (The List of Webhooks)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get webhooks(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20085|ErrorDefault {
    }

    # Get webhook
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + webhookId - The Id of a Webhook
    # + return - Webhook object 
    resource function get webhooks/[string webhookId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns Webhook {
    }

    # List workspaces
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + paginationType - Specifies the type of pagination to use. When set to 'token', enables
    # token-based pagination
    # + maxItems - Request query parameter used in ListWorkspaces endpoints that support token based pagination.
    # The maximum amount of items to return in the response. The default and minimum are 100
    # + lastKey - The lastKey token returned from the previous page of results. If not specified,
    # the first page of results is returned
    # + includeAll - **DEPRECATED - As early as the sunset date specified in this 
    # [Changelog entry](/api/smartsheet/changelog#2025-08-04), this request parameter will no longer be supported.**
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize
    # (they are ignored if includeAll=true is specified)
    # + page - **DEPRECATED - As early as the sunset date specified in this
    # [Changelog entry](/api/smartsheet/changelog#2025-08-04), this request parameter will no longer be supported.**
    # Which page to return. Defaults to 1 if not specified. If you specify a value
    # greater than the total number of pages, the last page of results is returned
    # + pageSize - **DEPRECATED - As early as the sunset date specified in this
    # [Changelog entry](/api/smartsheet/changelog#2025-08-04), this request parameter will no longer be supported.**
    # The maximum number of items to return per page. Unless otherwise stated for a
    # specific endpoint, defaults to 100. If only page is specified, defaults to a
    # page size of 100. For reports, the default is 100 rows. If you need larger
    # sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (IndexResultWorkspaces object containing an array of Workspace objects. The response structure varies based on the paginationType parameter. When using token-based pagination (default), includes lastKey field. When using legacy page-based pagination, includes pageNumber and totalPages)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get workspaces(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "token"? paginationType, string? lastKey, decimal accessApiLevel = 0, int:Signed32 maxItems = 100, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20089|ErrorDefault {
    }

    # Get workspace children
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + workspaceId - The ID of the workspace
    # + childrenResourceTypes - A comma-separated list of the child types to include in the response
    # + include - A comma-separated list of optional elements to include in the response:
    # * **source** - adds the Source object indicating which object this resource was created from, if any
    # * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned
    # + numericDates - You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + lastKey - The lastKey token returned from the previous page of results. If not specified,
    # the first page of results is returned
    # + maxItems - The maximum number of items to return in the response
    # + return - returns can be any of following types 
    # http:Ok (An array of asset references with a pagination token if there are more results)
    # http:BadRequest (Bad Request.  See Smartsheet Error Code and Message for details.)
    # http:NotFound (Not Found.  See Smartsheet Error Code and Message for details.
# )
    # http:InternalServerError (Internal Server Error.  See Smartsheet Error Code and Message for details.
# )
    # http:ServiceUnavailable (Service Unavailable.  See Smartsheet Error Code and Message for details.
# )
    resource function get workspaces/[int workspaceId]/children(@http:Header {name: "Authorization"} string? authorization, "sheets"|"reports"|"sights"|"folders" childrenResourceTypes, "source"|"ownerInfo"? include, string? lastKey, boolean numericDates = false, decimal accessApiLevel = 0, int maxItems = 100) returns PaginatedChildrenResponse|ErrorBadRequest|ErrorNotFound|ErrorInternalServerError|ErrorServiceUnavailable {
    }

    # Get workspace metadata
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + workspaceId - The ID of the workspace
    # + include - A comma-separated list of optional elements to include in the response:
    # * **source** - adds the Source object indicating which object this resource was created from, if any
    # + numericDates - You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + return - returns can be any of following types 
    # http:Ok (The metadata of a workspace)
    # http:BadRequest (Bad Request.  See Smartsheet Error Code and Message for details.)
    # http:NotFound (Not Found.  See Smartsheet Error Code and Message for details.
# )
    # http:InternalServerError (Internal Server Error.  See Smartsheet Error Code and Message for details.
# )
    # http:ServiceUnavailable (Service Unavailable.  See Smartsheet Error Code and Message for details.
# )
    resource function get workspaces/[int workspaceId]/metadata(@http:Header {name: "Authorization"} string? authorization, "source"? include, boolean numericDates = false, decimal accessApiLevel = 0) returns WorkspaceMetadata|ErrorBadRequest|ErrorNotFound|ErrorInternalServerError|ErrorServiceUnavailable {
    }

    # Get workspace
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + workspaceId - The ID of the workspace
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + include - A comma-separated list of optional elements to include in the response:
    # * **source** - adds the Source object indicating which object the folder was created from, if any
    # * **distributionLink**
    # * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned.
    # * **sheetVersion**
    # * **permalinks**
    # + loadAll - If set to `true`, the workspace's entire hierarchy of items and folders is returned
    # + return - returns can be any of following types 
    # http:Ok (A single Workspace object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get workspaces/[string workspaceId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "source"|"distributionLink"|"ownerInfo"|"sheetVersion"? include, decimal accessApiLevel = 0, boolean loadAll = false) returns Workspace|ErrorDefault {
    }

    # List workspace folders
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + workspaceId - The ID of the workspace
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + return - returns can be any of following types 
    # http:Ok (An array of Folder references)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get workspaces/[string workspaceId]/folders(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, boolean includeAll = false, decimal page = 1, decimal pageSize = 100) returns InlineResponse20092|ErrorDefault {
    }

    # List workspace shares
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + workspaceId - The ID of the workspace
    # + page - Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    # + pageSize - The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    # + includeAll - If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    # + return - returns can be any of following types 
    # http:Ok (IndexResult object containing an array of Share objects)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get workspaces/[string workspaceId]/shares(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal accessApiLevel = 0, decimal page = 1, decimal pageSize = 100, boolean includeAll = false) returns InlineResponse20017|ErrorDefault {
    }

    # Get workspace share
    #
    # + workspaceId - The ID of the workspace
    # + shareId - The unique identifier for the share
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + return - returns can be any of following types 
    # http:Ok (Returns Share object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function get workspaces/[string workspaceId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, decimal accessApiLevel = 0) returns Share|ErrorDefault {
    }

    # Update asset share
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + shareId - The unique identifier for the share
    # + assetType - The type of the asset. Used in combination with assetId to determine the asset
    # + assetId - The id of the asset. Used in combination with assetType to determine the asset.
    # Depending on the asset, this may be a numeric or string value
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a [Share response](/api/smartsheet/openapi/sharing/shareresponse) object, corresponding to what was specified in the request)
    # http:BadRequest (4XX errors typically indicate client input validation failures.)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function patch shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, "sheet"|"report"|"sight"|"workspace"|"collection"|"file" assetType, string assetId, @http:Payload UpdateShareRequest payload) returns ShareResponse|ErrorBadRequest|ErrorDefault {
    }

    # Add Favorites
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + x\-smar\-sc\-actor\-id - UserId of the user
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + payload - A list of favorites to be added 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing either a single Favorite object or an array of Favorite objects)
    # http:DefaultStatusCodeResponse (Generic Error Payload.)
    resource function post favorites(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "x-smar-sc-actor-id"} string? xSmarScActorId, @http:Payload FavoritesBody payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse2003Ok|ErrorDefault {
    }

    # List filtered events
    #
    # + Accept\-Encoding - Strongly recommended to make sure payload is compressed. Must be set to one of the following values:
    # * deflate
    # * gzip
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:BadRequest (Bad Request.  See Smartsheet Error Code and Message for details.)
    # http:Unauthorized (Unauthorized.  See Smartsheet Error Code and Message for details.
# )
    # http:Forbidden (Forbidden.  See Smartsheet Error Code and Message for details.
# )
    # http:NotFound (Not Found.  See Smartsheet Error Code and Message for details.
# )
    # http:MethodNotAllowed (Method Not Allowed.  See Smartsheet Error Code and Message for details.
# )
    # http:NotAcceptable (Not Acceptable.  See Smartsheet Error Code and Message for details.
# )
    # http:Gone (Gone.  See Smartsheet Error Code and Message for details.
# )
    # http:UnsupportedMediaType (Gone.  See Smartsheet Error Code and Message for details.
# )
    # http:TooManyRequests (Gone.  See Smartsheet Error Code and Message for details.
# )
    # http:InternalServerError (Internal Server Error.  See Smartsheet Error Code and Message for details.
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post filteredEvents(@http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Accept-Encoding"} "deflate"|"gzip"? acceptEncoding, @http:Header {name: "Authorization"} string? authorization, @http:Payload FilteredEventsRequest payload) returns InlineResponse2004Ok|ErrorBadRequest|ErrorUnauthorized|ErrorForbidden|ErrorNotFound|ErrorMethodNotAllowed|ErrorNotAcceptable|ErrorGone|ErrorUnsupportedMediaType|ErrorTooManyRequests|ErrorInternalServerError|ErrorDefault {
    }

    # Copy folder
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + folderId - Folder Id where you can create sheets, sights, reports, templates, and other folders
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + include - A comma-separated list of elements to copy:
    # * **attachments**
    # * **cellLinks** - includes cross-sheet references
    # * **data** - includes formatting
    # * **discussions** - includes comments
    # * **filters**
    # * **forms**
    # * **ruleRecipients** -- includes notification recipients, must also include rules when using this attribute
    # * **rules** -- includes notifications and workflow rules
    # * **shares** |
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    # + exclude - When specified with a value of **sheetHyperlinks**, excludes this category from the response
    # + skipRemap - A comma-separated list of references to NOT re-map for the newly created folder
    # + payload - New folder name 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a Folder object for the new folder destination)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post folders/[decimal folderId]/copy(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares"? include, "sheetHyperlinks"? exclude, "cellLinks"|"reports"|"sheetHyperlinks"|"sights"? skipRemap, @http:Payload FolderIdCopyBody payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns ContainerDestinationForCopyOk|ErrorDefault {
    }

    # Create folder
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + folderId - Folder Id where you can create sheets, sights, reports, templates, and other folders
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + include - A comma-separated list of elements to copy:
    # * **attachments**
    # * **cellLinks** - includes cross-sheet references
    # * **data** - includes formatting
    # * **discussions** - includes comments
    # * **filters**
    # * **forms**
    # * **ruleRecipients** -- includes notification recipients, must also include rules when using this attribute
    # * **rules** -- includes notifications and workflow rules
    # * **shares** |
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    # + exclude - When specified with a value of **sheetHyperlinks**, excludes this category from the response
    # + skipRemap - A comma-separated list of references to NOT re-map for the newly created folder
    # + payload - Folder to create 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a Folder object for newly created folder)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post folders/[decimal folderId]/folders(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares"? include, "sheetHyperlinks"? exclude, "cellLinks"|"reports"|"sheetHyperlinks"|"sights"? skipRemap, @http:Payload FolderIdFoldersBody payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse2007Ok|ErrorDefault {
    }

    # Move folder
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + folderId - Folder Id where you can create sheets, sights, reports, templates, and other folders
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + payload - New folder destination 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a Folder object for the new folder destination)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post folders/[decimal folderId]/move(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload FolderIdMoveBody payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns ContainerDestinationForMoveOk|ErrorDefault {
    }

    # Create Sheet in Folder
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + folderId - Folder Id where you can create sheets, sights, reports, templates, and other folders
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + include - Additional parameter to create a sheet from template.
    # A comma-separated list of elements to copy from the template
    # + payload - Sheet to create 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a Sheet object for newly created sheet, corresponding to what was specified in the request)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post folders/[decimal folderId]/sheets(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"? include, @http:Payload FolderIdSheetsBody payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse2008Ok|ErrorDefault {
    }

    resource function post folders/[decimal folderId]/sheets/'import(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Content-Disposition"} string? contentDisposition, @http:Header {name: "Content-Type"} "text/csv"|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" contentType, string sheetName, decimal? headerRowIndex, @http:Payload byte[] payload, decimal primaryColumnIndex = 0) returns InlineResponse2009Ok|ErrorDefault {
    }

    # Add Group
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + payload - [Group object](/api/smartsheet/openapi/groups/group), limited to the following attributes: 
    # + return - returns can be any of following types 
    # http:Ok (Result object, containing a [Group object](/api/smartsheet/openapi/groups/group) for the newly created group
# )
    # http:BadRequest (Bad Request.  See Smartsheet Error Code and Message for details.)
    # http:Unauthorized (Unauthorized.  See Smartsheet Error Code and Message for details.
# )
    # http:InternalServerError (Internal Server Error.  See Smartsheet Error Code and Message for details.
# )
    resource function post groups(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload GroupCreate1 payload) returns InlineResponse20011Ok|ErrorBadRequest|ErrorUnauthorized|ErrorInternalServerError {
    }

    # Add Group Members
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + groupId - Group Id
    # + return - returns can be any of following types 
    # http:Ok (Returns a Result object containing the members added to the group -- either a single [GroupMember](/api/smartsheet/openapi/groupmembers/groupmember) or array of [GroupMember](/api/smartsheet/openapi/groupmembers/groupmember) objects, corresponding to what was specified in the request.
# 
# **_This operation is asynchronous,_** _meaning the users may not yet have sharing access to sheets for a period of time after this operation returns. For small groups with limited sharing, the operation should complete quickly (within a few seconds). For large groups with many shares, this operation could possibly take more than a minute to complete._
# )
    # http:DefaultStatusCodeResponse (If an error occurs because the request specified one or more alternate email addresses, please retry using the primary email address.
# )
    resource function post groups/[decimal groupId]/members(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload GroupIdMembersBody payload) returns InlineResponse20013Ok|ErrorDefault {
    }

    # Create Folder
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + payload - Folder to create 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a Folder object for newly created folder)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post home/folders(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload HomeFoldersBody payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse2007Ok|ErrorDefault {
    }

    # List Image URLs
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - OK 
    resource function post imageurls(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload InlineBodyItemsApplicationjsonimageurls[] payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20014Ok {
    }

    # Send report via email
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + reportId - reportID of the report being accessed
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - returns can be any of following types 
    # http:Ok (Result Object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post reports/[decimal reportId]/emails(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SheetEmail payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns ResultOk|ErrorDefault {
    }

    # Share report
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + reportId - reportID of the report being accessed
    # + sendEmail - Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    # + return - returns can be any of following types 
    # http:Ok (Result object containing either a single Share object or an array of Share objects, corresponding
# to what was specified in the request. All shares have scope=ITEM
# )
    # http:BadRequest (If called with a single Share object, and that user or group share already exists, error code 1025 is returned.
# If called with an array of Share objects, and one or more user or group shares in the array already exist,
# they are ignored and omitted from the response.
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post reports/[decimal reportId]/shares(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload ReportIdSharesBody payload, boolean sendEmail = false) returns InlineResponse20018Ok|ErrorBadRequest|ErrorDefault {
    }

    # Share asset
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + assetType - The type of the asset. Used in combination with assetId to determine the asset
    # + assetId - The id of the asset. Used in combination with assetType to determine the asset.
    # Depending on the asset, this may be a numeric or string value
    # + sendEmail - Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    # + return - returns can be any of following types 
    # http:Ok (Result object containing an array of [Share response](/api/smartsheet/openapi/sharing/shareresponse) objects, corresponding to what was specified in the request.
# 
# If the users and/or groups are already shared to the specified asset, they will be omitted from the response. 
# An empty response indicates that all the users and/or groups in the request are already shared to the asset
# )
    # http:BadRequest (4XX errors typically indicate client input validation failures.)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post shares(@http:Header {name: "Authorization"} string? authorization, "sheet"|"report"|"sight"|"workspace"|"collection"|"file" assetType, string assetId, @http:Payload CreateShareRequest[] payload, boolean sendEmail = false) returns InlineResponse20023Ok|ErrorBadRequest|ErrorDefault {
    }

    # Create Sheet in "Sheets" Folder
    #
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + include - Additional parameter to create a sheet from template.
    # A comma-separated list of elements to copy from the template
    # + payload - Sheet to create 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a Sheet object for newly created sheet, corresponding to what was specified in the request)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post sheets(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"? include, @http:Payload SheetsBody payload, decimal accessApiLevel = 0, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse2008Ok|ErrorDefault {
    }

    resource function post sheets/'import(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Content-Disposition"} string? contentDisposition, @http:Header {name: "Content-Type"} "text/csv"|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" contentType, string sheetName, decimal? headerRowIndex, @http:Payload byte[] payload, decimal primaryColumnIndex = 0) returns InlineResponse2009Ok|ErrorDefault {
    }

    # Attach File or URL to Sheet
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/attachments(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, http:Request request, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20028Ok {
    }

    # Attach New version
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + attachmentId - ID of the attachment
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/attachments/[string attachmentId]/versions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, http:Request request, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20028Ok {
    }

    # Add Columns
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + payload - A [Column object]() that contains the following attributes 
    # + return - Returns [Result object](/api/smartsheet/openapi/schemas/result) containing the newly created columns -- either a single [Column object](/api/smartsheet/openapi/columns/column) or an array of Column objects, corresponding to what was specified in the request 
    resource function post sheets/[decimal sheetId]/columns(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload ColumnObjectAttributes payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20034Ok {
    }

    # Attach File or URL to Comment
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + commentId - ID of the comment
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/comments/[string commentId]/attachments(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, http:Request request, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20028Ok {
    }

    # Copy Sheet
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + include - A comma-separated list of elements to copy:
    # * **attachments**
    # * **cellLinks** - includes cross-sheet references
    # * **data** - includes formatting
    # * **discussions** - includes comments
    # * **filters**
    # * **forms**
    # * **ruleRecipients** -- includes notification recipients, must also include rules when using this attribute
    # * **rules** -- includes notifications and workflow rules
    # * **shares** |
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    # + exclude - When specified with a value of **sheetHyperlinks**, excludes this category from the response
    # + payload - Destination where to create a copy of the specified sheet 
    # + return - returns can be any of following types 
    # http:Ok (SUCCESS)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post sheets/[decimal sheetId]/copy(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares"? include, "sheetHyperlinks"? exclude, @http:Payload ContainerDestinationForCopy payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20040Ok|ErrorDefault {
    }

    # Create Cross-sheet References
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + payload - CrossSheetReference object to create 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a CrossSheetReference object, corresponding to what was specified in the request)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post sheets/[decimal sheetId]/crosssheetreferences(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SheetIdCrosssheetreferencesBody payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20042Ok|ErrorDefault {
    }

    # Create a Discussion
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/discussions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, http:Request request, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20044Ok {
    }

    # Create a comment
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + discussionId - ID of the discussion
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/discussions/[string discussionId]/comments(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, http:Request request, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20046Ok {
    }

    # Send Sheet via Email
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + payload - [SheetEmail object](/api/smartsheet/openapi/sendviaemail/sheetemail) 
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/emails(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SheetEmail payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20047Ok {
    }

    # Move Sheet
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + payload - Destination to move the specified sheet 
    # + return - returns can be any of following types 
    # http:Ok (SUCCESS)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post sheets/[decimal sheetId]/move(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload ContainerDestinationForMove payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20040Ok|ErrorDefault {
    }

    # Attach File to Proof
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/proofs/[string proofId]/attachments(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload byte[] payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20028Ok {
    }

    # Create Proof Discussion
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/proofs/[string proofId]/discussions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, http:Request request, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20044Ok {
    }

    # Create Proof Request
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/proofs/[string proofId]/requests(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload ProofRequestBody payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20053Ok {
    }

    # Create Proof Version
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/proofs/[string proofId]/versions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, http:Request request, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20055Ok {
    }

    # Add Rows
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + allowPartialSuccess - When specified with a value of true, enables partial success for this bulk operation. See [Bulk operations > Partial success](/api/smartsheet/guides/advanced-topics/scalability-options) for more information
    # + overrideValidation - You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    # + payload - [Row object](/api/smartsheet/openapi/rows/row) or an array of Row objects, with the following attributes: 
    # + return - returns can be any of following types 
    # http:Ok (Returns [Result object](/api/smartsheet/openapi/schemas/result) containing the newly created rows -- either a single [Row object](/api/smartsheet/openapi/rows/row) or array of Row objects, corresponding to what was specified in the request, as well as the new version of the sheet)
    # http:DefaultStatusCodeResponse (When **allowPartialSuccess=false** (or not specified):
# 
# If an error occurs, the [Error object](/api/smartsheet/openapi/schemas/error) returned contains a **detail** attribute set to an object with the following attribute:
# * **index**: the array index of the row that caused the error (0 if a single Row was passed in)
# 
# If any error occurs, the entire request fails (no rows are added), and the error response returned describes the first problem that was encountered. For example:
# ```
# {
#   "errorCode": 1042,
#   "message": "The cell value in column 5504245941200772 did not conform to the strict requirements for type CHECKBOX."
#   "detail": {
#     "index": 4
#   }
# }
# ```
# 
# When **allowPartialSuccess=true**:
# 
# When partial success is enabled, and one or more of the objects in the request fail to be added/updated/deleted, a standard [Result object](/api/smartsheet/openapi/schemas/result) is returned, but with a **message** of **'PARTIAL_SUCCESS'** (instead of **'SUCCESS'**), and a **resultCode** of **3**. Additionally, the object contains a **failedItems** attribute -- an array of [BulkItemFailure objects](/api/smartsheet/openapi/schemas/bulkitemfailure) that contains an item for each object in the request that failed to be added/updated/deleted.
# )
    resource function post sheets/[decimal sheetId]/rows(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SheetIdRowsBody1 payload, decimal accessApiLevel = 0, @http:Header {name: "Content-Type"} string? contentType = "application/json", boolean allowPartialSuccess = false, boolean overrideValidation = false) returns InlineResponse20058Ok|ErrorDefault {
    }

    # Attach File or URL to Row
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + rowId - Row Id in the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/rows/[decimal rowId]/attachments(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, http:Request request, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20028Ok {
    }

    # Add Image to Cell
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + rowId - Row Id in the sheet being accessed
    # + columnId - Column Id in the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + Content\-Disposition - Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    # + Content\-Length - Must be set to the size of the file, in bytes. For example to determine file size using in UNIX:
    # $ ls -l ProgressReport.docx
    # 5463 ProgressReport.docx
    # + altText - Url-encoded alternate text for the image
    # + overrideValidation - You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/rows/[decimal rowId]/columns/[decimal columnId]/cellimages(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Content-Disposition"} string? contentDisposition, @http:Header {name: "Content-Length"} int? contentLength, string? altText, @http:Payload byte[] payload, @http:Header {name: "Content-Type"} string? contentType = "application/json", boolean overrideValidation = false) returns InlineResponse20061Ok {
    }

    # Create a Discussion on a Row
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + rowId - Row Id in the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/rows/[decimal rowId]/discussions(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, http:Request request, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20044Ok {
    }

    # Create Proof
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + rowId - Row Id in the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/rows/[decimal rowId]/proofs(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload byte[] payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20055Ok {
    }

    # Copy Rows to Another Sheet
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + include - A comma-separated list of row elements to copy in addition to the cell data:
    # * **all** - specify a value of **all** to include everything (attachments, children, and discussions).
    # * **attachments**
    # * **children** -  if specified, any child rows of the rows specified in the request are also copied to the destination sheet, and parent-child relationships amongst rows are preserved within the destination sheet; if not specified, only the rows specified in the request are copied.
    # * **discussions**
    # + ignoreRowsNotFound - **true** or **false**: default is **false**. If set to **true**, specifying row Ids that do not exist within the source sheet does not cause an error response. If omitted or set to **false**, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are copied)
    # + return - CopyOrMoveRowResult object 
    resource function post sheets/[decimal sheetId]/rows/copy(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "all"|"attachments"|"children"|"discussions"? include, @http:Payload CopyOrMoveRowDirective payload, @http:Header {name: "Content-Type"} string? contentType = "application/json", boolean ignoreRowsNotFound = false) returns CopyOrMoveRowResultOk {
    }

    # Send Rows via Email
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + payload - The columns included for each row in the email are populated according to the following rules: 
    # + return - SUCCESS 
    resource function post sheets/[decimal sheetId]/rows/emails(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload MultiRowEmail payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20047Ok {
    }

    # Move Rows to Another Sheet
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + include - A comma-separate list of row elements to move in addition to the cell data
    # + ignoreRowsNotFound - **true** or **false**: default is **false**. If set to **true**, specifying row Ids that do not exist within the source sheet does not cause an error response. If omitted or set to **false**, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are moved)
    # + return - CopyOrMoveRowResult object 
    resource function post sheets/[decimal sheetId]/rows/move(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "attachments"|"discussions"? include, @http:Payload CopyOrMoveRowDirective payload, @http:Header {name: "Content-Type"} string? contentType = "application/json", boolean ignoreRowsNotFound = false) returns CopyOrMoveRowResultOk {
    }

    # Share sheet
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sheetId - Sheet Id of the sheet being accessed
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + sendEmail - Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    # + return - returns can be any of following types 
    # http:Ok (Result object containing either a single Share object or an array of Share objects, corresponding to what
# was specified in the request. All shares have scope=ITEM
# )
    # http:BadRequest (If called with a single Share object, and that user or group share already exists, error code 1025 is returned.
# If called with an array of Share objects, and one or more user or group shares in the array already exist,
# they are ignored and omitted from the response.
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post sheets/[decimal sheetId]/shares(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SheetIdSharesBody payload, decimal accessApiLevel = 0, boolean sendEmail = false) returns InlineResponse20018Ok|ErrorBadRequest|ErrorDefault {
    }

    # Sort Rows in Sheet
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + include\&exclude - (Optional) Any of the relevant parameters or query parameters listed for [Get Sheet](/api/smartsheet/openapi/sheets/getsheet)
    # + payload - [SortSpecifier](/api/smartsheet/openapi/schemas/sortspecifier) with the following attribute: 
    # + return - Returns [Sheet object](/api/smartsheet/openapi/sheets/sheet), populated according to the specified parameters 
    resource function post sheets/[decimal sheetId]/sort(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Query {name: "include&exclude"} string? includeExclude, @http:Payload SortSpecifier payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20071Ok {
    }

    # Add Summary Fields
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + renameIfConflict - Set to true if you want to override the requirement for unique summary field names. Repeated names will be adjusted by appending "(1)" or similar after the field name
    # + payload - Array of SummaryField objects 
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post sheets/[decimal sheetId]/summary/fields(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SummaryFieldCreateRequest[] payload, boolean renameIfConflict = false) returns InlineResponse20066Ok|ErrorDefault {
    }

    # Add Image to Sheet Summary
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + fieldId - Summary Field Id of the sheet summary field being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + Content\-Disposition - Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    # + Content\-Length - Must be set to the size of the file, in bytes. For example to determine file size using in UNIX:
    # $ ls -l ProgressReport.docx
    # 5463 ProgressReport.docx
    # + altText - Url-encoded alternate text for the image
    # + overrideValidation - You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    # + return - returns can be any of following types 
    # http:Ok (SUCCESS)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post sheets/[decimal sheetId]/summary/fields/[decimal fieldId]/images(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Content-Disposition"} string? contentDisposition, @http:Header {name: "Content-Length"} int? contentLength, string? altText, @http:Payload byte[] payload, @http:Header {name: "Content-Type"} string? contentType = "application/json", boolean overrideValidation = false) returns InlineResponse20068Ok|ErrorDefault {
    }

    # Create an Update Request
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - Result object containing the newly created UpdateRequest object 
    resource function post sheets/[decimal sheetId]/updaterequests(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload UpdateRequest payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20070Ok {
    }

    # Copy Dashboard
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + sightId - SightID of the sight being accessed
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a dashboard with a subset of attributes for the newly created dashboard
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post sights/[string sightId]/copy(@http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Authorization"} string? authorization, @http:Payload ContainerDestinationForCopy payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20074Ok|ErrorDefault {
    }

    # Move Dashboard
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + sightId - SightID of the sight being accessed
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a Dashboard object with a subset of attributes for the moved dashboard
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post sights/[string sightId]/move(@http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Authorization"} string? authorization, @http:Payload ContainerDestinationForMove payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20074Ok|ErrorDefault {
    }

    # Share dashboard
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + sightId - SightID of the sight being accessed
    # + sendEmail - Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    # + return - returns can be any of following types 
    # http:Ok (Result object containing either a single Share object or an array of Share objects, corresponding to what was
# specified in the request. All shares have scope=ITEM
# )
    # http:BadRequest (If called with a single Share object, and that user or group share already exists, error code 1025 is returned.
# If called with an array of Share objects, and one or more user or group shares in the array already exist,
# they are ignored and omitted from the response.
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post sights/[string sightId]/shares(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload Share payload, decimal accessApiLevel = 0, boolean sendEmail = false) returns InlineResponse20018Ok|ErrorBadRequest|ErrorDefault {
    }

    # Gets or Refreshes an Access Token
    #
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the response
    # + client_id - The client Id you obtained when you registered your app
    # + client_secret - (Optional) Must use either this value or hash. Plain text method for sending this value. For example, client_secret={app_secret}. Encryption occurs at the HTTPS level
    # + code - Authorization code acquired after user selects "Allow" in the Web login UI
    # + grant_type - Must be set to "authorization_code"
    # + hash - (Optional) Must use either this value or client_secret. SHA-256 hash of your app secret concatenated with a pipe and the authorization code. For example, hash={SHA_256(app_secret|code)}
    # + refresh_token - refresh_token value that came with the access token
    # + redirect_url - **Deprecated** If supplied, must match the redirect URI you registered for your app
    # + return - returns can be any of following types 
    # http:Ok (An access token)
    # http:DefaultStatusCodeResponse (Error Payload)
    resource function post token(@http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Content-Type"} "application/x-www-form-urlencoded"? contentType, @http:Query {name: "client_id"} string clientId, @http:Query {name: "client_secret"} string? clientSecret, string? code, @http:Query {name: "grant_type"} "authorization_code"|"refresh_token" grantType, string? hash, @http:Query {name: "refresh_token"} string? refreshToken, @http:Query {name: "redirect_url"} string? redirectUrl) returns TokenOk|ErrorDefault {
    }

    # Add User
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sendEmail - Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    # + payload - The User to be created 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing the newly created [User object](/api/smartsheet/openapi/users/user)
# )
    # http:DefaultStatusCodeResponse (If an error occurs because the request specified the alternate email address (that is, not the primary email address) of an existing Smartsheet user (to invite the user into the org), the Error object returned contains a detail attribute set to an array of objects, each object in the array having the following attributes:
# 
#   * alternateEmailAddress: User's alternate email address that was specified in the request
#   * primaryEmailAddress: User's primary email address that must instead be specified for the operation
# 
# For example:
# ```
# {
#   "errorCode": 5xxx,
#   "message": "The specified email address (u1+1@smartsheet.com) is an alternate address for a user with the primary email address of u1@smartsheet.com. Please retry using their primary address."
#   "detail": [
#       {
#         "alternateEmailAddress": "u1+1@smartsheet.com",
#         "primaryEmailAddress": "u1@smartsheet.com"
#       }
#   ]
# }
# ```
# )
    resource function post users(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload User payload, boolean sendEmail = false) returns InlineResponse20078Ok|ErrorDefault {
    }

    # Add Alternate Emails
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + userId - User Id
    # + return - returns can be any of following types 
    # http:Ok (Result object containing an array of the newly created [AlternateEmail objects](/api/smartsheet/openapi/alternateemailaddress/alternateemail)
# )
    # http:DefaultStatusCodeResponse (If a single email address is specified in the request and an error occurs, the response contains an Error object.
# 
# If multiple email addresses are specified in the request and an error occurs, the Error object returned contains a detail attribute set to an array of objects, each object in the array having the following attributes:
#   * email: Problematic email address specified in the request
#   * errorCode: Smartsheet error code
#   * message: Message that describes the problem with the specified email address
# 
# For example:
# ```
# {
#   "errorCode": 1160,
#   "message": "Invalid bulk request. See detail for more information."
#   "detail": [
#       {
#         "email": "altEmail1@smartsheet.com",
#         "errorCode": 1157,
#         "message": "This address is already associated with another Smartsheet account, so it cannot be added as an alternate address for this account."
#       }
#   ]
# }
# ```
# )
    resource function post users/[decimal userId]/alternateemails(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload UserIdAlternateemailsBody payload) returns InlineResponse20083Ok|ErrorDefault {
    }

    # Make Alternate Email Primary
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + userId - User Id
    # + alternateEmailId - Alternate Email Id
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:Forbidden (This can be caused by the following situation:
# 
# You are not on an Enterprise plan and do not have this feature enabled.
# 
# Example response:
# 
# ```json
# {
#     "errorCode": 1189,
#     "message": "Only Enterprise or Team accounts with security controls are able to change primary emails.",
#     "refId": "abcd1234"
# }
# ```
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post users/[decimal userId]/alternateemails/[decimal alternateEmailId]/makeprimary(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns InlineResponse20084Ok|http:Forbidden|ErrorDefault {
    }

    # Deactivate User
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + userId - User Id
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object
# )
    # http:BadRequest (The user is managed from a directory service.
# 
# Example response:
# 
# ```json
# {
#   "errorCode": 5697,
#   "message": "This person is managed from your directory service. Please deactivate them through your directory service instead.",
#   "refId": "abcd1234"
# }
# ```
# )
    # http:Forbidden (This can be caused by the following situations:
# 
# - User account has a common ISP domain email.
#   ```json
#   {
#     "errorCode": 1359,
#     "message": "User account with a common ISP domain email cannot be deactivated. You can only remove them from the Org.",
#     "refId": "abcd1234"
#   }
#   ```
# - User is external: in your org, not in your EPM child org, or has no internal planMembership in your plan.
#   ```json
#   {
#     "errorCode": 1004,
#     "message": "You are not authorized to perform this action.",
#     "refId": "abcd1234"
#   }
#   ```
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post users/[decimal userId]/deactivate(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResultOk|http:BadRequest|http:Forbidden|ErrorDefault {
    }

    # Update User Profile Image
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + userId - User Id
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post users/[decimal userId]/profileimage(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, http:Request request, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20081Ok|ErrorDefault {
    }

    # Reactivate User
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + userId - User Id
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object
# )
    # http:BadRequest (The user is managed from a directory service.
# 
# Example response:
# 
# ```json
# {
#   "errorCode": 5717,
#   "message": "This person is managed from your directory service. Please reactivate them through your directory service instead.",
#   "refId": "abcd1234"
# }
# ```
# )
    # http:Forbidden (The user is external: in your org, not in your EPM child org, or has no internal planMembership in your plan.
# 
# Example response:
# 
# ```json
# {
#   "errorCode": 1004,
#   "message": "You are not authorized to perform this action.",
#   "refId": "abcd1234"
# }
# ```
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post users/[decimal userId]/reactivate(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource) returns GenericResultOk|http:BadRequest|http:Forbidden|ErrorDefault {
    }

    # Create webhook
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - returns can be any of following types 
    # http:Ok (Result object, containing a Webhook object for the newly created webhook)
    # http:DefaultStatusCodeResponse (Error Payload)
    resource function post webhooks(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload WebhooksBody payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20086Ok|ErrorDefault {
    }

    # Reset shared secret
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + webhookId - The Id of a Webhook
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - OK 
    resource function post webhooks/[string webhookId]/resetSharedSecret(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20088Ok {
    }

    # Create workspace
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + include - A comma-separated list of elements to include:
    # * **all**
    # * **attachments**
    # * **brand**
    # * **cellLinks** - includes cross-sheet references
    # * **data** - includes formatting
    # * **discussions** - includes comments
    # * **filters**
    # * **forms**
    # * **ruleRecipients**
    # * **rules**
    # * **shares**
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    # + skipRemap - A comma-separated list of references to NOT re-map for the newly created folder
    # + payload - Workspace to create 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a Workspace object for newly created workspace)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post workspaces(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "all"|"attachments"|"brand"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares"? include, "cellLinks"|"reports"|"sheetHyperlinks"|"sights"? skipRemap, @http:Payload WorkspacesBody payload, decimal accessApiLevel = 0, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20090Ok|ErrorDefault {
    }

    # Copy workspace
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + workspaceId - The ID of the workspace
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + include - A comma-separated list of elements to include:
    # * **all**
    # * **attachments**
    # * **brand**
    # * **cellLinks** - includes cross-sheet references
    # * **data** - includes formatting
    # * **discussions** - includes comments
    # * **filters**
    # * **forms**
    # * **ruleRecipients**
    # * **rules**
    # * **shares**
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    # + skipRemap - A comma-separated list of references to NOT re-map for the newly created folder
    # + payload - New workspace name 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a Workspace object for the new workspace destination)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post workspaces/[string workspaceId]/copy(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "all"|"attachments"|"brand"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares"? include, "cellLinks"|"reports"|"sheetHyperlinks"|"sights"? skipRemap, @http:Payload WorkspaceIdCopyBody payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns ContainerDestinationForCopyOk|ErrorDefault {
    }

    # Create folder in workspace
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + workspaceId - The ID of the workspace
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + payload - Folder to create 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a Folder object for newly created folder)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post workspaces/[string workspaceId]/folders(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload FolderNameOnly payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20093Ok|ErrorDefault {
    }

    # Share workspace
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + workspaceId - The ID of the workspace
    # + sendEmail - Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    # + return - returns can be any of following types 
    # http:Ok (This operation supports both single-object and bulk semantics. For more information, see Optional Bulk Operations
# )
    # http:BadRequest (If called with a single Share object, and that user or group share already exists, error code 1025 is returned.
# If called with an array of Share objects, and one or more user or group shares in the array already exist,
# they are ignored and omitted from the response.
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post workspaces/[string workspaceId]/shares(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload WorkspaceIdSharesBody payload, decimal accessApiLevel = 0, boolean sendEmail = false) returns InlineResponse20018Ok|ErrorBadRequest|ErrorDefault {
    }

    # Create Sheet in Workspace
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + workspaceId - The ID of the workspace
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + include - Additional parameter to create a sheet from template.
    # A comma-separated list of elements to copy from the template
    # + payload - Sheet to create 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing a Sheet object for newly created sheet, corresponding to what was specified in the request)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function post workspaces/[string workspaceId]/sheets(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"? include, @http:Payload WorkspaceIdSheetsBody payload, decimal accessApiLevel = 0, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse2008Ok|ErrorDefault {
    }

    resource function post workspaces/[string workspaceId]/sheets/'import(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Content-Disposition"} string? contentDisposition, @http:Header {name: "Content-Type"} "text/csv"|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" contentType, string sheetName, decimal? headerRowIndex, @http:Payload byte[] payload, decimal primaryColumnIndex = 0) returns InlineResponse2009Ok|ErrorDefault {
    }

    # Update folder
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + folderId - Folder Id where you can create sheets, sights, reports, templates, and other folders
    # + return - returns can be any of following types 
    # http:Ok (Result object containing the modified Folder object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put folders/[decimal folderId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload Folder payload) returns InlineResponse2005|ErrorDefault {
    }

    # Update Group
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + groupId - Group Id
    # + payload - Group object, limited to the following attributes: 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing the [Group object](/api/smartsheet/openapi/groups/group) for the updated group)
    # http:BadRequest (Bad Request.  See Smartsheet Error Code and Message for details.)
    # http:InternalServerError (Internal Server Error.  See Smartsheet Error Code and Message for details.
# )
    resource function put groups/[decimal groupId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload GroupUpdate1 payload) returns InlineResponse20011|ErrorBadRequest|ErrorInternalServerError {
    }

    # Set a Report's publish status
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + reportId - reportID of the report being accessed
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - returns can be any of following types 
    # http:Ok (ReportPublish object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put reports/[decimal reportId]/publish(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload ReportPublish payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20016|ErrorDefault {
    }

    # Update report share
    #
    # + reportId - reportID of the report being accessed
    # + shareId - The unique identifier for the share
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - returns can be any of following types 
    # http:Ok (Result object containing the modified Share object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put reports/[decimal reportId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SharesshareIdBody payload, decimal accessApiLevel = 0) returns InlineResponse20019|ErrorDefault {
    }

    # Update Sheet
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sheetId - Sheet Id of the sheet being accessed
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + payload - [Sheet object](/api/smartsheet/openapi/sheets/sheet) limited to the following attributes: 
    # + return - Returns [Result object](/api/smartsheet/openapi/schemas/result) containing a [Sheet object](/api/smartsheet/openapi/sheets/sheet) for the updated sheet 
    resource function put sheets/[decimal sheetId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload UpdateSheet payload, decimal accessApiLevel = 0) returns InlineResponse20026 {
    }

    # Update an Automation Rule
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + automationRuleId - The Id of an Automation Rule
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - Result object containing the updated AutomationRule object 
    resource function put sheets/[decimal sheetId]/automationrules/[string automationRuleId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload AutomationRule payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20032 {
    }

    # Update Column
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + columnId - Column Id in the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + payload - A [Column object]() that contains the following attributes: 
    # + return - Returns [Result object](/api/smartsheet/openapi/schemas/result) containing the [Column object](/api/smartsheet/openapi/columns/column) that was modified 
    resource function put sheets/[decimal sheetId]/columns/[decimal columnId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload ColumnObjectAttributes payload) returns InlineResponse20036 {
    }

    # Edit a comment
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + commentId - ID of the comment
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - SUCCESS 
    resource function put sheets/[decimal sheetId]/comments/[string commentId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload CommentCreationRequest payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20038 {
    }

    # Update Proof Status
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + proofId - Proof Id of the original proof
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - SUCCESS 
    resource function put sheets/[decimal sheetId]/proofs/[string proofId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload UpdateProofStatusRequest payload) returns InlineResponse20049 {
    }

    # Set Sheet Publish Status
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + payload - SheetPublish object 
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put sheets/[decimal sheetId]/publish(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SheetPublishRequest payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20056|ErrorDefault {
    }

    # Update Rows
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + allowPartialSuccess - When specified with a value of true, enables partial success for this bulk operation. See [Bulk operations > Partial success](/api/smartsheet/guides/advanced-topics/scalability-options) for more information
    # + overrideValidation - You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    # + payload - [Row object](/api/smartsheet/openapi/rows/row) or an array of Row objects, with the following attributes: 
    # + return - returns can be any of following types 
    # http:Ok (Returns [Result object](/api/smartsheet/openapi/schemas/result) containing an array of the updated rows)
    # http:DefaultStatusCodeResponse (When **allowPartialSuccess=false** (or not specified):
# 
# If an error occurs, the [Error object](/api/smartsheet/openapi/schemas/error) returned contains a **detail** attribute set to an object with the following attribute:
# * **index**: the array index of the row that caused the error (0 if a single Row was passed in)
# * **rowId**: the id of the row that caused the error (omitted if the row was missing an Id)
# 
# If any error occurs, the entire request fails (no rows are added), and the error response returned describes the first problem that was encountered. For example:
# ```
# {
# "errorCode": 1042,
# "message": "The cell value in column 5504245941200772 did not conform to the strict requirements for type CHECKBOX."
# "detail": {
#   "index": 4
#   "rowId": 6572427401553796
#   }
# }
# ```
# When **allowPartialSuccess=true**:
# 
# When partial success is enabled, and one or more of the objects in the request fail to be added/updated/deleted, a standard [Result object](/api/smartsheet/openapi/schemas/result) is returned, but with a **message** of **'PARTIAL_SUCCESS'** (instead of **'SUCCESS'**), and a **resultCode** of **3**. Additionally, the object contains a **failedItems** attribute -- an array of [BulkItemFailure objects](/api/smartsheet/openapi/schemas/bulkitemfailure) that contains an item for each object in the request that failed to be added/updated/deleted.
# )
    resource function put sheets/[decimal sheetId]/rows(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SheetIdRowsBody payload, decimal accessApiLevel = 0, @http:Header {name: "Content-Type"} string? contentType = "application/json", boolean allowPartialSuccess = false, boolean overrideValidation = false) returns InlineResponse20057|ErrorDefault {
    }

    # Update sheet share
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + shareId - The unique identifier for the share
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object containing the modified Share object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put sheets/[decimal sheetId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SharesshareIdBody payload, decimal accessApiLevel = 0) returns InlineResponse20019|ErrorDefault {
    }

    # Update Summary Fields
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + renameIfConflict - Set to true if you want to override the requirement for unique summary field names. Repeated names will be adjusted by appending "(1)" or similar after the field name
    # + payload - Array of SummaryField objects 
    # + return - returns can be any of following types 
    # http:Ok (OK)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put sheets/[decimal sheetId]/summary/fields(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SummaryFieldUpdateRequest[] payload, boolean renameIfConflict = false) returns InlineResponse20065|ErrorDefault {
    }

    # Update an Update Request
    #
    # + sheetId - Sheet Id of the sheet being accessed
    # + updateRequestId - ID of the Update Request
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - Result object containing the modified UpdateRequest object 
    resource function put sheets/[decimal sheetId]/updaterequests/[string updateRequestId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20070 {
    }

    # Update Dashboard
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sightId - SightID of the sight being accessed
    # + numericDates - You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - returns can be any of following types 
    # http:Ok (Result object containing the updated Dashboard object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put sights/[string sightId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SightName payload, boolean numericDates = false, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20073|ErrorDefault {
    }

    # Set Dashboard Publish Status
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + sightId - SightID of the sight being accessed
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - returns can be any of following types 
    # http:Ok (SightPublish object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put sights/[string sightId]/publish(@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SightPublish payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20075|ErrorDefault {
    }

    # Update dashboard share
    #
    # + sightId - SightID of the sight being accessed
    # + shareId - The unique identifier for the share
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + return - returns can be any of following types 
    # http:Ok (Returns Result object containing the modified Share object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put sights/[string sightId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SharesshareIdBody payload, decimal accessApiLevel = 0) returns InlineResponse20019|ErrorDefault {
    }

    # Update User
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + userId - User Id
    # + payload - User object containing at least one of the following attributes: 
    # + return - returns can be any of following types 
    # http:Ok (Result object containing the [User object](/api/smartsheet/openapi/users/user) for the updated user
# )
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put users/[decimal userId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload UserUpdate payload) returns InlineResponse20081|ErrorDefault {
    }

    # Update webhook
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + webhookId - The Id of a Webhook
    # + Content\-Type - Required for POST and PUT requests. Defines the structure for the request body
    # + return - Result object containing the Webhook object for the updated webhook 
    resource function put webhooks/[string webhookId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload UpdateWebhookRequest payload, @http:Header {name: "Content-Type"} string? contentType = "application/json") returns InlineResponse20086 {
    }

    # Update workspace
    #
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + workspaceId - The ID of the workspace
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + return - returns can be any of following types 
    # http:Ok (Result object containing the modified Workspace object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put workspaces/[string workspaceId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload WorkspacesworkspaceIdBody payload, decimal accessApiLevel = 0) returns InlineResponse20091|ErrorDefault {
    }

    # Update workspace share
    #
    # + workspaceId - The ID of the workspace
    # + shareId - The unique identifier for the share
    # + Authorization - API Access Token used to authenticate requests to Smartsheet APIs
    # + accessApiLevel - Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    # + return - returns can be any of following types 
    # http:Ok (Result object containing the modified Share object)
    # http:DefaultStatusCodeResponse (Generic Error Payload)
    resource function put workspaces/[string workspaceId]/shares/[string shareId](@http:Header {name: "Authorization"} string? authorization, @http:Header {name: "smartsheet-integration-source"} string? smartsheetIntegrationSource, @http:Payload SharesshareIdBody payload, decimal accessApiLevel = 0) returns InlineResponse20019|ErrorDefault {
    }
}

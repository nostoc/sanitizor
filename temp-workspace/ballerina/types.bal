// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/data.jsondata;
import ballerina/http;

# Linked track object
public type LinkedTrackObject record {
    # A link to the Web API endpoint providing full details of the track
    string href?;
    # The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track
    string id;
    # The object type: "track"
    string 'type?;
    # External URLs for the linked track including Spotify URL
    @jsondata:Name {value: "external_urls"}
    ExternalUrlObject externalUrls?;
    # The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track
    string uri?;
};

# Content to update the playlist
public type ChangePlayListDetails record {
    # If `true` the playlist will be public, if `false` it will be private
    boolean? 'public?;
    # If `true` , the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. *Note: You can only set `collaborative` to `true` on non-public playlists.*
    boolean collaborative?;
    # The new name for the playlist, for example `"My New Playlist Title"`
    string name?;
    # Value for playlist description as displayed in Spotify Clients and in the Web API
    string description?;
};

# Information needed to reorder the playlist
public type PlayListReorderDetails record {
    # The position where the items should be inserted.  
    # To reorder the items to the end of the playlist, simply set *insert_before* to the position after the last item.  
    # Examples:  
    # To reorder the first item to the last position in a playlist with 10 items, set *range_start* to 0, and *insert_before* to 10.  
    # To reorder the last item in a playlist with 10 items to the start of the playlist, set *range_start* to 9, and *insert_before* to 0
    @jsondata:Name {value: "insert_before"}
    int:Signed32 insertBefore?;
    # A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`  
    # A maximum of 100 items can be set in one request
    string[] uris?;
    # The playlist's snapshot ID against which you want to make the changes
    @jsondata:Name {value: "snapshot_id"}
    string snapshotId?;
    # The amount of items to be reordered. Defaults to 1 if not set.  
    # The range of items to be reordered begins from the *range_start* position, and includes the *range_length* subsequent items.  
    # Example:  
    # To move the items at index 9-10 to the start of the playlist, *range_start* is set to 9, and *range_length* is set to 2
    @jsondata:Name {value: "range_length"}
    int:Signed32 rangeLength?;
    # The position of the first item to be reordered
    @jsondata:Name {value: "range_start"}
    int:Signed32 rangeStart?;
};

# Playlist track object
public type PlaylistTrackObject record {
    # The date and time the track or episode was added. *Note that some very old playlists may return `null` in this field.*
    @jsondata:Name {value: "added_at"}
    string addedAt?;
    # Public user information for the user who added the track to playlist
    @jsondata:Name {value: "added_by"}
    PublicUserObject addedBy?;
    # Whether this track or episode is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not
    @jsondata:Name {value: "is_local"}
    boolean isLocal?;
    # Information about the track or episode
    TrackObject|EpisodeObject track?;
};

# Represents the Queries record for the operation: getPlaylistById
public type GetPlaylistByIdQueries record {
    # An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
    # Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  
    # *Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
    string market?;
    # A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object
    @http:Query {name: "additional_types"}
    string additionalTypes?;
    # Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the playlist''s description and URI: `fields=description,uri`. A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`. Use multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`. Fields can be excluded by prefixing them with an exclamation mark, for example: `fields=tracks.items(track(name,href,album(!name,href)))`
    string fields?;
};

# Simplified artist object
public type SimplifiedArtistObject record {
    # The name of the artist
    string name;
    # A link to the Web API endpoint providing full details of the artist
    string? href?;
    # The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist
    string id;
    # The object type: `"artist"`
    string 'type?;
    # External URLs for the artist including Spotify URL
    @jsondata:Name {value: "external_urls"}
    ExternalUrlObject externalUrls?;
    # The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist
    string uri?;
};

# Represents the Queries record for the operation: getNewReleses
public type GetNewRelesesQueries record {
    # A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries
    string country?;
    # The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items
    int:Signed32 offset?;
    # The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50
    int:Signed32 'limit?;
};

# Represents the Queries record for the operation: getMyPlaylists
public type GetMyPlaylistsQueries record {
    # 'The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.'
    int:Signed32 offset?;
    # 'The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.'
    int:Signed32 'limit?;
};

# Episode object
public type EpisodeObject record {
    # The cover art for the episode in various sizes, widest first
    ImageObject[] images?;
    # A list of the languages used in the episode, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code
    string[] languages?;
    # Simplified show object
    SimplifiedShowObject show?;
    # A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed
    string description?;
    # Episode restriction object
    EpisodeRestrictionObject restrictions?;
    # **Note: This field is deprecated and might be removed in the future. Please use the `languages` field instead.** The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code
    string language?;
    # The precision with which `release_date` value is known: `"year"`, `"month"`, or `"day"`
    @jsondata:Name {value: "release_date_precision"}
    string releaseDatePrecision?;
    # The object type: "episode"
    string 'type?;
    # A description of the episode. This field may contain HTML tags
    @jsondata:Name {value: "html_description"}
    string htmlDescription?;
    # The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode
    string uri?;
    # True if the episode is hosted outside of Spotify's CDN
    @jsondata:Name {value: "is_externally_hosted"}
    boolean isExternallyHosted?;
    # A URL to a 30 second preview (MP3 format) of the episode. `null` if not available
    @jsondata:Name {value: "audio_preview_url"}
    string audioPreviewUrl?;
    # The episode length in milliseconds
    @jsondata:Name {value: "duration_ms"}
    int:Signed32 durationMs?;
    # Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown)
    boolean explicit?;
    # True if the episode is playable in the given market. Otherwise false
    @jsondata:Name {value: "is_playable"}
    boolean isPlayable?;
    # User's most recent position in the episode for resuming playback
    @jsondata:Name {value: "resume_point"}
    ResumePointObject resumePoint?;
    # The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`
    @jsondata:Name {value: "release_date"}
    string releaseDate?;
    # The name of the episode
    string name?;
    # A link to the Web API endpoint providing full details of the episode
    string? href?;
    # The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode
    string id;
    # External URLs for the episode including Spotify URL
    @jsondata:Name {value: "external_urls"}
    ExternalUrlObject externalUrls?;
};

# Playlist details
public type PlayListDetails record {
    # Defaults to `true` . If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)
    boolean? 'public?;
    # Defaults to `false` . If `true` the playlist will be collaborative. Note that to create a collaborative playlist you must also set `public` to `false` . To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) 
    boolean collaborative?;
    # The name for the new playlist, for example `"Your Coolest Playlist"` . This name does not need to be unique; a user may have several playlists with the same name
    string name;
    # value for playlist description as displayed in Spotify Clients and in the Web API
    string description?;
};

# Album details
public type NewReleasesObjectAlbums record {
    # URL to the next page of items. ( `null` if none)
    string? next?;
    # The total number of items available to return
    int:Signed32 total?;
    # The offset of the items returned (as set in the query or by default)
    int:Signed32 offset?;
    # URL to the previous page of items. ( `null` if none)
    string? previous?;
    # The maximum number of items in the response (as set in the query or by default)
    int:Signed32 'limit?;
    # A link to the Web API endpoint returning the full result of the request
    string? href?;
    # The requested data
    SimplifiedAlbumObject[] items?;
};

# Represents the Queries record for the operation: getPlayslistsByUserID
public type GetPlayslistsByUserIDQueries record {
    # The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists
    int:Signed32 offset?;
    # The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50
    int:Signed32 'limit?;
};

# External URL object
public type ExternalUrlObject record {
    # The [Spotify URL](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the object
    string spotify?;
};

# Represents the Queries record for the operation: reorderOrReplacePlaylistTracks
public type ReorderOrReplacePlaylistTracksQueries record {
    # A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`  
    # A maximum of 100 items can be set in one request
    string uris?;
};

# Simplified album object
public type SimplifiedAlbumObject record {
    # The cover art for the album in various sizes, widest first
    ImageObject[] images?;
    # The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Note that an album is considered available in a market when at least 1 of its tracks is available in that market
    @jsondata:Name {value: "available_markets"}
    string[] availableMarkets?;
    # Album restriction object
    AlbumRestrictionObject restrictions?;
    # The precision with which `release_date` value is known: `year` , `month` , or `day`
    @jsondata:Name {value: "release_date_precision"}
    string releaseDatePrecision?;
    # The field is present when getting an artist's albums. Possible values are "album", "single", "compilation", "appears_on". Compare to album_type this field represents relationship between the artist and the album
    @jsondata:Name {value: "album_group"}
    string albumGroup?;
    # The object type: "album"
    string 'type?;
    # The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album
    string uri?;
    # The total number of tracks in the album
    @jsondata:Name {value: "total_tracks"}
    int:Signed32 totalTracks?;
    # The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist
    SimplifiedArtistObject[] artists;
    # The date the album was first released, for example `1981`. Depending on the precision, it might be shown as `1981-12` or `1981-12-15`
    @jsondata:Name {value: "release_date"}
    string releaseDate?;
    # The name of the album. In case of an album takedown, the value may be an empty string
    string name?;
    # The type of the album: one of "album", "single", or "compilation"
    @jsondata:Name {value: "album_type"}
    string albumType?;
    # A link to the Web API endpoint providing full details of the album
    string? href?;
    # The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album
    string id;
    # External URLs for the album including Spotify URL
    @jsondata:Name {value: "external_urls"}
    ExternalUrlObject externalUrls?;
};

# Followers object
public type FollowersObject record {
    # A link to the Web API endpoint providing full details of the followers; `null` if not available. Please note that this will always be set to null, as the Web API does not support it at the moment.
    string? href?;
    # The total number of followers.
    int:Signed32 total?;
};

# Copyright object
public type CopyrightObject record {
    # The copyright text for this content
    string text?;
    # The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright
    string 'type?;
};

# Current playlist details
public type CurrentPlaylistDetails record {
    # A link to the Web API endpoint returning the full result of the request
    string href?;
    # The requested data.
    SimplifiedPlaylistObject[] items?;
    # The maximum number of items in the response (as set in the query or by default).
    int:Signed32 'limit?;
    # URL to the next page of items. ( `null` if none)
    string? next?;
    # The offset of the items returned (as set in the query or by default)
    int:Signed32 offset?;
    # URL to the previous page of items. ( `null` if none)
    string? previous?;
    # The total number of items available to return.
    int:Signed32 total?;
};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://accounts.spotify.com/api/token";
|};

# Represents the Headers record for the operation: updatePlaylist
public type UpdatePlaylistHeaders record {
    # The content type of the request body: `application/json`
    @http:Header {name: "Content-Type"}
    string contentType;
};

# Represents the Queries record for the operation: getPlaylistTracks
public type GetPlaylistTracksQueries record {
    # An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
    # Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  
    # *Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
    string market;
    # A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object
    @http:Query {name: "additional_types"}
    string additionalTypes?;
    # The index of the first item to return. Default: 0 (the first object)
    int:Signed32 offset?;
    # The maximum number of items to return. Default: 100. Minimum: 1. Maximum: 100
    int:Signed32 'limit?;
    # Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the total number of items and the request limit:  
    # `fields=total,limit`  
    # A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder:  
    # `fields=items(added_at,added_by.id)`  
    # Use multiple parentheses to drill down into nested objects, for example:  
    # `fields=items(track(name,href,album(name,href)))`  
    # Fields can be excluded by prefixing them with an exclamation mark, for example:  
    # `fields=items.track.album(!external_urls,images)`
    string fields?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# Simplified playlist object
public type SimplifiedPlaylistObject record {
    # Public user object
    PublicUserObject owner?;
    # Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/). *Note: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day.*
    ImageObject[] images?;
    # The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
    @jsondata:Name {value: "snapshot_id"}
    string snapshotId?;
    # `true` if the owner allows other users to modify the playlist
    boolean collaborative?;
    # The playlist description. *Only returned for modified, verified playlists, otherwise* `null`
    string description?;
    # The object type: "playlist"
    string 'type?;
    # The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist
    string uri?;
    # Playlist track reference object
    PlaylistTracksRefObject tracks?;
    # The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)
    boolean? 'public?;
    # The name of the playlist
    string name;
    # A link to the Web API endpoint providing full details of the playlist
    string? href?;
    # The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist
    string id;
    # External URLs for the playlist including Spotify URL
    @jsondata:Name {value: "external_urls"}
    ExternalUrlObject externalUrls?;
};

# Playlist track details
public type PlaylistTrackDetails record {
    # URL to the next page of items. ( `null` if none)
    string? next?;
    # The total number of items available to return
    int:Signed32 total?;
    # The offset of the items returned (as set in the query or by default)
    int:Signed32 offset?;
    # URL to the previous page of items. ( `null` if none)
    string? previous?;
    # The maximum number of items in the response (as set in the query or by default)
    int:Signed32 'limit?;
    # A link to the Web API endpoint returning the full result of the request
    string href?;
    # The requested data
    PlaylistTrackObject[] items?;
};

# Episode restriction object
public type EpisodeRestrictionObject record {
    # The reason for the restriction. Supported values:  
    # 
    # - `market` - The content item is not available in the given market.  
    # - `product` - The content item is not available for the user's subscription type.  
    # - `explicit` - The content item is explicit and the user's account is set to not play explicit content.  
    #   Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values
    string reason?;
};

# Image object
public type ImageObject record {
    # The image width in pixels. If unknown: `null` or not returned
    int:Signed32? width?;
    # The source URL of the image
    string url?;
    # The image height in pixels. If unknown: `null` or not returned
    int:Signed32? height?;
};

# New release object
public type NewReleasesObject record {
    # Album details
    NewReleasesObjectAlbums albums;
};

# Playlist details
public type FeaturedPlaylistObjectPlaylists record {
    # URL to the next page of items. ( `null` if none)
    string? next?;
    # The total number of items available to return
    int:Signed32 total?;
    # The offset of the items returned (as set in the query or by default)
    int:Signed32 offset?;
    # URL to the previous page of items. ( `null` if none)
    string? previous?;
    # The maximum number of items in the response (as set in the query or by default)
    int:Signed32 'limit?;
    # A link to the Web API endpoint returning the full result of the request
    string? href?;
    # The requested data
    SimplifiedPlaylistObject[] items?;
};

# Public user object
public type PublicUserObject record {
    # The user's profile image
    ImageObject[] images?;
    # Followers object
    FollowersObject followers?;
    # A link to the Web API endpoint for this user
    string? href?;
    # The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user
    string id;
    # The name displayed on the user's profile. `null` if not available
    @jsondata:Name {value: "display_name"}
    string displayName?;
    # The object type: "user"
    string 'type?;
    # External URLs for the user including Spotify URL
    @jsondata:Name {value: "external_urls"}
    ExternalUrlObject externalUrls?;
    # The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user
    string uri?;
};

# Track restriction object
public type TrackRestrictionObject record {
    # The reason for the restriction. Supported values:  
    # 
    # - `market` - The content item is not available in the given market.  
    # - `product` - The content item is not available for the user's subscription type.  
    # - `explicit` - The content item is explicit and the user's account is set to not play explicit content.  
    #   Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values
    string reason?;
};

# User playlist Details
public type UserPlayListDetails record {
    # URL to the next page of items. ( `null` if none)
    string? next?;
    # The total number of items available to return
    int:Signed32 total?;
    # The offset of the items returned (as set in the query or by default)
    int:Signed32 offset?;
    # URL to the previous page of items. ( `null` if none)
    string? previous?;
    # The maximum number of items in the response (as set in the query or by default)
    int:Signed32 'limit?;
    # A link to the Web API endpoint returning the full result of the request
    string href?;
    # The requested data
    SimplifiedPlaylistObject[] items?;
};

# Track object
public type TrackObject record {
    # The disc number (usually `1` unless the album consists of more than one disc)
    @jsondata:Name {value: "disc_number"}
    int:Signed32 discNumber?;
    # Simplified album object
    SimplifiedAlbumObject album?;
    # A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code
    @jsondata:Name {value: "available_markets"}
    string[] availableMarkets?;
    # Track restriction object
    TrackRestrictionObject restrictions?;
    # The object type: "track"
    string 'type?;
    # External identifiers for the track (e.g., ISRC, EAN, UPC)
    @jsondata:Name {value: "external_ids"}
    ExternalIdObject externalIds?;
    # The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track
    string uri?;
    # The track length in milliseconds
    @jsondata:Name {value: "duration_ms"}
    int:Signed32 durationMs?;
    # Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown)
    boolean explicit?;
    # Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied. If `true` , the track is playable in the given market. Otherwise `false`
    @jsondata:Name {value: "is_playable"}
    boolean isPlayable?;
    # The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist
    ArtistObject[] artists?;
    # Track linking information when track is playable in another market
    @jsondata:Name {value: "linked_from"}
    LinkedTrackObject linkedFrom?;
    # A link to a 30 second preview (MP3 format) of the track. Can be `null`
    @jsondata:Name {value: "preview_url"}
    string previewUrl?;
    # The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.  
    # The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.  
    # Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. Note that the popularity value may lag actual popularity by a few days: the value is not updated in real time
    int:Signed32 popularity?;
    # The name of the track
    string name?;
    # The number of the track. If an album has several discs, the track number is the number on the specified disc
    @jsondata:Name {value: "track_number"}
    int:Signed32 trackNumber?;
    # A link to the Web API endpoint providing full details of the track
    string? href?;
    # The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track
    string id;
    # Whether or not the track is from a local file
    @jsondata:Name {value: "is_local"}
    boolean isLocal?;
    # External URLs for the track including Spotify URL
    @jsondata:Name {value: "external_urls"}
    ExternalUrlObject externalUrls?;
};

# Artist object
public type ArtistObject record {
    # Images of the artist in various sizes, widest first
    ImageObject[] images?;
    # Followers object
    FollowersObject followers?;
    # A list of the genres the artist is associated with. For example: `"Prog Rock"` , `"Post-Grunge"`. (If not yet classified, the array is empty.)
    string[] genres?;
    # The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks
    int:Signed32 popularity?;
    # The name of the artist
    string name;
    # A link to the Web API endpoint providing full details of the artist
    string? href?;
    # The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist
    string id;
    # The object type: `"artist"`
    string 'type?;
    # External URLs for the artist including Spotify URL
    @jsondata:Name {value: "external_urls"}
    ExternalUrlObject externalUrls?;
    # The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist
    string uri?;
};

# Featured playlist object
public type FeaturedPlaylistObject record {
    # Playlist details
    FeaturedPlaylistObjectPlaylists playlists?;
    # Message
    string message?;
};

# Represents the Queries record for the operation: getFeaturedPlaylists
public type GetFeaturedPlaylistsQueries record {
    # A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries
    string country?;
    # The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items
    int:Signed32 offset?;
    # The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50
    int:Signed32 'limit?;
    # The desired language, consisting of a lowercase [ISO 639-1 language code](http://en.wikipedia.org/wiki/ISO_639-1) and an uppercase [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning "Spanish (Mexico)". Provide this parameter if you want the results returned in a particular language (where available). Note that, if `locale` is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The `locale` parameter, combined with the `country` parameter, may give odd results if not carefully matched. For example `country=SE&locale=de_DE` will return a list of categories relevant to Sweden but as German language strings
    string locale?;
    # A timestamp in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601): `yyyy-MM-ddTHH:mm:ss`. Use this parameter to specify the user's local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: "2014-10-23T09:00:00" for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time
    string timestamp?;
};

# Playlist track reference object
public type PlaylistTracksRefObject record {
    # Number of tracks in the playlist
    int:Signed32 total?;
    # A link to the Web API endpoint where full details of the playlist's tracks can be retrieved
    string? href?;
};

# Simplified show object
public type SimplifiedShowObject record {
    # The cover art for the show in various sizes, widest first
    ImageObject[] images?;
    # A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code
    string[] languages?;
    # The copyright statements of the show
    CopyrightObject[] copyrights?;
    # A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code
    @jsondata:Name {value: "available_markets"}
    string[] availableMarkets?;
    # A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed
    string description?;
    # The object type: "show"
    string 'type?;
    # A description of the show. This field may contain HTML tags
    @jsondata:Name {value: "html_description"}
    string htmlDescription?;
    # The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show
    string uri?;
    # True if all of the show's episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases
    @jsondata:Name {value: "is_externally_hosted"}
    boolean isExternallyHosted?;
    # Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown)
    boolean explicit?;
    # The media type of the show
    @jsondata:Name {value: "media_type"}
    string mediaType?;
    # The name of the episode
    string name?;
    # The publisher of the show
    string publisher?;
    # A link to the Web API endpoint providing full details of the show
    string? href?;
    # The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show
    string id;
    # External URLs for the show including Spotify URL
    @jsondata:Name {value: "external_urls"}
    ExternalUrlObject externalUrls?;
};

# Object containing playlist snapshot identifier for version tracking
public type SnapshotIdObject record {
    # The snapshot_id can be used to identify your playlist version in future requests
    @jsondata:Name {value: "snapshot_id"}
    string snapshotId?;
};

# Album restriction object
public type AlbumRestrictionObject record {
    # The reason for the restriction. Supported values:  
    # 
    # - `market` - The content item is not available in the given market.  
    # - `product` - The content item is not available for the user's subscription type.  
    # - `explicit` - The content item is explicit and the user's account is set to not play explicit content.  
    #   Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values
    string reason?;
};

# Playlist object
public type PlaylistObject record {
    # Public user object
    PublicUserObject owner?;
    # Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/). *Note: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day.*
    ImageObject[] images?;
    # The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
    @jsondata:Name {value: "snapshot_id"}
    string snapshotId?;
    # `true` if the owner allows other users to modify the playlist
    boolean collaborative?;
    # The playlist description. *Only returned for modified, verified playlists, otherwise* `null`
    string description?;
    # The object type: "playlist"
    string 'type?;
    # The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist
    string uri?;
    # Information about the tracks of the playlist. Note, a track object may be `null`. This can happen if a track is no longer available
    PlaylistObjectTracks tracks?;
    # Followers object
    FollowersObject followers?;
    # The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)
    boolean? 'public?;
    # The name of the playlist
    string name?;
    # A link to the Web API endpoint providing full details of the playlist
    string href?;
    # The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist
    string id;
    # External URLs for the playlist including Spotify URL
    @jsondata:Name {value: "external_urls"}
    ExternalUrlObject externalUrls?;
};

# External Id object
public type ExternalIdObject record {
    # [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)
    string ean?;
    # [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)
    string upc?;
    # [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)
    string isrc?;
};

# Resume point object
public type ResumePointObject record {
    # Whether or not the episode has been fully played by the user
    @jsondata:Name {value: "fully_played"}
    boolean fullyPlayed?;
    # The user's most recent position in the episode in milliseconds
    @jsondata:Name {value: "resume_position_ms"}
    int:Signed32 resumePositionMs?;
};

# Information about the tracks of the playlist. Note, a track object may be `null`. This can happen if a track is no longer available
public type PlaylistObjectTracks record {
    # URL to the next page of items. ( `null` if none)
    string? next?;
    # The total number of items available to return
    int:Signed32 total?;
    # The offset of the items returned (as set in the query or by default)
    int:Signed32 offset?;
    # URL to the previous page of items. ( `null` if none)
    string? previous?;
    # The maximum number of items in the response (as set in the query or by default)
    int:Signed32 'limit?;
    # A link to the Web API endpoint returning the full result of the request
    string href?;
    # The requested data
    PlaylistTrackObject[] items?;
};

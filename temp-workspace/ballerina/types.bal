// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

# Request body schema for copying a workspace to a destination container
public type WorkspaceIdCopyBody ContainerDestinationForCopy;

# Event schema for discussion creation operations
public type DiscussionCreate record {
    *Event;
  //  *DiscussionCreateEvent;
};

# Additional details for attachment load events including user and location
public type AttachmentLoadAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the sheet that contains the attachment. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Name of the compressed file containing the multiple attachments downloaded at once. (Only included if more than one attachment was selected to be downloaded in the same user action. Please notice that multi-attachment download action allows the user to specify the name of the zip file that shoud include all attachments, which is what is being provided here. The download of a single attachment uses the attachment name as the download file name and it cannot be changed, and it isn't provided in this event because it is provided in the ATTACHMENT-CREATE event or by querying Smartsheet API with the attachment ID)
    string multiFileDownloadName?;
    # Id of the workspace that directly contains the attachment. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Container for a list of sent update requests
public type SentUpdateRequestListData record {
    # list of Sent Update Requests
    SentUpdateRequest[] data?;
};

# Represents the Headers record for the operation: reactivate-user
public type ReactivateUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: rows-sort
public type RowsSortHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: share-report-get
public type ShareReportGetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Response object containing sheet data after sort operation
public type SheetSortResponse Sheet;

# Represents the Headers record for the operation: deleteWebhook
public type DeleteWebhookHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: delete-alternate-email
public type DeleteAlternateEmailHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
# 
# # Deprecated
@deprecated
public type ReadOnlyFullShowToolbar boolean;

# Triggered when a user declines an invitation to join an organization account through email
public type UserInviteDeclineEvent record {
    # The action applied to the specified object
    "DECLINE_INVITE" action?;
    # Additional details when user declines organization invite
    UserDeclineInviteAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Response object containing webhook list with pagination metadata
public type WebhookListResponse record {
    *PaginationMetadata;
    *WebhookDataList;
};

# Response object containing detailed column information
public type ColumnDetailsResponse GetColumn;

# Additional details for dashboard ownership transfer events
public type DashboardTransferOwnershipAdditionalDetails record {
    # New access level of the new owner: `"OWNER"`
    "OWNER" newAccessLevel = "OWNER";
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the new dashboard owner
    @constraint:Int {minValue: 0}
    int newUserId?;
    # Id of the former dashboard owner
    @constraint:Int {minValue: 0}
    int oldUserId?;
    # New access level of the former owner: `"ADMIN"`
    "ADMIN" oldAccessLevel = "ADMIN";
};

# Request body for favorites operations - accepts single favorite or array
public type FavoritesBody Favorite|FavoriteArray;

# Represents the Queries record for the operation: attachments-listOnSheet
public type AttachmentsListOnSheetQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Response object containing a list of summary fields
public type SummaryFieldListResponse record {
    *IndexResult;
    *SummaryFieldListData;
};

# Additional details for attachment send events
public type AttachmentSendAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the sheet that contains the attachment. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the recipientGroupId property below isn't included)
    string recipientEmail?;
    # Id of the workspace that directly contains the attachment. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Triggered when a group or user is added to the report's sharing list, or when a group or user's share permissions are changed
public type ReportShareAddEvent record {
    # The action applied to the specified object
    "ADD_SHARE" action?;
    # Details for sharing a report with users or groups, including access level
    ReportAddShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Individual search result item with object details and context
public type SearchResultItem record {
    # Search result parent object name
    string parentObjectName?;
    # Search result parent object Id
    decimal parentObjectId?;
    # Search result parent object type (dashboard, folder, report, sheet, template, or workspace)
    string parentObjectType?;
    # Search result text excerpt
    string text?;
    # Search result object Id
    decimal objectId?;
    # Additional info about the search result item. If the item has a discussion or attachment belonging to a proof, the context data includes the URL of that proof (e.g., "proofUrl: https://app.smartsheet.com/b/proofs/sheets/abc123/proofs/def456")
    string[] contextData?;
    # Search result object type (attachment, dashboard, discussion, folder, report, row, sheet, summaryField, template, or workspace)
    string objectType?;
};

# Describes the dashboard's publish settings
public type SightPublish record {
    # URL for 'Read-Only Full' view of the published dashboard. Only returned in a response if readOnlyFullEnabled = true
    string readOnlyFullUrl?;
    # If true, a rich version of the dashboard is published with the ability to use shortcuts and widget interactions
    boolean readOnlyFullEnabled;
    # Indicates who can access the 'Read-Only Full' view of the published dashboard. Only returned in the response if **readOnlyFullEnabled = true**.
    #   * **ALL** - available to anyone who has the link.
    #   * **ORG** - available only to members of the dashboard owner's Smartsheet organization account.
    #   * **SHARED** - available only to users shared to the item.
    # 
    # ---
    # If **readOnlyFullEnabled** is set to true in the request, but **readOnlyFullAccessibleBy** is not specified, the value of **readOnlyFullAccessibleBy** defaults to the organization-level 'Dashboard Publishing' setting (if the dashboard owner belongs to an organization account) or to **ALL** (if the dashboard owner does not belong to an organization account)
    "ALL"|"ORG" readOnlyFullAccessibleBy?;
};

# Paginated response containing list of users with index metadata
public type UserListIndexResponse record {
    *IndexResult;
    *UserListResponse;
};

# Indicates which view the user has set for a read-only, default view of the published sheet. Must be one of the listed enum values
public type ReadOnlyFullDefaultView "CALENDAR"|"CARD"|"GRID";

# Represents the Headers record for the operation: updaterequests-create
public type UpdaterequestsCreateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Paginated response containing list of asset share information
public type AssetShareListResponse record {
    *PaginatedResultKey;
    *ShareResponseList;
    ShareResponse[] result;
};

# Represents the Headers record for the operation: automationrule-update
public type AutomationruleUpdateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Additional details for dashboard creation events
public type DashboardCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The source object used to create the dashboard, currently only 'global_template' is valid
    string sourceType?;
    # Id of the global template that was used to create the dashboard. (Specific to `Create New` actions)
    @constraint:Int {minValue: 0}
    int sourceGlobalTemplateId?;
    # Id of the source dashboard. (Specific to `Save As New` actions). 
    @constraint:Int {minValue: 0}
    int sourceObjectId?;
    # Name of the newly created dashboard
    string dashboardName?;
};

# Request parameters for filtering and retrieving events
public type FilteredEventsRequest record {
    # The target managed plan for which to list events. Authorized if the caller is a licensed user on either the target managed plan or the main plan in EPM hierarchy
    decimal managedPlanId?;
    # Indicates next set of events to return. Use value of `nextStreamPosition` returned from the previous call.
    # You must pass in a value for either `since` or `streamPosition` and never both
    string streamPosition?;
    # Array of sheet Ids used to filter events. Only events related to the specified sheet Ids are returned
    string[] sheetIds?;
    # Array of workspace Ids used to filter events. Only events related to the specified workspace Ids are returned
    string[] workspaceIds?;
    # If true, dates are accepted and returned in Unix epoch time (milliseconds since midnight on January 1, 1970 in UTC time).
    # Default is false, which means ISO-8601 format
    boolean numericDates = false;
    # The latest time up to which events are included in the response. Events after this time are excluded. The `to` field requires using the `since` body field (above). This field is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained date-based queries. Therefore, resolution is limited to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
    # 
    # If `to` is a future time, the current time is used. If `to` equals the `since` time, an empty data value is returned. If `to` is before the `since` time, an error is returned
    string to?;
    # Maximum number of events to return as response to this call.
    # Must be between 1 through 10,000 (inclusive).
    # Defaults to 1,000 if not specified
    @constraint:Int {minValue: 1, maxValue: 10000}
    int maxCount = 1000;
    # The earliest time from which events are included in the response. Events before this time are excluded. This field is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained date-based queries. Therefore, resolution is limited to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
    # 
    # You must pass in a value for either `since` or `streamPosition` and never both
    string since?;
};

# Response containing an array of folder objects
public type FolderListResult record {
    # Array of folder objects returned from the API
    Folder[] result?;
};

# Represents the Queries record for the operation: get-asset-share
public type GetAssetShareQueries record {
    # The id of the asset. Used in combination with assetType to determine the asset.
    # 
    # Depending on the asset, this may be a numeric or string value
    string assetId;
    # The type of the asset. Used in combination with assetId to determine the asset
    "sheet"|"report"|"sight"|"workspace"|"collection"|"file" assetType;
};

# Represents the Headers record for the operation: attachments-listOnSheet
public type AttachmentsListOnSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Additional details for workspace recurring backup creation events
public type WorkspaceCreateRecurringBackupAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether attachments should be included in the recurring backup
    boolean includeAttachments?;
    # Indicates whether an email should be sent to the workspace's owner every time a recurring backup completes
    boolean sendCompletionEmail?;
};

# Triggered when a dashboard is moved between workspaces and/or folders
public type DashboardMoveEvent record {
    # The action applied to the specified object
    "MOVE" action?;
    # Additional details for dashboard move events including user and location info
    DashboardMoveAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Response object containing workspace data
public type WorkspaceResponse record {
    # Can contain dashboards, folders, reports, sheets, and templates
    Workspace result?;
};

# Triggered when a workspace ownership is transferred
public type WorkspaceTransferOwnershipEvent record {
    # The action applied to the specified object
    "TRANSFER_OWNERSHIP" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Detailed group information including members
public type GroupDetailsResponse record {
    *Group;
    *GroupMembersList;
};

# Response containing list of automation rules with pagination
public type AutomationRuleListResponse record {
    *IndexResult;
    *AutomationRuleListData;
};

# Folder deletion event combining base event and folder-specific details
public type FolderDelete record {
    *Event;
   // *FolderDeleteEvent;
};

# Represents the Headers record for the operation: share-report-get
public type ShareReportGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Complete webhook configuration and status information
public type WebhookDetails record {
    # API client name corresponding to third-party app that created the webhook. Read-only. Only present if webhook was created by third-party app
    string apiClientName?;
    # Timestamp when the webhook was created (read-only)
    Timestamp createdAt?;
    # Details about the reason the webhook was disabled. Read-only. Only present when enabled=false
    string disabledDetails?;
    # Statistics and status information for webhook callback attempts
    WebhookStats stats?;
    # Id of the object that is subscribed to. Specified when a webhook is created and cannot be changed
    decimal scopeObjectId?;
    # Timestamp when the webhook was last modified (read-only)
    Timestamp modifiedAt?;
    # Scope of the subscription. Currently, the only supported value is sheet. Specified when a webhook is created and cannot be changed
    string scope?;
    # API client Id corresponding to third-party app that created the webhook. Read-only. Only present if webhook was created by third-party app
    string apiClientId?;
    # An object that contains an array of column Ids if you want to limit the subscription to a subscope. Specified when a webhook is created and cannot be changed
    Subscope subscope?;
    # Webhook Id
    decimal id?;
    # Shared secret for this Webhook, randomly generated by Smartsheet. Read-only. See [Authenticating Callbacks](/api/smartsheet/guides/webhooks/webhook-callbacks#authenticating-callbacks-optional) for details about how this value can be used
    string sharedSecret?;
    # The webhook's status.
    # 
    # See [Webhook Status](/api/smartsheet/guides/webhooks/webhook-status) for details
    "DISABLED_ADMINISTRATIVE"|"DISABLED_APP_REVOKED"|"DISABLED_BY_OWNER"|"DISABLED_CALLBACK_FAILED"|"DISABLED_SCOPE_INACCESSIBLE"|"DISABLED_VERIFICATION_FAILED"|"ENABLED"|"NEW_NOT_VERIFIED" status?;
};

# Represents the Headers record for the operation: get-sheetPublish
public type GetSheetPublishHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Paginated response object containing an array of asset references. Call again
# with the `lastKey` query parameter to retrieve the next page of results
public type PaginatedChildrenResponse record {
    # Array of assets of the requested type in this folder
    PaginatedChildrenResponseData[] data;
    # A token that is used to retrieve the next page of results when passed as the
    # `lastKey` query parameter. This value will be absent when there are no 
    # further pages
    LastKey lastKey?;
};

# CrossSheetReference object to create which will refer to the entire columns in the range from startColumnId to endColumnId
public type CrossSheetReferenceRequestWithColumnIds record {
    # Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References
    string name?;
    # Defines beginning edge of range when specifying one or more columns. Must be used with endColumnId
    decimal startColumnId?;
    # Sheet Id of source sheet
    decimal sourceSheetId?;
    # Defines ending edge of range when specifying one or more columns. Must be used with startColumnId
    decimal endColumnId?;
};

# Represents the Headers record for the operation: proofs-create
public type ProofsCreateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Array of favorite items marked by the user
public type FavoriteArray Favorite[];

# Request body schema for home folder operations
public type HomeFoldersBody Folder;

# Triggered when a user saves a copy of a report by using the `Save As New` option. 
# 
# This event is recorded for the original report. If the original reports belongs to a different organization, then an event will be generated for organization with original report and for the organization with copied report.
# 
# For copied report, `Save As New` event is paired with a [REPORT - CREATE](/api/smartsheet/openapi/schemas/report_create) event
public type ReportSaveAsEvent record {
    # The action applied to the specified object
    "SAVE_AS_NEW" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Event schema for account bulk update operations
public type AccountBulkUpdate record {
    *Event;
   // *AccountBulkUpdateEvent;
};

# Event schema for report purge operations
public type ReportPurge record {
    *Event;
   // *ReportPurgeEvent;
};

# Event schema for removing sheet share members
public type SheetRemoveShareMember record {
    *Event;
   // *SheetShareMemberRemoveEvent;
};

# Additional details for dashboard rename events including user and names
public type DashboardRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the dashboard
    string newName?;
    # Previous name of the dashboard
    string oldName?;
};

# Event schema for group rename operations in Smartsheet
public type GroupRename record {
    *Event;
   // *GroupRenameEvent;
};

# Response object containing sight/dashboard publish status information
public type SightPublishStatusResponse record {
    *ItemResult;
    *SightPublishResponse;
};

# Child resource item in paginated list with access level and metadata
public type PaginatedChildrenListItem record {
    # Read-only timestamp that can be either DateTime or Long format
    Timestamp2 createdAt;
    # Access level permissions for the child resource
    AccessLevel accessLevel;
    # Read-only timestamp that can be either DateTime or Long format
    Timestamp2 modifiedAt;
    # Resource name
    string name;
    # Resource ID
    int id;
    # URL to the resource in Smartsheet
    string permalink;
    # The type of the child resource
    "sheet"|"report"|"sight" resourceType;
};

# Event schema for sheet update operations in Smartsheet
public type SheetUpdate record {
    *Event;
   // *SheetUpdateEvent;
};

# When applicable for PICKLIST column type. Array of the options available for the field
public type PropertiesOptions string[];

# Event schema for dashboard save-as-new operations
public type DashboardSaveAsNew record {
    *Event;
   // *DashboardSaveAsEvent;
};

# Describes the sheet's publish settings
public type SheetPublish record {
    # Indicates which view the user has set for a read-write, default view of the published sheet. Must be one of the listed enum values
    "CALENDAR"|"CARD"|"GRID" readWriteDefaultView?;
    # Indicates who can access the 'Read-Only Full' view of the published sheet:
    #   * ALL - available to anyone who has the link.
    #   * ORG - available only to members of the sheet owner's Smartsheet organization account.
    #   * SHARED - available only to users shared to the item.
    # 
    # Only returned in the response if **readOnlyFullEnabled = true**
    "ALL"|"ORG"|"SHARED" readOnlyFullAccessibleBy?;
    # If **true**,a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions
    boolean readWriteEnabled?;
    # URL for **iCal** view of the published sheet. Only returned in a response if **icalEnabled = true**
    anydata icalUrl?;
    # Indicates which view the user has set for a read-only, default view of the published sheet. Must be one of the listed enum values
    "CALENDAR"|"CARD"|"GRID" readOnlyFullDefaultView?;
    # **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
    # 
    # # Deprecated
    @deprecated
    boolean readWriteShowToolbar?;
    # URL for 'Read-Only Full' view of the published sheet. Only returned in a response if **readOnlyFullEnabled = true
    string readOnlyFullUrl?;
    # If **true**, a webcal is available for the calendar in the sheet
    boolean icalEnabled?;
    # If **true**, a rich version of the sheet is published with the ability to download row attachments and discussions
    boolean readOnlyFullEnabled?;
    # URL for 'Edit by Anyone' view of the published sheet. Only returned in a response if **readWriteEnabled = true**
    string readWriteUrl?;
    # URL for 'Read-Only' view of the published sheet when SSL is enabled
    string readOnlyLiteSslUrl?;
    # URL for 'Read-Only HTML' view of the published sheet. Only returned in a response if **readOnlyLiteEnabled = true**
    string readOnlyLiteUrl?;
    # If **true**, a lightweight version of the sheet is published without row attachments and discussions
    boolean readOnlyLiteEnabled?;
    # **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
    # 
    # # Deprecated
    @deprecated
    boolean readOnlyFullShowToolbar?;
    # Indicates who can access the 'Edit by Anyone' view of the published sheet:
    #   * ALL - available to anyone who has the link.
    #   * ORG - available only to members of the sheet owner's Smartsheet organization account.
    #   * SHARED - available only to users shared to the item.
    # 
    # Only returned in the response if **readWriteEnabled = true**
    "ALL"|"ORG"|"SHARED" readWriteAccessibleBy?;
};

# Additional details for report move events including user and location data
public type ReportMoveAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the parent container of the report. (Specific to move events where a folder containing the report is moved to a folder in a different workspace, indicates that the report has moved to a new workspace but is still within the same folder)
    @constraint:Int {minValue: 0}
    int parentContainerId?;
    # Id of the destination folder for the move event. (Specific to actions where the report was moved to a different folder)
    @constraint:Int {minValue: 0}
    int newParentContainerId?;
    # Name of the destination folder for the move event. (Specific to actions where the report was moved to a different folder)
    string folderName?;
    # Id of the workspace the report is currently in. If the move was between two workspaces the `workspaceId` will be the Id of the destination workspace
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Queries record for the operation: proofs-listAttachments
public type ProofsListAttachmentsQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Can contain dashboards, folders, reports, sheets, or templates
public type FolderSimpleResponse record {
    # Folder name
    string name?;
};

# Event schema for form deletion operations in Smartsheet
public type FormDelete record {
    *Event;
   // *FormDeleteEvent;
};

# Updates User for the following attributes:
# 
# * **admin** (required).
# * **licensedSheetCreator** (required).
# * **firstName** (optional).
# * **groupAdmin** (optional).
# * **lastName** (optional).
# * **resourceViewer** (optional)
public type UserUpdate record {
    # User's first name
    string firstName?;
    # User's last name
    string lastName?;
    # Indicates whether the user is a group admin (can create and edit groups)
    boolean groupAdmin = false;
    # Indicates whether the user is a resource viewer (can access resource views)
    boolean resourceViewer = false;
    # Indicates whether the user is a system admin (can manage user accounts and organization account)
    boolean admin = false;
    # Indicates whether the user is a licensed user (can create and own sheets)
    boolean licensedSheetCreator = false;
};

# Triggered when a user is added to a group that a sheet has been shared to via the sheet's sharing list, or via a workspace's sharing list.
# 
# If a sheet has been shared to a group directly via the sheet's sharing list, and via a workspace's sharing list, then an event will be generated for each of these shares
public type SheetShareMemberAddEvent record {
    # The action applied to the specified object
    "ADD_SHARE_MEMBER" action?;
    # Additional details for sheet share member addition events
    SheetAddShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Request body for sheet creation operations
public type SheetsBody SheetToCreate|SheetToCreateFromTemplate;

# Response object for summary field update operations
public type SummaryFieldUpdateResponse record {
    *Result;
    *SummaryFieldListResult;
};

# Represents the Headers record for the operation: is-favorite
public type IsFavoriteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # UserId of the user
    @http:Header {name: "x-smar-sc-actor-id"}
    string xSmarScActorId?;
};

# Represents the Queries record for the operation: addImageToCell
public type AddImageToCellQueries record {
    # Url-encoded alternate text for the image
    string altText?;
    # You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    boolean overrideValidation = false;
};

# Triggered when a user accepts an invitation to join an organization account through email
public type UserAcceptInviteEvent record {
    # The action applied to the specified object
    "ACCEPT_INVITE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Email configuration with recipients, subject, and message
public type Email record {
    # Array of recipients
    Recipient[] sendTo?;
    # Indicates whether to send a copy of the email to the sender
    boolean ccMe?;
    # The subject of the email
    string subject?;
    # The message of the email
    string message?;
};

# Triggered when a dashboard is in the deleted items bin and is restored (`Undelete`)
public type DashboardRestoreEvent record {
    # The action applied to the specified object
    "RESTORE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Response for creating a new proof request with generic result
public type ProofRequestCreateResponse record {
    *GenericResult;
    *ProofRequestResponse;
};

# Represents the project settings dependencies for a specific sheet. Project settings may be updated on sheets that the user has editor access
public type ProjectSettings record {
    # Non-working days for a project sheet
    string[] nonWorkingDays?;
    # Array of working days for project scheduling
    ("MONDAY"|"TUESDAY"|"WEDNESDAY"|"THURSDAY"|"FRIDAY"|"SATURDAY"|"SUNDAY")[] workingDays?;
    # Length of a workday for a project sheet
    @constraint:Number {minValue: 1, maxValue: 24}
    decimal lengthOfDay?;
};

# Additional details for row sending operations
public type SheetSendRowAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether the row(s) were sent with their respective attachments
    boolean includeAttachments?;
    # Number of rows sent
    @constraint:Int {minValue: 1}
    int rowCount?;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the `recipientGroupId` property below isn't included)
    string recipientEmail?;
    # Indicates whether the row(s) were sent with their respective discussion comments
    boolean includeDiscussions?;
};

# Represents the Queries record for the operation: updaterequests-list
public type UpdaterequestsListQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Request body for sheet sharing operations
public type SheetIdSharesBody Share|SheetSharesList;

# Represents the Queries record for the operation: get-sight
public type GetSightQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of optional elements to include in the response:
    #   * **objectValue** - when used in combination with a **level** query parameter, includes the email addresses for multi-contact data.
    #   * **source** - the Source object for any Sight that was created from another Sight, if any
    "objectValue"|"source" include?;
    # Specifies whether new functionality, such as multi-contact data is returned in a backwards-compatible, text format (**level=0**, default), multi-contact data (**level=2**), multi-picklist data (**level=3**), or Metric widget with sheet summary (**level=4**)
    int level = 0;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
};

# Response containing a single row object
public type RowResultResponse record {
    # Complete row object with cells, metadata, and optional includes
    Row result?;
};

# Response schema containing detailed comment information
public type CommentDetailsResponse Comment;

# Indicates whether summary field values are restricted to the type
public type Validation boolean;

# Additional details for discussion creation events
public type DiscussionCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the sheet row containing the discussion. (this property is included only if the discussion is on a sheet row)
    @constraint:Int {minValue: 0}
    int sheetRowId?;
    # Id of the sheet the discussion is on. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Id of the workspace the discussion is directly on. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Headers record for the operation: getSheet
public type GetSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # The Accept request-header field can be used to specify certain media types which are acceptable for the response
    @http:Header {name: "Accept"}
    string accept?;
};

# Response containing array of workspace folder data
public type WorkspaceFolderListResult record {
    # Array of all the workspace folders, referenced by their ID, name, and URL
    FolderListingData[] data?;
};

# Permission level for user access control
public type AccessLevel "ADMIN"|"COMMENTER"|"EDITOR"|"EDITOR_SHARE"|"OWNER"|"VIEWER";

# Response schema for comment deletion operations with version tracking
public type CommentDeleteResponse GenericResult;

# Represents the Headers record for the operation: get-sight-publish-status
public type GetSightPublishStatusHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response for listing reports with access information
public type ReportIndexResponse record {
    *IndexResult;
    *ReportAccessListData;
};

# Represents the Headers record for the operation: get-asset-share
public type GetAssetShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Details for account rename events including user email and name changes
public type AccountRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the organization account
    string newName?;
    # Previous name of the organization account
    string oldName?;
};

# Represents the Headers record for the operation: comments-create
public type CommentsCreateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Response object containing sheet publish configuration details
public type SheetPublishResponse record {
    # Describes the sheet's publish settings
    SheetPublish result?;
};

# Represents the Queries record for the operation: get-workspace-children
public type GetWorkspaceChildrenQueries record {
    # A comma-separated list of optional elements to include in the response:
    #   * **source** - adds the Source object indicating which object this resource was created from, if any
    #   * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned
    "source"|"ownerInfo" include?;
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # The maximum number of items to return in the response
    @constraint:Int {minValue: 100, maxValue: 1000}
    int maxItems = 100;
    # A comma-separated list of the child types to include in the response
    "sheets"|"reports"|"sights"|"folders" childrenResourceTypes;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The lastKey token returned from the previous page of results. If not specified,
    # the first page of results is returned
    string lastKey?;
};

# Event schema for access token revocation operations
public type AccesstokenRevoke record {
    *Event;
    //*AccessTokenRevokeEvent;
};

# Represents the Headers record for the operation: proofs-deleteVersion
public type ProofsDeleteVersionHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
# 
# # Deprecated
@deprecated
public type ReadWriteShowToolbar boolean;

# Represents the Headers record for the operation: add-favorite
public type AddFavoriteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # UserId of the user
    @http:Header {name: "x-smar-sc-actor-id"}
    string xSmarScActorId?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: get-current-user
public type GetCurrentUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: attachments-versionsDelete
public type AttachmentsVersionsDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Event schema for workspace recurring backup update operations
public type WorkspaceUpdateRecurringBackup record {
    *Event;
   // *WorkspaceRecurringBackupUpdateEvent;
};

# Writable timestamp accepting either datetime string or numeric format
public type TimestampWriteable TimestampDateTime|TimestampNumber;

# Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated
public type AutoNumberFormat record {
    # The prefix. Can include the date tokens:
    #   * {DD}
    #   * {MM}
    #   * {YY}
    #   * {YYYY}
    string prefix?;
    # The starting number for the auto-id
    decimal startingNumber?;
    # Indicates zero-padding. Must be between 0 and 10 "0" (zero) characters
    string fill?;
    # The suffix. Can include the date tokens:
    #   * {DD}
    #   * {MM}
    #   * {YY}
    #   * {YYYY}
    string suffix?;
};

# Indicates whether the field is locked
public type Locked boolean;

# Represents the Headers record for the operation: copy-workspace
public type CopyWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Triggered when a dashboard is renamed in the UI or via the API (update)
public type DashboardRenameEvent record {
    # The action applied to the specified object
    "RENAME" action?;
    # Additional details for dashboard rename events including user and names
    DashboardRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://api.smartsheet.com/2.0/token";
|};

# Additional details for dashboard workspace sharing events
public type DashboardAddWorkspaceShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user.
    # 
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the dashboard
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that the workspace was shared to. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that the workspace was shared to. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that was shared to the group or user
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Queries record for the operation: getSheet
public type GetSheetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of optional elements to include in the response:
    #   * **attachments** - includes the metadata for sheet-level and row-level attachments. To include discussion attachments, both attachments and discussions must be present in the include list.
    #   * **columnType** -includes columnType attribute in the row's cells indicating the type of the column the cell resides in.
    #   * **crossSheetReferences** - includes the cross-sheet references
    #   * **discussions** - includes sheet-level and row-level discussions. To include discussion attachments, both attachments and discussions must be present in the include list.
    #   * **filters** - includes filteredOut attribute indicating if the row should be displayed or hidden according to the sheet's filters.
    #   * **filterDefinitions** - includes type of filter, operators used, and criteria
    #   * **format** -  includes column, row, cell, and summary fields formatting.
    #   * **ganttConfig** - includes Gantt chart details.
    #   * **objectValue** - when used in combination with a level query parameter, includes the email addresses for multi-contact data.
    #   * **ownerInfo** - includes the owner's email address and the owner's user Id.
    #   * **rowPermalink** - includes permalink attribute that represents a direct link to the row in the Smartsheet application.
    #   * **source** - adds the Source object indicating which report, sheet  Sight (aka dashboard), or template the sheet was created from, if any.
    #   * **writerInfo** - includes createdBy and modifiedBy attributes on the row or summary fields, indicating the row or summary field's creator, and last modifier
    "attachments"|"columnType"|"crossSheetReferences"|"discussions"|"filters"|"filterDefinitions"|"format"|"ganttConfig"|"objectValue"|"ownerInfo"|"rowPermalink"|"source"|"writerInfo" include?;
    # Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    int level = 0;
    # A comma-separated list of row Ids on which to filter the rows included in the result
    string rowIds?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # applies to PDF format only
    "LETTER"|"LEGAL"|"WIDE"|"ARCHD"|"A4"|"A3"|"A2"|"A1"|"A0" paperSize = "LETTER";
    # If version specified is still the current sheet version, then returns an abbreviated Sheet object with only the sheet version property. Otherwise, if the sheet has been modified, returns the complete Sheet object. Intended to allow clients with a cached copy to make sure they have the latest version
    int ifVersionAfter?;
    # Overrides the existing include={filters} parameter if both are supplied. Applies the given filter (if accessible by the calling user) and marks the affected rows as "filteredOut": true
    string filterId?;
    # A comma-separated list of column ids. The response contains only the specified columns in the "columns" array, and individual rows' "cells" array only contains cells in the specified columns
    string columnIds?;
    # A comma-separated list of row numbers on which to filter the rows included in the result. Non-existent row numbers are ignored
    string rowNumbers?;
    # A comma-separated list of element types to exclude from the response:
    #   * **filteredOutRows** - excludes filtered-out rows from response payload if a sheet filter is applied; includes total number of filtered rows
    #   * **linkInFromCellDetails** - excludes the following attributes from the **cell.linkInFromCell** object: `columnId`, `rowId`, `status`
    #   * **linksOutToCellsDetails** - excludes the following attributes from the **cell.linksOutToCells** array elements: `columnId`, `rowId`, `status`
    #   * **nonexistentCells** - excludes empty cells
    "filteredOutRows"|"linkInFromCellDetails"|"linksOutToCellsDetails"|"nonexistentCells" exclude?;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
    # Filter to return only rows that have been modified since the date/time provided. Date should be in ISO-8601 format
    Timestamp rowsModifiedSince?;
};

# All objects a user has access to, including dashboards, folders, reports, sheets, and templates
public type Home record {
    # Array of reports accessible from the user's home
    Report[] reports?;
    # Array of sheets accessible from the user's home
    Sheet[] sheets?;
    # Array of folders accessible from the user's home
    Folder[] folders?;
    # Array of dashboards (sights) accessible from the user's home
    Sight[] sights?;
    # Array of templates accessible from the user's home
    Template[] templates?;
};

# Report object containing scope, source sheets, and summary information
public type Report Sheet;

# Sheet imported from CSV / XLSX file
public type SheetImported record {
    # Permission level for user access control
    AccessLevel accessLevel?;
    # Sheet name
    Name name?;
    # Sheet Id
    Id id?;
    # Container type. Has 'sheet' value for the imported sheet
    string 'type?;
    # URL that represents a direct link to the sheet in Smartsheet
    Permalink permalink?;
};

# Represents the Queries record for the operation: tokens-getOrRefresh
public type TokensGetOrRefreshQueries record {
    # refresh_token value that came with the access token
    @http:Query {name: "refresh_token"}
    string refreshToken?;
    # Authorization code acquired after user selects "Allow" in the Web login UI
    string code?;
    # Must be set to "authorization_code"
    @http:Query {name: "grant_type"}
    "authorization_code"|"refresh_token" grantType;
    # (Optional) Must use either this value or hash. Plain text method for sending this value. For example, client_secret={app_secret}. Encryption occurs at the HTTPS level
    @http:Query {name: "client_secret"}
    string clientSecret?;
    # The client Id you obtained when you registered your app
    @http:Query {name: "client_id"}
    string clientId;
    # (Optional) Must use either this value or client_secret. SHA-256 hash of your app secret concatenated with a pipe and the authorization code. For example, hash={SHA_256(app_secret|code)}
    string hash?;
    # **Deprecated** If supplied, must match the redirect URI you registered for your app
    # 
    # # Deprecated
    @http:Query {name: "redirect_url"}
    @deprecated
    string redirectUrl?;
};

# Automation rule configuration with triggers, actions, and status
public type AutomationRule record {
    # A timestamp of when the rule was originally added
    Timestamp createdAt?;
    # Machine-readable reason a rule is disabled:
    # * `APPROVAL_COLUMN_MISSING` This rule's approval status column has been deleted.
    # 
    # * `APPROVAL_COLUMN_WRONG_TYPE` The approval column must be a dropdown column.
    # 
    # * `AUTOMATION_NOT_ENABLED_FOR_ORG` To create or edit automated actions,
    # you need to upgrade your organization account to a Business or Enterprise plan.
    # 
    # * `COLUMN_MISSING` A column referenced by this rule has been deleted.
    # 
    # * `COLUMN_TYPE_INCOMPATIBLE` A column referenced by this rule has been changed to an incompatible column type.
    # 
    # * `NO_POTENTIAL_RECIPIENTS` This rule has no recipients that will be able to receive
    # notifications based on this sheet's permission settings or this account's approved domain sharing list.
    # 
    # * `NO_VALID_SELECTED_COLUMNS` All selected columns for this rule have been deleted
    "APPROVAL_COLUMN_MISSING"|"APPROVAL_COLUMN_WRONG_TYPE"|"AUTOMATION_NOT_ENABLED_FOR_ORG"|"COLUMN_MISSING"|"COLUMN_TYPE_INCOMPATIBLE"|"NO_POTENTIAL_RECIPIENTS"|"NO_VALID_SELECTED_COLUMNS" disabledReason?;
    # `User` object containing `name` and `email` of the creator of this rule
    MiniUser createdBy?;
    # The datetime for when the change was made to the rule
    Timestamp modifiedAt?;
    # Rule name as shown in the UI
    string name?;
    # If true, indicates that the current user can modify the rule
    boolean userCanModify?;
    # An [AutomationAction object](/api/smartsheet/openapi/automationrules/automationaction) containing information for this rule, such as type, recipients, and frequency
    anydata action?;
    # `User` object containing the `name` and `email` of the user that made the change
    MiniUser modifiedBy?;
    # AutomationRule Id
    decimal id?;
    # Descriptive reason a rule is disabled
    string disabledReasonText?;
    # If true, indicates that the rule is active
    boolean enabled?;
};

# Event details for sending a sheet as an email attachment
public type SheetSendAsAttachment record {
    *Event;
   // *SheetSendAttachmentEvent;
};

# Response for setting sheet publish configuration with generic result
public type SheetPublishSetResponse record {
    *GenericResult;
    *SheetPublishResponse;
};

# Request to add a member to a group by email address
public type GroupMemberAdd record {
    # Group member's email address
    string email?;
};

# Event triggered when a new sheet is created
public type SheetCreate record {
    *Event;
   // *SheetCreateEvent;
};

# Event for removing workspace share access from a report
public type ReportRemoveWorkspaceShare record {
    *Event;
  //  *ReportWorkspaceShareRemoveEvent;
};

# Represents the Queries record for the operation: is-favorite
public type IsFavoriteQueries record {
    # A comma-separated list of optional elements to include in the response
    "directId"|"name" include?;
};

# Represents the Queries record for the operation: get-current-user
public type GetCurrentUserQueries record {
    # When specified with a value of 'groups', response includes an array of groups (groupId, name, and description only) that the user is a member of
    "groups" include?;
};

# Represents the Headers record for the operation: sentupdaterequests-list
public type SentupdaterequestsListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Queries record for the operation: list-sights
public type ListSightsQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Request to update sharing permissions and access level
public type UpdateShareRequest record {
    # Permission level for user access control
    AccessLevel accessLevel;
};

# Represents the Headers record for the operation: copy-rows
public type CopyRowsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Event for downloading sheet access report for a group
public type GroupDownloadSheetAccessReport record {
    *Event;
    //*GroupSheetAccessReportEvent;
};

# Triggered when a group or user is removed from a sheet's sharing list
public type SheetShareRemovalEvent record {
    # The action applied to the specified object
    "REMOVE_SHARE" action?;
    # Additional details for sheet share removal events
    SheetRemoveShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Required field constraints for webhook configuration objects
public type WebhookRequiredFields record {
};

# Additional details for report share removal events
public type ReportRemoveShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that was added to the report's sharing list. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the report's sharing list. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# Represents the Queries record for the operation: list-groups
public type ListGroupsQueries record {
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: add-group-members
public type AddGroupMembersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Additional details for attachment deletion events
public type AttachmentDeleteAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the sheet that contains the attachment. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Id of the workspace that directly contains the attachment. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Response schema for sheet update operations with result metadata
public type SheetUpdateResponse record {
    *GenericResult;
    *SheetResultResponse;
};

# Response object for promoting an alternate email to primary
public type AlternateEmailPromoteResponse record {
    *GenericResult;
    *AlternateEmailListDataAlt;
};

# 64-bit integer timestamp representation
public type TimestampLong int;

# User event for downloading sheet access reports
public type UserDownloadSheetAccessReport record {
    *Event;
   // *UserSheetAccessReportEvent;
};

# Represents the Queries record for the operation: row-discussions-list
public type RowDiscussionsListQueries record {
    # A comma-separated list of optional elements to include in the response:
    #   * **attachments** - effective only if comments is present, otherwise ignored
    #   * **comments** - include all comments in threads
    "attachments"|"comments" include?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Triggered when a user saves a copy of a folder by using the `Save As New` option via UI or `Copy Folder` via API.
# 
# This event is recorded for the original folder. Each `Save As New` event is paired with a [FOLDER - CREATE](/api/smartsheet/openapi/schemas/folder_create) event that is recorded for the copy of the folder
public type FolderSaveAsEvent record {
    # The action applied to the specified object
    "SAVE_AS_NEW" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

# Additional details for sheet share removal events
public type SheetRemoveShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that was removed from the sheet's sharing list. (Specific to remove share from group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was removed from the sheet's sharing list. (Specific to remove share from user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# A list of updated summary fields
public type SummaryFieldListResult record {
    # Array of summary field objects in the result
    SummaryField[] result?;
};

# Specifies the recipient of an [Email]($ref: 'Email.yaml#/components/schemas/Email'). The recipient may be either an individual or a group. To specify an individual, set the **email** attribute; to specify a group, set the **groupId** attribute. Either **email** and **groupId** may be set, but not both
public type RecipientIndividual record {
    # The email address of an individual recipient
    string email?;
};

# Represents the Headers record for the operation: list-sheets
public type ListSheetsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Pagination metadata with page numbers, sizes, and total counts
public type PaginationMetadata record {
    # The current page in the full result set that the data array represents.
    # NOTE when a page number greater than totalPages is requested, the last
    # page is instead returned
    decimal pageNumber?;
    # **DEPRECATED - As early as the sunset date specified in this [Changelog entry](/api/smartsheet/changelog#2025-08-04), this response property value will be `-1`.** See the [Changelog entry](/api/smartsheet/changelog#2025-08-04) for migration instructions and details.
    # 
    # The total number of pages in the full result set
    # 
    # # Deprecated
    @deprecated
    decimal totalPages?;
    # The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included). Unless otherwise specified, this defaults to 100 for most endpoints
    decimal? pageSize?;
    # **DEPRECATED - As early as the sunset date specified in this [Changelog entry](/api/smartsheet/changelog#2025-08-04), this response property value will be `-1`.** See the [Changelog entry](/api/smartsheet/changelog#2025-08-04) for migration instructions and details.
    # 
    # The total number of items in the full result set
    # 
    # # Deprecated
    @deprecated
    decimal totalCount?;
};

# Response containing created proof details and updated sheet version
public type ProofCreateResponse record {
    *GenericResult;
    # Object containing zero or more media items, including images, videos, and documents, for review, editing, or approval
    Proof result?;
};

# Data container for sheet list collections
public type SheetListData record {
    # List of Sheets
    SheetList[] data?;
};

# If **true**, a rich version of the sheet is published with the ability to download row attachments and discussions
public type ReadOnlyFullEnabled boolean;

# Triggered when a group or user is added to the dashboard's sharing list, or when a group or user's share permissions are changed
public type DashboardShareAddEvent record {
    # The action applied to the specified object
    "ADD_SHARE" action?;
    # Details for dashboard share addition including user, access level, and group info
    DashboardAddShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Result object for summary field deletion operations
public type SummaryFieldDeleteResult record {
    *Result;
    *SummaryFieldDeleteResponse;
};

# Represents the Queries record for the operation: list-sheets
public type ListSheetsQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of optional elements to include in the response:
    # * **sheetVersion** - current version number of each sheet, should not be combined with pagination
    # * **source** - the Source object for any sheet that was created from another sheet, if any
    "sheetVersion"|"source" include?;
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Response containing indexed data with folder list results
public type IndexedDataResponse record {
    *IndexResult;
    *FolderListResult;
};

# Indicates which view the user has set for a read-write, default view of the published sheet. Must be one of the listed enum values
public type ReadWriteDefaultView "CALENDAR"|"CARD"|"GRID";

# Represents the Headers record for the operation: set-sheetPublish
public type SetSheetPublishHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: delete-sheet-share
public type DeleteSheetShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Can contain dashboards, folders, reports, sheets, or templates
public type FolderNameOnly record {
    # Folder name
    string name?;
};

# Sheet Id
public type Id decimal;

# Event schema for dashboard rename operations
public type DashboardRename record {
    *Event;
    //*DashboardRenameEvent;
};

# Event schema for folder backup requests
public type FolderRequestBackup record {
    *Event;
    //*FolderBackupRequestEvent;
};

# Basic report information including name, ID, access level, and permalink
public type ReportSummaryData record {
    # Permission level for user access control
    AccessLevel accessLevel?;
    # The report's name
    string name?;
    # It is `true` if the report is a sheet summary; otherwise it is a row report
    boolean isSummaryReport?;
    # The report's unique identifier
    decimal id?;
    # URL to the report in Smartsheet
    string permalink?;
};

# Represents the Headers record for the operation: attachments-delete
public type AttachmentsDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Queries record for the operation: list-contacts
public type ListContactsQueries record {
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Additional details for sheet cell link creation events
public type SheetCreateCellLinkAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of sheet referenced by the cell link
    @constraint:Int {minValue: 0}
    int cellLinkSourceSheetId?;
};

# Result object containing updated column information
public type ColumnUpdateResult record {
    # Schema for updating column properties including type, title, and validation
    UpdateColumn result?;
};

# Represents the Queries record for the operation: sentupdaterequests-list
public type SentupdaterequestsListQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Triggered when a group or user is added to a workspace's sharing list. 
# 
# Note that this event will appear for each sheet that is in the workspace. If a group or user is added to a workspace's sharing list and the workspace is empty, then no events will be recorded
public type SheetAddWorkspaceShareEvent record {
    # The action applied to the specified object
    "ADD_WORKSPACE_SHARE" action?;
    # Details for workspace sharing events including user and access level
    SheetAddWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Event schema for sheet access report downloads
public type AccountDownloadSheetAccessReport record {
    *Event;
 //   *AccountAccessReportDownloadEvent;
};

# Response containing folder operation result
public type FolderResultResponse record {
    # Folder object returned from the operation
    Folder result?;
};

# Event schema for form activation operations
public type FormActivate record {
    *Event;
   // *FormActivateEvent;
};

# Dashboard listing with basic metadata and timestamps
public type DashboardListing record {
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # Asset name
    string name?;
    # Asset Id
    decimal id?;
    # URL that represents a direct link to the asset in Smartsheet
    string permalink?;
};

# Represents the Queries record for the operation: copy-rows
public type CopyRowsQueries record {
    # A comma-separated list of row elements to copy in addition to the cell data:
    #   * **all** - specify a value of **all** to include everything (attachments, children, and discussions).
    #   * **attachments**
    #   * **children** -  if specified, any child rows of the rows specified in the request are also copied to the destination sheet, and parent-child relationships amongst rows are preserved within the destination sheet; if not specified, only the rows specified in the request are copied.
    #   * **discussions**
    "all"|"attachments"|"children"|"discussions" include?;
    # **true** or **false**: default is **false**. If set to **true**, specifying row Ids that do not exist within the source sheet does not cause an error response. If omitted or set to **false**, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are copied)
    boolean ignoreRowsNotFound = false;
};

# If **true**, a webcal is available for the calendar in the sheet
public type IcalEnabled boolean;

# Generic operation response combining result status and folder data
public type GenericOperationResponse record {
    *GenericResult;
    *FolderResultResponse;
};

# Read-only timestamp that can be either DateTime or Long format
public type Timestamp2 TimestampDateTime|TimestampLong;

# Represents the Headers record for the operation: tokens-getOrRefresh
public type TokensGetOrRefreshHeaders record {
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the response
    @http:Header {name: "Content-Type"}
    "application/x-www-form-urlencoded" contentType?;
};

# Event triggered when a workspace is deleted
public type WorkspaceDelete record {
    *Event;
    //*WorkspaceDeleteEvent;
};

# Standard response schema for generic API operations
public type GenericActionResponse GenericResult;

# Array collection of sheet rows
public type SheetRowCollection Row[];

# Display width of the column in pixels
public type Width decimal;

# Object containing row data and metadata for update operations
public type UpdateRowsObject record {
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Indicates whether the row is expanded or collapsed
    boolean expanded?;
    # Cells objects
    CellObjectForRows[] cells?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # Row Id
    decimal id?;
    # Row number within the sheet
    @constraint:Number {minValue: 1}
    decimal rowNumber?;
    # The row number of the parent
    decimal parentRowNumber?;
    # Sheet version number that is incremented every time a sheet is modified
    decimal version?;
    # The Id of the parent
    decimal parentId?;
};

# Object containing a shared secret value for authentication
public type SharedSecret record {
    # Value for the shared secret
    string sharedSecret?;
};

# Event schema for dashboard ownership transfer operations
public type DashboardTransferOwnership record {
    *Event;
    //*DashboardOwnershipTransferEvent;
};

# Represents the Queries record for the operation: columns-listOnSheet
public type ColumnsListOnSheetQueries record {
    # Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    int level = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Additional details for sheet share member addition events
public type SheetAddShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the user. 
    # 
    # Note that this access level represents the access level that has been granted to the user via group membership; it is not the user's effective access level for the sheet
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group the user was added to
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the sheet is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Triggered when a dashboard is viewed in the UI or loaded through the API
public type DashboardLoadEvent record {
    # The action applied to the specified object
    "LOAD" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Event schema for workspace share member removal operations
public type WorkspaceRemoveShareMember record {
    *Event;
   // *WorkspaceShareRemovalEvent;
};

# Request body schema for sheet row operations
public type SheetIdRowsBody1 Row|SheetssheetIdrowsOneOf21;

# Represents the Headers record for the operation: proofs-createProofRequests
public type ProofsCreateProofRequestsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Triggered when a user creates a sheet update request. 
# 
# Notice that an update request is created whenever the user sends a new update request via the UI. Also, notice that even though update requests can be sent from a report, it is in fact an update request on the sheet that owns the rows sent in the update request
public type UpdateRequestCreateEvent record {
    # The action applied to the specified object
    "CREATE" action?;
    # Additional details for creating update requests including email and options
    UpdateRequestCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "UPDATE_REQUEST" objectType?;
};

# Response containing list of cell history records
public type CellHistoryListResponse record {
    # List of cell history objects
    CellHistory[] data?;
};

# Response containing a single group object
public type GroupResult record {
    # Group object with owner, timestamps, name, and description
    Group result?;
};

# Schema for updating sheet properties and settings
public type UpdateSheet record {
    # Represents individual user settings for a specific sheet. User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet)
    SheetUserSettings userSettings?;
    # Sheet name
    string name?;
    # Represents the project settings dependencies for a specific sheet. Project settings may be updated on sheets that the user has editor access
    ProjectSettings projectSettings?;
};

# Action details for proof request operations
public type ProofRequestAction record {
    # Proof request action status
    "APPROVED"|"PENDING"|"REJECTED" actionStatus?;
    # `User` object containing `name` and `email` of the user performing the action
    MiniUser user?;
};

# Triggered when an existing sheet is updated
public type SheetUpdateEvent record {
    # The action applied to the specified object
    "UPDATE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Response wrapper containing a comment object
public type CommentResult record {
    # Comment object with text, creator, attachments, and timestamps
    Comment result?;
};

# Array of share objects for a report
public type ReportSharesList Share[];

# Triggered when an admin bulk updates users. This can be done through User Managementconsole on UI
public type AccountBulkUpdateEvent record {
    # The action applied to the specified object
    "BULK_UPDATE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Triggered when a group or user is added to a workspace's sharing list. Note that this event will appear for each dashboard that is in the workspace. If a group or user is added to a workspace's sharing list and the workspace is empty, then no events will be recorded. 
public type DashboardWorkspaceShareAddEvent record {
    # The action applied to the specified object
    "ADD_WORKSPACE_SHARE" action?;
    # Additional details for dashboard workspace sharing events
    DashboardAddWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Represents the Headers record for the operation: proofs-deleteProofRequests
public type ProofsDeleteProofRequestsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response schema for comment creation operations
public type CommentCreateResponse record {
    *GenericResult;
    *CommentResult;
};

# Container for column addition operation results
public type ColumnAddResultData record {
    # Array of added column results
    AddColumns[] result?;
};

# Represents the Headers record for the operation: get-workspace-children
public type GetWorkspaceChildrenHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Triggered when row(s) are moved from one sheet to another
public type SheetMoveRowEvent record {
    # The action applied to the specified object
    "MOVE_ROW" action?;
    # Additional details for row move events including source/destination sheets
    SheetMoveRowAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Response for row addition operations with batch processing details
public type RowAddResponse record {
    *GenericResult;
    *RowAddBatchResponse;
};

# Represents the Queries record for the operation: get-folder
public type GetFolderQueries record {
    # A comma-separated list of optional elements to include in the response:
    #   * **source** - adds the Source object indicating which object the folder was created from, if any
    #   * **distributionLink**
    #   * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned.
    #   * **sheetVersion**
    #   * **permalinks**
    "source"|"distributionLink"|"ownerInfo"|"sheetVersion" include?;
};

# Event schema for sheet load operations
public type SheetLoad record {
    *Event;
    //*SheetLoadEvent;
};

# Represents the Headers record for the operation: SetReportPublish
public type SetReportPublishHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Event triggered when a workspace share is added to a dashboard
public type DashboardAddWorkspaceShare record {
    *Event;
    //*DashboardWorkspaceShareAddEvent;
};

# Response object for comment modification operations
public type CommentUpdateResponse record {
    *GenericResult;
    # Comment object with text, creator, attachments, and timestamps
    Comment result?;
};

# Collection of sharing operation responses
public type ShareResponseList record {
    # Array of individual share response objects
    ShareResponse[] result?;
};

# Event triggered when a password reset is sent to a user
public type UserSendPasswordReset record {
    *Event;
    //*UserPasswordResetEvent;
};

# Response object returned when creating a new share
public type ShareCreateResponse record {
    *Result;
    *ShareResultData;
};

# A list of created summary fields
public type SummaryFieldCreateResult record {
    # Array of created summary field objects
    SummaryField[] result?;
};

# Event triggered when a share is removed from a sheet
public type SheetRemoveShare record {
    *Event;
   // *SheetShareRemovalEvent;
};

# Container for a list of group members
public type GroupMembersList record {
    # List of Group Members
    GroupMember[] members?;
};

# Alternative update request response with result metadata
public type UpdateRequestResponseAlt record {
    *Result;
    *UpdateRequestResponse;
};

# Email configuration for sending sheets with format options
public type SheetEmail Email;

# Event schema for sheet ownership transfer operations
public type SheetTransferOwnership record {
    *Event;
    //*SheetOwnershipTransferEvent;
};

# Specifies the recipient of an email. The recipient may be either an individual or a group. To specify an individual, set the email attribute; to specify a group, set the groupId attribute. Either email and groupId may be set, but not both
public type Recipient RecipientIndividual|RecipientGroup;

# Represents the Queries record for the operation: discussion-listAttachments
public type DiscussionListAttachmentsQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Triggered when a user saves a copy of a workspace by using the `Save As New` option via UI or `Copy Workspace` via API. 
# 
# This event is recorded for the original workspace. Each `Save As New` event is paired with a [WORKSPACE - CREATE](/api/smartsheet/openapi/schemas/workspace_create) event that is recorded for the copy of the workspace
public type WorkspaceSaveAsEvent record {
    # The action applied to the specified object
    "SAVE_AS_NEW" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Represents the Headers record for the operation: add-alternate-email
public type AddAlternateEmailHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Additional details for discussion send events including recipients and context
public type DiscussionSendAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether the discussion was sent with its respective attachments
    boolean includeAttachments?;
    # Id of the sheet row containing the discussion. (this property is included only if the discussion is on a sheet row)
    @constraint:Int {minValue: 0}
    int sheetRowId?;
    # Id of the sheet the discussion is on. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the `recipientGroupId` property below isn't included)
    string recipientEmail?;
    # Id of the workspace the discussion is directly on. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Headers record for the operation: discussion-listAttachments
public type DiscussionListAttachmentsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Event schema for report load operations
public type ReportLoad record {
    *Event;
   // *ReportLoadEvent;
};

# Maps row IDs between source and destination sheets
public type RowMapping record {
    # Row Id in the source sheet
    decimal 'from?;
    # Row Id in the destination sheet
    decimal to?;
};

# Reference configuration for cross-sheet formulas and data links
public type CrossSheetReference record {
    # Defines beginning edge of range when specifying one or more rows. To specify an entire row, omit the startColumnId and endColumnId parameters
    decimal startRowId?;
    # Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References
    string name?;
    # Defines beginning edge of range when specifying one or more columns. To specify an entire column, omit the startRowId and endRowId parameters
    decimal startColumnId?;
    # Sheet Id of source sheet
    decimal sourceSheetId?;
    # Defines ending edge of range when specifying one or more columns. To specify an entire column, omit the startRowId and endRowId parameters
    decimal endColumnId?;
    # Defines ending edge of range when specifying one or more rows. To specify an entire row, omit the startColumnId and endColumnId parameters
    decimal endRowId?;
    # Cross-sheet reference Id, guaranteed unique within referencing sheet
    decimal id?;
    # Status of request:
    #  * 'BLOCKED' - A reference is downstream of a circular issue.
    #  * 'BROKEN' - The data source location (column, row or sheet) was deleted.
    #  * 'CIRCULAR' - The formula reference is self referencing and cannot be resolved.
    #  * 'DISABLED' - Updating the reference is temporarily disabled due to maintenance.
    #  * 'INVALID/UNKNOWN' - The reference is new and had not been validated.
    #  * 'NOT_SHARED' - No common shared users.
    #  * 'OK' - The reference is in a good state
    "BLOCKED"|"BROKEN"|"CIRCULAR"|"DISABLED"|"INVALID/UNKNOWN"|"NOT-SHARED"|"OK" status?;
};

# Complete row object with cells, metadata, and optional includes
public type Row record {
    # Describes this row's conditional format. Only returned if the include query string parameter contains format and this row has a conditional format applied
    string conditionalFormat?;
    # Attachments on row. Only returned if the include query string parameter contains attachments
    Attachment[] attachments?;
    # URL that represents a direct link to the row in Smartsheet. Only returned if the include query string parameter contains rowPermalink
    string permaLink?;
    # Permission level for user access control
    AccessLevel accessLevel?;
    # Columns of row. Only returned if the include query string parameter contains columns
    Column[] columns?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # Discussions on the row. Only returned if the include query string parameter contains discussions
    Discussion[] discussions?;
    # Format descriptor. Only returned if the include query string parameter contains format and this row has a non-default format applied
    string format?;
    # Sheet version number that is incremented every time a sheet is modified
    decimal version?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Indicates whether the row is expanded or collapsed
    boolean expanded?;
    # Cells belonging to the row
    Cell[] cells?;
    # User object containing name and email of the creator of this row
    MiniUser createdBy?;
    # Indicates if the row is filtered out by a column filter. Only returned if the include query string parameter contains filters
    boolean filteredOut?;
    # Only returned, with a value of true, if the sheet is a project sheet with dependencies enabled and this row is in the critical path
    boolean inCriticalPath?;
    # Parent sheet Id
    decimal sheetId?;
    # Indicates whether the row is locked for the requesting user
    boolean lockedForUser?;
    # User object containing name and email of the last person to modify this row
    MiniUser modifiedBy?;
    # Row Id
    decimal id?;
    # Object containing zero or more media items, including images, videos, and documents, for review, editing, or approval
    Proof proof?;
    # Indicates whether the row is locked
    boolean locked?;
    # Row number within the sheet
    @constraint:Number {minValue: 1}
    decimal rowNumber?;
    # Sibling Id
    decimal siblingId?;
};

# Publishing configuration for read-only report access
public type ReportPublish record {
    # URL for 'Read-Only Full' view of the published report.
    # 
    # Only returned in a response if **readOnlyFullEnabled** = **true**
    string readOnlyFullUrl?;
    # (Required) If **true**, a rich version of the report is published with the ability to download row
    # attachments and discussions
    boolean readOnlyFullEnabled?;
    # Indicates who can access the 'Read-Only Full' view of the published report:
    # * If **ALL**, it is available to anyone who has the link.
    # * If **ORG**, it is available only to members of the report owner's Smartsheet organization account.
    # * If **SHARED**, it is available only to users shared to the item.
    # 
    # Only returned in a response if **readOnlyFullEnabled** = **true**
    string readOnlyFullAccessibleBy?;
    # **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar.
    # If **false**, hides the toolbar
    # 
    # # Deprecated
    @deprecated
    boolean readOnlyFullShowToolbar?;
    # Indicates which view the user has set for a read-only, default view of the published report. Must be one of
    # the following values: **CALENDAR**, **CARD**, or **GRID**
    string readOnlyFullDefaultView?;
};

# Empty response object with no data properties
public type EmptyResponse record {
};

# Additional details for workspace share removal events
public type WorkspaceRemoveShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that was removed from the workspace's sharing list. (Specific to remove share from group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was removed from the workspace's sharing list. (Specific to remove share from user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# Response object containing a list of shares
public type ShareIndexResponse record {
    *IndexResult;
    *ShareListResult;
};

# Represents the Headers record for the operation: get-contact
public type GetContactHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Container for updated user alternate email properties
public type AlternateEmailListDataAlt1 record {
    # Updated User Properties
    AlternateEmail[] data?;
};

# Represents the Headers record for the operation: share-workspace-get
public type ShareWorkspaceGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Update object to enable or disable webhook status
public type WebhookStatusUpdate record {
    # Indicates whether the webhook is on (true) or off (false)
    boolean enabled?;
};

# Schema for update request creation events combining base event and specific data
public type UpdateRequestCreate record {
    *Event;
   // *UpdateRequestCreateEvent;
};

# Triggered when a sheet is deleted
public type SheetDeleteEvent record {
    # The action applied to the specified object
    "DELETE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Headers record for the operation: get-folder
public type GetFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: updaterequests-list
public type UpdaterequestsListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it
public type Format string;

# Response schema for workspace update operations
public type WorkspaceUpdateResponse record {
    *Result;
    *WorkspaceResponse;
};

# ISO 8601 date-time string format
public type TimestampDateTime string;

# Triggered when a user saves a copy of a dashboard by using the `Save As New` option.
# 
# This event is recorded for the original  dashboard. If the original dashboard belongs to a different organization, then `Save As New` event will be generated for the organization with original dashboard and for the organization with copied dashboard.
# 
# For copied dashboard, `Save As New` event is paired with a [DASHBOARD - CREATE](/api/smartsheet/openapi/schemas/dashboard_create) event
public type DashboardSaveAsEvent record {
    # The action applied to the specified object
    "SAVE_AS_NEW" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Represents the Headers record for the operation: columns-listOnSheet
public type ColumnsListOnSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Result of copying or moving rows between sheets
public type CopyOrMoveRowResult record {
    # The Id of the destination sheet
    decimal destinationSheetId?;
    # Array of rowMapping objects
    RowMapping[] rowMappings?;
};

# Represents the Headers record for the operation: addImageToCell
public type AddImageToCellHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    @http:Header {name: "Content-Disposition"}
    string contentDisposition?;
    # Must be set to the size of the file, in bytes. For example to determine file size using in UNIX:
    # $ ls -l ProgressReport.docx
    # 5463 ProgressReport.docx
    @http:Header {name: "Content-Length"}
    int contentLength?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Schema for user update events combining base event and user-specific data
public type UserUpdateUser record {
    *Event;
   // *UserUpdateEvent;
};

# Request payload for creating a new discussion
public type DiscussionCreationRequest record {
    # Comment
    CommentRequest comment?;
};

# Response wrapper for sheet import operations
public type SheetImportResult record {
    # Sheet imported from CSV / XLSX file
    SheetImported result?;
};

# Additional details for sheet sharing events including user and access level
public type SheetAddShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    # 
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the sheet
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that was added to the sheet's sharing list. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the sheet's sharing list. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# Additional details for workspace export events including format type
public type WorkspaceExportAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The format that the workspace was exported ("excel" or "pdf"). Notice that the same value "excel" is displayed either when exporting to Microsoft Excel or when exporting to Google Sheets
    "excel"|"pdf" formatType?;
};

# Response object containing list of columns
public type ColumnListResponse record {
    *IndexResult;
    *ColumnListData;
};

# Response schema combining index results with proof list data
public type ProofListResponse record {
    *IndexResult;
    *ProofListData;
};

# Represents the Headers record for the operation: discussion-delete
public type DiscussionDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Sheet summary field with metadata, type, and value information
public type SummaryField record {
    # Hyperlink object containing URL or references to sheets, reports, or dashboards
    Hyperlink hyperlink?;
    # Represents an image with metadata including dimensions, alt text, and ID
    Image image?;
    # When applicable for PICKLIST column type
    string symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST
    ContactOption[] contactOptions?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it
    string format?;
    # Field index or position. This number is zero-based
    decimal index?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # Arbitrary name, must be unique within summary
    string title?;
    # Data type of the summary field (text, date, contact list, etc.)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Visual representation of cell contents, as presented to the user in the UI
    string displayValue?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # User object containing name and email of the creator of this summary field
    MiniUser createdBy?;
    # When applicable for PICKLIST column type. Array of the options available for the field
    string[] options?;
    # The formula for a cell, if set
    string formula?;
    # Indicates whether the field is locked for the requesting user
    boolean lockedForUser?;
    # User object containing name and email of the user who most recently modified this summary field
    MiniUser modifiedBy?;
    # SummaryField Id
    decimal id?;
    # Indicates whether the field is locked
    boolean locked?;
    # Indicates whether summary field values are restricted to the type
    boolean validation?;
};

# Additional details for group ownership transfer events
public type GroupTransferOwnershipAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the former group owner
    @constraint:Int {minValue: 0}
    int oldOwnerUserId?;
    # Id of the new group owner
    @constraint:Int {minValue: 0}
    int newOwnerUserId?;
};

# Triggered when a user disables publish option for a dashboard
public type DashboardRemovePublishEvent record {
    # The action applied to the specified object
    "REMOVE_PUBLISH" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Directive specifying rows to copy or move and their destination
public type CopyOrMoveRowDirective record {
    # The Ids of the rows to move or copy from the source sheet
    decimal[] rowIds?;
    # Destination sheet information for row copy or move operations
    CopyOrMoveRowDestination to?;
};

# Complete sheet object with properties, settings, and content data
public type Sheet record {
    # Indicates whether multi-select is enabled
    boolean isMultiPicklistEnabled?;
    # Workspace summary with access level, name, ID, and permalink
    WorkspaceListing workspace?;
    # Array of Attachment objects.
    # Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **attachments**
    Attachment[] attachments?;
    # Array of Column objects defining the sheet's column structure
    Column[] columns?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # Array of Discussion objects
    # Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **discussions**
    Discussion[] discussions?;
    # Source object information including ID and type of originating item
    Source 'source?;
    # Describes the current user's editing permissions for a specific sheet
    SheetUserPermissions userPermissions?;
    # User Id of the sheet owner
    decimal ownerId?;
    # Indicates that resource management is enabled
    boolean resourceManagementEnabled?;
    # The sheet is enabled for cell images to be uploaded
    boolean cellImageUploadEnabled?;
    # Indicates whether a sheet summary is present
    boolean hasSummaryFields?;
    # Indicates whether "Gantt View" is enabled
    boolean ganttEnabled?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Resource Management type. Indicates the type of RM that is enabled
    "NONE"|"LEGACY_RESOURCE_MANAGEMENT"|"RESOURCE_MANAGEMENT_BY_SMARTSHEET" resourceManagementType?;
    # Sheet Id
    decimal id?;
    # The total number of rows in the sheet
    decimal totalRowCount?;
    # Email address of the sheet owner
    string owner?;
    # Represents the entire summary, or a list of defined fields and values, for a specific sheet
    SheetSummary summary?;
    # Permission level for user access control
    AccessLevel accessLevel?;
    # Returned only if the sheet belongs to an expired trial (value = **true**)
    boolean readOnly?;
    # Array of Row objects containing the sheet's row data
    Row[] rows?;
    # The Id of the template from which to create the sheet. This attribute can be specified in a request, but is never present in a response
    decimal fromId?;
    # A number that is incremented every time a sheet is modified
    decimal version?;
    # Array of enum strings (see [Attachment.attachmentType](/api/smartsheet/openapi/attachments) indicating the allowable attachment options for the current user and sheet
    string[] effectiveAttachmentOptions?;
    # Indicates whether dependencies are enabled
    boolean dependenciesEnabled?;
    # Returned only if there are column filters on the sheet. Value = **true** if "show parent rows" is enabled for the filters
    boolean showParentRowsForFilters?;
    # Represents individual user settings for a specific sheet. User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet)
    SheetUserSettings userSettings?;
    # Array of CrossSheetReference objects.
    # Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **crossSheetReferences**
    CrossSheetReference[] crossSheetReferences?;
    # Sheet name
    string name?;
    # URL that represents a direct link to the sheet in Smartsheet
    string permalink?;
    # **Deprecated** Returned only if the user has marked this sheet as a favorite in their Home tab (value = **true**)
    # 
    # # Deprecated
    @deprecated
    boolean favorite?;
    # Represents the project settings dependencies for a specific sheet. Project settings may be updated on sheets that the user has editor access
    ProjectSettings projectSettings?;
};

# Represents the Headers record for the operation: update-group
public type UpdateGroupHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: delete-summary-fields
public type DeleteSummaryFieldsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Sheet to create from template
public type SheetToCreateFromTemplate record {
    # Sheet name
    Name name?;
    # Template Id from which to create the sheet
    decimal fromId?;
};

# Represents the Queries record for the operation: list-sight-shares
public type ListSightSharesQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group)
    "ITEM"|"WORKSPACE" sharingInclude?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Basic grid asset information with ID, name, and permalink
public type GridListing record {
    # Asset name
    string name?;
    # Asset Id
    decimal id?;
    # URL that represents a direct link to the asset in Smartsheet
    string permalink?;
};

# Represents the Queries record for the operation: delete-rows
public type DeleteRowsQueries record {
    # A comma-separated list of row Ids
    string ids;
    # **true** or **false**. If set to **false** and any of the specified row Ids are not found, no rows are deleted, and the "not found" [error](/api/smartsheet/openapi/schemas/error) is returned
    boolean ignoreRowsNotFound = false;
};

# Represents the Headers record for the operation: set-sight-publish-status
public type SetSightPublishStatusHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Triggered when a user exports the folder
public type FolderExportEvent record {
    # The action applied to the specified object
    "EXPORT" action?;
    # Additional metadata for folder export operations
    FolderExportAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

# Response object for sight/dashboard operations with result data
public type SightOperationResponse record {
    *ItemResult;
    *SightResultData;
};

# Additional details for folder creation events including user and source
public type FolderCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of folder that was copied to create the new folder. (Only included if the folder was created as a result of a *save as new* or *copy*)
    @constraint:Int {minValue: 0}
    int sourceFolderId?;
    # Name of the destination folder for the move event. (Specific to actions where the folder was moved to a different folder)
    string folderName?;
};

# Represents the Queries record for the operation: list-report-shares
public type ListReportSharesQueries record {
    # When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group)
    "ITEM"|"WORKSPACE" sharingInclude?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Response object containing alternate email list data with index metadata
public type AlternateEmailListResponse record {
    *IndexResult;
    *AlternateEmailListData;
};

# Represents the Headers record for the operation: create-workspace
public type CreateWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: list-asset-shares
public type ListAssetSharesQueries record {
    # Request query parameter used in endpoints that support token based pagination.
    # 
    # The maximum amount of items to return in the response. The default and minimum are 100
    @constraint:Int {minValue: 100}
    int:Signed32 maxItems = 100;
    # The id of the asset. Used in combination with assetType to determine the asset.
    # 
    # Depending on the asset, this may be a numeric or string value
    string assetId;
    # The lastKey token returned from the previous page of results. If not specified,
    # the first page of results is returned
    string lastKey?;
    # When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group)
    "ITEM"|"WORKSPACE" sharingInclude?;
    # The type of the asset. Used in combination with assetId to determine the asset
    "sheet"|"report"|"sight"|"workspace"|"collection"|"file" assetType;
};

# Currency information with ISO code and display symbol
public type Currency record {
    # The currency symbol
    string symbol?;
    # The ISO 4217 currency code
    string code?;
};

# Array of Row objects for sheet row operations
public type SheetssheetIdrowsOneOf21 Row[];

# Event for removing workspace share access from a sheet
public type SheetRemoveWorkspaceShare record {
    *Event;
   // *SheetWorkspaceShareRemovalEvent;
};

# Triggered when an attachment is deleted
public type AttachmentDeleteEvent record {
    # The action applied to the specified object
    "DELETE" action?;
    # Additional details for attachment deletion events
    AttachmentDeleteAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ATTACHMENT" objectType?;
};

# Triggered when a user publishes a dashboard or republishes a dashboard with new settings
public type DashboardPublishAddEvent record {
    # The action applied to the specified object
    "ADD_PUBLISH" action?;
    # Additional details for dashboard publish events including access permissions
    DashboardAddPublishAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Triggered when a user is removed from the organization account. This can be done through User Management on UI or via the API (Remove User)
public type UserAccountRemovalEvent record {
    # The action applied to the specified object
    "REMOVE_FROM_ACCOUNT" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Response containing automation rule data
public type AutomationRuleResponse AutomationRule;

# Event for saving a folder as a new copy
public type FolderSaveAsNew record {
    *Event;
    //*FolderSaveAsEvent;
};

# Response schema for user update operations
public type UserUpdateResponse record {
    *GenericResult;
    *UserProfileImageListData;
};

# Object representing a calculated datetime
public type AbstractDatetimeObjectValue record {
    # Datetime, in the **date-time** format defined by <a href="https://tools.ietf.org/html/rfc3339#section-5.6" target="_blank" rel="noopener noreferrer">RFC 3339, section 5.6</a>
    string value?;
    # Object type identifier for abstract datetime values
    "ABSTRACT_DATETIME" objectType?;
};

# Represents the Headers record for the operation: attachments-versionList
public type AttachmentsVersionListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Request body for updating workspace properties
public type WorkspacesworkspaceIdBody record {
    # Workspace name
    string name?;
};

# Additional details for access token revocation events
public type AccesstokenRevokeAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The ID of the user who owns this token
    @constraint:Int {minValue: 0}
    int tokenUserId?;
    # Four or more characters used as a mnemonic to represent this access token. Even though this value serves as a visual token differentiator, this value isn't an Id because it isn't guaranteed to be unique across all tokens. This value is the same displayed by Smartsheet UI for each access token listed under Apps & Integrations > API Access
    string tokenDisplayValue?;
};

# Access token authorization event schema
public type AccesstokenAuthorize record {
    *Event;
    //*AccessTokenAuthorizeEvent;
};

# Represents the Queries record for the operation: attachments-versionList
public type AttachmentsVersionListQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Container for an array of template objects
public type TemplateListData record {
    # list of Templates
    Template[] data?;
};

# User invitation send event schema
public type UserSendInvite record {
    *Event;
   // *UserInviteSendEvent;
};

# Triggered when a group or user is added to a workspace's sharing list. 
# 
# Note that this event will appear for each report that is in the workspace. If a group or user is added to a workspace's sharing list and the workspace is empty, then no events will be recorded
public type ReportWorkspaceShareAddEvent record {
    # The action applied to the specified object
    "ADD_WORKSPACE_SHARE" action?;
    # Additional details for report workspace sharing events
    ReportAddWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Triggered when an existing sheet form is updated
public type FormUpdateEvent record {
    # The action applied to the specified object
    "UPDATE" action?;
    # Additional details for form activation events including user and sheet info
    FormActivateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
};

# Represents the Headers record for the operation: delete-rows
public type DeleteRowsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Group object with owner, timestamps, name, and description
public type Group record {
    # Group owner’s email address
    string owner?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # Group name
    string name?;
    # Group description
    string description?;
    # Group Id
    decimal id?;
    # Group owner's user Id
    decimal ownerId?;
};

# Event schema for adding share permissions to a sheet
public type SheetAddShare record {
    *Event;
   // *SheetShareAddEvent;
};

# Triggered when a user is removed from a group that a sheet has been shared to via the sheet's sharing list, or via a workspace's sharing list. 
# 
# If a sheet has been shared to a group directly via the sheet's sharing list, and via a workspace's sharing list, then an event will be generated for each of these shares
public type SheetShareMemberRemoveEvent record {
    # The action applied to the specified object
    "REMOVE_SHARE_MEMBER" action?;
    # Additional details for sheet share member removal events
    SheetRemoveShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Queries record for the operation: share-sheet-get
public type ShareSheetGetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Represents the Queries record for the operation: delete-summary-fields
public type DeleteSummaryFieldsQueries record {
    # If **true**, the operation will succeed even if some fieldIds are not found
    boolean ignoreSummaryFieldsNotFound = false;
    # A comma-separated list of Sheet Summary Field Ids
    string ids;
};

# Response containing update request operation result
public type UpdateRequestResponse record {
    # Request to update specific rows with email notification details
    UpdateRequest result?;
};

# Object representing a date
public type DateObjectValue record {
    # Date in the **full-date** format defined by [(https://tools.ietf.org/html/rfc3339#section-5.6" target="_blank" rel="noopener noreferrer">RFC 3339, section 5.6]</a>
    string value?;
    # Object type identifier for date values (always 'DATE')
    "DATE" objectType?;
};

# Read-only timestamp value in datetime or numeric format
public type Timestamp TimestampDateTime|TimestampNumber;

# Represents the Headers record for the operation: attachments-attachToComment
public type AttachmentsAttachToCommentHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Event schema for adding share members to a dashboard
public type DashboardAddShareMember record {
    *Event;
    //*DashboardShareMemberAddEvent;
};

# Triggered when a report is in the deleted items bin and is restored (`Undelete`)
public type ReportRestoreEvent record {
    # The action applied to the specified object
    "RESTORE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Represents the Headers record for the operation: list-sight-shares
public type ListSightSharesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Event schema for sheet export operations
public type SheetExport record {
    *Event;
   // *SheetExportEvent;
};

# Triggered when an admin sends a password reset email. This can be done through User Management on UI
public type UserPasswordResetEvent record {
    # The action applied to the specified object
    "SEND_PASSWORD_RESET" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Triggered when an admin downloads published items report. This can be done through `User Management` console on UI
public type AccountDownloadPublishedItemsReportEvent record {
    # The action applied to the specified object
    "DOWNLOAD_PUBLISHED_ITEMS_REPORT" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Represents the Queries record for the operation: move-rows
public type MoveRowsQueries record {
    # A comma-separate list of row elements to move in addition to the cell data
    "attachments"|"discussions" include?;
    # **true** or **false**: default is **false**. If set to **true**, specifying row Ids that do not exist within the source sheet does not cause an error response. If omitted or set to **false**, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are moved)
    boolean ignoreRowsNotFound = false;
};

# Represents the Headers record for the operation: update-sheet-share
public type UpdateSheetShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Event schema for user invitation decline actions
public type UserDeclineInvite record {
    *Event;
   // *UserInviteDeclineEvent;
};

# Request body schema for folder operations
public type FolderIdFoldersBody Folder;

# Additional details for access token refresh events
public type AccesstokenRefreshAdditionalDetails record {
    # Date and time when this access token expires
    string tokenExpirationTimestamp?;
    # Email address of the user responsible for the event
    string emailAddress;
    # Four or more characters used as a mnemonic to represent this access token. Even though this value serves as a visual token differentiator, this value isn't an Id because it isn't guaranteed to be unique across all tokens. This value is the same displayed by Smartsheet UI for each access token listed under Apps & Integrations > API Access
    string tokenDisplayValue?;
};

# Event schema for sheet restoration actions
public type SheetRestore record {
    *Event;
   // *SheetRestoreEvent;
};

# Schema for sending emails with multiple rows
public type MultiRowEmail RowEmail;

# Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST
public type PropertiesContactOptions ContactOption[];

# Represents the Headers record for the operation: create-sheet-in-workspace
public type CreateSheetInWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Triggered when an admin transfers ownership of all items (sheets/reports/dashboards/workspaces) owned by a user to another user. This can be done through User Management on UI
public type UserOwnershipTransferEvent record {
    # The action applied to the specified object
    "TRANSFER_OWNED_ITEMS" action?;
    # Additional details for group ownership transfer events
    GroupTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Represents the Queries record for the operation: create-workspace
public type CreateWorkspaceQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of elements to include:
    #   * **all**
    #   * **attachments**
    #   * **brand**
    #   * **cellLinks** - includes cross-sheet references
    #   * **data** - includes formatting
    #   * **discussions** - includes comments
    #   * **filters**
    #   * **forms**
    #   * **ruleRecipients**
    #   * **rules**
    #   * **shares**
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    "all"|"attachments"|"brand"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares" include?;
    # A comma-separated list of references to NOT re-map for the newly created folder
    "cellLinks"|"reports"|"sheetHyperlinks"|"sights" skipRemap?;
};

# The webhook object
public type Webhook record {
    *UpdateWebhookRequest;
   // *WebhookDetails;
};

# Triggered when a group or user is removed from a workspace's sharing list. Note that this event will appear for each dashboard that is in the workspace. If a group or user is removed from a workspace's sharing list and the workspace is empty, then no events will be recorded
public type DashboardWorkspaceShareRemovalEvent record {
    # The action applied to the specified object
    "REMOVE_WORKSPACE_SHARE" action?;
    # Details for dashboard workspace share removal events
    DashboardRemoveWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Request body for updating share permissions
public type SharesshareIdBody record {
    # Permission level for user access control
    AccessLevel accessLevel?;
};

# Represents the Queries record for the operation: share-workspace-get
public type ShareWorkspaceGetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Request body schema for moving a folder to a new destination
public type FolderIdMoveBody ContainerDestinationForMove;

# Represents the Headers record for the operation: share-sheet-get
public type ShareSheetGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a report is created (inserted)
public type ReportCreateEvent record {
    # The action applied to the specified object
    "CREATE" action?;
    # Additional details for report creation including source and user info
    ReportCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Represents the Queries record for the operation: update-sight
public type UpdateSightQueries record {
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
};

# Triggered when a group or user is removed from a dashboard's sharing list
public type DashboardShareRemovalEvent record {
    # The action applied to the specified object
    "REMOVE_SHARE" action?;
    # Details for dashboard share removal events with user/group info
    DashboardRemoveShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Event triggered when a workspace recurring backup is deleted
public type WorkspaceDeleteRecurringBackup record {
    *Event;
    //*WorkspaceRecurringBackupDeleteEvent;
};

# Event triggered when a dashboard is deleted
public type DashboardDelete record {
    *Event;
    //*DashboardDeleteEvent;
};

# Represents the Queries record for the operation: copy-folder
public type CopyFolderQueries record {
    # A comma-separated list of elements to copy:
    #   * **attachments**
    #   * **cellLinks** - includes cross-sheet references
    #   * **data** - includes formatting
    #   * **discussions** - includes comments
    #   * **filters**
    #   * **forms**
    #   * **ruleRecipients** -- includes notification recipients, must also include rules when using this attribute
    #   * **rules** -- includes notifications and workflow rules
    #   * **shares** |
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares" include?;
    # A comma-separated list of references to NOT re-map for the newly created folder
    "cellLinks"|"reports"|"sheetHyperlinks"|"sights" skipRemap?;
    # When specified with a value of **sheetHyperlinks**, excludes this category from the response
    "sheetHyperlinks" exclude?;
};

# Triggered when a user deletes a recurring backup schedule for a workspace
public type WorkspaceRecurringBackupDeleteEvent record {
    # The action applied to the specified object
    "DELETE_RECURRING_BACKUP" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Represents the Headers record for the operation: attachments-versionUpload
public type AttachmentsVersionUploadHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: import-sheet-into-workspace
public type ImportSheetIntoWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    @http:Header {name: "Content-Disposition"}
    string contentDisposition?;
    # Required for POST request to import a sheet from CSV/XLSX file.
    # * For CSV files, use: Content-Type: text/csv
    # * For XLSX files, use: Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
    @http:Header {name: "Content-Type"}
    "text/csv"|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" contentType;
};

# Sheet created from scratch using the specified columns
public type SheetCreated record {
    # Permission level for user access control
    AccessLevel accessLevel?;
    # Array of column objects defining sheet structure
    Columns columns?;
    # Sheet name
    Name name?;
    # Sheet Id
    Id id?;
    # URL that represents a direct link to the sheet in Smartsheet
    Permalink permalink?;
};

# Request to update specific rows with email notification details
public type UpdateRequest record {
    *MultiRowEmail;
    *UpdateRequestDetails;
};

# Result object for summary field creation operations
public type SummaryFieldAddResult record {
    *Result;
    *SummaryFieldCreateResult;
};

# Result object for bulk operations with failed items and generic result data
public type ItemResult GenericResult;

# Triggered when the main contact of the organization account is updated. This can be done through `Account Administration` console on UI
public type AccountMainContactUpdateEvent record {
    # The action applied to the specified object
    "UPDATE_MAIN_CONTACT" action?;
    # Additional details for updating the main contact of an account
    AccountUpdateMainContactAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Represents the Headers record for the operation: getWebhook
public type GetWebhookHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: list-sheet-shares
public type ListSheetSharesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a group or user is removed from a workspace's sharing list. 
# 
# Note that this event will appear for each sheet that is in the workspace. If a group or user is removed from a workspace's sharing list and the workspace is empty, then no events will be recorded
public type SheetWorkspaceShareRemovalEvent record {
    # The action applied to the specified object
    "REMOVE_WORKSPACE_SHARE" action?;
    # Details for dashboard workspace share removal events
    DashboardRemoveWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Container for list of group objects
public type GroupListData record {
    # List of Groups
    Group[] data?;
};

# Response schema for workspace list operations
public type WorkspaceListResponse record {
    *IndexResultWorkspaces;
    *WorkspaceListData;
};

# Represents the Queries record for the operation: getReport
public type GetReportQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of optional elements to include in the response:
    #   * **attachments**
    #   * **discussions**
    #   * **proofs**
    #   * **format**
    #   * **objectValue** - when used in combination with a level query parameter, includes the email addresses for multi-contact data
    #   * **scope** - adds the report's scope to the response
    #   * **source** - adds the Source object indicating which report the report was created from, if any
    #   * **sourceSheets**
    "attachments"|"discussions"|"proofs"|"format"|"objectValue"|"scope"|"source"|"sourceSheets" include?;
    # specifies whether new functionality, such as multi-contact data is returned in a backwards-compatible, text format (level=0, default), multi-contact data (level=1), or multi-picklist data (level=3)
    int level = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # A comma-separated list of optional elements to not include in the response
    "linkInFromCellDetails"|"linksOutToCellsDetails" exclude?;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Event schema for workspace save-as-new operations
public type WorkspaceSaveAsNew record {
    *Event;
   // *WorkspaceSaveAsEvent;
};

# Represents the Headers record for the operation: update-sight
public type UpdateSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Event schema for discussion update operations
public type DiscussionUpdate record {
    *Event;
    //*DiscussionUpdateEvent;
};

# Destination container specification for move operations
public type ContainerDestinationForMove record {
    # Type of destination container.
    # 
    # The `"home"` enum is **Deprecated** since March 25, 2025, and will be removed
    "folder"|"home"|"workspace"? destinationType?;
    # The ID of the destination container
    decimal destinationId;
};

# Event schema for sheet move operations
public type SheetMove record {
    *Event;
    //*SheetMoveEvent;
};

# Triggered when the ownership of a sheet is transferred
public type SheetOwnershipTransferEvent record {
    # The action applied to the specified object
    "TRANSFER_OWNERSHIP" action?;
    # Details for report ownership transfer including old/new owner info
    ReportTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Headers record for the operation: copy-folder
public type CopyFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: import-sheet-into-workspace
public type ImportSheetIntoWorkspaceQueries record {
    # Desired name of the sheet
    string sheetName;
    # A zero-based integer indicating the row number to use for column names. Rows before this are omitted.
    # If not specified, the default values are Column1, Column2, etc
    decimal headerRowIndex?;
    # A zero-based integer indicating the column to designate as primary
    decimal primaryColumnIndex = 0;
};

# Represents the Headers record for the operation: sentupdaterequest-get
public type SentupdaterequestGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a folder is created. 
# 
# Folders can be created in the UI with the `Create New` button, by selecting the `Save As New` option on an existing folder, or through the API
public type FolderCreateEvent record {
    # The action applied to the specified object
    "CREATE" action?;
    # Additional details for folder creation events including user and source
    FolderCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

# Represents the Queries record for the operation: share-sheet
public type ShareSheetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
};

# Map of image URLs with expiration time for cell images
public type ImageUrlMap record {
    # Milliseconds before the URLs within imageUrls expire
    decimal urlExpiresInMillis?;
    # Array of ImageUrl objects containing image URL mappings
    ImageUrl[] imageUrls?;
};

# Event schema for group deletion operations
public type GroupDelete record {
    *Event;
    //*GroupDeleteEvent;
};

# Additional details for user account addition events
public type UserAddToAccountAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Comma-delimited list of user types, e.g. `SYSTEM_ADMIN`, `LICENSED_USER`, `GROUP_ADMIN`, `RESOURCE_VIEWER`, `JIRA_ADMIN`, `JIRA_USER`, `SALESFORCE_ADMIN`, `SALESFORCE_USER`. 
    # 
    # The full list of available user types can be seen <a href="https://help.smartsheet.com/learning-track/shared-users/user-types-and-permissions" target="_blank" rel="noopener noreferrer">here</a>. Please notice that user types Unlicensed User and Free Collaborator are not applicable for this event
    string userTypes?;
};

# Represents the Queries record for the operation: update-sheet-share
public type UpdateSheetShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Column properties including type, format, validation, and display settings
public type ColumnObjectAttributes record {
    # When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)
    string symbol?;
    # Contact information with name and email address
    ContactOption contactOptions?;
    # Indicates whether the column is hidden
    boolean hidden?;
    # The format descriptor (see [Cell formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the **include** query string parameter contains **format** and this column has a non-default format applied to it
    string format?;
    # Column index or position. This number is zero-based
    decimal index?;
    # Column description
    string description?;
    # Column title
    string title?;
    # Column data type (text, date, checkbox, picklist, etc.)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Read only. The level of the column type. Each element in the array is set to one of the following values:
    #  * **0**: TEXT_NUMBER, CONTACT_LIST, or PICKLIST
    #  * **1**: MULTI_CONTACT_LIST
    #  * **2**: MULTI_PICKLIST
    # 
    # See [Versioning and changes](/api/smartsheet/guides/basics/versioning-and-changes)
    decimal version?;
    # Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated
    AutoNumberFormat autoNumberFormat?;
    # Available options for picklist columns
    string[] options?;
    # Display width of the column in pixels
    decimal width?;
    # The formula for a column, if set, for instance **=data@row**
    string formula?;
    # Indicates whether the column is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request
    boolean lockedForUser?;
    # See [System Columns](/api/smartsheet/openapi/columns)
    "AUTO_NUMBER"|"CREATED_BY"|"CREATED_DATE"|"MODIFIED_BY"|"MODIFIED_DATE" systemColumnType?;
    # Indicates whether the column is locked. In a response, a value of **true** indicates that the column has been locked by the sheet owner or the admin
    boolean locked?;
    # Indicates whether validation has been enabled for the column (value = **true**)
    boolean validation?;
};

# Paginated response for cell history with index results and data
public type CellHistoryIndexResponse record {
    *IndexResult;
    *CellHistoryListResponse;
};

# Details for workspace sharing events including user and access level
public type SheetAddWorkspaceShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    # 
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the sheet
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that the workspace was shared to. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that the workspace was shared to. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that was shared to the group or user
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Event schema for saving sheets as templates
public type SheetSaveAsTemplate record {
    *Event;
    //*SheetSaveTemplateEvent;
};

# Container for a list of update request objects
public type UpdateRequestListData record {
    # list of UpdateRequest objects
    UpdateRequest[] data?;
};

# Represents the Headers record for the operation: move-sight
public type MoveSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Triggered when a user updates the options (listed below in **`additionalDetails`**) in a recurring backup schedule for a workspace
public type WorkspaceRecurringBackupUpdateEvent record {
    # The action applied to the specified object
    "UPDATE_RECURRING_BACKUP" action?;
    # Additional details for folder backup requests including attachment options
    FolderRequestBackupAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Request body for proof operations with download settings
public type ProofRequestBody Email;

# Triggered when an access token creation is authorized by a user
public type AccessTokenAuthorizeEvent record {
    # The action applied to the specified object
    "AUTHORIZE" action?;
    # Additional details for access token authorization events
    AccesstokenAuthorizeAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCESS_TOKEN" objectType?;
};

# Represents the Headers record for the operation: get-crosssheet-reference
public type GetCrosssheetReferenceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Container for an array of column data objects
public type ColumnListData record {
    # Array of column objects containing column details and metadata
    GetColumn[] data?;
};

# Response object for adding images to cells with result and row data
public type CellImageAddResponse record {
    *Result;
    *RowResultResponse;
};

# Response wrapper containing a single sight (dashboard) object
public type SightResultAlt record {
    # Dashboard (Sight) object containing widgets, layout, and styling properties
    Sight result?;
};

# Configuration for emailing row data with layout and attachment options
public type RowEmail Email;

# Triggered when an admin removes the user from all groups and from sharing for all sheets, workspaces, and dashboards owned by users on the organization account. This can be done through User Management on UI
public type UserSharesRemovalEvent record {
    # The action applied to the specified object
    "REMOVE_SHARES" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Streaming response for share-related events
public type ShareStreamResponse record {
    *StreamResult;
    *EventListResponseData;
};

# Represents the Queries record for the operation: delete-report-share
public type DeleteReportShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Sheet created from template
public type SheetCreatedFromTemplate record {
    # Permission level for user access control
    AccessLevel accessLevel?;
    # Sheet name
    Name name?;
    # Sheet Id
    Id id?;
    # URL that represents a direct link to the sheet in Smartsheet
    Permalink permalink?;
};

# Represents the Queries record for the operation: get-folder-metadata
public type GetFolderMetadataQueries record {
    # A comma-separated list of optional elements to include in the response:
    #   * **source** - adds the Source object indicating which object this resource was created from, if any
    "source" include?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
};

# Response wrapper containing an array of numeric values
public type NumberArrayResult record {
    # Array of numeric values returned in the response
    decimal[] result?;
};

# Request to update webhook configuration and status
public type UpdateWebhookRequest record {
    *CreateWebhookRequest;
    *WebhookStatusUpdate;
};

# Represents the Queries record for the operation: copy-workspace
public type CopyWorkspaceQueries record {
    # A comma-separated list of elements to include:
    #   * **all**
    #   * **attachments**
    #   * **brand**
    #   * **cellLinks** - includes cross-sheet references
    #   * **data** - includes formatting
    #   * **discussions** - includes comments
    #   * **filters**
    #   * **forms**
    #   * **ruleRecipients**
    #   * **rules**
    #   * **shares**
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    "all"|"attachments"|"brand"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares" include?;
    # A comma-separated list of references to NOT re-map for the newly created folder
    "cellLinks"|"reports"|"sheetHyperlinks"|"sights" skipRemap?;
};

# Triggered when an existing attachment is updated (e.g. its description changed)
public type AttachmentUpdateEvent record {
    # The action applied to the specified object
    "UPDATE" action?;
    # Additional details for attachment deletion events
    AttachmentDeleteAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ATTACHMENT" objectType?;
};

# Additional details when user declines organization invite
public type UserDeclineInviteAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Reason code for invitation decline or acceptance failure
    "ACCEPT_FAILED_REMOVED_FROM_ORG"|"ACCEPT_FAILED_IN_OTHER_ORG"|"ACCEPT_FAILED_IS_PAID_USER"|"ACCEPT_FAILED_NEEDS_LICENSE"|"ACCEPT_FAILED_INSUFFICIENT_LICENSES"|"ACCEPT_FAILED_NOT_ELIGIBLE_FOR_TRIAL"|"ACCEPT_FAILED"|"ACCEPT_FAILED_NEEDS_GROUP_ADMIN_ROLE"|"ACCEPT_FAILED_UAP_VIOLATION"|"DECLINE_SUCCESS" declineReason?;
};

# Event triggered when attachment is updated
public type AttachmentUpdate record {
    *Event;
   // *AttachmentUpdateEvent;
};

# Event triggered when access token is refreshed
public type AccesstokenRefresh record {
    *Event;
    //*AccessTokenRefreshEvent;
};

# Event triggered when dashboard publishing is added
public type DashboardAddPublish record {
    *Event;
   // *DashboardPublishAddEvent;
};

# Represents the Queries record for the operation: list-home-contents
public type ListHomeContentsQueries record {
    # A comma-separated list of optional elements to include in the response:
    #   * **source** - adds the Source object indicating which object the folder was created from, if any
    #   * **distributionLink**
    #   * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned.
    #   * **sheetVersion**
    #   * **permalinks**
    "source"|"distributionLink"|"ownerInfo"|"sheetVersion" include?;
};

# Represents the Headers record for the operation: row-discussions-list
public type RowDiscussionsListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: list-home-contents
public type ListHomeContentsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: column-delete
public type ColumnDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when an admin downloads sheet access report for an organization account. This can be done through `User Management` console on UI
public type AccountAccessReportDownloadEvent record {
    # The action applied to the specified object
    "DOWNLOAD_SHEET_ACCESS_REPORT" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Request body for sharing reports - single share or multiple shares
public type ReportIdSharesBody Share|ReportSharesList;

# Represents the Headers record for the operation: proofs-delete
public type ProofsDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response wrapper for workspace listing operations
public type WorkspaceListingResult record {
    # Workspace listing result data
    WorkspaceListing result?;
};

# Event object representing a sheet deletion operation
public type SheetDelete record {
    *Event;
    //*SheetDeleteEvent;
};

# Represents the Headers record for the operation: delete-report-share
public type DeleteReportShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: automationrules-list
public type AutomationrulesListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response containing group member data as single object or array
public type GroupMemberResult record {
    # Group member data returned as single GroupMember or array of GroupMembers
    GroupMember|GroupMember[] result?;
};

# Server information including supported formats and locales
public type ServerInfo record {
    # Contains all of the lookup tables that the format descriptor indexes refer to. Here the examples show the formatting options, the default value is used to denote each option. NOTE -- Indexes and their values are guaranteed never to change or be removed for a given major API version.  However, new values could potentially be added to the ends of lookup tables. Because of this possibility, your code should handle the case where a cell might contain a format index value greater than the size of a lookup table your app has loaded. Your application should check for that case and reload the format tables if necessary
    FormatTables formats?;
    # Array of strings representing all Smartsheet-supported locales
    string[] supportedLocales?;
};

# Represents the Headers record for the operation: add-user
public type AddUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a group or user is added to the workspace's sharing list, or when a group or user's share permissions are changed
public type WorkspaceShareAddEvent record {
    # The action applied to the specified object
    "ADD_SHARE" action?;
    # Details for workspace sharing events including user, access level, and IDs
    WorkspaceAddShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Union type representing either a Sheet or SheetVersion object
public type SheetVersionUnion Sheet|SheetVersion;

# Triggered when a user is added to a group that a workspace has been shared to via the workspace's sharing list, or via a workspace's sharing list. 
# 
# If a workspace has been shared to a group directly via the workspace's sharing list, and via a workspace's sharing list, then an event will be generated for each of these shares
public type WorkspaceShareMemberAddEvent record {
    # The action applied to the specified object
    "ADD_SHARE_MEMBER" action?;
    # Additional details for workspace share member addition events
    WorkspaceAddShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Triggered when a user saves a copy of a sheet as a template by using the `Save As Template` option. 
# 
# This event is recorded for the original sheet. 
# 
# If the original sheet belongs to a different organization, then an event will be generated for organization with original sheet and for the organization with copied sheet.
# 
# For copied sheet, `Save As Template` event is paired with a [SHEET - CREATE](/api/smartsheet/openapi/schemas/sheet_create) event
public type SheetSaveTemplateEvent record {
    # The action applied to the specified object
    "SAVE_AS_TEMPLATE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Summary field with image support and field metadata properties
public type SummaryFieldAddImage record {
    # Represents an image with metadata including dimensions, alt text, and ID
    Image image?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # Field index or position. This number is zero-based
    decimal index?;
    # Indicates whether the field is locked for the requesting user
    boolean lockedForUser?;
    # The formula for a cell, if set
    string formula?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # SummaryField Id
    decimal id?;
    # Arbitrary name, must be unique within summary
    string title?;
    # Field data type (datetime, checkbox, contact list, text, etc.)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Indicates whether the field is locked
    boolean locked?;
    # Sheet version number that is incremented every time a sheet is modified
    decimal version?;
};

# Represents the Headers record for the operation: get-sight
public type GetSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Folder list item with ID, name, timestamps, and resource metadata
public type PaginatedFolderListItem record {
    # Read-only timestamp that can be either DateTime or Long format
    Timestamp2 createdAt;
    # Read-only timestamp that can be either DateTime or Long format
    Timestamp2 modifiedAt;
    # Resource name
    string name;
    # Resource ID
    int id;
    # URL to the resource in Smartsheet
    string permalink;
    # The type of the resource
    "folder" resourceType;
};

# Container for user profile image response data array
public type UserProfileImageListData record {
    # Updated User Properties
    UserProfileImageResponse[] data?;
};

# Workspace rename event details with user email and old/new names
public type WorkspaceRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the workspace
    string newName?;
    # Previous name of the workspace
    string oldName?;
};

# Response schema containing detailed discussion information
public type DiscussionDetailsResponse Discussion;

# Details for dashboard workspace share removal events
public type DashboardRemoveWorkspaceShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that was removed from the workspace. (Specific to remove share from group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was removed from the workspace. (Specific to remove share from user actions)
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace the group or user was removed from
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Generic response combining result status and favorite resource data
public type ResourceGenericResponse record {
    *GenericResult;
    *FavoriteResultResponse;
};

# See [Column Types](/api/smartsheet/openapi/columns)
public type Type "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER";

# Represents the Queries record for the operation: list-webhooks
public type ListWebhooksQueries record {
    # **DEPRECATED - As early as the sunset date specified in this [Changelog entry](/api/smartsheet/changelog#2025-08-04), the unlimited value range will be discontinued (sunset) to reduce latency, mitigate performance issues, and add stability, especially for users with many webhooks.** See the [Changelog entry](/api/smartsheet/changelog#2025-08-04) for migration instructions and details.
    # 
    # The maximum number of items to return per page. Unless otherwise stated for a
    # specific endpoint, defaults to 100. If only page is specified, defaults to a
    # page size of 100. For reports, the default is 100 rows. If you need larger
    # sets of data from your report, returns a maximum of 10,000 rows per request
    # 
    # # Deprecated
    @deprecated
    decimal pageSize = 100;
    # **DEPRECATED - As early as the sunset date specified in this [Changelog entry](/api/smartsheet/changelog#2025-08-04), this parameter will be discontinued (sunset) to reduce latency, mitigate performance issues, and add stability, especially for users with many webhooks.** See the [Changelog entry](/api/smartsheet/changelog#2025-08-04) for migration instructions and details.
    # 
    # If true, include all results, that is, do not paginate. Mutually exclusive
    # with page and pageSize (they are ignored if includeAll=true is specified)
    # 
    # # Deprecated
    @deprecated
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Triggered when a reply is made to a comment, or a reply is deleted from a comment
public type DiscussionUpdateEvent record {
    # The action applied to the specified object
    "UPDATE" action?;
    # Additional details for discussion creation events
    DiscussionCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DISCUSSION" objectType?;
};

# **DEPRECATED - As early as the sunset date specified in this [Changelog entry](/api/smartsheet/changelog#2025-08-04), this endpoint will be discontinued.** Please refer to the [changelog entry](/api/smartsheet/changelog#2025-08-04) for more details.
# 
# Share object used for various sharing relation operations
public type Share record {
    # Permission level for user access control
    AccessLevel accessLevel?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # The subject of the email that is optionally sent to notify the recipient. You can specify this attribute
    # in a request, but it is never present in a response
    string subject?;
    # Group Id if the share is a group share, else null
    decimal groupId?;
    # The type of this share. One of the following values: GROUP or USER
    string 'type?;
    # The message included in the body of the email that is optionally sent to the recipient. You can specify
    # this attribute in a request, but it is never present in a response
    string message?;
    # User Id if the share is a user share, else null
    decimal userId?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Indicates whether to send a copy of the email to the sharer of the sheet. You can specify this attribute
    # in a request, but it is never present in a response
    boolean ccMe?;
    # The scope of this share. One of the following values:
    #   * **ITEM**: an item-level share (that is, the specific object to which the share applies is shared with
    #     the user or group).
    #   * **WORKSPACE**: a workspace-level share (that is, the workspace that contains the object to which the
    #     share applies is shared with the user or group)
    string scope?;
    # If a user share and user is also a contact, the user's full name. If a group share, the group's name
    string name?;
    # Share Id.
    # 
    # **NOTE**: unlike other Smartsheet object Ids, this Id is an alphanumeric string
    string id?;
    # User's primary email address for user shares
    string email?;
};

# Triggered when a report is deleted ("Delete Forever") from the deleted items bin
public type ReportPurgeEvent record {
    # The action applied to the specified object
    "PURGE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Details for dashboard share removal events with user/group info
public type DashboardRemoveShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that was removed from the dashboard's sharing list. (Specific to remove share from group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was removed from the dashboard's sharing list. (Specific to remove share from user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# Discussion send comment event combining base event and comment data
public type DiscussionSendcomment record {
    *Event;
    //*DiscussionCommentSendEvent;
};

# Represents the Queries record for the operation: add-user
public type AddUserQueries record {
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
};

# Triggered when a dashboard is created. Dashboards can be created in the UI with the `Create New` button, by selecting the `Save As New` option on an existing dashboard, or through the API
public type DashboardCreateEvent record {
    # Action type for dashboard creation event, always 'CREATE'
    "CREATE" action?;
    # Additional details for dashboard creation events
    DashboardCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Sheet rename event details with user email and old/new names
public type SheetRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the sheet
    string newName?;
    # Previous name of the sheet
    string oldName?;
};

# Represents the Queries record for the operation: automationrules-list
public type AutomationrulesListQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Object containing a list of Contacts
public type MultiContactObjectValue record {
    # List of Contacts
    ContactObjectValue[] value?;
    # Type identifier for multi-contact object values
    "MULTI_CONTACT" objectType?;
};

# Folder listing data with name, ID, and permalink information
public type FolderListingData record {
    # The folder's name
    string name?;
    # The folder's unique identifier
    decimal id?;
    # URL to the folder in Smartsheet
    string permalink?;
};

# Response containing mapped image URLs
public type ImageUrlListResponse ImageUrlMap;

# Triggered when a member is removed from a group
public type GroupMemberRemoveEvent record {
    # The action applied to the specified object
    "REMOVE_MEMBER" action?;
    # Details about a group member removal event including user information
    GroupRemoveMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

# Standard response object indicating operation success or failure
public type GenericResult record {
    # * '0' Success
    # * '3' Partial Success of Bulk Operation
    0|3 resultCode?;
    # Message that indicates the outcome of the request. (One of SUCCESS or PARTIAL_SUCCESS.)
    "PARTIAL_SUCCESS"|"SUCCESS" message?;
};

# The formula for a cell, if set
public type Formula string;

# Response containing paginated list of update requests
public type UpdateRequestIndexResponse record {
    *IndexResult;
    *UpdateRequestListData;
};

# The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
public type ObjectValue AbstractDatetimeObjectValue|CheckboxObjectValue|ContactObjectValue|DateObjectValue|DatetimeObjectValue|DurationObjectValue|MultiContactObjectValue|MultiPicklistObjectValue|PredecessorList;

# Event triggered when an attachment is deleted
public type AttachmentDelete record {
    *Event;
    //*AttachmentDeleteEvent;
};

# See [System Columns](/api/smartsheet/openapi/columns)
public type SystemColumnType "AUTO_NUMBER"|"CREATED_BY"|"CREATED_DATE"|"MODIFIED_BY"|"MODIFIED_DATE";

# Represents the Headers record for the operation: share-sheet
public type ShareSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: sentupdaterequest-delete
public type SentupdaterequestDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response wrapper containing sight operation result data
public type SightResultData record {
    # Dashboard result object with access level, permalink, and name properties
    SightResult result?;
};

# Cell with modification history and user information
public type CellHistory Cell;

# Response schema containing a single attachment object
public type AttachmentResponse Attachment;

# Represents the Headers record for the operation: resetSharedSecret
public type ResetSharedSecretHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Indicates who can access the 'Edit by Anyone' view of the published sheet:
#   * ALL - available to anyone who has the link.
#   * ORG - available only to members of the sheet owner's Smartsheet organization account.
#   * SHARED - available only to users shared to the item.
# 
# Only returned in the response if **readWriteEnabled = true**
public type ReadWriteAccessibleBy "ALL"|"ORG"|"SHARED";

# A token that is used to retrieve the next page of results when passed as the
# `lastKey` query parameter. This value will be absent when there are no 
# further pages
public type LastKey string;

# Response for sheet streaming operations with event list data
public type SheetStreamResponse record {
    *StreamResult;
    *EventListData;
};

# Represents the Queries record for the operation: proofs-listDiscussions
public type ProofsListDiscussionsQueries record {
    # A comma-separated list of optional elements to include in the response:
    #   * **attachments** - effective only if comments is present, otherwise ignored
    #   * **comments** - include all comments in threads
    "attachments"|"comments" include?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Triggered when a comment that has no replies is deleted
public type DiscussionDeleteEvent record {
    # The action applied to the specified object
    "DELETE" action?;
    # Additional details for discussion creation events
    DiscussionCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DISCUSSION" objectType?;
};

# Represents the Headers record for the operation: attachments-attachToSheet
public type AttachmentsAttachToSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Details for dashboard sharing events including user/group and access level
public type DashboardAddShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    # 
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the dashboard
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that was added to the dashboard's sharing list. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the dashboard's sharing list. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# Event for removing dashboard sharing permissions
public type DashboardRemoveShare record {
    *Event;
   // *DashboardShareRemovalEvent;
};

# Response schema for workspace folder creation operations
public type WorkspaceFolderCreateResponse record {
    *GenericResult;
    *FolderSimpleResult;
};

# Event for creating cell links in sheets
public type SheetCreateCellLink record {
    *Event;
   // *SheetCellLinkCreateEvent;
};

# Triggered when row(s) are copied from one sheet to another
public type SheetCopyRowEvent record {
    # The action applied to the specified object
    "COPY_ROW" action?;
    # Additional details for sheet row copy operations including user and options
    SheetCopyRowAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Numeric timestamp representation
public type TimestampNumber decimal;

# Event for removing workspace share from dashboard
public type DashboardRemoveWorkspaceShare record {
    *Event;
    //*DashboardWorkspaceShareRemovalEvent;
};

# Represents the Headers record for the operation: get-folder-metadata
public type GetFolderMetadataHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Additional details for report workspace sharing events
public type ReportAddWorkspaceShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    # 
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the report
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that the workspace was shared to. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that the workspace was shared to. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that was shared to the group or user
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Response wrapper containing a CrossSheetReference result object
public type CrossSheetReferenceResult record {
    # Reference configuration for cross-sheet formulas and data links
    CrossSheetReference result?;
};

# Represents the Headers record for the operation: list-asset-shares
public type ListAssetSharesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Response object returned when creating a new user account
public type UserCreateResponse record {
    *GenericResult;
    *UserProfileResponse;
};

# Proof request details including status and sender information
public type ProofRequest ProofRequestBody;

# Represents the Headers record for the operation: proofs-listDiscussions
public type ProofsListDiscussionsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response schema containing detailed proof information
public type ProofDetailsResponse Proof;

# Response returned after moving a sheet to a new location
public type SheetMoveResponse record {
    *Result;
    *SheetResult;
};

# Response for proof resource operations with folder data
public type ProofResourceResponse record {
    *Result;
    *FolderResponse;
};

# Alternative response format for report publishing operations
public type ReportPublishResponseAlt record {
    *ItemResult;
    *ReportPublishResponse;
};

# Response containing paginated list of dashboard sights
public type SightListResponse record {
    *IndexResult;
    *DashboardListData;
};

# Schema defining column properties when creating a new Smartsheet
public type ColumnToCreateASheet record {
    # When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)
    Symbol symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**
    ContactOptions contactOptions?;
    # Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated
    AutoNumberFormat autoNumberFormat?;
    # Array of the options available for the column
    Options options?;
    # Display width of the column in pixels
    Width width?;
    # See [System Columns](/api/smartsheet/openapi/columns)
    SystemColumnType systemColumnType?;
    # Column title
    Title title?;
    # See [Column Types](/api/smartsheet/openapi/columns)
    Type 'type?;
    # Returned only if the column is the Primary Column (value = **true**)
    Primary primary?;
};

# Array of GroupMemberAdd objects for adding multiple members to a group
public type GroupMembersAddArray GroupMemberAdd[];

# Triggered when a sheet is in the deleted items bin and is restored (`Undelete`)
public type SheetRestoreEvent record {
    # The action applied to the specified object
    "RESTORE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Headers record for the operation: proofs-listAttachments
public type ProofsListAttachmentsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: move-rows
public type MoveRowsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: delete-sight
public type DeleteSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response object containing published report details
public type ReportPublishResponse record {
    # Publishing configuration for read-only report access
    ReportPublish result?;
};

# Represents the Queries record for the operation: create-sheet-in-workspace
public type CreateSheetInWorkspaceQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Additional parameter to create a sheet from template.
    # A comma-separated list of elements to copy from the template
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules" include?;
};

# Response schema for attachment creation with version and result data
public type AttachmentCreateResponse record {
    *GenericResult;
    # Attachment Object
    Attachment result?;
};

# Triggered when a user is removed from a group that a report has been shared to via the report's sharing list, or via a workspace's sharing list. 
# 
# If a report has been shared to a group directly via the report's sharing list, and via a workspace's sharing list, then an event will be generated for each of these shares
public type ReportShareMemberRemovalEvent record {
    # The action applied to the specified object
    "REMOVE_SHARE_MEMBER" action?;
    # Additional details for report share member removal events
    ReportRemoveShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Event schema for report share removal operations
public type ReportRemoveShare record {
    *Event;
    //*ReportShareRemovalEvent;
};

# Represents the Headers record for the operation: list-webhooks
public type ListWebhooksHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a sheet form is deactivated
public type FormDeactivateEvent record {
    # The action applied to the specified object
    "DEACTIVATE" action?;
    # Additional details for form activation events including user and sheet info
    FormActivateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
};

# Container for event list data and access information
public type EventListData record {
    # List of sheet Ids specified in the request that the user does not have access to
    string[] unavailableSheetIds?;
    # List of Events
    Event[] data?;
    # List of workspace Ids specified in the request that the user does not have access to
    string[] unavailableWorkspaceIds?;
};

# Response schema combining index metadata with workspace folder list data
public type WorkspaceFoldersIndexResponse record {
    *IndexResult;
    *WorkspaceFolderListResult;
};

# Triggered when a group or user is removed from a workspace's sharing list. 
# 
# Note that this event will appear for each report that is in the workspace. If a group or user is removed from a workspace's sharing list and the workspace is empty, then no events will be recorded
public type ReportWorkspaceShareRemoveEvent record {
    # The action applied to the specified object
    "REMOVE_WORKSPACE_SHARE" action?;
    # Details for dashboard workspace share removal events
    DashboardRemoveWorkspaceShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Request schema for creating shares with access level and notification options
public type CreateShareRequest record {
    # Permission level for user access control
    AccessLevel accessLevel;
    # The subject of the email that is optionally sent to notify the recipient.
    # 
    # Must set the `sendEmail` query parameter to **true** for this parameter to take effect
    string subject?;
    # Indicates whether to send a copy of the email to the sharer of the sheet.
    # 
    # Must set the `sendEmail` query parameter to **true** for this parameter to take effect
    boolean ccMe?;
    # The id of the group to share to. Must be provided if `email` is not provided
    decimal groupId?;
    # The message included in the body of the email that is optionally sent to the recipient.
    # 
    # Must set the `sendEmail` query parameter to **true** for this parameter to take effect
    string message?;
    # The primary email address of a user to share to. Must be provided if `groupId` is not provided
    string email?;
};

# Represents the Queries record for the operation: column-get
public type ColumnGetQueries record {
    # Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    int level = 0;
};

# Details for adding a member to a group, including email and member ID
public type GroupAddMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the user that was added to the group
    @constraint:Int {minValue: 0}
    int memberUserId?;
};

# Represents the Headers record for the operation: list-events
public type ListEventsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Strongly recommended to make sure payload is compressed. Must be set to one of the following values:
    # * deflate
    # * gzip
    @http:Header {name: "Accept-Encoding"}
    "deflate"|"gzip" acceptEncoding?;
};

# Represents the Queries record for the operation: delete-asset-share
public type DeleteAssetShareQueries record {
    # The id of the asset. Used in combination with assetType to determine the asset.
    # 
    # Depending on the asset, this may be a numeric or string value
    string assetId;
    # The type of the asset. Used in combination with assetId to determine the asset
    "sheet"|"report"|"sight"|"workspace"|"collection"|"file" assetType;
};

# Details for sharing a report with users or groups, including access level
public type ReportAddShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    # 
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the report
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that was added to the report's sharing list. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the report's sharing list. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# Represents the Headers record for the operation: delete-group
public type DeleteGroupHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response for row deletion operations with affected row identifiers
public type RowDeleteResponse record {
    *GenericResult;
    *NumberArrayResult;
};

# Represents the Queries record for the operation: proofs-getAllProofs
public type ProofsGetAllProofsQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: proofs-getAllProofs
public type ProofsGetAllProofsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response data for paginated children, either list items or folders
public type PaginatedChildrenResponseData PaginatedChildrenListItem|PaginatedFolderListItem;

# Triggered when a workspace is renamed in the UI or via the API (update)
public type WorkspaceRenameEvent record {
    # The action applied to the specified object
    "RENAME" action?;
    # Workspace rename event details with user email and old/new names
    WorkspaceRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Represents the Headers record for the operation: rows-addToSheet
public type RowsAddToSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Object representing a duration in days
public type DurationObjectValue record {
    # Number of days
    float days?;
    # Object type identifier, always 'DURATION' for duration values
    "DURATION" objectType?;
};

# Request body for workspace sharing operations
public type WorkspaceIdSharesBody Share|WorkspaceSharesList;

# Event data for report export operations
public type ReportExport record {
    *Event;
    //*ReportExportEvent;
};

# Response for adding members to a group operation
public type GroupMembersAddResponse record {
    *GenericResult;
    *GroupMemberResult;
};

# Represents the Queries record for the operation: rows-addToSheet
public type RowsAddToSheetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # When specified with a value of true, enables partial success for this bulk operation. See [Bulk operations > Partial success](/api/smartsheet/guides/advanced-topics/scalability-options) for more information
    boolean allowPartialSuccess = false;
    # You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    boolean overrideValidation = false;
};

# Group member information including name, email, and ID
public type GroupMember record {
    # Group member's first name
    string firstName?;
    # Group member's last name
    string lastName?;
    # Group member's full name
    string name?;
    # Group member's user Id
    decimal id?;
    # Group member's email address
    string email?;
};

# Represents the Headers record for the operation: getReportPublish
public type GetReportPublishHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Details about a group member removal event including user information
public type GroupRemoveMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the user that was removed from the group
    @constraint:Int {minValue: 0}
    int memberUserId?;
};

# Contains all of the lookup tables that the format descriptor indexes refer to. Here the examples show the formatting options, the default value is used to denote each option. NOTE -- Indexes and their values are guaranteed never to change or be removed for a given major API version.  However, new values could potentially be added to the ends of lookup tables. Because of this possibility, your code should handle the case where a cell might contain a format index value greater than the size of a lookup table your app has loaded. Your application should check for that case and reload the format tables if necessary
public type FormatTables record {
    # The default setting is "default" which is equivalent to "top"
    string[] verticalAlign?;
    # The default setting is "none". Typically this is black text and a white background
    string[] color?;
    # Available date format options for formatting tables
    string[] dateFormat?;
    # Array of underline formatting options for text (none, on)
    string[] underline?;
    # Array of bold formatting options for text (none, on)
    string[] bold?;
    # Array of italic formatting options for text (none, on)
    string[] italic?;
    # Array of available font families with their traits
    FontFamily[] fontFamily?;
    # A format descriptor where each element describes the formats the Smartsheet Web app displays for format values that have not been set. Each value refers to an index of the following options
    string defaults?;
    # Array of number format types (none, NUMBER, CURRENCY, PERCENT)
    string[] numberFormat?;
    # The default setting is "default" which is equivalent to "left"
    string[] horizontalAlign?;
    # Array of text wrapping options (none, on)
    string[] textWrap?;
    # Array of supported currencies with codes and symbols
    Currency[] currency?;
    # Array of available font sizes as string values
    string[] fontSize?;
    # Array of strikethrough formatting options (none, on)
    string[] strikethrough?;
    # Array of decimal place options for number formatting (0-5)
    string[] decimalCount?;
    # Array of thousands separator options (none, on)
    string[] thousandsSeparator?;
};

# Event schema for sheet row send operations
public type SheetSendRow record {
    *Event;
    //*SheetSendRowEvent;
};

# Current user's profile information including group memberships
public type CurrentUserProfileResponse record {
    *UserProfile;
    *GroupListData;
};

# Dashboard item with creation and modification timestamps
public type SightListItem SightResult;

# Response object containing array of updated row results
public type UpdateRowsResponse record {
    # Array of update row operation results
    UpdateRowsObject[] result?;
};

# Object containing a list of references to rows on which the current row depends
public type PredecessorList record {
    # List of references to rows on which the current row depends
    Predecessor[] predecessors?;
    # Object type identifier, always 'PREDECESSOR_LIST'
    "PREDECESSOR_LIST" objectType?;
};

# Represents the Queries record for the operation: list-events
public type ListEventsQueries record {
    # The target managed plan for which to list events. Authorized if the
    # caller is a system administrator on either the target managed plan or
    # the main plan in EPM hierarchy
    decimal managedPlanId?;
    # Indicates next set of events to return. Use value of
    # `nextStreamPosition` returned from the previous call.
    # 
    # This parameter is required if `since` is not used
    string streamPosition?;
    # If `true`, dates are accepted and returned in Unix epoch time
    # (milliseconds since midnight on January 1, 1970 in UTC time).
    # 
    # Default is `false`, which means ISO-8601 format
    boolean numericDates = false;
    # The latest time up to which events are included in the response. Events after this time are excluded.
    # 
    # This parameter requires using the `since` parameter. 
    # 
    # The date-time value is resolved to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
    # 
    # Logic:
    # 
    # - If `to` is a future time, the current time is used.
    # - If `to` equals the `since` time, an empty data value is returned.
    # - If `to` is before the `since` time, a validation error is returned.
    # 
    # > **IMPORTANT:** This parameter is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained, date-based queries
    string to?;
    # Maximum number of events to return as response to this call.
    # Must be between 1 through 10,000 (inclusive).
    # Defaults to 1,000 if not specified
    @constraint:Int {minValue: 1, maxValue: 10000}
    int:Signed32 maxCount = 1000;
    # The earliest time from which events are included in the response. Events before this time are excluded.
    # 
    # This parameter is required if `streamPosition` is not used.
    # 
    # The date-time value is resolved to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
    # 
    # > **IMPORTANT:** To keep event responses manageable and prevent timeouts, also specify the `to` query parameter.
    # 
    # > **IMPORTANT:** This parameter is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained, date-based queries
    string since?;
};

# Triggered when an attachment is created (i.e. uploaded) in a sheet, in a sheet row, or in a workspace
public type AttachmentCreateEvent record {
    # The action applied to the specified object
    "CREATE" action?;
    # Additional details for attachment creation including user email and location
    AttachmentCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ATTACHMENT" objectType?;
};

# Represents the Headers record for the operation: delete-asset-share
public type DeleteAssetShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Triggered when an admin transfers ownership of all groups owned by a user to another user. This can be done through User Management on UI
public type UserGroupOwnershipTransferEvent record {
    # The action applied to the specified object
    "TRANSFER_OWNED_GROUPS" action?;
    # Additional details for group ownership transfer events
    GroupTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Triggered when a discussion comment (or discussion comment reply) is **directly** (i.e. instead of indirectly as part of another operation) sent by email to user(s) or user group(s). An individual `DISCUSSION - SEND_COMMENT` event is issued for each user or user group listed as recipient
public type DiscussionCommentSendEvent record {
    # The action applied to the specified object
    "SEND_COMMENT" action?;
    # Additional details for discussion comment send operations
    DiscussionSendcommentAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DISCUSSION" objectType?;
};

# Response object for column creation operations
public type ColumnAddResponse record {
    *GenericResult;
    *ColumnAddResultData;
};

# Triggered when the organization account is renamed. This can be done through Account Administration console on UI
public type AccountRenameEvent record {
    # The action applied to the specified object
    "RENAME" action?;
    # Details for account rename events including user email and name changes
    AccountRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Represents the Headers record for the operation: columns-addToSheet
public type ColumnsAddToSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Array of column objects defining sheet structure
public type Columns Column[];

# Represents the Queries record for the operation: get-workspace-metadata
public type GetWorkspaceMetadataQueries record {
    # A comma-separated list of optional elements to include in the response:
    #   * **source** - adds the Source object indicating which object this resource was created from, if any
    "source" include?;
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
};

# Container for event list data with array of API operation events
public type EventListResponseData record {
    # List of Events
    ApiOperationUnion[] data?;
};

# Array of alternate email addresses for user account management
public type AlternateEmailArray AddAlternateEmail[];

# Event triggered when a discussion is deleted
public type DiscussionDelete record {
    *Event;
    //*DiscussionDeleteEvent;
};

# Additional metadata for folder export operations
public type FolderExportAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The format that the folder was exported. Notice that the same value "excel" is displayed either when exporting to Microsoft Excel or when exporting to Google Sheets
    "excel"|"pdf" formatType?;
};

# Pagination metadata for results with unknown total page count
public type IndexResultUnknownPages record {
    # The current page in the full result set that the data array represents. NOTE when a page number greater than totalPages is requested, the last page is instead returned
    decimal pageNumber?;
    # If the data field value is not empty, returns a static value of -1. When you reach the first empty page after the end of the result set, then all four fields are set with a static value of “0”
    decimal totalPages?;
    # The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included). Unless otherwise specified, this defaults to 100 for most endpoints
    decimal? pageSize?;
    # If the data field value is not empty, returns a static value of -1. When you reach the first empty page after the end of the result set, then all four fields are set with a static value of “0”
    decimal totalCount?;
};

# Response schema for workspace creation operations
public type WorkspaceCreateResponse record {
    *GenericResult;
    *WorkspaceListingResult;
};

# Additional details for attachment creation including user email and location
public type AttachmentCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the sheet that contains the attachment. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Name of the attachment
    string attachmentName?;
    # Id of the workspace that directly contains the attachment. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Headers record for the operation: list-crosssheet-references
public type ListCrosssheetReferencesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Additional details for dashboard publish events including access permissions
public type DashboardAddPublishAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates who can use the link to view the dashboard: `"ALL"` (accessible to any person with the link), `"ORG"` (accessible only by those belonging to the org)
    "ALL"|"ORG" accessibleBy?;
    # Indicates permissions granted to users with a valid link. All dashboard publishes are read only: `"read_only"`
    "read_only" publishType?;
    # Indicates format of the published dashboard. Dashboards are published in a rich media format: `"FULL"`,
    "FULL" publishFormat?;
};

# Hyperlink object containing URL or references to sheets, reports, or dashboards
public type Hyperlink record {
    # If non-null, this hyperlink is a link to the report with this Id
    decimal reportId?;
    # If non-null, this hyperlink is a link to the sheet with this Id
    decimal sheetId?;
    # If non-null, this hyperlink is a link to the dashboard with this Id
    decimal sightId?;
    # When the hyperlink is a URL link, this property contains the URL value. When the hyperlink is a dashboard/report/sheet link (that is, dashboardId, reportId, or sheetId is non-null), this property contains the permalink to the dashboard, report, or sheet
    string url?;
};

# Attachment Object
public type Attachment record {
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Attachment sub type. Note--Folder type is for EGNYTE values and the rest are GOOGLE_DRIVE values
    "DOCUMENT"|"DRAWING"|"FOLDER"|"PDF"|"PRESENTATION"|"SPREADSHEET" attachmentSubType?;
    # Attachment type. Note--Dropbox, Egnyte, and Evernote are not supported for Smartsheet.gov accounts
    "BOX_COM"|"DROPBOX"|"EGNYTE"|"EVERNOTE"|"FILE"|"GOOGLE_DRIVE"|"LINK"|"ONEDRIVE"|"TRELLO" attachmentType?;
    # `User` object containing `name` and `email` of the user who created this attachment
    MiniUser createdBy?;
    # Attachment temporary URL time to live (files only)
    decimal urlExpiresInMillis?;
    # Attachment name
    string name?;
    # Attachment Id
    decimal id?;
    # Attachment MIME type
    string mimeType?;
    # The size of the file, if the attachmentType is FILE
    decimal sizeInKb?;
    # The Id of the parent
    decimal parentId?;
    # The type of object the attachment belongs to
    "COMMENT"|"PROOF"|"ROW"|"SHEET" parentType?;
    # Attachment temporary URL (files only)
    string url?;
};

# Field index or position. This number is zero-based
public type Index decimal;

# Event triggered when dashboard publishing is removed
public type DashboardRemovePublish record {
    *Event;
    //*DashboardRemovePublishEvent;
};

# Request body for creating sheets in a folder from scratch or template
public type FolderIdSheetsBody SheetToCreate|SheetToCreateFromTemplate;

# Additional details for creating update requests including email and options
public type UpdateRequestCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether the row(s) were sent with their respective attachments
    boolean includeAttachments?;
    # Id of the sheet that owns the rows sent in the update request
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Number of rows sent in the update request
    @constraint:Int {minValue: 1}
    int rowCount?;
    # Indicates whether the row(s) were sent with their respective discussion comments
    boolean includeDiscussions?;
};

# Represents the Queries record for the operation: list-summary-fields
public type ListSummaryFieldsQueries record {
    # A comma-separated list of elements to include in the response.
    # * **format**: includes format info for cells, rows, and summary fields
    # * **writerInfo**: includes createdBy and modifiedBy attributes for rows and summary fields
    "format"|"writerInfo" include?;
    # A comma-separated list of elements to not include in the response.
    # * **displayValue**: excludes displayValue info for cells, rows, and summary fields
    # * **image**: excludes image attributes for cells and summary fields
    # * **imageAltText**: excludes alt text for cells and summary fields
    "displayValue"|"image"|"imageAltText" exclude?;
};

# Event schema for dashboard load operations
public type DashboardLoad record {
    *Event;
   // *DashboardLoadEvent;
};

# Describes the sheet's publish settings. Used as a request body to set publish status
public type SheetPublishRequest record {
    # Indicates which view the user has set for a read-write, default view of the published sheet. Must be one of the listed enum values
    ReadWriteDefaultView readWriteDefaultView?;
    # If **true**, a webcal is available for the calendar in the sheet
    IcalEnabled icalEnabled?;
    # If **true**, a rich version of the sheet is published with the ability to download row attachments and discussions
    ReadOnlyFullEnabled readOnlyFullEnabled?;
    # Indicates who can access the 'Read-Only Full' view of the published sheet:
    #   * ALL - available to anyone who has the link.
    #   * ORG - available only to members of the sheet owner's Smartsheet organization account.
    #   * SHARED - available only to users shared to the item.
    # 
    # Only returned in the response if **readOnlyFullEnabled = true**
    ReadOnlyFullAccessibleBy readOnlyFullAccessibleBy?;
    # If **true**, a lightweight version of the sheet is published without row attachments and discussions
    ReadOnlyLiteEnabled readOnlyLiteEnabled?;
    # **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
    ReadOnlyFullShowToolbar readOnlyFullShowToolbar?;
    # If **true**,a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions
    ReadWriteEnabled readWriteEnabled?;
    # Indicates which view the user has set for a read-only, default view of the published sheet. Must be one of the listed enum values
    ReadOnlyFullDefaultView readOnlyFullDefaultView?;
    # Indicates who can access the 'Edit by Anyone' view of the published sheet:
    #   * ALL - available to anyone who has the link.
    #   * ORG - available only to members of the sheet owner's Smartsheet organization account.
    #   * SHARED - available only to users shared to the item.
    # 
    # Only returned in the response if **readWriteEnabled = true**
    ReadWriteAccessibleBy readWriteAccessibleBy?;
    # **Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar
    ReadWriteShowToolbar readWriteShowToolbar?;
};

# Event triggered when an attachment is sent via Smartsheet
public type AttachmentSend record {
    *Event;
   // *AttachmentSendEvent;
};

# A number that is incremented every time a sheet is modified
public type Version decimal;

# Represents the Queries record for the operation: share-report
public type ShareReportQueries record {
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
};

# Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**
public type ContactOptions ContactOption[];

# Represents individual user settings for a specific sheet. User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet)
public type SheetUserSettings record {
    # Does this user have "Show Critical Path" turned on for this sheet? **NOTE**: This setting only has an effect on project sheets with dependencies enabled
    boolean criticalPathEnabled?;
    # Does this user have "Display Summary Tasks" turned on for this sheet? Applies only to sheets where "Calendar View" has been configured
    boolean displaySummaryTasks?;
};

# Container object holding an array of dashboard list items
public type DashboardListData record {
    # List of Dashboards
    SightListItem[] data?;
};

# SummaryField Id
public type PropertiesId decimal;

# Container for alternate email address results list
public type AlternateEmailListDataAlt record {
    # list of alternate email results
    AlternateEmail[] data?;
};

# Triggered when a sheet is moved between workspaces and/or folders
public type SheetMoveEvent record {
    # The action applied to the specified object
    "MOVE" action?;
    # Additional details for sheet move events including user and destination info
    SheetMoveAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Container for a list of webhook objects
public type WebhookDataList record {
    # list of Webhooks
    Webhook[] data?;
};

# Represents the Headers record for the operation: delete-sight-share
public type DeleteSightShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Request payload for creating new webhook subscriptions
public type CreateWebhookRequest record {
    # ID of the object to subscribed to. Specified when a webhook is created and cannot be changed
    @constraint:Int {minValue: 0}
    int scopeObjectId?;
    # Scope of the subscription. Currently, the only supported value is
    # "sheet". Specified when a webhook is created and cannot be changed
    "sheet" scope?;
    # Webhook name
    string name?;
    # HTTPS URL where callbacks are sent
    string callbackUrl?;
    # Limits the webhook to monitor specific columns designated by an array of sheet column IDs. 
    CreateWebhookRequestSubscope subscope?;
    # Webhook version. Currently, the only supported value is 1. This attribute is intended to ensure backward compatibility as new webhook functionality is released. For example, a webhook with a version of 1 is guaranteed to always be sent callback objects that are compatible with the version 1 release of webhooks
    @constraint:Number {minValue: 1, maxValue: 1}
    decimal version?;
    # Array of the events that are subscribed to. Currently, must be an array of size 1 that contains the string value '\*.\*' (asterisk period asterisk), which means "all objects" and "all events"
    string[] events?;
};

# In a project sheet, represents a value in a duration cell, or a lag value of a predecessor
public type Duration record {
    # If true, indicates this duration represents elapsed time, which ignores non-working time
    boolean elapsed?;
    # The number of milliseconds for this duration
    decimal milliseconds?;
    # The number of hours for this duration
    decimal hours?;
    # When used as a predecessor's lag value, indicates whether the lag is negative (if true), or positive (false). The individual duration values themselves (for example, days, hours, or minutes) is always positive
    boolean negative?;
    # The number of seconds for this duration
    decimal seconds?;
    # The number of weeks for this duration
    decimal weeks?;
    # The number of minutes for this duration
    decimal minutes?;
    # The number of days for this duration
    decimal days?;
    # Object type identifier, always 'DURATION'
    "DURATION" objectType?;
};

# Represents the Headers record for the operation: get-alternate-email
public type GetAlternateEmailHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: getReports
public type GetReportsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: update-user
public type UpdateUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Queries record for the operation: update-workspace
public type UpdateWorkspaceQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Represents the Queries record for the operation: share-workspace
public type ShareWorkspaceQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
};

# Represents the Headers record for the operation: deactivate-user
public type DeactivateUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Additional details for discussion comment send operations
public type DiscussionSendcommentAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether the discussion comment (or discussion comment reply) was sent with its respective attachments
    boolean includeAttachments?;
    # Id of the sheet row containing the discussion. (this property is included only if the discussion is on a sheet row)
    @constraint:Int {minValue: 0}
    int sheetRowId?;
    # Id of the comment
    @constraint:Int {minValue: 0}
    int commentId?;
    # Id of the sheet the discussion is on. (This property is included only if the `workspaceId` property below isn't included)
    @constraint:Int {minValue: 0}
    int sheetId?;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the `recipientGroupId` property below isn't included)
    string recipientEmail?;
    # Id of the workspace the discussion is directly on. (This property is included only if the `sheetId` property above isn't included)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Queries record for the operation: list-folders
public type ListFoldersQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: list-folders
public type ListFoldersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a user saves a copy of a sheet by using the `Save As New` option. 
# 
# This event is recorded for the original sheet. 
# 
# If the original sheet belongs to a different organization, then an event will be generated for organization with original sheet and for the organization with copied sheet.
# 
# For copied sheet, `Save As New` event is paired with a [SHEET - CREATE](/api/smartsheet/openapi/schemas/sheet_create) event
public type SheetSaveAsEvent record {
    # The action applied to the specified object
    "SAVE_AS_NEW" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Headers record for the operation: discussion-get
public type DiscussionGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Discussion thread containing comments and metadata for sheets or rows
public type Discussion record {
    # Array of attachments on discussion comments. Only returned if the include query string parameter contains attachments
    Attachment[] commentAttachments?;
    # Array of comments in discussion. Only returned if the include query string parameter contains comments
    Comment[] comments?;
    # Permission level for user access control
    AccessLevel accessLevel?;
    # `User` object containing `name` and `email` of the user who created the discussion
    MiniUser createdBy?;
    # Indicates whether the user can modify the discussion
    boolean readOnly?;
    # Discussion Id
    decimal id?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp lastCommentedAt?;
    # Title automatically created by duplicating the first 100 characters of top-level comment
    string title?;
    # The Id of the associated row or sheet
    decimal parentId?;
    # Type of parent object
    "ROW"|"SHEET" parentType?;
    # Number of comments in the discussion
    decimal commentCount?;
    # `User` object containing `name` and `email` of the user who last commented on the discussion
    MiniUser lastCommentedUser?;
};

# Triggered when a workspace is deleted
public type WorkspaceDeleteEvent record {
    # The action applied to the specified object
    "DELETE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# If **true**,a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions
public type ReadWriteEnabled boolean;

# Triggered when a user schedules a recurring backup for a workspace
public type WorkspaceRecurringBackupEvent record {
    # The action applied to the specified object
    "CREATE_RECURRING_BACKUP" action?;
    # Additional details for workspace recurring backup creation events
    WorkspaceCreateRecurringBackupAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Response containing user profile information
public type UserProfileResponse record {
    # User Object
    User result?;
};

# An object that contains an array of column Ids if you want to limit the subscription to a subscope. Specified when a webhook is created and cannot be changed
public type Subscope record {
    # A column Id or Ids
    decimal[] columnIds?;
};

# Event schema for account-level user import operations
public type AccountImportUsers record {
    *Event;
    //*AccountUserImportEvent;
};

# Response object for webhook deletion operation
public type WebhookDeleteResponse Result;

# Event schema for sheet row move operations
public type SheetMoveRow record {
    *Event;
    //*SheetMoveRowEvent;
};

# Response containing asset sharing operation results and share data
public type AssetShareResponse record {
    *SuccessResult;
    *ShareResponseArray;
};

# Response for automation rule update operations
public type AutomationRuleUpdateResponse record {
    *Result;
    *AutomationRuleResult;
};

# Represents the Headers record for the operation: update-report-share
public type UpdateReportShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response containing list of proof versions with index results
public type ProofVersionListResponse record {
    *IndexResult;
    *ProofVersionsList;
};

# Represents the Headers record for the operation: column-get
public type ColumnGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# User profile image object with dimensions and image identifier
public type ProfileImage record {
    # Unique image Id
    string imageId?;
    # Image width
    string width?;
    # Image height
    string height?;
};

# Response containing a simplified folder object
public type FolderSimpleResult record {
    # Can contain dashboards, folders, reports, sheets, or templates
    FolderSimpleResponse result?;
};

# Represents the Headers record for the operation: automationrule-delete
public type AutomationruleDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Sheet to create from scratch using the specified columns
public type SheetToCreate record {
    # Array of column definitions to include when creating a new sheet
    ColumnToCreateASheet[] columns?;
    # Sheet name
    Name name?;
};

# Represents the Headers record for the operation: share-report
public type ShareReportHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Container for workspace listing results with pagination support
public type WorkspaceListData record {
    # Array of workspace listing objects
    WorkspaceListing[] data?;
    # A token that is used to retrieve the next page of results when passed as the
    # `lastKey` query parameter. This value will be absent when there are no 
    # further pages
    LastKey lastKey?;
};

# Represents the Headers record for the operation: delete-folder
public type DeleteFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Request schema for updating proof completion status
public type UpdateProofStatusRequest record {
    # Boolean flag indicating if the proof is marked as completed
    boolean isCompleted?;
};

# Schedule configuration for automated delivery and recurring operations
public type Schedule record {
    # The day within the month.
    # 
    # Valid range is 1 to 28.
    # 
    # This attribute is applicable to the following schedule type:
    #  * **MONTHLY**
    # 
    # For more details, refer to the Table of Schedule Object’s Attributes below
    @constraint:Number {minValue: 1, maxValue: 31}
    decimal dayOfMonth?;
    # A string array consists of one or more of the following values:
    # * **DAY**, **WEEKDAY**, **WEEKEND**
    # * **SUNDAY**, **MONDAY**, **TUESDAY**, **WEDNESDAY**, **THURSDAY**, **FRIDAY**, **SATURDAY**
    # 
    # The subset of values applicable to the schedule type are as followed:
    # 
    # | Value         | Daily schedule | Weekly schedule | Monthly schedule |
    # |---------------|----------------|-----------------|------------------|
    # | **DAY**       |                |                 |       **✓**      |
    # | **WEEKDAY**   |      **✓**     |                 |       **✓**      |
    # | **WEEKEND**   |                |                 |       **✓**      |
    # | **SUNDAY**    |                |      **✓**      |       **✓**      |
    # | **MONDAY**    |                |      **✓**      |       **✓**      |
    # | **TUESDAY**   |                |      **✓**      |       **✓**      |
    # | **WEDNESDAY** |                |      **✓**      |       **✓**      |
    # | **THURSDAY**  |                |      **✓**      |       **✓**      |
    # | **FRIDAY**    |                |      **✓**      |       **✓**      |
    # | **SATURDAY**  |                |      **✓**      |       **✓**      |
    # 
    # For more details, refer to the Table of Schedule Object’s Attributes below
    ("DAY"|"WEEKDAY"|"WEEKEND"|"SUNDAY"|"MONDAY"|"TUESDAY"|"WEDNESDAY"|"THURSDAY"|"FRIDAY"|"SATURDAY")[] dayDescriptors?;
    # Must be one of the following values:
    #   * **FIRST** or **LAST**
    #   * **SECOND**, **THIRD**, or **FOURTH**
    # 
    # This attribute is applicable to the following schedule type:
    #   * **MONTHLY**
    # 
    #   For more details, refer to the Table of Schedule Object’s Attributes below
    "FIRST"|"LAST"|"SECOND"|"THIRD"|"FOURTH" dayOrdinal?;
    # Timestamp of the most recent delivery execution
    Timestamp lastSentAt?;
    # Frequency on which the request is delivered. The unit is a function of the **type** attribute. For example,
    # for **MONTHLY** schedule, **repeatEvery=1** means every month.
    # 
    # Valid range is 1 to 99.
    # 
    # This attribute is applicable to the following schedule types: **DAILY**, **WEEKLY**, **MONTHLY**, or **YEARLY**.
    # For more details, refer to the Table of Schedule Object’s Attributes below
    @constraint:Number {minValue: 1, maxValue: 99}
    decimal repeatEvery?;
    # Type of schedule
    "ONCE"|"DAILY"|"WEEKLY"|"MONTHLY"|"YEARLY" 'type?;
    # End date and time for the delivery schedule
    TimestampWriteable endAt?;
    # Timestamp for the next scheduled delivery execution
    Timestamp nextSendAt?;
    # Date and time when the first scheduled delivery starts (ISO-8601 or UTC)
    TimestampWriteable startAt?;
};

# Represents the Headers record for the operation: get-workspace-metadata
public type GetWorkspaceMetadataHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Response containing cross-sheet reference data
public type CrossSheetReferenceListResponse record {
    # Array of cross-sheet reference objects
    CrossSheetReference[] data?;
};

# Response containing results from batch row addition operation
public type RowAddBatchResponse record {
    # Array of results from adding multiple rows to sheet
    AddRowsObject[] result?;
};

# Response containing paginated list of groups
public type GroupListResponse record {
    *IndexResult;
    *GroupListDataAlt;
};

# Represents the Queries record for the operation: list-crosssheet-references
public type ListCrosssheetReferencesQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Queries record for the operation: list-users
public type ListUsersQueries record {
    # If the API request is submitted by a system administrator and when specified with a value of 'lastLogin', response includes a lastLogin attribute for each user that indicates the Last login date/time of the user.
    # 
    # **Note** If the number of users included in the response is > 100, you must paginate your query to see the lastLogin attribute. For large responses, the lastLogin attribute is never included
    string include?;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
    # Comma-separated list of email addresses on which to filter the results
    string email?;
};

# Event triggered when a user is added to an account
public type UserAddToAccount record {
    *Event;
    //*UserAccountAdditionEvent;
};

# Represents the Headers record for the operation: list-users
public type ListUsersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Workspace summary with access level, name, ID, and permalink
public type WorkspaceListing record {
    # Permission level for user access control
    AccessLevel accessLevel?;
    # Workspace name
    string name?;
    # Workspace Id
    decimal id?;
    # URL that represents a direct link to the workspace in Smartsheet
    string permalink?;
};

# Response for sheet creation operations
public type SheetCreateResponse record {
    # Created sheet object, either standard or from template
    SheetCreated|SheetCreatedFromTemplate result?;
};

# Response for row update operations with modification details
public type RowUpdateResponse record {
    *GenericResult;
    *UpdateRowsResponse;
};

# Destination sheet information for row copy or move operations
public type CopyOrMoveRowDestination record {
    # The Id of the destination sheet
    decimal sheetId?;
};

# User's alternate email address with ID, confirmation status, and email
public type AlternateEmail record {
    # AlternateEmail Id
    decimal id?;
    # Indicates whether the alternate email address has been confirmed
    boolean confirmed?;
    # User's alternate email address
    string email?;
};

# OAuth token containing access token, refresh token, type, and expiration
public type Token record {
    # A credential that can be used by a client to access the Smartsheet API
    @jsondata:Name {value: "access_token"}
    string accessToken?;
    # A credential tied to the access token that can be used to obtain a fresh access token with the same permissions, without further involvement from a user
    @jsondata:Name {value: "refresh_token"}
    string refreshToken?;
    # How an access token will be generated and presented. Smartsheet uses the bearer parameter, which means essentially give access to the bearer of this token
    @jsondata:Name {value: "token_type"}
    string tokenType?;
    # Number of seconds token is valid once issued
    @jsondata:Name {value: "expires_in"}
    decimal expiresIn = 604799;
};

# Event triggered when a workspace backup is requested
public type WorkspaceRequestBackup record {
    *Event;
    //*WorkspaceBackupRequestEvent;
};

# Represents an image with metadata including dimensions, alt text, and ID
public type Image record {
    # Alternate text for the image
    string altText?;
    # Original width (in pixels) of the uploaded image
    decimal width?;
    # Image Id
    string id?;
    # Original height (in pixels) of the uploaded image
    decimal height?;
};

# Represents the Queries record for the operation: get-favorites
public type GetFavoritesQueries record {
    # A comma-separated list of optional elements to include in the response
    "directId"|"name" include?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: create-sheet-in-folder
public type CreateSheetInFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Create group request
public type GroupCreate1 record {
    # Array of GroupMemberAdd objects for adding multiple members to a group
    GroupMembersAddArray members?;
    # **name** (required)
    # 
    # Must be unique within the organization account
    string name?;
    # **description** (optional)
    string description?;
};

# Details for report ownership transfer including old/new owner info
public type ReportTransferOwnershipAdditionalDetails record {
    # New access level of the new owner: `"OWNER"`
    "OWNER" newAccessLevel = "OWNER";
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the new owner
    @constraint:Int {minValue: 0}
    int newUserId?;
    # Id of the former owner
    @constraint:Int {minValue: 0}
    int oldUserId?;
    # New access level of the former owner: `"ADMIN"`
    "ADMIN" oldAccessLevel = "ADMIN";
};

# Triggered when an admin sends/resends an invitation link to the user. This can be done through User Management console on UI or via the API (Add User). 
public type UserInviteSendEvent record {
    # The action applied to the specified object
    "SEND_INVITE" action?;
    # Additional details for user account addition events
    UserAddToAccountAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Event schema for dashboard update operations
public type DashboardUpdate record {
    *Event;
    //*DashboardUpdateEvent;
};

# When applicable for PICKLIST column type
public type PropertiesSymbol string;

# Represents the Headers record for the operation: move-folder
public type MoveFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: list-sheet-shares
public type ListSheetSharesQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group)
    "ITEM"|"WORKSPACE" sharingInclude?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Request body for creating sheets in workspace - new or from template
public type WorkspaceIdSheetsBody SheetToCreate|SheetToCreateFromTemplate;

# Additional details for report creation including source and user info
public type ReportCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Name of the new report
    string reportName?;
    # Type of object used to create the new report
    "report"|"globale_template" sourceType?;
    # Id of report that was copied to create the new report. (Only included if the report was created as a result of a *copy* or *save as new*)
    @constraint:Int {minValue: 0}
    int sourceObjectId?;
    # Id of the global template that was used to create the new report (Only included if the report was created using a global template. "New Blank Report" is a global template)
    @constraint:Int {minValue: 0}
    int sourceGlobalTemplateId?;
};

# Event schema for report creation operations
public type ReportCreate record {
    *Event;
    //*ReportCreateEvent;
};

# Event schema for transferring group ownership between users
public type UserTransferOwnedGroups record {
    *Event;
    //*UserGroupOwnershipTransferEvent;
};

# Basic sheet information including ID, name, and owner details
public type SheetList record {
    # Empty string
    string owner?;
    # Sheet name
    string name?;
    # Sheet Id
    decimal id?;
    # Set to a static value of "0"
    decimal ownerId?;
};

# Represents the Headers record for the operation: list-alternate-emails
public type ListAlternateEmailsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Additional details for report share member removal events
public type ReportRemoveShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that the user was removed from
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of user that was removed from the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the report is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Headers record for the operation: sheet-send
public type SheetSendHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Event schema for report ownership transfer operations
public type ReportTransferOwnership record {
    *Event;
    //*ReportOwnershipTransferEvent;
};

# Event schema for user-owned items transfer operations
public type UserTransferOwnedItems record {
    *Event;
    //*UserOwnershipTransferEvent;
};

# Represents the Headers record for the operation: update-workspace
public type UpdateWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Request body schema for folder copy operations
public type FolderIdCopyBody ContainerDestinationForCopy;

# Key for pagination, contains reference to last item in result set
public type PaginatedResultKey record {
    # A token that is used to retrieve the next page of results when passed as the
    # `lastKey` query parameter. This value will be absent when there are no 
    # further pages
    LastKey lastKey?;
};

# Represents the Headers record for the operation: remove-user
public type RemoveUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Queries record for the operation: copy-sheet
public type CopySheetQueries record {
    # A comma-separated list of elements to copy:
    #   * **attachments**
    #   * **cellLinks** - includes cross-sheet references
    #   * **data** - includes formatting
    #   * **discussions** - includes comments
    #   * **filters**
    #   * **forms**
    #   * **ruleRecipients** -- includes notification recipients, must also include rules when using this attribute
    #   * **rules** -- includes notifications and workflow rules
    #   * **shares** |
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares" include?;
    # When specified with a value of **sheetHyperlinks**, excludes this category from the response
    "sheetHyperlinks" exclude?;
};

# Represents the Queries record for the operation: list-workspaces
public type ListWorkspacesQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Request query parameter used in ListWorkspaces endpoints that support token based pagination.
    # 
    # The maximum amount of items to return in the response. The default and minimum are 100
    @constraint:Int {minValue: 100, maxValue: 1000}
    int:Signed32 maxItems = 100;
    # Specifies the type of pagination to use. When set to 'token', enables
    # token-based pagination
    "token" paginationType?;
    # The lastKey token returned from the previous page of results. If not specified,
    # the first page of results is returned
    string lastKey?;
    # **DEPRECATED - As early as the sunset date specified in this
    # [Changelog entry](/api/smartsheet/changelog#2025-08-04), this request parameter will no longer be supported.**
    # 
    # The maximum number of items to return per page. Unless otherwise stated for a
    # specific endpoint, defaults to 100. If only page is specified, defaults to a
    # page size of 100. For reports, the default is 100 rows. If you need larger
    # sets of data from your report, returns a maximum of 10,000 rows per request
    # 
    # # Deprecated
    @deprecated
    decimal pageSize = 100;
    # **DEPRECATED - As early as the sunset date specified in this 
    # [Changelog entry](/api/smartsheet/changelog#2025-08-04), this request parameter will no longer be supported.**
    # 
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize
    # (they are ignored if includeAll=true is specified)
    # 
    # # Deprecated
    @deprecated
    boolean includeAll = false;
    # **DEPRECATED - As early as the sunset date specified in this
    # [Changelog entry](/api/smartsheet/changelog#2025-08-04), this request parameter will no longer be supported.**
    # 
    # Which page to return. Defaults to 1 if not specified. If you specify a value
    # greater than the total number of pages, the last page of results is returned
    # 
    # # Deprecated
    @deprecated
    decimal page = 1;
};

# Represents the Headers record for the operation: copy-sheet
public type CopySheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Schema for adding columns to sheets with type and validation options
public type AddColumns record {
    # Array of the options available for the column
    string[] options?;
    # Display width of the column in pixels
    decimal width?;
    # Column index or position. This number is zero-based
    decimal index?;
    # Column Id
    decimal id?;
    # Column title
    string title?;
    # See [Column Types](/api/smartsheet/openapi/columns)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Indicates whether validation has been enabled for the column (value = **true**)
    boolean validation?;
};

# Response containing detailed information about a specific row
public type RowDetailsResponse GetRowObject;

# Represents the Queries record for the operation: get-folder-children
public type GetFolderChildrenQueries record {
    # A comma-separated list of optional elements to include in the response:
    #   * **source** - adds the Source object indicating which object this resource was created from, if any
    #   * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned
    "source"|"ownerInfo" include?;
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # The maximum number of items to return in the response
    @constraint:Int {minValue: 100, maxValue: 1000}
    int maxItems = 100;
    # A comma-separated list of the child types to include in the response
    "sheets"|"reports"|"sights"|"folders" childrenResourceTypes;
    # You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request
    boolean numericDates = false;
    # The lastKey token returned from the previous page of results. If not specified,
    # the first page of results is returned
    string lastKey?;
};

# Response for listing discussions with pagination metadata
public type DiscussionIndexResponse record {
    *IndexResult;
    *DiscussionListData;
};

# Details of an update request including schedule, timestamps, and sender info
public type UpdateRequestDetails record {
    # The date and time for when this request was originally created. Read-only
    Timestamp createdAt?;
    # The schedule for which update requests are sent out
    Schedule schedule?;
    # The date and time for when the last change was made to this request. Read-only
    Timestamp modifiedAt?;
    # Id of the update request
    decimal id?;
    # `User` object containing `name` and `email` of the sender
    MiniUser sentBy?;
};

# Represents the Headers record for the operation: add-summary-fields
public type AddSummaryFieldsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a user exports or prints the report. 
# 
# Printing a report is a PDF export, then browser print, thus is reported as PDF export
public type ReportExportEvent record {
    # The action applied to the specified object
    "EXPORT" action?;
    # Additional details for report export events
    ReportExportAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Triggered when an existing report is renamed
public type ReportRenameEvent record {
    # The action applied to the specified object
    "RENAME" action?;
    # Additional details for report rename events including user and names
    ReportRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Represents the Queries record for the operation: list-search-sheet
public type ListSearchSheetQueries record {
    # Text with which to perform the search. Enclose in double-quotes for an exact search
    string query;
};

# Represents the Queries record for the operation: updateSheet
public type UpdateSheetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Represents the Headers record for the operation: get-favorites
public type GetFavoritesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # UserId of the user
    @http:Header {name: "x-smar-sc-actor-id"}
    string xSmarScActorId?;
};

# Can contain dashboards, folders, reports, sheets, or templates
public type Folder record {
    # Reports contained in folder
    GridListing[] reports?;
    # Sheets contained in folder
    GridListing[] sheets?;
    # Folders contained in folder
    Folder[] folders?;
    # Dashboards contained in folder
    DashboardListing[] sights?;
    # Templates contained in folder
    GridListing[] templates?;
    # Folder name
    string name?;
    # Folder Id
    decimal id?;
    # URL that represents a direct link to the folder in Smartsheet
    string permalink?;
    # **Deprecated** Returned only if the user has marked the folder as a favorite in their "Home" tab (value = true)
    # 
    # # Deprecated
    @deprecated
    boolean favorite?;
};

# Represents the Headers record for the operation: create-workspace-folder
public type CreateWorkspaceFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: list-summary-fields
public type ListSummaryFieldsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Queries record for the operation: create-sheet-in-folder
public type CreateSheetInFolderQueries record {
    # Additional parameter to create a sheet from template.
    # A comma-separated list of elements to copy from the template
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules" include?;
};

# Triggered when the ownership of a dashboard is transferred
public type DashboardOwnershipTransferEvent record {
    # The action applied to the specified object
    "TRANSFER_OWNERSHIP" action?;
    # Additional details for dashboard ownership transfer events
    DashboardTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Represents the Headers record for the operation: updaterequests-delete
public type UpdaterequestsDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Queries record for the operation: proofs-listRequestActions
public type ProofsListRequestActionsQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Triggered when an admin downloads user list report for an organization account. This can be done through User Management console on UI
public type UserListDownloadEvent record {
    # The action applied to the specified object
    "DOWNLOAD_USER_LIST" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Font family definition with name and platform-independent traits
public type FontFamily record {
    # Platform-independent traits of the font family. Contains one of the listed enum values
    ("sans-serif"|"serif")[] traits?;
    # Name of the font family
    string name?;
};

# Represents the Headers record for the operation: rows-send
public type RowsSendHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: delete-group-members
public type DeleteGroupMembersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Container for share operation results, single or multiple shares
public type ShareResultData record {
    # Share operation result - single Share object or array of Share objects
    Share|Share[] result?;
};

# Represents the Headers record for the operation: column-updateColumn
public type ColumnUpdateColumnHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a user requests a backup for a sheet
public type SheetBackupRequestEvent record {
    # The action applied to the specified object
    "REQUEST_BACKUP" action?;
    # Additional details for folder backup requests including attachment options
    FolderRequestBackupAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Queries record for the operation: list-workspace-shares
public type ListWorkspaceSharesQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Triggered when a sheet form is deleted
public type FormDeleteEvent record {
    # The action applied to the specified object
    "DELETE" action?;
    # Additional details for form activation events including user and sheet info
    FormActivateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
};

# Triggered when a user is added to an auto-provisioned organization account by an admin or when the user logs in with email associated with an auto-provisioned domain
public type UserAccountAdditionEvent record {
    # The action applied to the specified object
    "ADD_TO_ACCOUNT" action?;
    # Additional details for user account addition events
    UserAddToAccountAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Triggered when the user account is updated. This can be done through User Management on UI or via the API
public type UserUpdateEvent record {
    # The action applied to the specified object
    "UPDATE_USER" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Limits the webhook to monitor specific columns designated by an array of sheet column IDs. 
public type CreateWebhookRequestSubscope record {
    # Array of IDs of the sheet columns to monitor
    int[] columnIds?;
};

# Represents the Queries record for the operation: row-get
public type RowGetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of elements to include in the response.
    # 
    # See [Row Include Flags](/api/smartsheet/openapi/rows).
    # 
    # Also supports the **columns** include flag, which adds a columns array that specifies all of the columns for the sheet. This enables you to have the full context of the cells in the row.
    # 
    # The **filters** include flag returns a **filteredOut** attribute indicating if the row should be displayed or hidden according to the sheet's filters
    "columns"|"filters" include?;
    # Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    int level = 0;
    # A comma-separated list of element types to exclude from the response:
    #   * **filteredOutRows** - excludes filtered-out rows from response payload if a sheet filter is applied; includes total number of filtered rows
    #   * **linkInFromCellDetails** - excludes the following attributes from the **cell.linkInFromCell** object: `columnId`, `rowId`, `status`
    #   * **linksOutToCellsDetails** - excludes the following attributes from the **cell.linksOutToCells** array elements: `columnId`, `rowId`, `status`
    #   * **nonexistentCells** - excludes empty cells
    "filteredOutRows"|"linkInFromCellDetails"|"linksOutToCellsDetails"|"nonexistentCells" exclude?;
};

# Triggered when an admin imports users through a CSV file. This can be done through User Administration console on UI
public type AccountUserImportEvent record {
    # The action applied to the specified object
    "IMPORT_USERS" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Event fired when group ownership is transferred to another user
public type GroupTransferOwnership record {
    *Event;
    //*GroupOwnershipTransferEvent;
};

# Row object with cells, metadata, and sheet reference for adding rows
public type AddRowsObject record {
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Indicates whether the row is expanded or collapsed
    boolean expanded?;
    # Cells objects
    CellObjectForRows[] cells?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # Parent sheet Id
    decimal sheetId?;
    # Row Id
    decimal id?;
    # Row number within the sheet
    @constraint:Number {minValue: 1}
    decimal rowNumber?;
    # Sheet version number that is incremented every time a sheet is modified
    decimal version?;
};

# Sort specification with column ID and direction (ascending/descending)
public type SortCriterion record {
    # ID of the column to sort by
    decimal columnId?;
    # Direction of the sort
    "ASCENDING"|"DESCENDING" direction = "ASCENDING";
};

# Triggered when an admin removes an user from all groups owned by users on the organization account. This can be done through User Management on UI
public type UserGroupRemovalEvent record {
    # The action applied to the specified object
    "REMOVE_FROM_GROUPS" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Response containing an array of user objects
public type UserListResponse record {
    # List of User Objects
    User[] data?;
};

# Represents the Headers record for the operation: attachments-listOnRow
public type AttachmentsListOnRowHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# URL that represents a direct link to the sheet in Smartsheet
public type Permalink string;

# Triggered when a folder is renamed in the UI or via the API (update)
public type FolderRenameEvent record {
    # The action applied to the specified object
    "RENAME" action?;
    # Additional details for folder rename events including old and new names
    FolderRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

# Represents the Headers record for the operation: getReport
public type GetReportHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # The Accept request-header field can be used to specify certain media types which are acceptable for the response
    @http:Header {name: "Accept"}
    string accept?;
};

# Event triggered when a sheet is renamed
public type SheetRename record {
    *Event;
    //*SheetRenameEvent;
};

# Represents the Headers record for the operation: list-search-sheet
public type ListSearchSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when an access token is refreshed. See the [`POST /token`](/api/smartsheet/openapi/tokens/tokens-getorrefresh) operation for more information about access token refresh
public type AccessTokenRefreshEvent record {
    # The action applied to the specified object
    "REFRESH" action?;
    # Additional details for access token refresh events
    AccesstokenRefreshAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCESS_TOKEN" objectType?;
};

# Triggered when a link to another sheet cell is created in a sheet cell
public type SheetCellLinkCreateEvent record {
    # The action applied to the specified object
    "CREATE_CELL_LINK" action?;
    # Additional details for sheet cell link creation events
    SheetCreateCellLinkAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Response object for share update operations
public type ShareUpdateResponse record {
    *Result;
    *ShareResultArray;
};

# Event triggered when a dashboard is moved to a different location
public type DashboardMove record {
    *Event;
    //*DashboardMoveEvent;
};

# Operation result with version information for sheet updates
public type Result ItemResult;

# A template can be used to create a sheet
public type Template record {
    # Type of global template. Only applicable to blank public templates
    "BLANK_SHEET"|"PROJECT_SHEET"|"TASK_LIST" globalTemplate?;
    # URL to the small preview image for this template. Only applicable to non-blank public templates
    string image?;
    # URL to the large preview image for this template. Only applicable to non-blank public templates
    string largeImage?;
    # Indicates whether the template is blank. Only applicable to public templates
    boolean blank?;
    # Permission level for user access control
    AccessLevel accessLevel?;
    # Type of global template
    string name?;
    # Template description
    string description?;
    # Template Id
    decimal id?;
    # Indicates whether the template is blank. Only applicable to public templates
    string[] categories?;
    # Type of template. Only applicable to public templates
    "report"|"sheet" 'type?;
    # Locale of the template. Only applicable to public templates
    "ar_AE"|"ar_BH"|"ar_DZ"|"ar_EG"|"ar_IQ"|"ar_JO"|"ar_KW"|"ar_LB"|"ar_LY"|"ar_MA"|"ar_OM"|"ar_QA"|"ar_SA"|"ar_SD"|"ar_SY"|"ar_TN"|"ar_YE"|"be_BY"|"bg_BG"|"ca_ES"|"cs_CZ"|"da_DK"|"de_AT"|"de_CH"|"de_DE"|"de_LU"|"el_CY"|"el_GR"|"en_AU"|"en_CA"|"en_GB"|"en_IE"|"en_IN"|"en_MT"|"en_NZ"|"en_PH"|"en_SG"|"en_US"|"en_ZA"|"es_AR"|"es_BO"|"es_CL"|"es_CO"|"es_CR"|"es_DO"|"es_EC"|"es_ES"|"es_GT"|"es_HN"|"es_MX"|"es_NI"|"es_PA"|"es_PE"|"es_PR"|"es_PY"|"es_SV"|"es_US"|"es_UY"|"es_VE"|"et_EE"|"fi_FI"|"fr_BE"|"fr_CA"|"fr_CH"|"fr_FR"|"fr_LU"|"ga_IE"|"hi_US"|"hr_HR"|"hu_HU"|"in_ID"|"is_IS"|"it_CH"|"it_IT"|"iw_IL"|"ja_JP"|"ko_KR"|"lt_LT"|"lv_LV"|"mk_MK"|"ms_MY"|"mt_MT"|"nl_BE"|"nl_NL"|"no_NO"|"pl_PL"|"pt_BR"|"pt_PT"|"ro_RO"|"ru_RU"|"sk_SK"|"sl_SI"|"sq_AL"|"sr_BA"|"sr_CS"|"sv_SE"|"th_US"|"tr_TR"|"uk_UA"|"vi_VN"|"zh_CN"|"zh_HK"|"zh_SG"|"zh_TW" locale?;
    # List of search tags for this template. Only applicable to non-blank public templates
    string[] tags?;
};

# Represents the Queries record for the operation: create-folder-folder
public type CreateFolderFolderQueries record {
    # A comma-separated list of elements to copy:
    #   * **attachments**
    #   * **cellLinks** - includes cross-sheet references
    #   * **data** - includes formatting
    #   * **discussions** - includes comments
    #   * **filters**
    #   * **forms**
    #   * **ruleRecipients** -- includes notification recipients, must also include rules when using this attribute
    #   * **rules** -- includes notifications and workflow rules
    #   * **shares** |
    # NOTE: Cell history is not copied, regardless of which include parameter values are specified
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules"|"shares" include?;
    # A comma-separated list of references to NOT re-map for the newly created folder
    "cellLinks"|"reports"|"sheetHyperlinks"|"sights" skipRemap?;
    # When specified with a value of **sheetHyperlinks**, excludes this category from the response
    "sheetHyperlinks" exclude?;
};

# Triggered when a group or user is removed from a report's sharing list
public type ReportShareRemovalEvent record {
    # The action applied to the specified object
    "REMOVE_SHARE" action?;
    # Additional details for report share removal events
    ReportRemoveShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Event triggered when a member is added to report sharing
public type ReportAddShareMember record {
    *Event;
   // *ReportShareMemberAddEvent;
};

# Triggered when a user is added to a group that a report has been shared to via the report's sharing list, or via a workspace's sharing list. 
# 
# If a report has been shared to a group directly via the report's sharing list, and via a workspace's sharing list, then an event will be generated for each of these shares
public type ReportShareMemberAddEvent record {
    # The action applied to the specified object
    "ADD_SHARE_MEMBER" action?;
    # Additional details for report share member addition events
    ReportAddShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Returned only if the column is the Primary Column (value = **true**)
public type Primary boolean;

# Event triggered when a report is shared with a workspace
public type ReportAddWorkspaceShare record {
    *Event;
 //   *ReportWorkspaceShareAddEvent;
};

# Event schema for saving a report as a new copy
public type ReportSaveAsNew record {
    *Event;
    //*ReportSaveAsEvent;
};

# Request body schema for workspace operations containing name property
public type WorkspacesBody record {
    # Workspace name
    string name?;
};

# Represents the Headers record for the operation: proofs-listRequestActions
public type ProofsListRequestActionsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Cell object containing value, format, formula, and link properties
public type Cell record {
    # The format descriptor describing this cell's conditional format. Only returned if the include query string parameter contains **format** and this cell has a conditional format applied
    string conditionalFormat?;
    # Hyperlink object containing URL or references to sheets, reports, or dashboards
    Hyperlink hyperlink?;
    # Represents an image with metadata including dimensions, alt text, and ID
    Image image?;
    # The Id of the column that the cell is located in
    decimal columnId?;
    # The format descriptor. Only returned if the include query string parameter contains **format** and this cell has a non-default format applied
    string format?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # (Admin only) Indicates whether the cell value can contain a value outside of the validation limits (value = **true**). When using this parameter, you must also set **strict** to **false** to bypass value type checking. This property is honored for POST or PUT actions that update rows
    boolean overrideValidation?;
    # Visual representation of cell contents, as presented to the user in the UI
    string displayValue?;
    # Only returned if the include query string parameter contains **columnType**
    string columnType?;
    # The formula for a cell, if set, for instance **=COUNTM([Assigned To]3)**. Note that calculation errors or problems with a formula do not cause the API call to return an error code. Instead, the response contains the same value as in the UI, such as **cell.value = "#CIRCULAR REFERENCE"**
    string formula?;
    # Set to **false** to enable lenient parsing. Defaults to **true**. You can specify this attribute in a request, but it is never present in a response
    boolean strict?;
    # Represents a link between cells across sheets with status information
    CellLink linkInFromCell?;
    # A string, number, or a Boolean value -- depending on the cell type and the data in the cell. Cell values larger than 4000 characters are silently truncated. An empty cell returns no value
    string|decimal|boolean value?;
    # Array of outbound cell links from this cell to other cells
    CellLink[] linksOutToCells?;
};

# User profile image response
public type UserProfileImageResponse record {
    # User's primary email address.
    string email?;
    # User's full name (read-only).
    string name?;
    # User's first name.
    string firstName?;
    # User's last name.
    string lastName?;
    # User profile image object with dimensions and image identifier
    ProfileImage profileImage?;
    # User Id.
    decimal id?;
};

# Represents the Queries record for the operation: getReports
public type GetReportsQueries record {
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
};

# Represents the Queries record for the operation: remove-user
public type RemoveUserQueries record {
    # **If you're removing the user from your organization**, set this to `true` to remove the user's access to all assets in your organization and plan.
    # 
    # **If you're removing the user from your plan**, this parameter is ignored and the user's access to all assets in your organization and plan is removed automatically
    boolean removeFromSharing = false;
    # **If you're removing the user from your organization** and you want to transfer ownership of all the removed user's assets and groups to a qualified user\*, set this parameter to `true` and set the `transferTo` parameter to the ID of the qualified user. The transfer depends on setting the `transferTo` parameter.
    # 
    # **If you're removing the user from your plan**, this parameter is ignored.
    # 
    # **Warning:** If your asset transfer size exceeds 38k, the transfer fails with a `400` error that prompts you to contact Support for guidance.
    # 
    # \*The receiving user must be a <a href="https://help.smartsheet.com/articles/520100-user-types" target="_blank" rel="noopener noreferrer">Group Admin</a> of the group(s) to be transferred
    boolean transferSheets = false;
    # Set this to the ID of a qualified user\* to receive ownership of all groups the removed user owns.
    # 
    # **If you're removing the user from your organization** and you set the `transferSheets` parameter to `true`, the operation additionally transfers ownership of all the removed user's assets to the assigned user.
    # 
    # **If you're removing the user from your plan** and you don't set this parameter, the operation transfers group ownership to the respective main contact of each group's organization.
    # 
    # \*The receiving user must be a <a href="https://help.smartsheet.com/articles/520100-user-types" target="_blank" rel="noopener noreferrer">Group Admin</a> of the groups
    int transferTo?;
};

# Event schema for removing a member from report sharing
public type ReportRemoveShareMember record {
    *Event;
    //*ReportShareMemberRemovalEvent;
};

# Represents the Headers record for the operation: share-workspace
public type ShareWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response containing list of proof request actions
public type ProofActionsResponse record {
    # list of proof request actions
    ProofRequestAction[] data?;
};

# Represents the Headers record for the operation: delete-workspace-share
public type DeleteWorkspaceShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response schema containing favorite operation results
public type FavoriteResultResponse record {
    # Single favorite or array of favorites returned from operation
    Favorite|Favorite[] result?;
};

# Event schema for folder creation operations
public type FolderCreate record {
    *Event;
   // *FolderCreateEvent;
};

# Represents the Queries record for the operation: add-summary-fields
public type AddSummaryFieldsQueries record {
    # Set to true if you want to override the requirement for unique summary field names. Repeated names will be adjusted by appending "(1)" or similar after the field name
    boolean renameIfConflict = false;
};

# Defines sort criteria and order for data sorting operations
public type SortSpecifier record {
    # Specifies sort order. Array is in priority order
    SortCriterion[] sortCriteria?;
};

# Represents the Headers record for the operation: tokens-delete
public type TokensDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Container object for additional event-specific properties. Properties depend upon the event type, but all events include an `emailAddress` property, representing the user responsible for the event. 
# 
# See [Event types](/api/smartsheet/event-types) for event details, including event-specific `additionalDetails` properties and example event response objects
public type EventAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
};

# Represents the Queries record for the operation: tokens-delete
public type TokensDeleteQueries record {
    # The client Id and user Id is fetched based on the token that is used to make this API call. A value of true deletes all tokens associated to the given client Id and user Id
    boolean deleteAllForApiClient = false;
};

# Event triggered when user share permissions are removed
public type UserRemoveShares record {
    *Event;
   // *UserSharesRemovalEvent;
};

# Object containing a Contact
public type ContactObjectValue record {
    # ID of an image associated with the Contact
    string imageId?;
    # Name of the Contact
    string name?;
    # Email address of the Contact
    string email?;
    # Object type identifier, always set to 'CONTACT'
    "CONTACT" objectType?;
};

# Object containing zero or more media items, including images, videos, and documents, for review, editing, or approval
public type Proof record {
    # `User` object containing `name` and `email` of the user who last updated the proof
    MiniUser lastUpdatedBy?;
    # Array of Attachment objects. Only returned if the include query string parameter contains attachments
    Attachment[] attachments?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp lastUpdatedAt?;
    # File type for the proof version
    "DOCUMENT"|"IMAGE"|"MIXED"|"NONE"|"VIDEO" proofType?;
    # Proof name. This is the same as primary column value. If the primary column value is empty, name is empty
    string name?;
    # Array of Discussion objects. Only returned if the include query string parameter contains discussions
    Discussion[] discussions?;
    # Proof Id of the proof version
    decimal id?;
    # Proof Id of the original proof version
    decimal originalId?;
    # URL to review a proofing request
    string proofRequestUrl?;
    # The version number of the proof
    decimal version?;
    # Indicates whether the proof is completed
    boolean isCompleted?;
};

# Indicates who can access the 'Read-Only Full' view of the published sheet:
#   * ALL - available to anyone who has the link.
#   * ORG - available only to members of the sheet owner's Smartsheet organization account.
#   * SHARED - available only to users shared to the item.
# 
# Only returned in the response if **readOnlyFullEnabled = true**
public type ReadOnlyFullAccessibleBy "ALL"|"ORG"|"SHARED";

# Represents a link between cells across sheets with status information
public type CellLink record {
    # Sheet name of the linked cell
    string sheetName?;
    # Column Id of the linked cell
    decimal columnId?;
    # Sheet Id of the sheet that the linked cell belongs to
    decimal sheetId?;
    # Row Id of the linked cell
    decimal rowId?;
    # * `BLOCKED` One of several other values indicating unusual error conditions.
    # * `BROKEN` The row or sheet linked to was deleted.
    # * `CIRCULAR` One of several other values indicating unusual error conditions.
    # * `DISABLED` One of several other values indicating unusual error conditions.
    # * `INACCESSIBLE` The sheet linked to cannot be viewed by this user.
    # * `INVALID` One of several other values indicating unusual error conditions.
    # * `NOT_SHARED` One of several other values indicating unusual error conditions.
    # * `OK` The link is in a good state
    "BLOCKED"|"BROKEN"|"CIRCULAR"|"DISABLED"|"INACCESSIBLE"|"INVALID"|"NOT_SHARED"|"OK" status?;
};

# Represents the Headers record for the operation: proofs-createVersion
public type ProofsCreateVersionHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Additional details for sheet row copy operations including user and options
public type SheetCopyRowAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Number of rows copied
    @constraint:Int {minValue: 1}
    int rowsCopied?;
    # Indicates whether the row(s) were copied with their respective attachments
    boolean includeAttachments?;
    # Id of sheet from where the rows copied. (Only included when the `objectId` property contains the Id of the destination sheet)
    @constraint:Int {minValue: 0}
    int sourceSheetId?;
    # Id of sheet to where the rows copied. (Only included when the `objectId` property contains the Id of the source sheet)
    @constraint:Int {minValue: 0}
    int destinationSheetId?;
    # Indicates whether the row(s) were copied with their respective discussion comments
    boolean includeDiscussions?;
};

# Dashboard (Sight) object containing widgets, layout, and styling properties
public type Sight SightListItem;

# Complete user profile with personal info, permissions, and account details
public type UserProfile record {
    # Indicates whether the user is a JIRA admin
    boolean jiraAdmin?;
    # Last login time of the current user
    string lastLogin?;
    # Current user's last name
    string lastName?;
    # User's role
    string role?;
    # Indicates whether the user is a system admin (can manage user accounts and organization account)
    boolean admin?;
    # User profile image object with dimensions and image identifier
    ProfileImage profileImage?;
    # Current user's locale (see [ServerInfo](/api/smartsheet/openapi/serverinfo/serverinfo))
    string locale?;
    # User's title
    string title?;
    # Indicates whether the user is a registered Salesforce user
    boolean salesforceUser?;
    # Indicates whether the user is a group admin (can create and edit groups)
    boolean groupAdmin?;
    # Indicates whether the user is a resource viewer (can access resource views)
    boolean resourceViewer?;
    # User's company
    string company?;
    # Current user's Id
    decimal id?;
    # User's department
    string department?;
    # Current user's primary email address
    string email?;
    # Timestamp of viewing an <a href="https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only" target="_blank" rel="noopener noreferrer">Enterprise Custom Welcome Screen</a> by the current user
    string customWelcomeScreenViewed?;
    # Current user's time zone Id
    string timeZone?;
    # Current user's first name
    string firstName?;
    # User's mobile phone number
    string mobilePhone?;
    # User's alternate email address with ID, confirmation status, and email
    AlternateEmail alternateEmails?;
    # User's work phone number
    string workPhone?;
    # **SUNSET** - The `sheetCount` attribute now holds the value `-1` and is included only if the retrieved user's `status` is `ACTIVE`
    # 
    # # Deprecated
    @constraint:Number {minValue: -1, maxValue: -1}
    @deprecated
    decimal sheetCount = -1;
    # Smartsheet account information
    Account account?;
    # Indicates whether the user is a licensed user (can create and own sheets)
    boolean licensedSheetCreator?;
    # Indicates whether the user is a Salesforce admin
    boolean salesforceAdmin?;
};

# Response schema for organization sheets list
public type OrganizationSheetsListResponse record {
    *IndexResultUnknownPages;
    *SheetListData;
};

# When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)
public type Symbol string;

# Triggered when a sheet form is created
public type FormCreateEvent record {
    # The action applied to the specified object
    "CREATE" action?;
    # Additional details for form creation events including email and sheet info
    FormCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
};

# Represents the Headers record for the operation: get-sheetVersion
public type GetSheetVersionHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: add-group
public type AddGroupHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Statistics and status information for webhook callback attempts
public type WebhookStats record {
    # The number of retries the webhook had performed as of the last callback attempt
    decimal lastCallbackAttemptRetryCount?;
    # When this webhook last made a successful callback
    string lastSuccessfulCallback?;
    # When this webhook last made a callback attempt
    string lastCallbackAttempt?;
};

# Additional details for dashboard share member removal events
public type DashboardRemoveShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that the user was removed from
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of user that was removed from the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the dashboard is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Triggered when a user requests a backup for a workspace
public type WorkspaceBackupRequestEvent record {
    # The action applied to the specified object
    "REQUEST_BACKUP" action?;
    # Additional details for folder backup requests including attachment options
    FolderRequestBackupAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Additional details for folder rename events including old and new names
public type FolderRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the folder
    string newName?;
    # Old name of the folder
    string oldName?;
};

# Represents the Headers record for the operation: create-folder-folder
public type CreateFolderFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Additional details for report share member addition events
public type ReportAddShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the user. 
    # 
    # Note that this access level represents the access level that has been granted to the user via group membership; it is not the user's effective access level for the report
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group the user was added to
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the report is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Form creation event combining base event and form-specific properties
public type FormCreate record {
    *Event;
    //*FormCreateEvent;
};

# User account removal event combining base event and user removal details
public type UserRemoveFromAccount record {
    *Event;
    //*UserAccountRemovalEvent;
};

# Comment object with text, creator, attachments, and timestamps
public type Comment record {
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Array of attachments on comments
    Attachment[] attachments?;
    # User object containing name and email of the creator of this comment
    MiniUser createdBy?;
    # Discussion Id of discussion that contains comment
    decimal discussionId?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # Comment Id
    decimal id?;
    # Comment body
    string text?;
};

# Column properties including type, title, index, and validation settings
public type GetColumn record {
    # When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)
    string symbol?;
    # Column index or position. This number is zero-based
    decimal index?;
    # Column Id
    decimal id?;
    # Column title
    string title?;
    # See [Column Types](/api/smartsheet/openapi/columns)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Indicates whether validation has been enabled for the column (value = **true**)
    boolean validation?;
};

# Report share addition event combining base event and share details
public type ReportAddShare record {
    *Event;
    //*ReportShareAddEvent;
};

# Represents the Headers record for the operation: proofs-createDiscussion
public type ProofsCreateDiscussionHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Event triggered when a member is removed from dashboard sharing
public type DashboardRemoveShareMember record {
    *Event;
    //*DashboardShareMemberRemoveEvent;
};

# The error caused by the failed item
public type Error record {
    # Custom error code from Smartsheet. See the complete [Error Code List](/api/smartsheet/error-codes)
    decimal errorCode?;
    # The Id of the specific error occurrence. Please include this information when contacting Smartsheet support
    string refId?;
    # Descriptive error message
    string message?;
};

# Represents the Headers record for the operation: list-workspace-shares
public type ListWorkspaceSharesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: copy-sight
public type CopySightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Event triggered when workspace ownership is transferred
public type WorkspaceTransferOwnership record {
    *Event;
    //*WorkspaceTransferOwnershipEvent;
};

# Represents the Queries record for the operation: attachments-listOnRow
public type AttachmentsListOnRowQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Triggered when an admin downloads login history report for the users. This can be done through Login History console on UI
public type LoginHistoryDownloadEvent record {
    # The action applied to the specified object
    "DOWNLOAD_LOGIN_HISTORY" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Additional details for report rename events including user and names
public type ReportRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the report
    string newName?;
    # Previous name of the report
    string oldName?;
};

# Contact information with name and email address
public type ContactOption record {
    # Can be a user's name, display name, or free text
    string name?;
    # A parsable email address
    string email?;
};

# Triggered when a sheet form is activated
public type FormActivateEvent record {
    # The action applied to the specified object
    "ACTIVATE" action?;
    # Additional details for form activation events including user and sheet info
    FormActivateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FORM" objectType?;
};

# Event triggered when account login history is downloaded
public type AccountDownloadLoginHistory record {
    *Event;
    //*LoginHistoryDownloadEvent;
};

# Triggered when an admin downloads sheet access report for a user. This can be done through User Management console on UI
public type UserSheetAccessReportEvent record {
    # The action applied to the specified object
    "DOWNLOAD_SHEET_ACCESS_REPORT" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "USER" objectType?;
};

# Response object containing summary field image addition result
public type SummaryFieldImageResultAlt record {
    # Summary field with image support and field metadata properties
    SummaryFieldAddImage result?;
};

# Can contain dashboards, folders, reports, sheets, and templates
public type Workspace record {
    # Reports contained in the workspace
    GridListing[] reports?;
    # Sheets contained in the workspace
    GridListing[] sheets?;
    # Folders contained in the workspace
    Folder[] folders?;
    # Dashboards contained in the workspace
    DashboardListing[] sights?;
    # Permission level for user access control
    AccessLevel accessLevel?;
    # Workspace name
    string name?;
    # Workspace Id
    decimal id?;
    # URL that represents a direct link to the workspace in Smartsheet
    string permalink?;
};

# Represents the Queries record for the operation: update-workspace-share
public type UpdateWorkspaceShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Response wrapper containing an automation rule object
public type AutomationRuleResult record {
    # Automation rule configuration with triggers, actions, and status
    AutomationRule result?;
};

# Result containing summary field image operation response data
public type SummaryFieldImageResult record {
    *GenericResult;
    *SummaryFieldImageResultAlt;
};

# Event triggered when a sheet is shared with a workspace
public type SheetAddWorkspaceShare record {
    *Event;
    //*SheetAddWorkspaceShareEvent;
};

# Destination container configuration for copying Smartsheet objects
public type ContainerDestinationForCopy record {
    # Name of the newly created object (when copying a dashboard, folder, sheet, or workspace)
    string newName?;
    # Type of destination container.
    # 
    # The `"home"` enum is **Deprecated** since March 25, 2025, and will be removed
    "folder"|"home"|"workspace"? destinationType?;
    # The ID of the destination container
    decimal destinationId;
};

# Represents the Queries record for the operation: discussions-list
public type DiscussionsListQueries record {
    # A comma-separated list of optional elements to include in the response:
    #   * **attachments** - effective only if comments is present, otherwise ignored
    #   * **comments** - include all comments in threads
    "attachments"|"comments" include?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Event schema for workspace export operations
public type WorkspaceExport record {
    *Event;
   // *WorkspaceExportEvent;
};

# Represents the Headers record for the operation: update-folder
public type UpdateFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a user is added to a group that a dashboard has been shared to via the dashboard's sharing list, or via a workspace's sharing list. If a dashboard has been shared to a group directly via the dashboard's sharing list, and via a workspace's sharing list, then an event will be generated for each of these shares
public type DashboardShareMemberAddEvent record {
    # The action applied to the specified object
    "ADD_SHARE_MEMBER" action?;
    # Details for dashboard sharing events including user/group and access level
    DashboardAddShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Schema for adding alternate email address to user account
public type AddAlternateEmail record {
    # User's alternate email address
    string email?;
};

# Event schema for downloading account published items report
public type AccountDownloadPublishedItemsReport record {
    *Event;
    //*AccountDownloadPublishedItemsReportEvent;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# Represents the Queries record for the operation: get-workspace
public type GetWorkspaceQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # A comma-separated list of optional elements to include in the response:
    #   * **source** - adds the Source object indicating which object the folder was created from, if any
    #   * **distributionLink**
    #   * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned.
    #   * **sheetVersion**
    #   * **permalinks**
    "source"|"distributionLink"|"ownerInfo"|"sheetVersion" include?;
    # If set to `true`, the workspace's entire hierarchy of items and folders is returned
    boolean loadAll = false;
};

# Stream result properties
public type StreamResult record {
    # True if more results are available. This is typically due to event counts
    # exceeding the maxCount parameter passed in
    boolean moreAvailable?;
    # This string should be passed back to the next GET events call to obtain
    # subsequent events
    string nextStreamPosition?;
};

# Represents the Headers record for the operation: get-workspace
public type GetWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Standard success response with result code and message
public type SuccessResult record {
    # * '0' Success
    0 resultCode?;
    # Message that indicates the request was successful
    "SUCCESS" message?;
};

# Represents the Queries record for the operation: proofs-get
public type ProofsGetQueries record {
    # A comma-separated list of optional elements to include in the response
    "attachments"|"discussions" include?;
};

# Sheet search response combining search results and response metadata
public type SheetSearchResponse record {
    *SearchResult;
    *SearchResultsResponse;
};

# Event schema for sheet backup request operations
public type SheetRequestBackup record {
    *Event;
    //*SheetBackupRequestEvent;
};

# Response containing a folder object
public type FolderResponse record {
    # Can contain dashboards, folders, reports, sheets, or templates
    Folder result?;
};

# MiniUser Object
public type MiniUser record {
    # Read-only display name of the user
    string name?;
    # Email address of the user
    string email?;
};

# Array of group member objects
public type GroupMemberArray GroupMember[];

# Object representing a checkbox
public type CheckboxObjectValue record {
    # true if checked; false otherwise
    boolean value?;
    # Object type identifier, always 'CHECKBOX'
    "CHECKBOX" objectType?;
};

# Paginated response for contact list data with index results
public type PaginatedIndexResponse record {
    *IndexResult;
    *ContactListData;
};

# Container object holding an array of discussion threads
public type DiscussionListData record {
    # list of discussions
    Discussion[] data?;
};

# Response wrapper containing a proof request object
public type ProofRequestResponse record {
    # Proof request details including status and sender information
    ProofRequest result?;
};

# Dashboard creation event combining base event and dashboard-specific data
public type DashboardCreate record {
    *Event;
   // *DashboardCreateEvent;
};

# Array of share objects for a sheet
public type SheetSharesList Share[];

# Represents the Headers record for the operation: add-crosssheet-reference
public type AddCrosssheetReferenceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Container for a list of share objects returned from sharing operations
public type ShareListResult record {
    # Array of share objects containing sharing permissions and details
    Share[] result?;
};

# Request body accepting either a single row or collection of rows
public type SheetIdRowsBody Row|SheetRowCollection;

# Response containing array of sheet objects
public type SheetListResponse record {
    # Array of sheet objects returned in the response
    SchemasSheet[] data?;
};

# Represents the Headers record for the operation: update-sight-share
public type UpdateSightShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Task dependency relationship with timing and critical path information
public type Predecessor record {
    # In a project sheet, represents a value in a duration cell, or a lag value of a predecessor
    Duration lag?;
    # True if this predecessor is in the critical path
    boolean inCriticalPath?;
    # True if the row referenced by rowId is not a valid row in this sheet, or there is a circular reference (displayed in the Smartsheet app as "#REF") Omitted if false
    boolean invalid?;
    # Type of the predecessor:
    #  * FF (Finish-to-Finish) - finish at the same time the predecessor finishes.
    #  * FS (Finish-to-Start) - start after the predecessor finishes.
    #  * SF (Start-to-Finish) - finish before the predecessor starts.
    #  * SS (Start-to-Start) - start at the same time the predecessor starts
    "FF"|"FS"|"SF"|"SS" 'type?;
    # The row number of the predecessor row. Omitted if invalid is true
    decimal rowNumber?;
    # The Id of the predecessor row
    decimal rowId?;
};

# Represents the Headers record for the operation: get-group
public type GetGroupHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Attachment creation event combining base event and attachment-specific data
public type AttachmentCreate record {
    *Event;
    //*AttachmentCreateEvent;
};

# Represents the Headers record for the operation: createWebhook
public type CreateWebhookHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: delete-workspace
public type DeleteWorkspaceHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response object for group operations combining generic result and group data
public type GroupOperationResponse record {
    *GenericResult;
    *GroupResult;
};

# Represents the Headers record for the operation: list-report-shares
public type ListReportSharesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Event schema for account sheet listing operations
public type AccountListSheets record {
    *Event;
    //*AccountSheetListEvent;
};

# Represents the Headers record for the operation: row-discussions-create
public type RowDiscussionsCreateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Additional details for report attachment send events
public type ReportSendAsAttachmentAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # The format in which the report was sent
    "excel"|"pdf"|"pdf_gantt"|"pdf_calendar" formatType?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the `recipientGroupId` property below isn't included)
    string recipientEmail?;
};

# Represents the Headers record for the operation: delete-favorites-by-type-and-id
public type DeleteFavoritesByTypeAndIdHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # UserId of the user
    @http:Header {name: "x-smar-sc-actor-id"}
    string xSmarScActorId?;
};

# Triggered when a group name is updated. 
public type GroupRenameEvent record {
    # The action applied to the specified object
    "RENAME" action?;
    # Additional details for group rename events including user and name changes
    GroupRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

# Represents the Queries record for the operation: import-sheet-into-folder
public type ImportSheetIntoFolderQueries record {
    # Desired name of the sheet
    string sheetName;
    # A zero-based integer indicating the row number to use for column names. Rows before this are omitted.
    # If not specified, the default values are Column1, Column2, etc
    decimal headerRowIndex?;
    # A zero-based integer indicating the column to designate as primary
    decimal primaryColumnIndex = 0;
};

# Represents the Queries record for the operation: update-rows
public type UpdateRowsQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # When specified with a value of true, enables partial success for this bulk operation. See [Bulk operations > Partial success](/api/smartsheet/guides/advanced-topics/scalability-options) for more information
    boolean allowPartialSuccess = false;
    # You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    boolean overrideValidation = false;
};

# Search operation results with items and total count
public type SearchResult record {
    # Array of SearchResultItem objects.
    SearchResultItem[] results?;
    # Total number of search results.
    decimal totalCount?;
};

# Triggered when a dashboard is deleted
public type DashboardDeleteEvent record {
    # The action applied to the specified object
    "DELETE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Represents the Headers record for the operation: list-search
public type ListSearchHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Image URL reference for inline body items
public type InlineBodyItemsApplicationjsonimageurls ImageUrl;

# Represents the Queries record for the operation: delete-favorites-by-type
public type DeleteFavoritesByTypeQueries record {
    # A comma-separated list of Ids of the favorited item
    string objectIds;
};

# Event schema for sheet purge operations
public type SheetPurge record {
    *Event;
    //*SheetPurgeEvent;
};

# Event schema for sheet row copy operations
public type SheetCopyRow record {
    *Event;
    //*SheetCopyRowEvent;
};

# Request body for group member operations - single member or array
public type GroupIdMembersBody GroupMember|GroupMemberArray;

# Triggered when an attachment is **directly** (i.e. instead of indirectly as part of another operation) sent by email to user(s) or user group(s). 
# 
# An individual `ATTACHMENT - SEND` event is issued for each user or user group listed as recipient
public type AttachmentSendEvent record {
    # The action applied to the specified object
    "SEND" action?;
    # Additional details for attachment send events
    AttachmentSendAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ATTACHMENT" objectType?;
};

# Triggered when a report is viewed in the UI or loaded through the API
public type ReportLoadEvent record {
    # The action applied to the specified object
    "LOAD" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# The base object for Event Reporting events. 
# 
# > **Note:** Event Reporting is a premium add-on available for Enterprise and Advanced Work Management plans. For details on the Event Reporting add-on, please contact our <a href="https://www.smartsheet.com/contact/sales" target="_blank" rel="noopener noreferrer">Sales Team</a>.
# 
# All [event types](/api/smartsheet/event-types) include the Event properties and override the following properties:
# 
# - `objectType` (string)
# - `action` (string)
# - `additionalDetails` (object)
# 
# See [Event types](/api/smartsheet/event-types) for event descriptions and example event response objects
public type Event record {
    # Unique event identifier
    string eventId?;
    # Name of the access token embedded in the request. This property is omitted
    # if there's no access token in the request (i.e., it isn't an API call) or
    # if the access token wasn't given a name when created (only access tokens
    # generated via the Smartsheet desktop UI can be given a name at creation
    # time)
    string accessTokenName?;
    # The action applied to the specified object, such as CREATE, UPDATE, or DELETE.
    # 
    # See [Event types](/api/smartsheet/event-types) for actions associated with each event object type
    string action?;
    # User whose authentication credential is embedded in the request that
    # initiated the event. For example, if the request is an API call with an
    # access token then requestUserId identifies the user whose data can be
    # accessed via the access token (i.e., the user who authorized the creation
    # of the access token). On the other hand, if the request comes from a UI
    # session, then requestUserId identifies the user logged-in to the UI
    decimal requestUserId?;
    # Identifies the client or user agent used to initiate the action
    "WEB_APP"|"MOBILE_IOS"|"MOBILE_ANDROID"|"API_UNDEFINED_APP"|"API_INTEGRATED_APP"|"API_ODBC_DRIVER" 'source?;
    # Container object for additional event-specific properties. Properties depend upon the event type, but all events include an `emailAddress` property, representing the user responsible for the event. 
    # 
    # See [Event types](/api/smartsheet/event-types) for event details, including event-specific `additionalDetails` properties and example event response objects
    EventAdditionalDetails additionalDetails?;
    # User assumed as the one who initiated the event. Usually the userId
    # property and the requestUserId property (below) have the same value.
    # However, if the request is an API call with Assume-User header then the
    # userId property identifies the user whose email matches the value in the
    # Assume-User header
    decimal userId?;
    # The identifier of the object impacted by the event
    string objectId?;
    # The type of Smartsheet resource object impacted by the event.
    # 
    # See [Event types](/api/smartsheet/event-types) for all the event object types
    string objectType?;
    # Date and time of the event. Defaults to ISO-8601 format. See dates and
    # times for more information
    string eventTimestamp?;
};

# Additional details for form activation events including user and sheet info
public type FormActivateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the form's sheet
    @constraint:Int {minValue: 0}
    int sheetId?;
};

# Object containing a list of strings to choose from
public type MultiPicklistObjectValue record {
    # List of strings to choose from
    string[] values?;
    # Object type identifier - always 'MULTI_PICKLIST'
    "MULTI_PICKLIST" objectType?;
};

# CrossSheetReference object to create with specified cell range
public type CrossSheetReferenceRequestWithColumnAndRowIds record {
    # Defines beginning edge of range when specifying one or more rows. Must be used with endRowId. To specify an entire row, omit the startColumnId and endColumnId parameters
    decimal startRowId?;
    # Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References
    string name?;
    # Defines beginning edge of range when specifying one or more columns. Must be used with endColumnId. To specify an entire column, omit the startRowId and endRowId parameters
    decimal startColumnId?;
    # Sheet Id of source sheet
    decimal sourceSheetId?;
    # Defines ending edge of range when specifying one or more columns. Must be used with startColumnId. To specify an entire column, omit the startRowId and endRowId parameters
    decimal endColumnId?;
    # Defines ending edge of range when specifying one or more rows. Must be used with startRowId. To specify an entire row, omit the startColumnId and endColumnId parameters
    decimal endRowId?;
};

# Details for dashboard share addition including user, access level, and group info
public type DashboardAddShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the user. 
    # 
    # Note that this access level represents the access level that has been granted to the user via group membership; it is not the user's effective access level for the dashboard
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group the user was added to
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the dashboard is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Union type representing all possible Smartsheet API operations
public type ApiOperationUnion AccesstokenAuthorize|AccesstokenRefresh|AccesstokenRevoke|AccountBulkUpdate|AccountDownloadLoginHistory|AccountDownloadPublishedItemsReport|AccountDownloadSheetAccessReport|AccountDownloadUserList|AccountImportUsers|AccountListSheets|AccountRename|AccountUpdateMainContact|AttachmentCreate|AttachmentDelete|AttachmentLoad|AttachmentSend|AttachmentUpdate|DashboardAddPublish|DashboardAddShare|DashboardAddShareMember|DashboardAddWorkspaceShare|DashboardCreate|DashboardDelete|DashboardLoad|DashboardMove|DashboardPurge|DashboardRemovePublish|DashboardRemoveShare|DashboardRemoveShareMember|DashboardRemoveWorkspaceShare|DashboardRename|DashboardRestore|DashboardSaveAsNew|DashboardTransferOwnership|DashboardUpdate|DiscussionCreate|DiscussionDelete|DiscussionSend|DiscussionSendcomment|DiscussionUpdate|FolderCreate|FolderDelete|FolderExport|FolderRename|FolderRequestBackup|FolderSaveAsNew|FormActivate|FormCreate|FormDeactivate|FormDelete|FormUpdate|GroupAddMember|GroupCreate1|GroupDelete|GroupDownloadSheetAccessReport|GroupRemoveMember|GroupRename|GroupTransferOwnership|GroupUpdate1|ReportAddShare|ReportAddShareMember|ReportAddWorkspaceShare|ReportCreate|ReportDelete|ReportExport|ReportLoad|ReportMove|ReportPurge|ReportRemoveShare|ReportRemoveShareMember|ReportRemoveWorkspaceShare|ReportRename|ReportRestore|ReportSaveAsNew|ReportSendAsAttachment|ReportTransferOwnership|ReportUpdate|SheetAddShare|SheetAddShareMember|SheetAddWorkspaceShare|SheetCopyRow|SheetCreate|SheetCreateCellLink|SheetDelete|SheetExport|SheetLoad|SheetMove|SheetMoveRow|SheetPurge|SheetRemoveShare|SheetRemoveShareMember|SheetRemoveWorkspaceShare|SheetRename|SheetRequestBackup|SheetRestore|SheetSaveAsNew|SheetSaveAsTemplate|SheetSendAsAttachment|SheetSendRow|SheetTransferOwnership|SheetUpdate|UpdateRequestCreate|UserAcceptInvite|UserAddToAccount|UserDeclineInvite|UserDownloadSheetAccessReport|UserRemoveFromAccount|UserRemoveFromGroups|UserRemoveShares|UserSendInvite|UserSendPasswordReset|UserTransferOwnedGroups|UserTransferOwnedItems|UserUpdateUser|WorkspaceAddShare|WorkspaceAddShareMember|WorkspaceCreate|WorkspaceCreateRecurringBackup|WorkspaceDelete|WorkspaceDeleteRecurringBackup|WorkspaceExport|WorkspaceRemoveShare|WorkspaceRemoveShareMember|WorkspaceRename|WorkspaceRequestBackup|WorkspaceSaveAsNew|WorkspaceTransferOwnership|WorkspaceUpdateRecurringBackup;

# Container object holding an array of attachment items
public type AttachmentListData record {
    # list of attachments
    Attachment[] data?;
};

# Response containing sheet operation result
public type SheetResultResponse record {
    # Complete sheet object with properties, settings, and content data
    Sheet result?;
};

# Response schema combining index results with proof attachment data
public type ProofAttachmentListResponse record {
    *IndexResult;
    *ProofAttachmentListData;
};

# Represents the Queries record for the operation: list-org-sheets
public type ListOrgSheetsQueries record {
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
};

# Represents the Queries record for the operation: get-contact
public type GetContactQueries record {
    # A comma-separated list of optional elements to include in the response:
    #   * **profileImage**
    "profileImage" include?;
};

# Additional details for folder backup requests including attachment options
public type FolderRequestBackupAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether attachments should be included in the recurring backup
    boolean includeAttachments?;
    # Indicates whether an email should be sent to the workspace's owner every time a recurring backup completes
    boolean sendCompletionEmail?;
};

# Event schema for report restoration operations
public type ReportRestore record {
    *Event;
    //*ReportRestoreEvent;
};

# Response for workspace operations including import results
public type WorkspaceOperationResponse record {
    *GenericResult;
    *SheetImportResult;
};

# Represents the Headers record for the operation: updateSheet
public type UpdateSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Details of an update request sent to recipients including status and content
public type SentUpdateRequest record {
    # Recipient object
    Recipient sentTo?;
    # Indicates whether the attachments were included in the email
    boolean includeAttachments?;
    # The Ids of rows where an update is requested
    decimal[] rowIds?;
    # The Ids of columns included in the request
    decimal[] columnIds?;
    # The Id of the originating update request
    decimal updateRequestId?;
    # The subject of the email
    string subject?;
    # The Id of the sent update request
    decimal id?;
    # The date and time for when the sent update request was sent to the recipient
    Timestamp sentAt?;
    # The message of the email. Max 10000 characters
    string message?;
    # Indicates whether the discussions were included in the email
    boolean includeDiscussions?;
    # `User` object containing `name` and `email` of the sender
    MiniUser sentBy?;
    # The status of the sent update request
    "CANCELED"|"COMPLETE"|"PENDING" status?;
};

# Represents the Queries record for the operation: update-sight-share
public type UpdateSightShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Event schema for dashboard share addition operations
public type DashboardAddShare record {
    *Event;
   // *DashboardShareAddEvent;
};

# Additional details for sheet export events including user email and format type
public type SheetExportAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The format that the sheet was exported in "png_gantt" (gantt image), "mspdi" (Microsoft Project), "excel", or "pdf"
    "png_gantt"|"mspdi"|"excel"|"pdf" formatType?;
};

# Event schema for report rename operations combining base event and rename details
public type ReportRename record {
    *Event;
   // *ReportRenameEvent;
};

# Represents the Headers record for the operation: list-summary-fields-paginated
public type ListSummaryFieldsPaginatedHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a user sends selected sheet row(s) by email to user(s) or user group(s). 
# 
# An individual `SHEET - SEND_ROW` event is issued for each user or user group listed as recipient
public type SheetSendRowEvent record {
    # The action applied to the specified object
    "SEND_ROW" action?;
    # Additional details for row sending operations
    SheetSendRowAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Sheet name
public type Name string;

# Triggered when a sheet is created (inserted)
public type SheetCreateEvent record {
    # The action applied to the specified object
    "CREATE" action?;
    # Additional metadata for sheet creation events
    SheetCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Headers record for the operation: sendReportViaEmail
public type SendReportViaEmailHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: share-sight
public type ShareSightQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
};

# Triggered when a dashboard is deleted from the deleted items bin
public type DashboardPurgeEvent record {
    # The action applied to the specified object
    "PURGE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Row object containing cells, metadata, and position information within a sheet
public type GetRowObject record {
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Indicates whether the row is expanded or collapsed
    boolean expanded?;
    # Cells objects
    CellObjectForRows[] cells?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # Parent sheet Id
    decimal sheetId?;
    # Row Id
    decimal id?;
    # Row number within the sheet
    @constraint:Number {minValue: 1}
    decimal rowNumber?;
};

# Represents the Queries record for the operation: share-sight-get
public type ShareSightGetQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Container schema wrapping webhook result data
public type WebhookResultData record {
    # The webhook object
    Webhook result?;
};

# Triggered when a report is moved between workspaces and/or folders
public type ReportMoveEvent record {
    # The action applied to the specified object
    "MOVE" action?;
    # Additional details for report move events including user and location data
    ReportMoveAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Represents the Headers record for the operation: cellHistory-get
public type CellHistoryGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: import-sheet-into-folder
public type ImportSheetIntoFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    @http:Header {name: "Content-Disposition"}
    string contentDisposition?;
    # Required for POST request to import a sheet from CSV/XLSX file.
    # * For CSV files, use: Content-Type: text/csv
    # * For XLSX files, use: Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
    @http:Header {name: "Content-Type"}
    "text/csv"|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" contentType;
};

# Response containing indexed sheet listing results
public type SheetIndexResponse record {
    *IndexResult;
    *SheetListResponse;
};

# Event schema for report move operations combining base event and move details
public type ReportMove record {
    *Event;
   // *ReportMoveEvent;
};

# A list of fieldIds corresponding to all summary fields that were successfully deleted
public type SummaryFieldDeleteResponse record {
    # Array of numeric identifiers for deleted summary fields
    decimal[] result?;
};

# Image metadata including dimensions, temporary URL, and error information
public type ImageUrl record {
    # Image Id
    string imageId?;
    # Image width in pixels
    decimal width?;
    # The error caused by the failed item
    Error 'error?;
    # Temporary URL that can be used to retrieve the image. This attribute can be present in a response but is never specified in a request
    string url?;
    # Image height in pixels
    decimal height?;
};

# Represents the Headers record for the operation: move-sheet
public type MoveSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: get-workspace-folders
public type GetWorkspaceFoldersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: proofs-get
public type ProofsGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Paginated result container for workspace listings with deprecated pagination info
public type IndexResultWorkspaces record {
    # **DEPRECATED - As early as the sunset date specified in this 
    # [Changelog entry](/api/smartsheet/changelog#2025-08-04), this response property will not be part 
    # of the response.**
    # 
    # The current page in the full result set that the data array represents.
    # NOTE when a page number greater than totalPages is requested, the last
    # page is instead returned
    # 
    # # Deprecated
    @deprecated
    decimal pageNumber?;
    # **DEPRECATED - As early as the sunset date specified in this 
    # [Changelog entry](/api/smartsheet/changelog#2025-08-04), this response property will not be part 
    # of the response.**
    # 
    # The total number of pages in the full result set. Only present when
    # using page-based pagination
    # 
    # # Deprecated
    @deprecated
    decimal totalPages?;
    # **DEPRECATED - As early as the sunset date specified in this 
    # [Changelog entry](/api/smartsheet/changelog#2025-08-04), this response property will not be part 
    # of the response.**
    # 
    # The number of items in a page. Omitted if there is no limit to page size
    # (and hence, all results are included). Unless otherwise specified, this
    # defaults to 100 for most endpoints. Only present when using page-based pagination
    # 
    # # Deprecated
    @deprecated
    decimal? pageSize?;
    # **DEPRECATED - As early as the sunset date specified in this 
    # [Changelog entry](/api/smartsheet/changelog#2025-08-04), this response property will not be part 
    # of the response.**
    # 
    # The total number of items in the full result set. Only present when
    # using page-based pagination
    # 
    # # Deprecated
    @deprecated
    decimal totalCount?;
};

# Represents the Headers record for the operation: update-summary-fields
public type UpdateSummaryFieldsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: get-folder-children
public type GetFolderChildrenHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Container for a list of Group objects
public type GroupListDataAlt record {
    # List of Groups
    Group[] data?;
};

# Dashboard result object with access level, permalink, and name properties
public type SightResult SightName;

# Additional details for form creation events including email and sheet info
public type FormCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Name of the form
    string formName?;
    # Id of the form's sheet
    @constraint:Int {minValue: 0}
    int sheetId?;
};

# Represents the Headers record for the operation: discussions-create
public type DiscussionsCreateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Event schema for dashboard purge operations
public type DashboardPurge record {
    *Event;
    //*DashboardPurgeEvent;
};

# Response containing search results from Smartsheet content
public type SearchResultsResponse record {
    # Array of search result items matching the query criteria
    SearchResultItem[] result?;
};

# Array of workspace sharing permissions
public type WorkspaceSharesList Share[];

# Array of the options available for the column
public type Options string[];

# Represents the Headers record for the operation: list-groups
public type ListGroupsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Event schema for user invitation acceptance operations
public type UserAcceptInvite record {
    *Event;
    //*UserAcceptInviteEvent;
};

# Represents the Headers record for the operation: list-filtered-events
public type ListFilteredEventsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Strongly recommended to make sure payload is compressed. Must be set to one of the following values:
    # * deflate
    # * gzip
    @http:Header {name: "Accept-Encoding"}
    "deflate"|"gzip" acceptEncoding?;
};

# Triggered when a group or user is added to the sheet's sharing list, or when a group or user's share permissions are changed
public type SheetShareAddEvent record {
    # The action applied to the specified object
    "ADD_SHARE" action?;
    # Additional details for sheet sharing events including user and access level
    SheetAddShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Triggered when a user is removed from a group that a workspace has been shared to via the workspace's sharing list, or via a workspace's sharing list. 
# 
# If a workspace has been shared to a group directly via the workspace's sharing list, and via a workspace's sharing list, then an event will be generated for each of these shares
public type WorkspaceShareRemovalEvent record {
    # The action applied to the specified object
    "REMOVE_SHARE_MEMBER" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Triggered when a row-level, grid-level, or workspace-level comment is added
public type DiscussionCreateEvent record {
    # The action applied to the specified object
    "CREATE" action?;
    # Additional details for discussion creation events
    DiscussionCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DISCUSSION" objectType?;
};

# Sheet object with access level, name, ID, and permalink properties
public type ComponentsSchemasSheet record {
    # Permission level for user access control
    AccessLevel accessLevel?;
    # Sheet name
    Name name?;
    # Sheet Id
    Id id?;
    # URL that represents a direct link to the sheet in Smartsheet
    Permalink permalink?;
};

# Represents the Queries record for the operation: list-summary-fields-paginated
public type ListSummaryFieldsPaginatedQueries record {
    # A comma-separated list of elements to include in the response.
    # * **format**: includes format info for cells, rows, and summary fields
    # * **writerInfo**: includes createdBy and modifiedBy attributes for rows and summary fields
    "format"|"writerInfo" include?;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # A comma-separated list of elements to not include in the response.
    # * **displayValue**: excludes displayValue info for cells, rows, and summary fields
    # * **image**: excludes image attributes for cells and summary fields
    # * **imageAltText**: excludes alt text for cells and summary fields
    "displayValue"|"image"|"imageAltText" exclude?;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Event schema for account user list download operations
public type AccountDownloadUserList record {
    *Event;
   // *UserListDownloadEvent;
};

# Represents the Headers record for the operation: comment-get
public type CommentGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Event schema for workspace share addition operations
public type WorkspaceAddShare record {
    *Event;
   //*WorkspaceShareAddEvent;
};

# Triggered when a user sends a report as email attachment to user(s) or user group(s). 
# 
# An individual `REPORT - SEND_AS_ATTACHMENT` event is issued for each user or user group listed as recipient
public type ReportAttachmentSendEvent record {
    # The action applied to the specified object
    "SEND_AS_ATTACHMENT" action?;
    # Additional details for report attachment send events
    ReportSendAsAttachmentAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Triggered when a user exports the workspace
public type WorkspaceExportEvent record {
    # The action applied to the specified object
    "EXPORT" action?;
    # Additional details for workspace export events including format type
    WorkspaceExportAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Container for an array of summary field objects
public type SummaryFieldListData record {
    # List of Summary Fields
    SummaryField[] data?;
};

# Represents the Headers record for the operation: update-workspace-share
public type UpdateWorkspaceShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a group is deleted
public type GroupDeleteEvent record {
    # The action applied to the specified object
    "DELETE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

# Represents the Headers record for the operation: updateWebhook
public type UpdateWebhookHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Event triggered when an account is renamed
public type AccountRename record {
    *Event;
    //*AccountRenameEvent;
};

# CrossSheetReference object to create which will refer to the entire rows in the range from startRowId to endRowId
public type CrossSheetReferenceRequestWithRowIds record {
    # Defines beginning edge of range when specifying one or more rows. Must be used with endRowId
    decimal startRowId?;
    # Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References
    string name?;
    # Sheet Id of source sheet
    decimal sourceSheetId?;
    # Defines ending edge of range when specifying one or more rows. Must be used with startRowId
    decimal endRowId?;
};

# Triggered when an access token is revoked
public type AccessTokenRevokeEvent record {
    # The action applied to the specified object
    "REVOKE" action?;
    # Additional details for access token revocation events
    AccesstokenRevokeAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCESS_TOKEN" objectType?;
};

# Represents the Headers record for the operation: update-asset-share
public type UpdateAssetShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Column title
public type Title string;

# API response wrapper containing a sheet object
public type SheetResult record {
    # Sheet object with access level, name, ID, and permalink properties
    ComponentsSchemasSheet result?;
};

# Represents the Headers record for the operation: proofs-update
public type ProofsUpdateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Event triggered when a folder is renamed
public type FolderRename record {
    *Event;
    //*FolderRenameEvent;
};

# Represents the Queries record for the operation: list-search
public type ListSearchQueries record {
    # When specified with a value of **favoriteFlag**, response indicates which returned items are favorites.  favorite -- dashboards, folders, reports, sheets, templates, and workspaces will have the property favorite: true parentObjectFavorite -- attachments, discussions, summary fields, and rows will have the property parentObjectFavorite: true
    string include = "";
    # When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version
    Timestamp modifiedSince?;
    # Text with which to perform the search. Enclose in double-quotes for an exact search
    string query;
    # **Deprecated** When specified with a value of **personalWorkspace**, limits the response to only those items in the user's workspaces
    # 
    # # Deprecated
    @deprecated
    string location = "";
    # If search fails, try using an array for each type of this comma-separated list of search filters
    ("attachments"|"cellData"|"comments"|"folderNames"|"reportNames"|"sheetNames"|"sightNames"|"summaryFields"|"templateNames"|"workspaceNames")[] scopes?;
};

# Response schema for discussion creation operations
public type DiscussionCreateResponse record {
    *GenericResult;
    # Discussion thread containing comments and metadata for sheets or rows
    Discussion result?;
};

# Container for accessible reports list with metadata
public type ReportAccessListData record {
    # List of all accessible reports, referenced by their ID, name, access level, and summary report flag values
    ReportSummaryData[] data?;
};

# Response schema for listing attachments with pagination and result data
public type AttachmentIndexResponse record {
    *IndexResult;
    *AttachmentListData;
};

# Container object holding an array of proof items
public type ProofListData record {
    # list of all proofs
    Proof[] data?;
};

# Response schema for webhook operations combining result and webhook data
public type WebhookOperationResponse record {
    *Result;
    *WebhookResultData;
};

# Additional details for sheet attachment send events
public type SheetSendAsAttachmentAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Single ID of a user group explicitly included in the recipient list. (This property is included only if the `recipientEmail` property above isn't included)
    @constraint:Int {minValue: 0}
    int recipientGroupId?;
    # The format in which the sheet was sent
    "excel"|"pdf"|"pdf_gantt"|"pdf_calendar" formatType?;
    # Single email address either of a user explicitly included in the recipient list or of the sender (when *CC sender* is requested). (This property is included only if the `recipientGroupId` property below isn't included)
    string recipientEmail?;
};

# Represents the Headers record for the operation: row-get
public type RowGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Additional details for report export events
public type ReportExportAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # The format that the report was exported in "png_gantt" (gantt image), "mspdi" (Microsoft Project), "excel", or "pdf"
    "png_gantt"|"mspdi"|"excel"|"pdf" formatType?;
};

# Smartsheet account information
public type Account record {
    # Account name
    string name?;
    # Account Id
    decimal id?;
};

# Represents the Queries record for the operation: import-sheet-into-sheets-folder
public type ImportSheetIntoSheetsFolderQueries record {
    # Desired name of the sheet
    string sheetName;
    # A zero-based integer indicating the row number to use for column names. Rows before this are omitted.
    # If not specified, the default values are Column1, Column2, etc
    decimal headerRowIndex?;
    # A zero-based integer indicating the column to designate as primary
    decimal primaryColumnIndex = 0;
};

# Response object containing paginated list of templates
public type TemplateListResponse record {
    *IndexResult;
    *TemplateListData;
};

# Workspace creation event combining base event and workspace-specific data
public type WorkspaceCreate record {
    *Event;
    //*WorkspaceCreateEvent;
};

# Represents the Headers record for the operation: delete-sheet-share
public type DeleteSheetShareHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: create-home-folder
public type CreateHomeFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Group member addition event combining base event and member details
public type GroupAddMember record {
    *Event;
    //*GroupMemberAddEvent;
};

# Represents the Queries record for the operation: proofs-getVersions
public type ProofsGetVersionsQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Triggered when a group's ownership is transferred
public type GroupOwnershipTransferEvent record {
    # The action applied to the specified object
    "TRANSFER_OWNERSHIP" action?;
    # Additional details for group ownership transfer events
    GroupTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

# Response containing an array of user's favorite items
public type FavoriteListData record {
    # Array of favorite objects for the authenticated user
    Favorite[] data?;
};

# If **true**, a lightweight version of the sheet is published without row attachments and discussions
public type ReadOnlyLiteEnabled boolean;

# Additional details for workspace share member addition events
public type WorkspaceAddShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the user. 
    # 
    # Note that this access level represents the access level that has been granted to the user via group membership; it is not the user's effective access level for the workspace
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group the user was added to
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the group
    @constraint:Int {minValue: 0}
    int userId?;
};

# Represents the Headers record for the operation: listImageUrls
public type ListImageUrlsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Queries record for the operation: update-report-share
public type UpdateReportShareQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
};

# Represents the Headers record for the operation: attachments-get
public type AttachmentsGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: row-attachments-attachFile
public type RowAttachmentsAttachFileHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Response schema for shared secret reset operations
public type SharedSecretResetResponse record {
    *Result;
    *SharedSecretResponse;
};

# Represents the Headers record for the operation: list-contacts
public type ListContactsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Additional details for access token authorization events
public type AccesstokenAuthorizeAdditionalDetails record {
    # Date and time when this access token expires
    string tokenExpirationTimestamp?;
    # Email address of the user responsible for the event
    string emailAddress;
    # The name of the app to which this access token was granted. (Only included in cases when the access token was generated for an app)
    string appName?;
    # Comma-delimited list of access scopes granted to this access token. See these [access scopes](/api/smartsheet/guides/advanced-topics/oauth#access-scopes) for details
    string accessScopes?;
    # Name of the newly created access token. (Only included in cases when a name was given to the token)
    string tokenName?;
    # Four or more characters used as a mnemonic to represent this access token. Even though this value serves as a visual token differentiator, this value isn't an Id because it isn't guaranteed to be unique across all tokens. This value is the same displayed by Smartsheet UI for each access token listed under Apps & Integrations > API Access
    string tokenDisplayValue?;
    # The client ID of the app to which this access token was granted. (Only included in cases when the access token was generated for an app)
    string appClientId?;
};

# Additional details for workspace creation events
public type WorkspaceCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of workspace that was copied to create the new workspace. (Only included if the workspace was created as a result of a *save as new* or *copy*)
    @constraint:Int {minValue: 0}
    int sourceWorkspaceId?;
    # Name of the workspace
    string workspaceName?;
};

# SummaryField object to create
public type SummaryFieldCreateRequest record {
    # Hyperlink object containing URL or references to sheets, reports, or dashboards
    Hyperlink hyperlink?;
    # Represents an image with metadata including dimensions, alt text, and ID
    Image image?;
    # When applicable for PICKLIST column type
    PropertiesSymbol symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST
    PropertiesContactOptions contactOptions?;
    # The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it
    Format format?;
    # Field index or position. This number is zero-based
    Index index?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # Arbitrary name, must be unique within summary
    PropertiesTitle title?;
    # Column property data types supported in Smartsheet
    PropertiesType 'type?;
    # When applicable for PICKLIST column type. Array of the options available for the field
    PropertiesOptions options?;
    # The formula for a cell, if set
    Formula formula?;
    # Indicates whether the field is locked
    Locked locked?;
    # Indicates whether summary field values are restricted to the type
    Validation validation?;
};

# Details for workspace sharing events including user, access level, and IDs
public type WorkspaceAddShareAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates the access level granted to the group or user. 
    # 
    # Note that this access level represents the access level granted by this specific sharing action; it is not the group or user's effective access level for the workspace
    "VIEWER"|"EDITOR"|"EDITOR_SHARE"|"ADMIN" accessLevel?;
    # Id of the group that was added to the workspace's sharing list. (Specific to share to group actions)
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of the user that was added to the workspace's sharing list. (Specific to share to user actions)
    @constraint:Int {minValue: 0}
    int userId?;
};

# Request schema for creating comments with text body
public type CommentCreationRequest record {
    # Comment body
    string text?;
};

# Represents the Queries record for the operation: cellHistory-get
public type CellHistoryGetQueries record {
    # A comma-separated list of elements to copy:
    #   * **columnType** - includes the columnType attribute for each Cell object
    #   * **objectValue** - when used in combination with a level query parameter, includes the email addresses for a multi-contact cell
    "columnType"|"objectValue" include?;
    # Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data
    int level = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Triggered when a member is added to a group
public type GroupMemberAddEvent record {
    # The action applied to the specified object
    "ADD_MEMBER" action?;
    # Details for adding a member to a group, including email and member ID
    GroupAddMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

# Schema containing the current version number of a sheet
public type SheetVersion record {
    # A number that represents the current sheet version
    decimal version?;
};

# Represents the Queries record for the operation: create-sheet-in-sheets-folder
public type CreateSheetInSheetsFolderQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Additional parameter to create a sheet from template.
    # A comma-separated list of elements to copy from the template
    "attachments"|"cellLinks"|"data"|"discussions"|"filters"|"forms"|"ruleRecipients"|"rules" include?;
};

# Cell data structure containing value, display format, and column reference
public type CellObjectForRows record {
    # Visual representation of cell contents, as presented to the user in the UI
    string displayValue?;
    # Only returned if the include query string parameter contains **columnType**
    string columnType?;
    # The Id of the column that the cell is located in
    decimal columnId?;
    # A string, number, or a Boolean value -- depending on the cell type and the data in the cell. Cell values larger than 4000 characters are silently truncated. An empty cell returns no value
    string|decimal|boolean value?;
};

# Represents the Headers record for the operation: updaterequests-update
public type UpdaterequestsUpdateHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: create-sheet-in-sheets-folder
public type CreateSheetInSheetsFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Additional details for dashboard move events including user and location info
public type DashboardMoveAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the parent container of the dashboard. (Specific to move events where a folder containing the dashboard is moved to a folder in a different workspace, indicates that the dashboard has moved to a new workspace but is still within the same folder)
    @constraint:Int {minValue: 0}
    int parentContainerId?;
    # Id of the destination folder for the move event. (Specific to actions where the dashboard was moved to a different folder)
    @constraint:Int {minValue: 0}
    int newParentContainerId?;
    # Name of the destination folder for the move event. (Specific to actions where the dashboard was moved to a different folder)
    string folderName?;
    # Id of the workspace the dashboard is currently in. If the move was between two workspaces the `workspaceId` will be the Id of the destination workspace
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Represents the Headers record for the operation: list-workspaces
public type ListWorkspacesHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Queries record for the operation: get-workspace-folders
public type GetWorkspaceFoldersQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Queries record for the operation: templates-listPublic
public type TemplatesListPublicQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # Level of public template types. 0 refers to only Sheet types, 1 refers to all types
    0|1 level = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Event schema for attachment load operations
public type AttachmentLoad record {
    *Event;
   // *AttachmentLoadEvent;
};

# Triggered when a user sends a sheet as email attachment to user(s) or user group(s). 
# 
# An individual `SHEET - SEND_AS_ATTACHMENT` event is issued for each user or user group listed as recipient
public type SheetSendAttachmentEvent record {
    # The action applied to the specified object
    "SEND_AS_ATTACHMENT" action?;
    # Additional details for sheet attachment send events
    SheetSendAsAttachmentAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Event schema for user removal from groups operation
public type UserRemoveFromGroups record {
    *Event;
    //*UserGroupRemovalEvent;
};

# Response returned after creating a cross-sheet reference
public type CrossSheetReferenceCreateResponse record {
    *Result;
    *CrossSheetReferenceResult;
};

# Represents the Headers record for the operation: templates-listPublic
public type TemplatesListPublicHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Container for a list of alternate email addresses
public type AlternateEmailListData record {
    # list of attachments
    AlternateEmail[] data?;
};

# Response schema for alternate email addition
public type AlternateEmailAddResponse record {
    *GenericResult;
    *AlternateEmailListDataAlt1;
};

# Triggered when an admin downloads sheet access report for a group. This can be done through Group Management console on UI
public type GroupSheetAccessReportEvent record {
    # The action applied to the specified object
    "DOWNLOAD_SHEET_ACCESS_REPORT" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "GROUP" objectType?;
};

# Triggered when the ownership of a report is transferred
public type ReportOwnershipTransferEvent record {
    # The action applied to the specified object
    "TRANSFER_OWNERSHIP" action?;
    # Details for report ownership transfer including old/new owner info
    ReportTransferOwnershipAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Additional details for bulk account updates including user email
public type AccountBulkUpdateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
};

# Specifies the recipient of an [Email]($ref: 'Email.yaml#/components/schemas/Email'). The recipient may be either an individual or a group. To specify an individual, set the **email** attribute; to specify a group, set the **groupId** attribute. Either **email** and **groupId** may be set, but not both
public type RecipientGroup record {
    # The Id of a group recipient
    decimal groupId?;
};

# Triggered when a sheet is viewed in the UI or loaded through the API
public type SheetLoadEvent record {
    # The action applied to the specified object
    "LOAD" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Headers record for the operation: promote-alternate-email
public type PromoteAlternateEmailHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response for sheet operations including creation results
public type SheetOperationResponse record {
    *GenericResult;
    *SheetCreateResponse;
};

# Triggered when an existing sheet is renamed
public type SheetRenameEvent record {
    # The action applied to the specified object
    "RENAME" action?;
    # Sheet rename event details with user email and old/new names
    SheetRenameAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Headers record for the operation: list-org-sheets
public type ListOrgSheetsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Event schema for report deletion operations
public type ReportDelete record {
    *Event;
    //*ReportDeleteEvent;
};

# List response for sent update requests with pagination and data
public type SentUpdateRequestList record {
    *IndexResult;
    *SentUpdateRequestListData;
};

# Represents the Headers record for the operation: import-sheet-into-sheets-folder
public type ImportSheetIntoSheetsFolderHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    @http:Header {name: "Content-Disposition"}
    string contentDisposition?;
    # Required for POST request to import a sheet from CSV/XLSX file.
    # * For CSV files, use: Content-Type: text/csv
    # * For XLSX files, use: Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
    @http:Header {name: "Content-Type"}
    "text/csv"|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" contentType;
};

# Triggered when a discussion (i.e. whole thread of top comment and replies) is **directly** (i.e. instead of indirectly as part of another operation) sent by email to user(s) or user group(s). An individual `DISCUSSION - SEND` event is issued for each user or user group listed as recipient
public type DiscussionSendEvent record {
    # The action applied to the specified object
    "SEND" action?;
    # Additional details for discussion send events including recipients and context
    DiscussionSendAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DISCUSSION" objectType?;
};

# Request body for user alternate email operations (single or multiple)
public type UserIdAlternateemailsBody AddAlternateEmail|AlternateEmailArray;

# Column property data types supported in Smartsheet
public type PropertiesType "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER";

# Core sheet object containing metadata and properties
public type SchemasSheet record {
    # Read-only timestamp value in datetime or numeric format
    Timestamp createdAt?;
    # Permission level for user access control
    AccessLevel accessLevel?;
    # Read-only timestamp value in datetime or numeric format
    Timestamp modifiedAt?;
    # Sheet name
    Name name?;
    # Sheet Id
    Id id?;
    # Source object information including ID and type of originating item
    Source 'source?;
    # URL that represents a direct link to the sheet in Smartsheet
    Permalink permalink?;
    # A number that is incremented every time a sheet is modified
    Version version?;
};

# Container object holding an array of share results
public type ShareResultArray record {
    # Array of share objects returned from the operation
    Share[] result?;
};

# List of proof versions with metadata
public type ProofVersionsList record {
    # list of proof versions
    Proof[] data?;
};

# Represents the Headers record for the operation: list-sights
public type ListSightsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Event schema for workspace share removal operations
public type WorkspaceRemoveShare record {
    *Event;
    //*WorkspaceShareRemovalEventAlt;
};

# Represents the Headers record for the operation: proofs-attachToProof
public type ProofsAttachToProofHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the entire summary, or a list of defined fields and values, for a specific sheet
public type SheetSummary record {
    # Array of summary (or metadata) fields defined on the sheet
    SummaryField[] fields?;
};

# Represents the Headers record for the operation: home-list-folders
public type HomeListFoldersHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response containing sight publication details
public type SightPublishResponse record {
    # Describes the dashboard's publish settings
    SightPublish result?;
};

# Triggered when a sheet is deleted ("Delete Forever") from the deleted items bin
public type SheetPurgeEvent record {
    # The action applied to the specified object
    "PURGE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Event schema for sheet save-as-new operations
public type SheetSaveAsNew record {
    *Event;
    //*SheetSaveAsEvent;
};

# Additional details for updating the main contact of an account
public type AccountUpdateMainContactAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the former main contact
    @constraint:Int {minValue: 0}
    int oldContactUserId?;
    # Id of the new main contact
    @constraint:Int {minValue: 0}
    int newContactUserId?;
};

# Represents the Queries record for the operation: templates-list
public type TemplatesListQueries record {
    # Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1
    decimal accessApiLevel = 0;
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Response containing shared secret operation result
public type SharedSecretResponse record {
    # Object containing a shared secret value for authentication
    SharedSecret result?;
};

# Triggered when a summarized list of all sheets owned by the members of the organization account is generated. This can be done through API
public type AccountSheetListEvent record {
    # The action applied to the specified object
    "LIST_SHEETS" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ACCOUNT" objectType?;
};

# Represents the Queries record for the operation: update-asset-share
public type UpdateAssetShareQueries record {
    # The id of the asset. Used in combination with assetType to determine the asset.
    # 
    # Depending on the asset, this may be a numeric or string value
    string assetId;
    # The type of the asset. Used in combination with assetId to determine the asset
    "sheet"|"report"|"sight"|"workspace"|"collection"|"file" assetType;
};

# Comment
public type CommentRequest record {
    # Comment text
    string text?;
};

# Represents the Queries record for the operation: add-image-summaryField
public type AddImageSummaryFieldQueries record {
    # Url-encoded alternate text for the image
    string altText?;
    # You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking
    boolean overrideValidation = false;
};

# Triggered when an attachment is loaded (i.e. viewed or downloaded)
public type AttachmentLoadEvent record {
    # The action applied to the specified object
    "LOAD" action?;
    # Additional details for attachment load events including user and location
    AttachmentLoadAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "ATTACHMENT" objectType?;
};

# Event triggered when a member is removed from a group
public type GroupRemoveMember record {
    *Event;
   // *GroupMemberRemoveEvent;
};

# Dashboard name container object
public type SightName record {
    # Dashboard name
    string name?;
};

# Additional details for group rename events including user and name changes
public type GroupRenameAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # New name of the group
    string newName?;
    # Old name of the group
    string oldName?;
};

# Represents the Headers record for the operation: update-user-profile-image
public type UpdateUserProfileImageHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Represents the Headers record for the operation: comment-delete
public type CommentDeleteHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a folder is deleted
public type FolderDeleteEvent record {
    # The action applied to the specified object
    "DELETE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

# Event triggered when a member is added to workspace sharing
public type WorkspaceAddShareMember record {
    *Event;
    //*WorkspaceShareMemberAddEvent;
};

# Response for listing cross-sheet references with pagination data
public type CrossSheetReferenceIndexResponse record {
    *IndexResult;
    *CrossSheetReferenceListResponse;
};

# Event triggered when recurring backup is created for workspace
public type WorkspaceCreateRecurringBackup record {
    *Event;
    //*WorkspaceRecurringBackupEvent;
};

# Additional details for sheet move events including user and destination info
public type SheetMoveAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the parent container of the sheet. (Specific to move events where a folder containing the sheet is moved to a folder in a different workspace, indicates that the sheet has moved to a new workspace but is still within the same folder)
    @constraint:Int {minValue: 0}
    int parentContainerId?;
    # Id of the destination folder for the move event. (Specific to actions where the sheet was moved to a different folder)
    @constraint:Int {minValue: 0}
    int newParentContainerId?;
    # Name of the destination folder for the move event. (Specific to actions where the sheet was moved to a different folder)
    string folderName?;
    # Id of the workspace the sheet is currently in. If the move was between two workspaces the `workspaceId` will be the Id of the destination workspace
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Additional details for row move events including source/destination sheets
public type SheetMoveRowAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Indicates whether the row(s) were moved with their respective attachments
    boolean includeAttachments?;
    # Id of sheet from where the rows moved. (Only included when the `objectId` property contains the Id of the destination sheet)
    @constraint:Int {minValue: 0}
    int sourceSheetId?;
    # Number of rows moved
    @constraint:Int {minValue: 1}
    int rowsMoved?;
    # Id of sheet to where the rows moved. (Only included when the `objectId` property contains the Id of the source sheet)
    @constraint:Int {minValue: 0}
    int destinationSheetId?;
    # Indicates whether the row(s) were moved with their respective discussion comments
    boolean includeDiscussions?;
};

# Triggered when a change is made to a dashboard and the dashboard is saved
public type DashboardUpdateEvent record {
    # The action applied to the specified object
    "UPDATE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Event triggered when a discussion is sent
public type DiscussionSend record {
    *Event;
    //*DiscussionSendEvent;
};

# Pagination metadata for paginated API responses
public type IndexResult record {
    # The current page in the full result set that the data array represents. NOTE when a page number greater than totalPages is requested, the last page is instead returned
    decimal pageNumber?;
    # The total number of pages in the full result set
    decimal totalPages?;
    # The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included). Unless otherwise specified, this defaults to 100 for most endpoints
    decimal? pageSize?;
    # The total number of items in the full result set
    decimal totalCount?;
};

# Triggered when an existing report is updated
public type ReportUpdateEvent record {
    # The action applied to the specified object
    "UPDATE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Event schema for adding a share member to a sheet
public type SheetAddShareMember record {
    *Event;
   // *SheetShareMemberAddEvent;
};

# Event schema for updating account main contact information
public type AccountUpdateMainContact record {
    *Event;
    //*AccountMainContactUpdateEvent;
};

# Represents the Headers record for the operation: deleteSheet
public type DeleteSheetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Request body options for creating cross-sheet references
public type SheetIdCrosssheetreferencesBody CrossSheetReferenceRequestWithColumnIds|CrossSheetReferenceRequestWithRowIds|CrossSheetReferenceRequestWithColumnAndRowIds;

# Container for array of proof discussion objects
public type ProofDiscussionListData record {
    # list of proof discussions
    Discussion[] data?;
};

# Represents the Headers record for the operation: get-user
public type GetUserHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Additional metadata for sheet creation events
public type SheetCreateAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Name of the newly created Sheets
    string sheetName?;
    # Source type for sheet creation: sheet, template, global template, or import
    "sheet"|"template"|"globale_template"|"import" sourceType?;
    # Id of the template used to create the sheet. (Only included if the sheet was created using a template, that is not a global template)
    @constraint:Int {minValue: 0}
    int sourceTemplateId?;
    # Id of sheet that was copied to create the new sheet. (Only included if the sheet was created as a result of a *copy* or *save as new*)
    @constraint:Int {minValue: 0}
    int sourceObjectId?;
    # Id of the global template that was used to create the new sheet (Only included if the sheet was created using a global template)
    @constraint:Int {minValue: 0}
    int sourceGlobalTemplateId?;
};

# Schema for workspace rename events combining base event and rename details
public type WorkspaceRename record {
    *Event;
   //*WorkspaceRenameEvent;
};

# Response object containing an array of share operation results
public type ShareResponseArray record {
    # Array of share response objects
    ShareResponse[] result?;
};

# Triggered when a report is deleted
public type ReportDeleteEvent record {
    # The action applied to the specified object
    "DELETE" action?;
    # Additional details for bulk account updates including user email
    AccountBulkUpdateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "REPORT" objectType?;
};

# Triggered when a group or user is removed from a workspace's sharing list
public type WorkspaceShareRemovalEventAlt record {
    # The action applied to the specified object
    "REMOVE_SHARE" action?;
    # Additional details for workspace share removal events
    WorkspaceRemoveShareAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

# Response object containing share details including access level and scope
public type ShareResponse record {
    # Permission level for user access control
    AccessLevel accessLevel;
    # Group Id if the share is a group share
    decimal groupId?;
    # The scope of this share. One of the following values:
    #   * **ITEM**: an item-level share (that is, the specific object to which the share applies is shared with
    #     the user or group).
    #   * **WORKSPACE**: a workspace-level share (that is, the workspace that contains the asset to which the
    #     share applies is shared with the user or group)
    "ITEM"|"WORKSPACE" scope;
    # If present, the name of the user or group to which the asset is shared
    string name?;
    # The id of the share
    string id;
    # The type of this share. One of the following values: GROUP or USER
    string 'type;
    # User Id if the share is a user share
    decimal userId?;
    # User's primary email address for user shares
    string email?;
};

# Schema for dashboard restore events combining base event and restore details
public type DashboardRestore record {
    *Event;
    //*DashboardRestoreEvent;
};

# Schema for updating column properties including type, title, and validation
public type UpdateColumn record {
    # Array of the options available for the column
    string[] options?;
    # Column index or position. This number is zero-based
    decimal index?;
    # Column Id
    decimal id?;
    # Column title
    string title?;
    # See [Column Types](/api/smartsheet/openapi/columns)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # Indicates whether validation has been enabled for the column (value = **true**)
    boolean validation?;
};

# Represents the Queries record for the operation: update-summary-fields
public type UpdateSummaryFieldsQueries record {
    # Set to true if you want to override the requirement for unique summary field names. Repeated names will be adjusted by appending "(1)" or similar after the field name
    boolean renameIfConflict = false;
};

# Triggered when a user exports or prints the sheet
public type SheetExportEvent record {
    # The action applied to the specified object
    "EXPORT" action?;
    # Additional details for sheet export events including user email and format type
    SheetExportAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "SHEET" objectType?;
};

# Represents the Queries record for the operation: share-asset
public type ShareAssetQueries record {
    # Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails
    boolean sendEmail = false;
    # The id of the asset. Used in combination with assetType to determine the asset.
    # 
    # Depending on the asset, this may be a numeric or string value
    string assetId;
    # The type of the asset. Used in combination with assetId to determine the asset
    "sheet"|"report"|"sight"|"workspace"|"collection"|"file" assetType;
};

# Request body schema for webhook creation combining request and required fields
public type WebhooksBody record {
    *CreateWebhookRequest;
    *WebhookRequiredFields;
};

# Schema for folder export events combining base event and export details
public type FolderExport record {
    *Event;
    //*FolderExportEvent;
};

# Response containing proof request actions with index results
public type ProofRequestActionsResponse record {
    *IndexResult;
    *ProofActionsResponse;
};

# Event schema for form update operations combining base event and form-specific data
public type FormUpdate record {
    *Event;
   // *FormUpdateEvent;
};

# Represents the Headers record for the operation: share-asset
public type ShareAssetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
};

# Represents a favorited Smartsheet item with type and object identifier
public type Favorite record {
    # Type of favorited item: folder, report, sheet, sight, template, or workspace
    "folder"|"report"|"sheet"|"sight"|"template"|"workspace" 'type?;
    # The Id of the favorited item. If type is template, only private sheet-type template Id is allowed
    decimal objectId?;
};

# SummaryField object to update
public type SummaryFieldUpdateRequest record {
    # Hyperlink object containing URL or references to sheets, reports, or dashboards
    Hyperlink hyperlink?;
    # Represents an image with metadata including dimensions, alt text, and ID
    Image image?;
    # When applicable for PICKLIST column type
    PropertiesSymbol symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST
    PropertiesContactOptions contactOptions?;
    # The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it
    Format format?;
    # Field index or position. This number is zero-based
    Index index?;
    # The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly
    ObjectValue objectValue?;
    # Arbitrary name, must be unique within summary
    PropertiesTitle title?;
    # Column property data types supported in Smartsheet
    PropertiesType 'type?;
    # When applicable for PICKLIST column type. Array of the options available for the field
    PropertiesOptions options?;
    # The formula for a cell, if set
    Formula formula?;
    # SummaryField Id
    PropertiesId id?;
    # Indicates whether the field is locked
    Locked locked?;
    # Indicates whether summary field values are restricted to the type
    Validation validation?;
};

# Represents the Headers record for the operation: share-sight-get
public type ShareSightGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# User Object
public type User record {
    # Last login time of the current user
    string lastLogin?;
    # User's last name
    string lastName?;
    # Timestamp of viewing an <a href="https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only" target="_blank" rel="noopener noreferrer">Enterprise Custom Welcome Screen</a> by the current user
    string customWelcomeScreenViewed?;
    # Indicates whether the user is a system admin (can manage user accounts and organization account)
    boolean admin = false;
    # User profile image object with dimensions and image identifier
    ProfileImage profileImage?;
    # User's first name
    string firstName?;
    # Indicates whether the user is a group admin (can create and edit groups)
    boolean groupAdmin = false;
    # User's full name (read-only)
    string name?;
    # Indicates whether the user is a resource viewer (can access resource views)
    boolean resourceViewer = false;
    # User Id
    decimal id?;
    # **SUNSET** - The `sheetCount` attribute now holds the value `-1` and is included only if the retrieved user's `status` is `ACTIVE`
    # 
    # # Deprecated
    @constraint:Number {minValue: -1, maxValue: -1}
    @deprecated
    decimal sheetCount = -1;
    # User's primary email address
    string email?;
    # Indicates whether the user is a licensed user (can create and own sheets)
    boolean licensedSheetCreator = false;
    # User status, set to one of the listed enum values
    "ACTIVE"|"DECLINED"|"PENDING"|"DEACTIVATED" status?;
};

# Object representing a datetime
public type DatetimeObjectValue record {
    # Datetime, in the **date-time** format defined by <a href="https://tools.ietf.org/html/rfc3339#section-5.6" target="_blank" rel="noopener noreferrer">RFC 3339, section 5.6</a>
    string value?;
    # Object type identifier for datetime values, always set to 'DATETIME'
    "DATETIME" objectType?;
};

# Global search response combining search results with empty response
public type GlobalSearchResponse record {
    *SearchResult;
    *EmptyResponse;
};

# Represents the Queries record for the operation: rows-sort
public type RowsSortQueries record {
    # (Optional) Any of the relevant parameters or query parameters listed for [Get Sheet](/api/smartsheet/openapi/sheets/getsheet)
    @http:Query {name: "include&exclude"}
    string includeExclude?;
};

# Triggered when a user is removed from a group that a dashboard has been shared to via the dashboard's sharing list, or via a workspace's sharing list. If a dashboard has been shared to a group directly via the dashboard's sharing list, and via a workspace's sharing list, then an event will be generated for each of these shares
public type DashboardShareMemberRemoveEvent record {
    # The action applied to the specified object
    "REMOVE_SHARE_MEMBER" action?;
    # Additional details for dashboard share member removal events
    DashboardRemoveShareMemberAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "DASHBOARD" objectType?;
};

# Event schema for form deactivation operations combining base and form events
public type FormDeactivate record {
    *Event;
    //*FormDeactivateEvent;
};

# Arbitrary name, must be unique within summary
public type PropertiesTitle string;

# The metadata of a Workspace
public type WorkspaceMetadata record {
    # Read-only timestamp that can be either DateTime or Long format
    Timestamp2 createdAt;
    # Read-only timestamp that can be either DateTime or Long format
    Timestamp2 modifiedAt;
    # Workspace name
    string name;
    # Workspace Id
    int id;
    # URL to the workspace in Smartsheet
    string permalink;
};

# Container for list of proof attachments data
public type ProofAttachmentListData record {
    # list of proof attachments
    Attachment[] data?;
};

# Represents the Headers record for the operation: add-image-summaryField
public type AddImageSummaryFieldHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Should be equal to "attachment" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
    @http:Header {name: "Content-Disposition"}
    string contentDisposition?;
    # Must be set to the size of the file, in bytes. For example to determine file size using in UNIX:
    # $ ls -l ProgressReport.docx
    # 5463 ProgressReport.docx
    @http:Header {name: "Content-Length"}
    int contentLength?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Source object information including ID and type of originating item
public type Source record {
    # The Id of the dashboard, report, sheet, or template from which the enclosing dashboard, report, sheet, or template was created
    decimal id?;
    # **report**, **sheet**, **sight** (aka dashboard), or **template**
    string 'type?;
};

# Represents the Headers record for the operation: proofs-getVersions
public type ProofsGetVersionsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Event schema for report update operations combining base event and report data
public type ReportUpdate record {
    *Event;
    //*ReportUpdateEvent;
};

# Container for a list of automation rules
public type AutomationRuleListData record {
    # list of Automation Rules
    AutomationRule[] data?;
};

# Schema for report send as attachment events
public type ReportSendAsAttachment record {
    *Event;
    //*ReportAttachmentSendEvent;
};

# Response for asset index operations with favorites list data
public type AssetIndexResponse record {
    *IndexResult;
    *FavoriteListData;
};

# Sheet column definition with properties, formatting, and metadata
public type Column record {
    # When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)
    string symbol?;
    # Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**
    ContactOption[] contactOptions?;
    # Indicates whether the column is hidden
    boolean hidden?;
    # The format descriptor (see [Cell formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the **include** query string parameter contains **format** and this column has a non-default format applied to it
    string format?;
    # Column description
    string description?;
    # Column index or position. This number is zero-based
    decimal index?;
    # Column title
    string title?;
    # See [Column Types](/api/smartsheet/openapi/columns)
    "ABSTRACT_DATETIME"|"CHECKBOX"|"CONTACT_LIST"|"DATE"|"DATETIME"|"DURATION"|"MULTI_CONTACT_LIST"|"MULTI_PICKLIST"|"PICKLIST"|"PREDECESSOR"|"TEXT_NUMBER" 'type?;
    # * `0`: CONTACT_LIST, PICKLIST, or TEXT_NUMBER.
    # * `1`: MULTI_CONTACT_LIST.
    # * `2`: MULTI_PICKLIST
    0|1|2 version?;
    # Set of tags to indicate special columns. Each element in the array is set to one of the listed enum values
    ("CALENDAR_END_DATE"|"CALENDAR_START_DATE"|"CARD_DONE"|"GANTT_ALLOCATION"|"GANTT_ASSIGNED_RESOURCE"|"GANTT_DISPLAY_LABEL"|"GANTT_DURATION"|"GANTT_END_DATE"|"GANTT_PERCENT_COMPLETE"|"GANTT_PREDECESSOR"|"GANTT_START_DATE"|"BASELINE_START_DATE"|"BASELINE_END_DATE"|"BASELINE_VARIANCE")[] tags?;
    # Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated
    AutoNumberFormat autoNumberFormat?;
    # Array of the options available for the column
    string[] options?;
    # Display width of the column in pixels
    decimal width?;
    # The formula for the column, if set
    string formula?;
    # Indicates whether the column is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request
    boolean lockedForUser?;
    # See [System Columns](/api/smartsheet/openapi/columns)
    "AUTO_NUMBER"|"CREATED_BY"|"CREATED_DATE"|"MODIFIED_BY"|"MODIFIED_DATE" systemColumnType?;
    # Column Id
    decimal id?;
    # Indicates whether the column is locked. In a response, a value of **true** indicates that the column has been locked by the sheet owner or the admin
    boolean locked?;
    # Indicates whether validation has been enabled for the column (value = **true**)
    boolean validation?;
    # Returned only if the column is the Primary Column (value = **true**)
    boolean primary?;
};

# Represents the Headers record for the operation: discussions-list
public type DiscussionsListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Updates group properties, including name, description, and owner
public type GroupUpdate1 record {
    # name (Optional)
    # 
    # Must be unique within the organization account
    string name?;
    # Description (optional)
    string description?;
    # ownerId (optional)
    # 
    # Id of an admin user to whom the group ownership is transferred
    decimal ownerId?;
};

# Describes the current user's editing permissions for a specific sheet
public type SheetUserPermissions record {
    # One of:
    #   * ADMIN: full control over fields.
    #   * READ_DELETE: sheet is owned by an individual account that doesn't have summary capabilities. If a summary exists, the only possible operations are GET and DELETE fields.
    #   * READ_ONLY.
    #   * READ_WRITE: can edit values of existing fields, but not create or delete fields, nor modify field type
    "ADMIN"|"READ_DELETE"|"READ_ONLY"|"READ_WRITE" summaryPermissions?;
};

# Represents the Headers record for the operation: share-sight
public type ShareSightHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: update-rows
public type UpdateRowsHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Response containing list of proof discussions with index results
public type ProofDiscussionListResponse record {
    *IndexResult;
    *ProofDiscussionListData;
};

# Represents the Queries record for the operation: home-list-folders
public type HomeListFoldersQueries record {
    # The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request
    decimal pageSize = 100;
    # If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified)
    boolean includeAll = false;
    # Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned
    decimal page = 1;
};

# Represents the Headers record for the operation: updaterequests-get
public type UpdaterequestsGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Response object for column modification operations
public type ColumnUpdateResponse record {
    *GenericResult;
    *ColumnUpdateResult;
};

# The metadata of a Folder
public type FolderMetadata record {
    # Read-only timestamp that can be either DateTime or Long format
    Timestamp2 createdAt;
    # Read-only timestamp that can be either DateTime or Long format
    Timestamp2 modifiedAt;
    # Folder name
    string name;
    # Folder Id
    int id;
    # URL to the folder in Smartsheet
    string permalink;
};

# Represents the Headers record for the operation: comment-edit
public type CommentEditHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # Required for POST and PUT requests. Defines the structure for the request body
    @http:Header {name: "Content-Type"}
    string contentType = "application/json";
};

# Contact information with name, ID, and email address
public type Contact record {
    # Contact's full name
    string name?;
    # Contact Id
    string id?;
    # Contact's email address
    string email?;
};

# Represents the Headers record for the operation: delete-favorites-by-type
public type DeleteFavoritesByTypeHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
    # UserId of the user
    @http:Header {name: "x-smar-sc-actor-id"}
    string xSmarScActorId?;
};

# Response object for sight/dashboard update operations
public type SightUpdateResponse record {
    *ItemResult;
    *SightResultAlt;
};

# Container object holding an array of Contact objects
public type ContactListData record {
    # List of Contacts
    Contact[] data?;
};

# Represents the Headers record for the operation: templates-list
public type TemplatesListHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Represents the Headers record for the operation: automationrule-get
public type AutomationruleGetHeaders record {
    # API Access Token used to authenticate requests to Smartsheet APIs
    @http:Header {name: "Authorization"}
    string authorization?;
    # Uses the following metadata to distinguish between human-initiated API requests and third-party service-initiated calls by AI Connectors or ITSM:
    # 
    # - Integration source type
    # - Organization name
    # - Integration source name 
    # 
    # Format:
    # 
    # ```
    # TYPE,OrgName,SourceName
    # ```
    # 
    # Examples: 
    # 
    # `AI,SampleOrg,My-AI-Connector-v2`
    # 
    # `SCRIPT,SampleOrg2,Accounting-updater-script`
    # 
    # `APPLICATION,SampleOrg3,SheetUpdater`
    @http:Header {name: "smartsheet-integration-source"}
    string smartsheetIntegrationSource?;
};

# Triggered when a user requests a backup for a folder
public type FolderBackupRequestEvent record {
    # The action applied to the specified object
    "REQUEST_BACKUP" action?;
    # Additional details for folder backup requests including attachment options
    FolderRequestBackupAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "FOLDER" objectType?;
};

# Additional details for sheet share member removal events
public type SheetRemoveShareMemberAdditionalDetails record {
    # Email address of the user responsible for the event
    string emailAddress;
    # Id of the group that the user was removed from
    @constraint:Int {minValue: 0}
    int groupId?;
    # Id of user that was removed from the group
    @constraint:Int {minValue: 0}
    int userId?;
    # Id of the workspace that the group is shared to. (Specific to cases where the sheet is shared to the group via a workspace's sharing list)
    @constraint:Int {minValue: 0}
    int workspaceId?;
};

# Triggered when a workspace is created.
# 
# Workspaces can be created in the UI with the `Create New` button, by selecting the `Save As New` option on an existing workspace, or through the API
public type WorkspaceCreateEvent record {
    # The action applied to the specified object
    "CREATE" action?;
    # Additional details for workspace creation events
    WorkspaceCreateAdditionalDetails additionalDetails?;
    # The Smartsheet resource impacted by the event
    "WORKSPACE" objectType?;
};

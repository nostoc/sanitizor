// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

# OAuth2 Client Credentials Grant Configs
public type OAuth2ClientCredentialsGrantConfig record {|
    *http:OAuth2ClientCredentialsGrantConfig;
    # Token URL
    string tokenUrl = "https://api.sandbox.paypal.com/v1/oauth2/token";
|};

# The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
@constraint:String {maxLength: 254, minLength: 3}
public type Email string;

# The account identifier for a PayPal account
@constraint:String {maxLength: 13, minLength: 13, pattern: re `^[2-9A-HJ-NP-Z]{13}$`}
public type AccountId string;

# Contains authorization-specific details including ID, amount, invoice information, seller protection, expiration, and related links
public type AuthorizationAllOf2 record {
    # The PayPal-generated ID for the authorized payment.
    string id?;
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money amount?;
    # The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.
    string invoice_id?;
    # The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
    @constraint:String {maxLength: 127}
    string custom_id?;
    # Reference values used by the card network to identify a transaction
    NetworkTransactionReference network_transaction_reference?;
    # The level of protection offered as defined by [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection)
    SellerProtection seller_protection?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    DateTime expiration_time?;
    # An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    LinkDescription[] links?;
};

# The capture identification-related fields. Includes the invoice ID, custom ID, note to payer, and soft descriptor
public type SupplementaryPurchaseData record {
    # The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives
    @jsondata:Name {value: "invoice_id"}
    string invoiceId?;
    # An informational note about this settlement. Appears in both the payer's transaction history and the emails that the payer receives
    @jsondata:Name {value: "note_to_payer"}
    string noteToPayer?;
};

# The card network or brand. Applies to credit, debit, gift, and payment cards
public type CardBrand "VISA"|"MASTERCARD"|"DISCOVER"|"AMEX"|"SOLO"|"JCB"|"STAR"|"DELTA"|"SWITCH"|"MAESTRO"|"CB_NATIONALE"|"CONFIGOGA"|"CONFIDIS"|"ELECTRON"|"CETELEM"|"CHINA_UNION_PAY";

# The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
@constraint:String {maxLength: 64, minLength: 20, pattern: re `^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$`}
public type DateTime string;

# A captured payment
public type Capture record {
    *CaptureStatus;
    *CaptureAllOf2;
    *ActivityTimestamps;
};

# The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency
@constraint:String {maxLength: 3, minLength: 3}
public type CurrencyCode string;

# The status fields for an authorized payment
public type AuthorizationStatus record {
    # Additional details and context information about the current authorization status
    @jsondata:Name {value: "status_details"}
    AuthorizationStatusDetails statusDetails?;
    # The status for the authorized payment
    "CREATED"|"CAPTURED"|"DENIED"|"PARTIALLY_CAPTURED"|"VOIDED"|"PENDING" status?;
};

# The details of the captured payment status
public type CaptureStatusDetails record {
    # The reason why the captured payment status is `PENDING` or `DENIED`
    "BUYER_COMPLAINT"|"CHARGEBACK"|"ECHECK"|"INTERNATIONAL_WITHDRAWAL"|"OTHER"|"PENDING_REVIEW"|"RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION"|"REFUNDED"|"TRANSACTION_APPROVED_AWAITING_FUNDING"|"UNILATERAL"|"VERIFICATION_REQUIRED" reason?;
};

# The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee
public type PayeeBase record {
    # Email address of the payee for communication and identification purposes
    @jsondata:Name {value: "email_address"}
    Email emailAddress?;
    # Unique identifier for the merchant account associated with the payee
    @jsondata:Name {value: "merchant_id"}
    AccountId merchantId?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    OAuth2ClientCredentialsGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# The details of the authorized payment status
public type AuthorizationStatusDetails record {
    # The reason why the authorized status is `PENDING`
    "PENDING_REVIEW" reason?;
};

# The refund status
public type RefundStatus record {
    # Additional details and context information related to the current refund status
    @jsondata:Name {value: "status_details"}
    RefundStatusDetails statusDetails?;
    # The status of the refund
    "CANCELLED"|"FAILED"|"PENDING"|"COMPLETED" status?;
};

# Represents the Headers record for the operation: authorizations.void
public type AuthorizationsVoidHeaders record {
    # An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).<blockquote><strong>Note:</strong>For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.</blockquote>
    @http:Header {name: "PayPal-Auth-Assertion"}
    string payPalAuthAssertion?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    @http:Header {name: "Prefer"}
    string prefer = "return=minimal";
};

# A captured payment
public type Capture2 record {
    *Capture;
    *Capture2AllOf2;
};

# Contains supplementary data and payee information for capture processing
public type Capture2AllOf2 record {
    # The supplementary data
    SupplementaryData supplementary_data?;
    # The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee
    PayeeBase payee?;
};

# The refund information
public type Refund record {
    *RefundStatus;
    *RefundAllOf2;
    *ActivityTimestamps;
};

# The date and time stamps that are common to authorized payment, captured payment, and refund transactions
public type ActivityTimestamps record {
    # Timestamp indicating when the activity was last updated or modified
    @jsondata:Name {value: "update_time"}
    DateTime updateTime?;
    # Timestamp indicating when the activity was created, formatted as a DateTime value
    @jsondata:Name {value: "create_time"}
    DateTime createTime?;
};

# The status of a captured payment
public type CaptureStatus record {
    # Additional details and context information about the current capture status
    @jsondata:Name {value: "status_details"}
    CaptureStatusDetails statusDetails?;
    # The status of the captured payment
    "COMPLETED"|"DECLINED"|"PARTIALLY_REFUNDED"|"PENDING"|"REFUNDED"|"FAILED" status?;
};

# Represents the Headers record for the operation: authorizations.capture
public type AuthorizationsCaptureHeaders record {
    # The server stores keys for 45 days
    @http:Header {name: "PayPal-Request-Id"}
    string payPalRequestId?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    @http:Header {name: "Prefer"}
    string prefer = "return=minimal";
};

# The supplementary data
public type SupplementaryData record {
    # Array of identifiers linking this supplementary data to related entities or records
    @jsondata:Name {value: "related_ids"}
    RelatedIds relatedIds?;
};

# A captured payment containing transaction details, amounts, IDs, seller protection, and processing information
public type CaptureAllOf2 record {
    # The PayPal-generated ID for the captured payment.
    string id?;
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money amount?;
    # The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.
    string invoice_id?;
    # The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
    @constraint:String {maxLength: 127}
    string custom_id?;
    # Reference values used by the card network to identify a transaction
    NetworkTransactionReference network_transaction_reference?;
    # The level of protection offered as defined by [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection)
    SellerProtection seller_protection?;
    # Indicates whether you can make additional captures against the authorized payment. Set to `true` if you do not intend to capture additional payments against the authorization. Set to `false` if you intend to capture additional payments against the authorization.
    boolean final_capture = false;
    # The detailed breakdown of the capture activity. This is not available for transactions that are in pending state
    SellerReceivableBreakdown seller_receivable_breakdown?;
    # The funds that are held on behalf of the merchant
    DisbursementMode disbursement_mode?;
    # An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    LinkDescription[] links?;
    # The processor response information for payment requests, such as direct credit card transactions
    ProcessorResponse processor_response?;
};

# The exchange rate that determines the amount to convert from one currency to another currency
public type ExchangeRate record {
    # The currency code from which the exchange rate conversion is being made
    @jsondata:Name {value: "source_currency"}
    CurrencyCode sourceCurrency?;
    # The currency code to which the exchange rate converts from the base currency
    @jsondata:Name {value: "target_currency"}
    CurrencyCode targetCurrency?;
    # The target currency amount. Equivalent to one unit of the source currency. Formatted as integer or decimal value with one to 15 digits to the right of the decimal point
    string value?;
};

# Reference values used by the card network to identify a transaction
public type NetworkTransactionReference record {
    # The date that the transaction was authorized by the scheme. This field may not be returned for all networks. MasterCard refers to this field as "BankNet reference date
    @constraint:String {maxLength: 4, minLength: 4, pattern: re `^[0-9]+$`}
    string date?;
    # Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks
    @jsondata:Name {value: "acquirer_reference_number"}
    string acquirerReferenceNumber?;
    # Transaction reference id returned by the scheme. For Visa and Amex, this is the "Tran id" field in response. For MasterCard, this is the "BankNet reference id" field in response. For Discover, this is the "NRID" field in response. The pattern we expect for this field from Visa/Amex/CB/Discover is numeric, Mastercard/BNPP is alphanumeric and Paysecure is alphanumeric with special character -
    @constraint:String {maxLength: 36, minLength: 9, pattern: re `^[a-zA-Z0-9-]+$`}
    string id;
    # The card network or brand. Applies to credit, debit, gift, and payment cards
    CardBrand network?;
};

# The processor response information for payment requests, such as direct credit card transactions
public type ProcessorResponse record {
    # The card verification value code for for Visa, Discover, Mastercard, or American Express
    @jsondata:Name {value: "cvv_code"}
    "E"|"I"|"M"|"N"|"P"|"S"|"U"|"X"|"All others"|"0"|"1"|"2"|"3"|"4" cvvCode?;
    # Processor response code for the non-PayPal payment processor errors
    @jsondata:Name {value: "response_code"}
    "0000"|"00N7"|"0100"|"0390"|"0500"|"0580"|"0800"|"0880"|"0890"|"0960"|"0R00"|"1000"|"10BR"|"1300"|"1310"|"1312"|"1317"|"1320"|"1330"|"1335"|"1340"|"1350"|"1352"|"1360"|"1370"|"1380"|"1382"|"1384"|"1390"|"1393"|"5100"|"5110"|"5120"|"5130"|"5135"|"5140"|"5150"|"5160"|"5170"|"5180"|"5190"|"5200"|"5210"|"5400"|"5500"|"5650"|"5700"|"5710"|"5800"|"5900"|"5910"|"5920"|"5930"|"5950"|"6300"|"7600"|"7700"|"7710"|"7800"|"7900"|"8000"|"8010"|"8020"|"8030"|"8100"|"8110"|"8220"|"9100"|"9500"|"9510"|"9520"|"9530"|"9540"|"9600"|"PCNR"|"PCVV"|"PP06"|"PPRN"|"PPAD"|"PPAB"|"PPAE"|"PPAG"|"PPAI"|"PPAR"|"PPAU"|"PPAV"|"PPAX"|"PPBG"|"PPC2"|"PPCE"|"PPCO"|"PPCR"|"PPCT"|"PPCU"|"PPD3"|"PPDC"|"PPDI"|"PPDV"|"PPDT"|"PPEF"|"PPEL"|"PPER"|"PPEX"|"PPFE"|"PPFI"|"PPFR"|"PPFV"|"PPGR"|"PPH1"|"PPIF"|"PPII"|"PPIM"|"PPIT"|"PPLR"|"PPLS"|"PPMB"|"PPMC"|"PPMD"|"PPNC"|"PPNL"|"PPNM"|"PPNT"|"PPPH"|"PPPI"|"PPPM"|"PPQC"|"PPRE"|"PPRF"|"PPRR"|"PPS0"|"PPS1"|"PPS2"|"PPS3"|"PPS4"|"PPS5"|"PPS6"|"PPSC"|"PPSD"|"PPSE"|"PPTE"|"PPTF"|"PPTI"|"PPTR"|"PPTT"|"PPTV"|"PPUA"|"PPUC"|"PPUE"|"PPUI"|"PPUP"|"PPUR"|"PPVC"|"PPVE"|"PPVT" responseCode?;
    # The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes
    @jsondata:Name {value: "payment_advice_code"}
    "01"|"02"|"03"|"21" paymentAdviceCode?;
    # The address verification code for Visa, Discover, Mastercard, or American Express transactions
    @jsondata:Name {value: "avs_code"}
    "A"|"B"|"C"|"D"|"E"|"F"|"G"|"I"|"M"|"N"|"P"|"R"|"S"|"U"|"W"|"X"|"Y"|"Z"|"Null"|"0"|"1"|"2"|"3"|"4" avsCode?;
};

# The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information
public type LinkDescription record {
    # The HTTP method required to make the related call
    "GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"CONNECT"|"OPTIONS"|"PATCH" method?;
    # The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml)
    string rel;
    # The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call
    string href;
};

# Contains supplementary data and payee information for authorization processing
public type Authorization2AllOf2 record {
    # The supplementary data
    SupplementaryData supplementary_data?;
    # The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee
    PayeeBase payee?;
};

# Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still available, reauthorize a payment after its initial three-day honor period expires. You can reauthorize a payment only once from days four to 29.<br/><br/>If 30 days have transpired since the date of the original authorization, you must create an authorized payment instead of reauthorizing the original authorized payment.<br/><br/>A reauthorized payment itself has a new honor period of three days.<br/><br/>You can reauthorize an authorized payment once. The allowed amount depends on context and geography, for example in US it is up to 115% of the original authorized amount, not to exceed an increase of $75 USD.<br/><br/>Supports only the `amount` request parameter.<blockquote><strong>Note:</strong> This request is currently not supported for Partner use cases.</blockquote>
public type ReauthorizeRequest record {
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money amount?;
};

# Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order
public type PaymentInstruction record {
    # The method or channel through which payment funds will be distributed or disbursed to the recipient
    @jsondata:Name {value: "disbursement_mode"}
    DisbursementMode disbursementMode?;
    # An array of various fees, commissions, tips, or donations. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability
    @jsondata:Name {value: "platform_fees"}
    PlatformFee[] platformFees?;
    # FX identifier generated returned by PayPal to be used for payment processing in order to honor FX rate (for eligible integrations) to be used when amount is settled/received into the payee account
    @jsondata:Name {value: "payee_receivable_fx_rate_id"}
    string payeeReceivableFxRateId?;
    # This field is only enabled for selected merchants/partners to use and provides the ability to trigger a specific pricing rate/plan for a payment transaction. The list of eligible 'payee_pricing_tier_id' would be provided to you by your Account Manager. Specifying values other than the one provided to you by your account manager would result in an error
    @jsondata:Name {value: "payee_pricing_tier_id"}
    string payeePricingTierId?;
};

# Represents the Headers record for the operation: authorizations.reauthorize
public type AuthorizationsReauthorizeHeaders record {
    # The server stores keys for 45 days
    @http:Header {name: "PayPal-Request-Id"}
    string payPalRequestId?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    @http:Header {name: "Prefer"}
    string prefer = "return=minimal";
};

# The authorized payment transaction
public type Authorization record {
    *AuthorizationStatus;
    *AuthorizationAllOf2;
    *ActivityTimestamps;
};

# The currency and amount for a financial transaction, such as a balance or payment due
public type Money record {
    # The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/api/rest/reference/currency-codes/)
    @constraint:String {maxLength: 32, pattern: re `^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$`}
    string value;
    # The ISO 4217 three-letter currency code indicating the monetary unit for this amount
    @jsondata:Name {value: "currency_code"}
    CurrencyCode currencyCode;
};

# The detailed breakdown of the capture activity. This is not available for transactions that are in pending state
public type SellerReceivableBreakdown record {
    # An array of platform or partner fees, commissions, or brokerage fees that associated with the captured payment
    @jsondata:Name {value: "platform_fees"}
    PlatformFee[] platformFees?;
    # Exchange rate applied to convert currency amounts in the seller receivable breakdown
    @jsondata:Name {value: "exchange_rate"}
    ExchangeRate exchangeRate?;
    # The PayPal fee amount deducted from the transaction, expressed as a monetary value
    @jsondata:Name {value: "paypal_fee"}
    Money paypalFee?;
    # The total gross amount before deductions, represented as a monetary value
    @jsondata:Name {value: "gross_amount"}
    Money grossAmount;
    # The PayPal fee amount expressed in the receivable currency for this seller transaction
    @jsondata:Name {value: "paypal_fee_in_receivable_currency"}
    Money paypalFeeInReceivableCurrency?;
    # The net amount due to the seller after deducting fees and adjustments from the total receivable
    @jsondata:Name {value: "net_amount"}
    Money netAmount?;
    # Amount due to the seller, representing the total receivable in monetary terms
    @jsondata:Name {value: "receivable_amount"}
    Money receivableAmount?;
};

# Identifiers related to a specific resource
public type RelatedIds record {
    # Authorization ID related to the resource
    @jsondata:Name {value: "authorization_id"}
    string authorizationId?;
    # Capture ID related to the resource
    @jsondata:Name {value: "capture_id"}
    string captureId?;
    # Order ID related to the resource
    @jsondata:Name {value: "order_id"}
    string orderId?;
};

# The level of protection offered as defined by [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection)
public type SellerProtection record {
    # An array of conditions that are covered for the transaction
    @jsondata:Name {value: "dispute_categories"}
    ("ITEM_NOT_RECEIVED"|"UNAUTHORIZED_TRANSACTION")[] disputeCategories?;
    # Indicates whether the transaction is eligible for seller protection. For information, see [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection)
    "ELIGIBLE"|"PARTIALLY_ELIGIBLE"|"NOT_ELIGIBLE" status?;
};

# The authorized payment transaction
public type Authorization2 record {
    *Authorization;
    *Authorization2AllOf2;
};

# The net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the merchant holds their funds
public type NetAmountBreakdownItem record {
    # The exchange rate used to convert the amount from the original currency to the base currency
    @jsondata:Name {value: "exchange_rate"}
    ExchangeRate exchangeRate?;
    # The monetary amount converted to a different currency, represented as a Money object
    @jsondata:Name {value: "converted_amount"}
    Money convertedAmount?;
    # The monetary amount that is due to be paid for this breakdown item
    @jsondata:Name {value: "payable_amount"}
    Money payableAmount?;
};

# Represents the Headers record for the operation: captures.refund
public type CapturesRefundHeaders record {
    # The server stores keys for 45 days
    @http:Header {name: "PayPal-Request-Id"}
    string payPalRequestId?;
    # An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).<blockquote><strong>Note:</strong>For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.</blockquote>
    @http:Header {name: "PayPal-Auth-Assertion"}
    string payPalAuthAssertion?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    @http:Header {name: "Prefer"}
    string prefer = "return=minimal";
};

# The breakdown of the refund
public type MerchantPayableBreakdown record {
    # An array of platform or partner fees, commissions, or brokerage fees for the refund
    @jsondata:Name {value: "platform_fees"}
    PlatformFee[] platformFees?;
    # The net amount owed to the merchant in the receivable currency after deductions and adjustments
    @jsondata:Name {value: "net_amount_in_receivable_currency"}
    Money netAmountInReceivableCurrency?;
    # Total amount refunded to customers for this merchant, represented as a monetary value
    @jsondata:Name {value: "total_refunded_amount"}
    Money totalRefundedAmount?;
    # The PayPal fee amount deducted from the transaction, represented as a monetary value
    @jsondata:Name {value: "paypal_fee"}
    Money paypalFee?;
    # The total gross amount before any deductions, expressed as a monetary value
    @jsondata:Name {value: "gross_amount"}
    Money grossAmount?;
    # The PayPal fee amount expressed in the receivable currency for this merchant transaction
    @jsondata:Name {value: "paypal_fee_in_receivable_currency"}
    Money paypalFeeInReceivableCurrency?;
    # The net amount payable to the merchant, representing the final settlement value after deductions
    @jsondata:Name {value: "net_amount"}
    Money netAmount?;
    # An array of breakdown values for the net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the payee holds their funds
    @jsondata:Name {value: "net_amount_breakdown"}
    NetAmountBreakdownItem[] netAmountBreakdown?;
};

# Additional capture request parameters including amount, invoice details, and payment instructions
public type CaptureRequestAllOf2 record {
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money amount?;
    # The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.
    @constraint:String {maxLength: 127}
    string invoice_id?;
    # Indicates whether you can make additional captures against the authorized payment. Set to `true` if you do not intend to capture additional payments against the authorization. Set to `false` if you intend to capture additional payments against the authorization.
    boolean final_capture = false;
    # Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order
    PaymentInstruction payment_instruction?;
    # An informational note about this settlement. Appears in both the payer's transaction history and the emails that the payer receives.
    @constraint:String {maxLength: 255}
    string note_to_payer?;
    # The payment descriptor on the payer's account statement.
    @constraint:String {maxLength: 22}
    string soft_descriptor?;
};

# Refunds a captured payment, by ID. For a full refund, include an empty request body. For a partial refund, include an <code>amount</code> object in the request body
public type RefundRequest record {
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money amount?;
    # The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports. The pattern is defined by an external party and supports Unicode
    @jsondata:Name {value: "custom_id"}
    string customId?;
    # The API caller-provided external invoice ID for this order. The pattern is defined by an external party and supports Unicode
    @jsondata:Name {value: "invoice_id"}
    string invoiceId?;
    # The reason for the refund. Appears in both the payer's transaction history and the emails that the payer receives. The pattern is defined by an external party and supports Unicode
    @jsondata:Name {value: "note_to_payer"}
    string noteToPayer?;
    # Payment instruction details specifying how the refund should be processed and delivered to the recipient
    @jsondata:Name {value: "payment_instruction"}
    PaymentInstruction2 paymentInstruction?;
};

# The details of the refund status
public type RefundStatusDetails record {
    # The reason why the refund has the `PENDING` or `FAILED` status
    "ECHECK" reason?;
};

# A PayPal refund object containing refund details, amount, payer information, and transaction references
public type RefundAllOf2 record {
    # The PayPal-generated ID for the refund.
    string id?;
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money amount?;
    # The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.
    string invoice_id?;
    # The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
    @constraint:String {maxLength: 127, minLength: 1, pattern: re `^[A-Za-z0-9-_.,]*$`}
    string custom_id?;
    # Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks.
    @constraint:String {maxLength: 36, minLength: 1, pattern: re `^[a-zA-Z0-9]+$`}
    string acquirer_reference_number?;
    # The reason for the refund. Appears in both the payer's transaction history and the emails that the payer receives.
    string note_to_payer?;
    # The breakdown of the refund
    MerchantPayableBreakdown seller_payable_breakdown?;
    # The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee
    PayeeBase payer?;
    # An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    LinkDescription[] links?;
};

# The funds that are held on behalf of the merchant
public type DisbursementMode "INSTANT"|"DELAYED";

# The platform or partner fee, commission, or brokerage fee that is associated with the transaction. Not a separate or isolated transaction leg from the external perspective. The platform fee is limited in scope and is always associated with the original payment for the purchase unit
public type PlatformFee record {
    # The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee
    PayeeBase payee?;
    # The currency and amount for a financial transaction, such as a balance or payment due
    Money amount;
};

# Captures either a portion or the full authorized amount of an authorized payment
public type CaptureRequest record {
    *SupplementaryPurchaseData;
    *CaptureRequestAllOf2;
    # The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives
    @jsondata:Name {value: "invoice_id"}
    string invoiceId?;
    # An informational note about this settlement. Appears in both the payer's transaction history and the emails that the payer receives
    @jsondata:Name {value: "note_to_payer"}
    string noteToPayer?;
};

# Any additional payments instructions during refund payment processing. This object is only applicable to merchants that have been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. Please speak to your account manager if you want to use this capability
public type PaymentInstruction2 record {
    # Specifies the amount that the API caller will contribute to the refund being processed. The amount needs to be lower than platform_fees amount originally captured or the amount that is remaining if multiple refunds have been processed. This field is only applicable to merchants that have been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. Please speak to your account manager if you want to use this capability
    @jsondata:Name {value: "platform_fees"}
    PlatformFee[] platformFees?;
};

// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Current status of a reservation, indicating whether it is active and valid or has been canceled
public type ReservationState "CANCELED"|"VALID";

# Represents receipt for the payment
public type PaymentReceipt record {|
    # Last updated time stamp
    string lastUpdated;
    # Total amount paid
    decimal total;
    # Booked rooms
    Room[] rooms;
    # Currency used in price
    string currency;
    # Unique identification
    string id;
|};

# Current availability status of a room indicating whether it can be booked, is already reserved, or is available for booking
public type RoomStatus "BOOKED"|"RESERVED"|"AVAILABLE";

# Represents a collection of locations
public type Locations record {
    # collection of locations
    Location[] locations;
};

# Represents a collection of resort rooms
public type Rooms record {
    # Array of rooms
    Room[] rooms;
};

# Represents rooms be reserved
public type ReserveRoom record {|
    # Number of rooms
    int count;
    # Unique identification of the room
    string id;
|};

# Room type classification indicating the accommodation style and amenities level (Family, King, or Deluxe)
public type RoomCategory "FAMILY"|"KING"|"DELUXE";

# Represents a reservation of rooms
public type Reservation record {|
    # End date in yyyy-mm-dd
    string endDate;
    # Rooms to be reserved
    ReserveRoom[] reserveRooms;
    # Start date in yyyy-mm-dd
    string startDate;
|};

# Represents payment for rooms
public type Payment record {|
    # Name of the card holder
    string cardholderName;
    # Expiration month of the card in mm
    int expiryMonth;
    # Expiration year of the card in yyyy
    int expiryYear;
    # Card number
    int cardNumber;
|};

# Represents the Queries record for the operation: getLocationsIdRooms
public type GetLocationsIdRoomsQueries record {
    # End date in format yyyy-mm-dd
    string endDate;
    # Start date in format yyyy-mm-dd
    string startDate;
};

# Represents a receipt for the reservation
public type ReservationReceipt record {
    # Expiry date in yyyy-mm-dd
    string expiryDate;
    # Last updated time stamp
    string lastUpdated;
    # Total payable
    decimal total;
    # Represents a reservation of rooms
    Reservation reservation;
    # Currency used in price
    string currency;
    # Unique identification of the receipt
    string id;
    # Current status of a reservation, indicating whether it is active and valid or has been canceled
    ReservationState state
};

# Represents resort room
public type Room record {|
    # Availability of wifi
    boolean wifi;
    # Cost for the room
    decimal price;
    # Number of rooms as per the status
    int count;
    # Currency used in price
    string currency;
    # Unique identification of the room
    string id;
    # Room type classification indicating the accommodation style and amenities level (Family, King, or Deluxe)
    RoomCategory category;
    # Number of people that can be accommodate
    int capacity;
    # Current availability status of a room indicating whether it can be booked, is already reserved, or is available for booking
    RoomStatus status;
|};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# Represents location
public type Location record {|
    # Address of the location
    string address;
    # Name of the location
    string name;
    # Unique identification of the location
    string id;
|};
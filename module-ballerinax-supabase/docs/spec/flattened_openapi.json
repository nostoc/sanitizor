{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Supabase API (v1)",
    "description" : "Supabase API generated from the OpenAPI specification.<br>Visit [https://supabase.com/docs](https://supabase.com/docs) for a complete documentation.",
    "contact" : { },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "/"
  } ],
  "tags" : [ {
    "name" : "Advisors",
    "description" : "Advisors related endpoints"
  }, {
    "name" : "Analytics",
    "description" : "Analytics related endpoints"
  }, {
    "name" : "Auth",
    "description" : "Auth related endpoints"
  }, {
    "name" : "Billing",
    "description" : "Billing related endpoints"
  }, {
    "name" : "Database",
    "description" : "Database related endpoints"
  }, {
    "name" : "Domains",
    "description" : "Domains related endpoints"
  }, {
    "name" : "Edge Functions",
    "description" : "Edge related endpoints"
  }, {
    "name" : "Environments",
    "description" : "Environments related endpoints"
  }, {
    "name" : "OAuth",
    "description" : "OAuth related endpoints"
  }, {
    "name" : "Organizations",
    "description" : "Organizations related endpoints"
  }, {
    "name" : "Projects",
    "description" : "Projects related endpoints"
  }, {
    "name" : "Rest",
    "description" : "Rest related endpoints"
  }, {
    "name" : "Secrets",
    "description" : "Secrets related endpoints"
  }, {
    "name" : "Storage",
    "description" : "Storage related endpoints"
  } ],
  "paths" : {
    "/v1/branches/{branch_id_or_ref}" : {
      "get" : {
        "tags" : [ "Environments" ],
        "summary" : "Get database branch config",
        "description" : "Fetches configurations of the specified database branch",
        "operationId" : "v1-get-a-branch-config",
        "parameters" : [ {
          "name" : "branch_id_or_ref",
          "in" : "path",
          "description" : "Branch ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/BranchIdOrRef"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BranchDetailResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to retrieve database branch"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Environments" ],
        "summary" : "Delete a database branch",
        "description" : "Deletes the specified database branch",
        "operationId" : "v1-delete-a-branch",
        "parameters" : [ {
          "name" : "branch_id_or_ref",
          "in" : "path",
          "description" : "Branch ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/BranchIdOrRef1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BranchDeleteResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to delete database branch"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Environments" ],
        "summary" : "Update database branch config",
        "description" : "Updates the configuration of the specified database branch",
        "operationId" : "v1-update-a-branch-config",
        "parameters" : [ {
          "name" : "branch_id_or_ref",
          "in" : "path",
          "description" : "Branch ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/BranchIdOrRef2"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateBranchBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BranchResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to update database branch"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/branches/{branch_id_or_ref}/push" : {
      "post" : {
        "tags" : [ "Environments" ],
        "summary" : "Pushes a database branch",
        "description" : "Pushes the specified database branch",
        "operationId" : "v1-push-a-branch",
        "parameters" : [ {
          "name" : "branch_id_or_ref",
          "in" : "path",
          "description" : "Branch ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/BranchIdOrRef3"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BranchActionBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BranchUpdateResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to push database branch"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/branches/{branch_id_or_ref}/merge" : {
      "post" : {
        "tags" : [ "Environments" ],
        "summary" : "Merges a database branch",
        "description" : "Merges the specified database branch",
        "operationId" : "v1-merge-a-branch",
        "parameters" : [ {
          "name" : "branch_id_or_ref",
          "in" : "path",
          "description" : "Branch ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/BranchIdOrRef4"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BranchActionBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BranchUpdateResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to merge database branch"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/branches/{branch_id_or_ref}/reset" : {
      "post" : {
        "tags" : [ "Environments" ],
        "summary" : "Resets a database branch",
        "description" : "Resets the specified database branch",
        "operationId" : "v1-reset-a-branch",
        "parameters" : [ {
          "name" : "branch_id_or_ref",
          "in" : "path",
          "description" : "Branch ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/BranchIdOrRef5"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BranchActionBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BranchUpdateResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to reset database branch"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/branches/{branch_id_or_ref}/diff" : {
      "get" : {
        "tags" : [ "Environments" ],
        "summary" : "[Beta] Diffs a database branch",
        "description" : "Diffs the specified database branch",
        "operationId" : "v1-diff-a-branch",
        "parameters" : [ {
          "name" : "branch_id_or_ref",
          "in" : "path",
          "description" : "Branch ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/BranchIdOrRef6"
          }
        }, {
          "name" : "included_schemas",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to diff database branch"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "List all projects",
        "description" : "Returns a list of all projects you've previously created.",
        "operationId" : "v1-list-all-projects",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/V1ProjectWithDatabaseResponse"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Projects" ],
        "summary" : "Create a project",
        "operationId" : "v1-create-a-project",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/V1CreateProjectBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1ProjectResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/available-regions" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "[Beta] Gets the list of available regions that can be used for a new project",
        "operationId" : "v1-get-available-regions",
        "parameters" : [ {
          "name" : "organization_slug",
          "in" : "query",
          "description" : "Slug of your organization",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "continent",
          "in" : "query",
          "description" : "Continent code to determine regional recommendations: NA (North America), SA (South America), EU (Europe), AF (Africa), AS (Asia), OC (Oceania), AN (Antarctica)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "NA",
            "enum" : [ "NA", "SA", "EU", "AF", "AS", "OC", "AN" ]
          }
        }, {
          "name" : "desired_instance_size",
          "in" : "query",
          "description" : "Desired instance size",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "nano",
            "enum" : [ "pico", "nano", "micro", "small", "medium", "large", "xlarge", "2xlarge", "4xlarge", "8xlarge", "12xlarge", "16xlarge", "24xlarge", "24xlarge_optimized_memory", "24xlarge_optimized_cpu", "24xlarge_high_memory", "48xlarge", "48xlarge_optimized_memory", "48xlarge_optimized_cpu", "48xlarge_high_memory" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegionsInfo"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/organizations" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "List all organizations",
        "description" : "Returns a list of organizations that you currently belong to.",
        "operationId" : "v1-list-all-organizations",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OrganizationResponseV1"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error listing organizations"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Organizations" ],
        "summary" : "Create an organization",
        "operationId" : "v1-create-an-organization",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateOrganizationV1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationResponseV1"
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error creating an organization"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/oauth/authorize" : {
      "get" : {
        "tags" : [ "OAuth" ],
        "summary" : "[Beta] Authorize user through oauth",
        "operationId" : "v1-authorize-user",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "response_type",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "code", "token", "id_token token" ]
          }
        }, {
          "name" : "redirect_uri",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scope",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "response_mode",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "code_challenge",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "code_challenge_method",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "plain", "sha256", "S256" ]
          }
        }, {
          "name" : "organization_slug",
          "in" : "query",
          "description" : "Organization slug",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "pattern" : "^[\\w-]+$",
            "type" : "string"
          }
        }, {
          "name" : "resource",
          "in" : "query",
          "description" : "Resource indicator for MCP (Model Context Protocol) clients",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uri"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        },
        "security" : [ {
          "oauth2" : [ "read" ]
        } ]
      }
    },
    "/v1/oauth/token" : {
      "post" : {
        "tags" : [ "OAuth" ],
        "summary" : "[Beta] Exchange auth code for user's access and refresh token",
        "operationId" : "v1-exchange-oauth-token",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthTokenBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthTokenResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "oauth2" : [ "write" ]
        } ]
      }
    },
    "/v1/oauth/revoke" : {
      "post" : {
        "tags" : [ "OAuth" ],
        "summary" : "[Beta] Revoke oauth app authorization and it's corresponding tokens",
        "operationId" : "v1-revoke-token",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthRevokeTokenBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : ""
          }
        },
        "security" : [ {
          "oauth2" : [ "write" ]
        } ]
      }
    },
    "/v1/oauth/authorize/project-claim" : {
      "get" : {
        "tags" : [ "OAuth" ],
        "summary" : "Authorize user through oauth and claim a project",
        "description" : "Initiates the OAuth authorization flow for the specified provider. After successful authentication, the user can claim ownership of the specified project.",
        "operationId" : "v1-oauth-authorize-project-claim",
        "parameters" : [ {
          "name" : "project_ref",
          "in" : "query",
          "description" : "Project ref",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "client_id",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "response_type",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "code", "token", "id_token token" ]
          }
        }, {
          "name" : "redirect_uri",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "response_mode",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "code_challenge",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "code_challenge_method",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "plain", "sha256", "S256" ]
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/snippets" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Lists SQL snippets for the logged in user",
        "operationId" : "v1-list-all-snippets",
        "parameters" : [ {
          "name" : "project_ref",
          "in" : "query",
          "description" : "Project ref",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "string"
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "name", "inserted_at" ]
          }
        }, {
          "name" : "sort_order",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SnippetList"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to list user's SQL snippets"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/snippets/{id}" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Gets a specific SQL snippet",
        "operationId" : "v1-get-a-snippet",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SnippetResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to retrieve SQL snippet"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/actions" : {
      "get" : {
        "tags" : [ "Environments" ],
        "summary" : "List all action runs",
        "description" : "Returns a paginated list of action runs of the specified project.",
        "operationId" : "v1-list-action-runs",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "number"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 10,
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListActionRunResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to list action runs"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/actions/{run_id}" : {
      "get" : {
        "tags" : [ "Environments" ],
        "summary" : "Get the status of an action run",
        "description" : "Returns the current status of the specified action run.",
        "operationId" : "v1-get-action-run",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "run_id",
          "in" : "path",
          "description" : "Action Run ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionRunResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to get action run status"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/actions/{run_id}/status" : {
      "patch" : {
        "tags" : [ "Environments" ],
        "summary" : "Update the status of an action run",
        "description" : "Updates the status of an ongoing action run.",
        "operationId" : "v1-update-action-run-status",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "run_id",
          "in" : "path",
          "description" : "Action Run ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateRunStatusBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateRunStatusResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update action run status"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/actions/{run_id}/logs" : {
      "get" : {
        "tags" : [ "Environments" ],
        "summary" : "Get the logs of an action run",
        "description" : "Returns the logs from the specified action run.",
        "operationId" : "v1-get-action-run-logs",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "run_id",
          "in" : "path",
          "description" : "Action Run ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to get action run logs"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/api-keys" : {
      "get" : {
        "tags" : [ "Secrets" ],
        "summary" : "Get project api keys",
        "operationId" : "v1-get-project-api-keys",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "reveal",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ApiKeyResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Secrets" ],
        "summary" : "Creates a new API key for the project",
        "operationId" : "v1-create-project-api-key",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "reveal",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateApiKeyBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiKeyResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/api-keys/legacy" : {
      "get" : {
        "tags" : [ "Secrets" ],
        "summary" : "Check whether JWT based legacy (anon, service_role) API keys are enabled. This API endpoint will be removed in the future, check for HTTP 404 Not Found.",
        "operationId" : "v1-get-project-legacy-api-keys",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LegacyApiKeysResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Secrets" ],
        "summary" : "Disable or re-enable JWT based legacy (anon, service_role) API keys. This API endpoint will be removed in the future, check for HTTP 404 Not Found.",
        "operationId" : "v1-update-project-legacy-api-keys",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "enabled",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LegacyApiKeysResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/api-keys/{id}" : {
      "get" : {
        "tags" : [ "Secrets" ],
        "summary" : "Get API key",
        "operationId" : "v1-get-project-api-key",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "reveal",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiKeyResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Secrets" ],
        "summary" : "Deletes an API key for the project",
        "operationId" : "v1-delete-project-api-key",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "reveal",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "was_compromised",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "reason",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiKeyResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Secrets" ],
        "summary" : "Updates an API key for the project",
        "operationId" : "v1-update-project-api-key",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "reveal",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateApiKeyBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiKeyResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/branches" : {
      "get" : {
        "tags" : [ "Environments" ],
        "summary" : "List all database branches",
        "description" : "Returns all database branches of the specified project.",
        "operationId" : "v1-list-all-branches",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BranchResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve database branches"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Environments" ],
        "summary" : "Create a database branch",
        "description" : "Creates a database branch from the specified project.",
        "operationId" : "v1-create-a-branch",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateBranchBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BranchResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to create database branch"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Environments" ],
        "summary" : "Disables preview branching",
        "description" : "Disables preview branching for the specified project",
        "operationId" : "v1-disable-preview-branching",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to disable preview branching"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/branches/{name}" : {
      "get" : {
        "tags" : [ "Environments" ],
        "summary" : "Get a database branch",
        "description" : "Fetches the specified database branch by its name.",
        "operationId" : "v1-get-a-branch",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BranchResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to fetch database branch"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/custom-hostname" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "[Beta] Gets project's custom hostname config",
        "operationId" : "v1-get-hostname-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateCustomHostnameResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's custom hostname config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Domains" ],
        "summary" : "[Beta] Deletes a project's custom hostname configuration",
        "operationId" : "v1-Delete hostname config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to delete project custom hostname configuration"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/custom-hostname/initialize" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "[Beta] Updates project's custom hostname configuration",
        "operationId" : "v1-update-hostname-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCustomHostnameBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateCustomHostnameResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update project custom hostname configuration"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/custom-hostname/reverify" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "[Beta] Attempts to verify the DNS configuration for project's custom hostname configuration",
        "operationId" : "v1-verify-dns-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateCustomHostnameResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to verify project custom hostname configuration"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/custom-hostname/activate" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "[Beta] Activates a custom hostname for a project.",
        "operationId" : "v1-activate-custom-hostname",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateCustomHostnameResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to activate project custom hostname configuration"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/network-bans/retrieve" : {
      "post" : {
        "tags" : [ "Projects" ],
        "summary" : "[Beta] Gets project's network bans",
        "operationId" : "v1-list-all-network-bans",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkBanResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's network bans"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/network-bans/retrieve/enriched" : {
      "post" : {
        "tags" : [ "Projects" ],
        "summary" : "[Beta] Gets project's network bans with additional information about which databases they affect",
        "operationId" : "v1-list-all-network-bans-enriched",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkBanResponseEnriched"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's enriched network bans"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/network-bans" : {
      "delete" : {
        "tags" : [ "Projects" ],
        "summary" : "[Beta] Remove network bans.",
        "operationId" : "v1-delete-network-bans",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoveNetworkBanRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to remove network bans."
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/network-restrictions" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "[Beta] Gets project's network restrictions",
        "operationId" : "v1-get-network-restrictions",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkRestrictionsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's network restrictions"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Projects" ],
        "summary" : "[Alpha] Updates project's network restrictions by adding or removing CIDRs",
        "operationId" : "v1-patch-network-restrictions",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NetworkRestrictionsPatchRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkRestrictionsV2Response"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update project network restrictions"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/network-restrictions/apply" : {
      "post" : {
        "tags" : [ "Projects" ],
        "summary" : "[Beta] Updates project's network restrictions",
        "operationId" : "v1-update-network-restrictions",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NetworkRestrictionsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkRestrictionsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update project network restrictions"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/pgsodium" : {
      "get" : {
        "tags" : [ "Secrets" ],
        "summary" : "[Beta] Gets project's pgsodium config",
        "operationId" : "v1-get-pgsodium-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PgsodiumConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's pgsodium config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Secrets" ],
        "summary" : "[Beta] Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible.",
        "operationId" : "v1-update-pgsodium-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePgsodiumConfigBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PgsodiumConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update project's pgsodium config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/postgrest" : {
      "get" : {
        "tags" : [ "Rest" ],
        "summary" : "Gets project's postgrest config",
        "operationId" : "v1-get-postgrest-service-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostgrestConfigWithJWTSecretResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's postgrest config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Rest" ],
        "summary" : "Updates project's postgrest config",
        "operationId" : "v1-update-postgrest-service-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/V1UpdatePostgrestConfigBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1PostgrestConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update project's postgrest config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Gets a specific project that belongs to the authenticated user",
        "operationId" : "v1-get-project",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1ProjectWithDatabaseResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Projects" ],
        "summary" : "Deletes the given project",
        "operationId" : "v1-delete-a-project",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1ProjectRefResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/secrets" : {
      "get" : {
        "tags" : [ "Secrets" ],
        "summary" : "List all secrets",
        "description" : "Returns all secrets you've previously added to the specified project.",
        "operationId" : "v1-list-all-secrets",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SecretResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's secrets"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Secrets" ],
        "summary" : "Bulk create secrets",
        "description" : "Creates multiple secrets and adds them to the specified project.",
        "operationId" : "v1-bulk-create-secrets",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateSecretBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to create project's secrets"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Secrets" ],
        "summary" : "Bulk delete secrets",
        "description" : "Deletes all secrets with the given names from the specified project",
        "operationId" : "v1-bulk-delete-secrets",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to delete secrets with given names"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/ssl-enforcement" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "[Beta] Get project's SSL enforcement configuration.",
        "operationId" : "v1-get-ssl-enforcement-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SslEnforcementResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's SSL enforcement config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Database" ],
        "summary" : "[Beta] Update project's SSL enforcement configuration.",
        "operationId" : "v1-update-ssl-enforcement-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SslEnforcementRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SslEnforcementResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update project's SSL enforcement configuration."
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/types/typescript" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Generate TypeScript types",
        "description" : "Returns the TypeScript types of your schema for use with supabase-js.",
        "operationId" : "v1-generate-typescript-types",
        "parameters" : [ {
          "name" : "included_schemas",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "public"
          }
        }, {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TypescriptResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to generate TypeScript types"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/vanity-subdomain" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "[Beta] Gets current vanity subdomain config",
        "operationId" : "v1-get-vanity-subdomain-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VanitySubdomainConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to get project vanity subdomain configuration"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Domains" ],
        "summary" : "[Beta] Deletes a project's vanity subdomain configuration",
        "operationId" : "v1-deactivate-vanity-subdomain-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to delete project vanity subdomain configuration"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/vanity-subdomain/check-availability" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "[Beta] Checks vanity subdomain availability",
        "operationId" : "v1-check-vanity-subdomain-availability",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VanitySubdomainBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubdomainAvailabilityResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to check project vanity subdomain configuration"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/vanity-subdomain/activate" : {
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "[Beta] Activates a vanity subdomain for a project.",
        "operationId" : "v1-activate-vanity-subdomain-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VanitySubdomainBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActivateVanitySubdomainResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to activate project vanity subdomain configuration"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/upgrade" : {
      "post" : {
        "tags" : [ "Projects" ],
        "summary" : "[Beta] Upgrades the project's Postgres version",
        "operationId" : "v1-upgrade-postgres-version",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpgradeDatabaseBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectUpgradeInitiateResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to initiate project upgrade"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/upgrade/eligibility" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "[Beta] Returns the project's eligibility for upgrades",
        "operationId" : "v1-get-postgres-upgrade-eligibility",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectUpgradeEligibilityResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to determine project upgrade eligibility"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/upgrade/status" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "[Beta] Gets the latest status of the project's upgrade",
        "operationId" : "v1-get-postgres-upgrade-status",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "tracking_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseUpgradeStatusResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project upgrade status"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/readonly" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Returns project's readonly mode status",
        "operationId" : "v1-get-readonly-mode-status",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReadOnlyStatusResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to get project readonly mode status"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/readonly/temporary-disable" : {
      "post" : {
        "tags" : [ "Database" ],
        "summary" : "Disables project's readonly mode for the next 15 minutes",
        "operationId" : "v1-disable-readonly-mode-temporarily",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to disable project's readonly mode"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/read-replicas/setup" : {
      "post" : {
        "tags" : [ "Database" ],
        "summary" : "[Beta] Set up a read replica",
        "operationId" : "v1-setup-a-read-replica",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SetUpReadReplicaBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to set up read replica"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/read-replicas/remove" : {
      "post" : {
        "tags" : [ "Database" ],
        "summary" : "[Beta] Remove a read replica",
        "operationId" : "v1-remove-a-read-replica",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemoveReadReplicaBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to remove read replica"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/health" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Gets project's service health status",
        "operationId" : "v1-get-services-health",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "services",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "auth", "db", "db_postgres_user", "pooler", "realtime", "rest", "storage", "pg_bouncer" ]
            }
          }
        }, {
          "name" : "timeout_ms",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 10000,
            "minimum" : 0,
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/V1ServiceHealthResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's service health status"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/config/auth/signing-keys/legacy" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Get the signing key information for the JWT secret imported as signing key for this project. This endpoint will be removed in the future, check for HTTP 404 Not Found.",
        "operationId" : "v1-get-legacy-signing-key",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SigningKeyResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Set up the project's existing JWT secret as an in_use JWT signing key. This endpoint will be removed in the future always check for HTTP 404 Not Found.",
        "operationId" : "v1-create-legacy-signing-key",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SigningKeyResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/config/auth/signing-keys" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "List all signing keys for the project",
        "operationId" : "v1-get-project-signing-keys",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SigningKeysResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Create a new signing key for the project in standby status",
        "operationId" : "v1-create-project-signing-key",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateSigningKeyBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SigningKeyResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/config/auth/signing-keys/{id}" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Get information about a signing key",
        "operationId" : "v1-get-project-signing-key",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SigningKeyResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Auth" ],
        "summary" : "Remove a signing key from a project. Only possible if the key has been in revoked status for a while.",
        "operationId" : "v1-remove-project-signing-key",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SigningKeyResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Auth" ],
        "summary" : "Update a signing key, mainly its status",
        "operationId" : "v1-update-project-signing-key",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSigningKeyBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SigningKeyResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/config/storage" : {
      "get" : {
        "tags" : [ "Storage" ],
        "summary" : "Gets project's storage config",
        "operationId" : "v1-get-storage-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's storage config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Storage" ],
        "summary" : "Updates project's storage config",
        "operationId" : "v1-update-storage-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateStorageConfigBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update project's storage config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/config/database/postgres" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Gets project's Postgres config",
        "operationId" : "v1-get-postgres-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostgresConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's Postgres config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Database" ],
        "summary" : "Updates project's Postgres config",
        "operationId" : "v1-update-postgres-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePostgresConfigBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostgresConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update project's Postgres config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/config/database/pgbouncer" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Get project's pgbouncer config",
        "operationId" : "v1-get-project-pgbouncer-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1PgbouncerConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's pgbouncer config"
          }
        }
      }
    },
    "/v1/projects/{ref}/config/database/pooler" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Gets project's supavisor config",
        "operationId" : "v1-get-pooler-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SupavisorConfigResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's supavisor config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Database" ],
        "summary" : "Updates project's supavisor config",
        "operationId" : "v1-update-pooler-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSupavisorConfigBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateSupavisorConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update project's supavisor config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/config/auth" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Gets project's auth config",
        "operationId" : "v1-get-auth-service-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's auth config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Auth" ],
        "summary" : "Updates a project's auth config",
        "operationId" : "v1-update-auth-service-config",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateAuthConfigBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthConfigResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update project's auth config"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/config/auth/third-party-auth" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Lists all third-party auth integrations",
        "operationId" : "v1-list-project-tpa-integrations",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ThirdPartyAuth"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Creates a new third-party auth integration",
        "operationId" : "v1-create-project-tpa-integration",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateThirdPartyAuthBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ThirdPartyAuth"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/config/auth/third-party-auth/{tpa_id}" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Get a third-party integration",
        "operationId" : "v1-get-project-tpa-integration",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "tpa_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ThirdPartyAuth"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Auth" ],
        "summary" : "Removes a third-party auth integration",
        "operationId" : "v1-delete-project-tpa-integration",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "tpa_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ThirdPartyAuth"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/pause" : {
      "post" : {
        "tags" : [ "Projects" ],
        "summary" : "Pauses the given project",
        "operationId" : "v1-pause-a-project",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/restore" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Lists available restore versions for the given project",
        "operationId" : "v1-list-available-restore-versions",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProjectAvailableRestoreVersionsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Projects" ],
        "summary" : "Restores the given project",
        "operationId" : "v1-restore-a-project",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/restore/cancel" : {
      "post" : {
        "tags" : [ "Projects" ],
        "summary" : "Cancels the given project restoration",
        "operationId" : "v1-cancel-a-project-restoration",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/billing/addons" : {
      "get" : {
        "tags" : [ "Billing" ],
        "summary" : "List billing addons and compute instance selections",
        "description" : "Returns the billing addons that are currently applied, including the active compute instance size, and lists every addon option that can be provisioned with pricing metadata.",
        "operationId" : "v1-list-project-addons",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListProjectAddonsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to list project addons"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Billing" ],
        "summary" : "Apply or update billing addons, including compute instance size",
        "description" : "Selects an addon variant, for example scaling the project’s compute instance up or down, and applies it to the project.",
        "operationId" : "v1-apply-project-addon",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplyProjectAddonBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to apply project addon"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/billing/addons/{addon_variant}" : {
      "delete" : {
        "tags" : [ "Billing" ],
        "summary" : "Remove billing addons or revert compute instance sizing",
        "description" : "Disables the selected addon variant, including rolling the compute instance back to its previous size.",
        "operationId" : "v1-remove-project-addon",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "addon_variant",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/AddonVariant"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to remove project addon"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/claim-token" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Gets project claim token",
        "operationId" : "v1-get-project-claim-token",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectClaimTokenResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ],
        "x-internal" : true
      },
      "post" : {
        "tags" : [ "Projects" ],
        "summary" : "Creates project claim token",
        "operationId" : "v1-create-project-claim-token",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateProjectClaimTokenResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ],
        "x-internal" : true
      },
      "delete" : {
        "tags" : [ "Projects" ],
        "summary" : "Revokes project claim token",
        "operationId" : "v1-delete-project-claim-token",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ],
        "x-internal" : true
      }
    },
    "/v1/projects/{ref}/advisors/performance" : {
      "get" : {
        "tags" : [ "Advisors" ],
        "summary" : "Gets project performance advisors.",
        "description" : "This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.",
        "operationId" : "v1-get-performance-advisors",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1ProjectAdvisorsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "deprecated" : true,
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/advisors/security" : {
      "get" : {
        "tags" : [ "Advisors" ],
        "summary" : "Gets project security advisors.",
        "description" : "This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.",
        "operationId" : "v1-get-security-advisors",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "lint_type",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "sql" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1ProjectAdvisorsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "deprecated" : true,
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/analytics/endpoints/logs.all" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets project's logs",
        "description" : "Executes a SQL query on the project's logs.\n\nEither the 'iso_timestamp_start' and 'iso_timestamp_end' parameters must be provided.\nIf both are not provided, only the last 1 minute of logs will be queried.\nThe timestamp range must be no more than 24 hours and is rounded to the nearest minute. If the range is more than 24 hours, a validation error will be thrown.\n",
        "operationId" : "v1-get-project-logs",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "sql",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "iso_timestamp_start",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "iso_timestamp_end",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AnalyticsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/analytics/endpoints/usage.api-counts" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets project's usage api counts",
        "operationId" : "v1-get-project-usage-api-count",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "interval",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "15min", "30min", "1hr", "3hr", "1day", "3day", "7day" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1GetUsageApiCountResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to get project's usage api counts"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/analytics/endpoints/usage.api-requests-count" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets project's usage api requests count",
        "operationId" : "v1-get-project-usage-request-count",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1GetUsageApiRequestsCountResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to get project's usage api requests count"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/analytics/endpoints/functions.combined-stats" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a project's function combined statistics",
        "operationId" : "v1-get-project-function-combined-stats",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "interval",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "15min", "1hr", "3hr", "1day" ]
          }
        }, {
          "name" : "function_id",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AnalyticsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to get project's function combined statistics"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/cli/login-role" : {
      "post" : {
        "tags" : [ "Database" ],
        "summary" : "[Beta] Create a login role for CLI with temporary password",
        "operationId" : "v1-create-login-role",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateRoleBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateRoleResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to create login role"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Database" ],
        "summary" : "[Beta] Delete existing login roles used by CLI",
        "operationId" : "v1-delete-login-roles",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeleteRolesResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to delete login roles"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/database/migrations" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "[Beta] List applied migration versions",
        "description" : "Only available to selected partner OAuth apps",
        "operationId" : "v1-list-migration-history",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1ListMigrationsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to list database migrations"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Database" ],
        "summary" : "[Beta] Upsert a database migration without applying",
        "description" : "Only available to selected partner OAuth apps",
        "operationId" : "v1-upsert-a-migration",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "A unique key to ensure the same migration is tracked only once.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/V1UpsertMigrationBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to upsert database migration"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Database" ],
        "summary" : "[Beta] Apply a database migration",
        "description" : "Only available to selected partner OAuth apps",
        "operationId" : "v1-apply-a-migration",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "Idempotency-Key",
          "in" : "header",
          "description" : "A unique key to ensure the same migration is tracked only once.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/V1CreateMigrationBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to apply database migration"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/database/query" : {
      "post" : {
        "tags" : [ "Database" ],
        "summary" : "[Beta] Run sql query",
        "operationId" : "v1-run-a-query",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/V1RunQueryBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to run sql query"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/database/webhooks/enable" : {
      "post" : {
        "tags" : [ "Database" ],
        "summary" : "[Beta] Enables Database Webhooks on the project",
        "operationId" : "v1-enable-database-webhook",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to enable Database Webhooks on the project"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/database/context" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Gets database metadata for the given project.",
        "description" : "This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.",
        "operationId" : "v1-get-database-metadata",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProjectDbMetadataResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "deprecated" : true,
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/database/jit" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Get user-id to role mappings for JIT access",
        "description" : "Mappings of roles a user can assume in the project database",
        "operationId" : "v1-get-jit-access",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JitAccessResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to list database jit access"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Database" ],
        "summary" : "Updates a user mapping for JIT access",
        "description" : "Modifies the roles that can be assumed and for how long",
        "operationId" : "v1-update-jit-access",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateJitAccessBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JitAccessResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to upsert database migration"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Database" ],
        "summary" : "Authorize user-id to role mappings for JIT access",
        "description" : "Authorizes the request to assume a role in the project database",
        "operationId" : "v1-authorize-jit-access",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuthorizeJitAccessBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JitAuthorizeAccessResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to authorize database jit access"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/database/jit/list" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "List all user-id to role mappings for JIT access",
        "description" : "Mappings of roles a user can assume in the project database",
        "operationId" : "v1-list-jit-access",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JitListAccessResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to list database jit access"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/database/jit/{user_id}" : {
      "delete" : {
        "tags" : [ "Database" ],
        "summary" : "Delete JIT access by user-id",
        "description" : "Remove JIT mappings of a user, revoking all JIT database access",
        "operationId" : "v1-delete-jit-access",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "user_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to remove JIT access"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/functions" : {
      "get" : {
        "tags" : [ "Edge Functions" ],
        "summary" : "List all functions",
        "description" : "Returns all functions you've previously added to the specified project.",
        "operationId" : "v1-list-all-functions",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FunctionResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve project's functions"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Edge Functions" ],
        "summary" : "Bulk update functions",
        "description" : "Bulk update functions. It will create a new function or replace existing. The operation is idempotent. NOTE: You will need to manually bump the version.",
        "operationId" : "v1-bulk-update-functions",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkUpdateFunctionBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkUpdateFunctionResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "402" : {
            "description" : "Maximum number of functions reached for Plan"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update functions"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Edge Functions" ],
        "summary" : "Create a function",
        "description" : "This endpoint is deprecated - use the deploy endpoint. Creates a function and adds it to the specified project.",
        "operationId" : "v1-create-a-function",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "slug",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "pattern" : "^[A-Za-z0-9_-]+$",
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "verify_jwt",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "import_map",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "entrypoint_path",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "import_map_path",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ezbr_sha256",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.denoland.eszip" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/V1CreateFunctionBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FunctionResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "402" : {
            "description" : "Maximum number of functions reached for Plan"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to create project's function"
          }
        },
        "deprecated" : true,
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/functions/deploy" : {
      "post" : {
        "tags" : [ "Edge Functions" ],
        "summary" : "Deploy a function",
        "description" : "A new endpoint to deploy functions. It will create if function does not exist.",
        "operationId" : "v1-deploy-a-function",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "slug",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "pattern" : "^[A-Za-z0-9_-]+$",
            "type" : "string"
          }
        }, {
          "name" : "bundleOnly",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/FunctionDeployBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeployFunctionResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "402" : {
            "description" : "Maximum number of functions reached for Plan"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to deploy function"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/functions/{function_slug}" : {
      "get" : {
        "tags" : [ "Edge Functions" ],
        "summary" : "Retrieve a function",
        "description" : "Retrieves a function with the specified slug and project.",
        "operationId" : "v1-get-a-function",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "function_slug",
          "in" : "path",
          "description" : "Function slug",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "^[A-Za-z0-9_-]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FunctionSlugResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve function with given slug"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Edge Functions" ],
        "summary" : "Delete a function",
        "description" : "Deletes a function with the specified slug from the specified project.",
        "operationId" : "v1-delete-a-function",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "function_slug",
          "in" : "path",
          "description" : "Function slug",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "^[A-Za-z0-9_-]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to delete function with given slug"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Edge Functions" ],
        "summary" : "Update a function",
        "description" : "Updates a function with the specified slug and project.",
        "operationId" : "v1-update-a-function",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "function_slug",
          "in" : "path",
          "description" : "Function slug",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "^[A-Za-z0-9_-]+$",
            "type" : "string"
          }
        }, {
          "name" : "slug",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "pattern" : "^[A-Za-z0-9_-]+$",
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "verify_jwt",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "import_map",
          "in" : "query",
          "description" : "Boolean string, true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "entrypoint_path",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "import_map_path",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ezbr_sha256",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.denoland.eszip" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/V1UpdateFunctionBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FunctionResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to update function with given slug"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/functions/{function_slug}/body" : {
      "get" : {
        "tags" : [ "Edge Functions" ],
        "summary" : "Retrieve a function body",
        "description" : "Retrieves a function body for the specified slug and project.",
        "operationId" : "v1-get-a-function-body",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "function_slug",
          "in" : "path",
          "description" : "Function slug",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "^[A-Za-z0-9_-]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StreamableFile"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to retrieve function body with given slug"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/storage/buckets" : {
      "get" : {
        "tags" : [ "Storage" ],
        "summary" : "Lists all buckets",
        "operationId" : "v1-list-all-buckets",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/V1StorageBucketResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to get list of buckets"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/config/auth/sso/providers" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Lists all SSO providers",
        "operationId" : "v1-list-all-sso-provider",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListProvidersResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "404" : {
            "description" : "SAML 2.0 support is not enabled for this project"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Creates a new SSO provider",
        "operationId" : "v1-create-a-sso-provider",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateProviderBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateProviderResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "404" : {
            "description" : "SAML 2.0 support is not enabled for this project"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/config/auth/sso/providers/{provider_id}" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Gets a SSO provider by its UUID",
        "operationId" : "v1-get-a-sso-provider",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "provider_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetProviderResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "404" : {
            "description" : "Either SAML 2.0 was not enabled for this project, or the provider does not exist"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Auth" ],
        "summary" : "Updates a SSO provider by its UUID",
        "operationId" : "v1-update-a-sso-provider",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "provider_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateProviderBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateProviderResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "404" : {
            "description" : "Either SAML 2.0 was not enabled for this project, or the provider does not exist"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Auth" ],
        "summary" : "Removes a SSO provider by its UUID",
        "operationId" : "v1-delete-a-sso-provider",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "provider_id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeleteProviderResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "404" : {
            "description" : "Either SAML 2.0 was not enabled for this project, or the provider does not exist"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/database/backups" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Lists all backups",
        "operationId" : "v1-list-all-backups",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1BackupsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to get backups"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/database/backups/restore-pitr" : {
      "post" : {
        "tags" : [ "Database" ],
        "summary" : "Restores a PITR backup for a database",
        "operationId" : "v1-restore-pitr-backup",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/V1RestorePitrBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/projects/{ref}/database/backups/restore-point" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Get restore points for project",
        "operationId" : "v1-get-restore-point",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maxLength" : 20,
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1RestorePointResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          },
          "500" : {
            "description" : "Failed to get requested restore points"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ],
        "x-internal" : true
      },
      "post" : {
        "tags" : [ "Database" ],
        "summary" : "Initiates a creation of a restore point for a database",
        "operationId" : "v1-create-restore-point",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/V1RestorePointPostBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1RestorePointResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ],
        "x-internal" : true
      }
    },
    "/v1/projects/{ref}/database/backups/undo" : {
      "post" : {
        "tags" : [ "Database" ],
        "summary" : "Initiates an undo to a given restore point",
        "operationId" : "v1-undo",
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "Project ref",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 20,
            "minLength" : 20,
            "pattern" : "^[a-z]+$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/V1UndoBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ],
        "x-internal" : true
      }
    },
    "/v1/organizations/{slug}/members" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "List members of an organization",
        "operationId" : "v1-list-organization-members",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "description" : "Organization slug",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "^[\\w-]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/V1OrganizationMemberResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/organizations/{slug}" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "Gets information about the organization",
        "operationId" : "v1-get-an-organization",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "description" : "Organization slug",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "^[\\w-]+$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/V1OrganizationSlugResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/v1/organizations/{slug}/project-claim/{token}" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "Gets project details for the specified organization and claim token",
        "operationId" : "v1-get-organization-project-claim",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "description" : "Organization slug",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "^[\\w-]+$",
            "type" : "string"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationProjectClaimResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ],
        "x-internal" : true
      },
      "post" : {
        "tags" : [ "Organizations" ],
        "summary" : "Claims project for the specified organization",
        "operationId" : "v1-claim-project-for-organization",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "description" : "Organization slug",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "^[\\w-]+$",
            "type" : "string"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden action"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ],
        "x-internal" : true
      }
    },
    "/v1/organizations/{slug}/projects" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Gets all projects for the given organization",
        "description" : "Returns a paginated list of projects for the specified organization.\n\n    This endpoint uses offset-based pagination. Use the `offset` parameter to skip a number of projects and the `limit` parameter to control the number of projects returned per page.",
        "operationId" : "v1-get-all-projects-for-organization",
        "parameters" : [ {
          "name" : "slug",
          "in" : "path",
          "description" : "Organization slug",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "^[\\w-]+$",
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of projects to skip",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of projects to return per page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Search projects by name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort order for projects",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "name_asc",
            "enum" : [ "name_asc", "name_desc", "created_asc", "created_desc" ]
          }
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "A comma-separated list of project statuses to filter by.\n\nThe following values are supported: `ACTIVE_HEALTHY`, `INACTIVE`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "?statuses=ACTIVE_HEALTHY,INACTIVE"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationProjectsResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to retrieve projects"
          }
        },
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "BulkUpdateFunctionResponse" : {
        "required" : [ "functions" ],
        "type" : "object",
        "properties" : {
          "functions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BulkUpdateFunctionResponseFunctions"
            }
          }
        }
      },
      "OAuthRevokeTokenBody" : {
        "required" : [ "client_id", "client_secret", "refresh_token" ],
        "type" : "object",
        "properties" : {
          "client_id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "client_secret" : {
            "type" : "string"
          },
          "refresh_token" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "UpdateApiKeyBody" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 64,
            "minLength" : 4,
            "pattern" : "^[a-z_][a-z0-9_]+$",
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "secret_jwt_template" : {
            "type" : "object",
            "additionalProperties" : { },
            "nullable" : true
          }
        }
      },
      "OrganizationProjectClaimResponsePreviewWarnings" : {
        "required" : [ "key", "message" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "SigningKeyResponse" : {
        "required" : [ "algorithm", "created_at", "id", "status", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "algorithm" : {
            "type" : "string",
            "enum" : [ "EdDSA", "ES256", "RS256", "HS256" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "in_use", "previously_used", "revoked", "standby" ]
          },
          "public_jwk" : {
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false
      },
      "BranchIdOrRefBranchIdOrRefOneOf12" : {
        "type" : "string",
        "format" : "uuid",
        "deprecated" : true
      },
      "ListProjectAddonsResponseAvailableAddons" : {
        "required" : [ "name", "type", "variants" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "custom_domain", "compute_instance", "pitr", "ipv4", "auth_mfa_phone", "auth_mfa_web_authn", "log_drain" ]
          },
          "name" : {
            "type" : "string"
          },
          "variants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ListProjectAddonsResponseVariant"
            }
          }
        }
      },
      "UpdateSupavisorConfigBody" : {
        "type" : "object",
        "properties" : {
          "default_pool_size" : {
            "maximum" : 3000,
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "pool_mode" : {
            "type" : "string",
            "description" : "Dedicated pooler mode for the project",
            "enum" : [ "transaction", "session" ]
          }
        }
      },
      "ProjectUpgradeEligibilityResponse" : {
        "required" : [ "current_app_version", "current_app_version_release_channel", "duration_estimate_hours", "eligible", "latest_app_version", "legacy_auth_custom_roles", "objects_to_be_dropped", "target_upgrade_versions", "unsupported_extensions", "user_defined_objects_in_internal_schemas" ],
        "type" : "object",
        "properties" : {
          "eligible" : {
            "type" : "boolean"
          },
          "current_app_version" : {
            "type" : "string"
          },
          "current_app_version_release_channel" : {
            "type" : "string",
            "enum" : [ "internal", "alpha", "beta", "ga", "withdrawn", "preview" ]
          },
          "latest_app_version" : {
            "type" : "string"
          },
          "target_upgrade_versions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProjectUpgradeEligibilityResponseTargetUpgradeVersions"
            }
          },
          "duration_estimate_hours" : {
            "type" : "number"
          },
          "legacy_auth_custom_roles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "objects_to_be_dropped" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "unsupported_extensions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "user_defined_objects_in_internal_schemas" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "UpdateProviderResponse" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "saml" : {
            "$ref" : "#/components/schemas/CreateProviderResponseSaml"
          },
          "domains" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateProviderResponseDomains"
            }
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        }
      },
      "SslEnforcementResponse" : {
        "required" : [ "appliedSuccessfully", "currentConfig" ],
        "type" : "object",
        "properties" : {
          "currentConfig" : {
            "$ref" : "#/components/schemas/SslEnforcementResponseCurrentConfig"
          },
          "appliedSuccessfully" : {
            "type" : "boolean"
          }
        }
      },
      "OrganizationProjectsResponse" : {
        "required" : [ "pagination", "projects" ],
        "type" : "object",
        "properties" : {
          "projects" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrganizationProjectsResponseProjects"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/OrganizationProjectsResponsePagination"
          }
        }
      },
      "VanitySubdomainBody" : {
        "required" : [ "vanity_subdomain" ],
        "type" : "object",
        "properties" : {
          "vanity_subdomain" : {
            "type" : "string"
          }
        }
      },
      "V1ProjectRefResponse" : {
        "required" : [ "id", "name", "ref" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "ref" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "NetworkRestrictionsResponse" : {
        "required" : [ "config", "entitlement", "status" ],
        "type" : "object",
        "properties" : {
          "entitlement" : {
            "type" : "string",
            "enum" : [ "disallowed", "allowed" ]
          },
          "config" : {
            "$ref" : "#/components/schemas/NetworkRestrictionsResponseConfig"
          },
          "old_config" : {
            "$ref" : "#/components/schemas/NetworkRestrictionsResponseOldConfig"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "stored", "applied" ]
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "applied_at" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "GetProjectAvailableRestoreVersionsResponse" : {
        "required" : [ "available_versions" ],
        "type" : "object",
        "properties" : {
          "available_versions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetProjectAvailableRestoreVersionsResponseAvailableVersions"
            }
          }
        }
      },
      "UpdateAuthConfigBody" : {
        "type" : "object",
        "properties" : {
          "site_url" : {
            "pattern" : "^[^,]+$",
            "type" : "string",
            "nullable" : true
          },
          "disable_signup" : {
            "type" : "boolean",
            "nullable" : true
          },
          "jwt_exp" : {
            "maximum" : 604800,
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "smtp_admin_email" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true
          },
          "smtp_host" : {
            "type" : "string",
            "nullable" : true
          },
          "smtp_port" : {
            "type" : "string",
            "nullable" : true
          },
          "smtp_user" : {
            "type" : "string",
            "nullable" : true
          },
          "smtp_pass" : {
            "type" : "string",
            "nullable" : true
          },
          "smtp_max_frequency" : {
            "maximum" : 32767,
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "smtp_sender_name" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_allow_unverified_email_sign_ins" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_autoconfirm" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_subjects_invite" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_confirmation" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_recovery" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_email_change" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_magic_link" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_reauthentication" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_password_changed_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_email_changed_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_phone_changed_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_mfa_factor_enrolled_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_mfa_factor_unenrolled_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_identity_linked_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_identity_unlinked_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_invite_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_confirmation_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_recovery_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_email_change_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_magic_link_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_reauthentication_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_password_changed_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_email_changed_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_phone_changed_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_mfa_factor_enrolled_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_mfa_factor_unenrolled_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_identity_linked_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_identity_unlinked_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_notifications_password_changed_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_email_changed_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_phone_changed_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_mfa_factor_enrolled_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_mfa_factor_unenrolled_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_identity_linked_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_identity_unlinked_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_max_enrolled_factors" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "uri_allow_list" : {
            "type" : "string",
            "nullable" : true
          },
          "external_anonymous_users_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_email_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_phone_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "saml_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "saml_external_url" : {
            "pattern" : "^[^,]+$",
            "type" : "string",
            "nullable" : true
          },
          "security_captcha_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "security_captcha_provider" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "turnstile", "hcaptcha" ]
          },
          "security_captcha_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "sessions_timebox" : {
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "sessions_inactivity_timeout" : {
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "sessions_single_per_user" : {
            "type" : "boolean",
            "nullable" : true
          },
          "sessions_tags" : {
            "pattern" : "^\\s*([a-zA-Z0-9_-]+(\\s*,+\\s*)?)*\\s*$",
            "type" : "string",
            "nullable" : true
          },
          "rate_limit_anonymous_users" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_email_sent" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_sms_sent" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_verify" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_token_refresh" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_otp" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_web3" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "nullable" : true
          },
          "mailer_secure_email_change_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "refresh_token_rotation_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "password_hibp_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "password_min_length" : {
            "maximum" : 32767,
            "minimum" : 6,
            "type" : "integer",
            "nullable" : true
          },
          "password_required_characters" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789", "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789", "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789:!@#$%^&*()_+-=[]{};'\\\\:\"|<>?,./`~", "" ]
          },
          "security_manual_linking_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "security_update_password_require_reauthentication" : {
            "type" : "boolean",
            "nullable" : true
          },
          "security_refresh_token_reuse_interval" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "mailer_otp_exp" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer"
          },
          "mailer_otp_length" : {
            "maximum" : 10,
            "minimum" : 6,
            "type" : "integer",
            "nullable" : true
          },
          "sms_autoconfirm" : {
            "type" : "boolean",
            "nullable" : true
          },
          "sms_max_frequency" : {
            "maximum" : 32767,
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "sms_otp_exp" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "sms_otp_length" : {
            "maximum" : 32767,
            "minimum" : 0,
            "type" : "integer"
          },
          "sms_provider" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "messagebird", "textlocal", "twilio", "twilio_verify", "vonage" ]
          },
          "sms_messagebird_access_key" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_messagebird_originator" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_test_otp" : {
            "pattern" : "^([0-9]{1,15}=[0-9]+,?)*$",
            "type" : "string",
            "nullable" : true
          },
          "sms_test_otp_valid_until" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "sms_textlocal_api_key" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_textlocal_sender" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_account_sid" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_auth_token" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_content_sid" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_message_service_sid" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_verify_account_sid" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_verify_auth_token" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_verify_message_service_sid" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_vonage_api_key" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_vonage_api_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_vonage_from" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_template" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_mfa_verification_attempt_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_mfa_verification_attempt_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_mfa_verification_attempt_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_password_verification_attempt_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_password_verification_attempt_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_password_verification_attempt_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_custom_access_token_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_custom_access_token_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_custom_access_token_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_send_sms_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_send_sms_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_send_sms_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_send_email_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_send_email_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_send_email_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_before_user_created_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_before_user_created_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_before_user_created_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_after_user_created_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_after_user_created_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_after_user_created_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "external_apple_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_apple_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_apple_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_apple_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_apple_additional_client_ids" : {
            "type" : "string",
            "nullable" : true
          },
          "external_azure_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_azure_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_azure_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_azure_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_azure_url" : {
            "type" : "string",
            "nullable" : true
          },
          "external_bitbucket_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_bitbucket_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_bitbucket_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_bitbucket_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_discord_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_discord_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_discord_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_discord_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_facebook_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_facebook_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_facebook_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_facebook_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_figma_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_figma_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_figma_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_figma_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_github_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_github_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_github_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_github_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_gitlab_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_gitlab_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_gitlab_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_gitlab_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_gitlab_url" : {
            "type" : "string",
            "nullable" : true
          },
          "external_google_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_google_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_google_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_google_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_google_additional_client_ids" : {
            "type" : "string",
            "nullable" : true
          },
          "external_google_skip_nonce_check" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_kakao_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_kakao_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_kakao_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_kakao_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_keycloak_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_keycloak_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_keycloak_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_keycloak_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_keycloak_url" : {
            "type" : "string",
            "nullable" : true
          },
          "external_linkedin_oidc_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_linkedin_oidc_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_linkedin_oidc_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_linkedin_oidc_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_slack_oidc_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_slack_oidc_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_slack_oidc_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_slack_oidc_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_notion_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_notion_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_notion_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_notion_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_slack_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_slack_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_slack_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_slack_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_spotify_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_spotify_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_spotify_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_spotify_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_twitch_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_twitch_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_twitch_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_twitch_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_twitter_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_twitter_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_twitter_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_twitter_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_workos_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_workos_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_workos_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_workos_url" : {
            "type" : "string",
            "nullable" : true
          },
          "external_web3_solana_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_web3_ethereum_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_zoom_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_zoom_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_zoom_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_zoom_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "db_max_pool_size" : {
            "type" : "integer",
            "nullable" : true
          },
          "api_max_request_duration" : {
            "type" : "integer",
            "nullable" : true
          },
          "mfa_totp_enroll_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_totp_verify_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_web_authn_enroll_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_web_authn_verify_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_phone_enroll_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_phone_verify_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_phone_max_frequency" : {
            "maximum" : 32767,
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "mfa_phone_otp_length" : {
            "maximum" : 32767,
            "minimum" : 0,
            "type" : "integer",
            "nullable" : true
          },
          "mfa_phone_template" : {
            "type" : "string",
            "nullable" : true
          },
          "nimbus_oauth_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "nimbus_oauth_client_secret" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "SupavisorConfigResponse" : {
        "required" : [ "connectionString", "connection_string", "database_type", "db_host", "db_name", "db_port", "db_user", "default_pool_size", "identifier", "is_using_scram_auth", "max_client_conn", "pool_mode" ],
        "type" : "object",
        "properties" : {
          "identifier" : {
            "type" : "string"
          },
          "database_type" : {
            "type" : "string",
            "enum" : [ "PRIMARY", "READ_REPLICA" ]
          },
          "is_using_scram_auth" : {
            "type" : "boolean"
          },
          "db_user" : {
            "type" : "string"
          },
          "db_host" : {
            "type" : "string"
          },
          "db_port" : {
            "type" : "integer"
          },
          "db_name" : {
            "type" : "string"
          },
          "connection_string" : {
            "type" : "string"
          },
          "default_pool_size" : {
            "type" : "integer",
            "nullable" : true
          },
          "max_client_conn" : {
            "type" : "integer",
            "nullable" : true
          },
          "pool_mode" : {
            "type" : "string",
            "enum" : [ "transaction", "session" ]
          }
        }
      },
      "V1GetUsageApiCountResponseResult" : {
        "required" : [ "timestamp", "total_auth_requests", "total_realtime_requests", "total_rest_requests", "total_storage_requests" ],
        "type" : "object",
        "properties" : {
          "timestamp" : {
            "type" : "string",
            "format" : "date-time"
          },
          "total_auth_requests" : {
            "type" : "number"
          },
          "total_realtime_requests" : {
            "type" : "number"
          },
          "total_rest_requests" : {
            "type" : "number"
          },
          "total_storage_requests" : {
            "type" : "number"
          }
        }
      },
      "RegionsInfo" : {
        "required" : [ "all", "recommendations" ],
        "type" : "object",
        "properties" : {
          "recommendations" : {
            "$ref" : "#/components/schemas/RegionsInfoRecommendations"
          },
          "all" : {
            "$ref" : "#/components/schemas/RegionsInfoAll"
          }
        }
      },
      "ApplyProjectAddonBody" : {
        "required" : [ "addon_type", "addon_variant" ],
        "type" : "object",
        "properties" : {
          "addon_variant" : {
            "oneOf" : [ {
              "type" : "string",
              "enum" : [ "ci_micro", "ci_small", "ci_medium", "ci_large", "ci_xlarge", "ci_2xlarge", "ci_4xlarge", "ci_8xlarge", "ci_12xlarge", "ci_16xlarge", "ci_24xlarge", "ci_24xlarge_optimized_cpu", "ci_24xlarge_optimized_memory", "ci_24xlarge_high_memory", "ci_48xlarge", "ci_48xlarge_optimized_cpu", "ci_48xlarge_optimized_memory", "ci_48xlarge_high_memory" ]
            }, {
              "type" : "string",
              "enum" : [ "cd_default" ]
            }, {
              "type" : "string",
              "enum" : [ "pitr_7", "pitr_14", "pitr_28" ]
            }, {
              "type" : "string",
              "enum" : [ "ipv4_default" ]
            } ]
          },
          "addon_type" : {
            "type" : "string",
            "enum" : [ "custom_domain", "compute_instance", "pitr", "ipv4", "auth_mfa_phone", "auth_mfa_web_authn", "log_drain" ]
          }
        }
      },
      "V1RunQueryBody" : {
        "required" : [ "query" ],
        "type" : "object",
        "properties" : {
          "query" : {
            "minLength" : 1,
            "type" : "string"
          },
          "parameters" : {
            "type" : "array",
            "items" : { }
          },
          "read_only" : {
            "type" : "boolean"
          }
        }
      },
      "UpdateCustomHostnameBody" : {
        "required" : [ "custom_hostname" ],
        "type" : "object",
        "properties" : {
          "custom_hostname" : {
            "minLength" : 1,
            "type" : "string"
          }
        }
      },
      "StorageConfigResponse" : {
        "required" : [ "capabilities", "external", "features", "fileSizeLimit" ],
        "type" : "object",
        "properties" : {
          "fileSizeLimit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "features" : {
            "$ref" : "#/components/schemas/StorageConfigResponseFeatures"
          },
          "capabilities" : {
            "$ref" : "#/components/schemas/StorageConfigResponseCapabilities"
          },
          "external" : {
            "$ref" : "#/components/schemas/StorageConfigResponseExternal"
          }
        }
      },
      "BranchIdOrRef1BranchIdOrRef1OneOf12" : {
        "type" : "string",
        "format" : "uuid",
        "deprecated" : true
      },
      "BranchActionBody" : {
        "type" : "object",
        "properties" : {
          "migration_version" : {
            "type" : "string"
          }
        }
      },
      "BranchIdOrRef4OneOf1" : {
        "maxLength" : 20,
        "minLength" : 20,
        "pattern" : "^[a-z]+$",
        "type" : "string",
        "description" : "Project ref"
      },
      "StorageConfigResponseFeatures" : {
        "required" : [ "imageTransformation", "s3Protocol" ],
        "type" : "object",
        "properties" : {
          "imageTransformation" : {
            "$ref" : "#/components/schemas/StorageConfigResponseFeaturesImageTransformation"
          },
          "s3Protocol" : {
            "$ref" : "#/components/schemas/StorageConfigResponseFeaturesImageTransformation"
          },
          "icebergCatalog" : {
            "$ref" : "#/components/schemas/StorageConfigResponseFeaturesImageTransformation"
          }
        }
      },
      "CreateThirdPartyAuthBody" : {
        "type" : "object",
        "properties" : {
          "oidc_issuer_url" : {
            "type" : "string"
          },
          "jwks_url" : {
            "type" : "string"
          },
          "custom_jwks" : { }
        }
      },
      "CreateRoleResponse" : {
        "required" : [ "password", "role", "ttl_seconds" ],
        "type" : "object",
        "properties" : {
          "role" : {
            "minLength" : 1,
            "type" : "string"
          },
          "password" : {
            "minLength" : 1,
            "type" : "string"
          },
          "ttl_seconds" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "UpdateSigningKeyBody" : {
        "required" : [ "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "in_use", "previously_used", "revoked", "standby" ]
          }
        },
        "additionalProperties" : false
      },
      "UpgradeDatabaseBody" : {
        "required" : [ "target_version" ],
        "type" : "object",
        "properties" : {
          "target_version" : {
            "type" : "string"
          },
          "release_channel" : {
            "type" : "string",
            "enum" : [ "internal", "alpha", "beta", "ga", "withdrawn", "preview" ]
          }
        }
      },
      "V1BackupsResponseBackups" : {
        "required" : [ "inserted_at", "is_physical_backup", "status" ],
        "type" : "object",
        "properties" : {
          "is_physical_backup" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "COMPLETED", "FAILED", "PENDING", "REMOVED", "ARCHIVED", "CANCELLED" ]
          },
          "inserted_at" : {
            "type" : "string"
          }
        }
      },
      "V1BackupsResponse" : {
        "required" : [ "backups", "physical_backup_data", "pitr_enabled", "region", "walg_enabled" ],
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string"
          },
          "walg_enabled" : {
            "type" : "boolean"
          },
          "pitr_enabled" : {
            "type" : "boolean"
          },
          "backups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/V1BackupsResponseBackups"
            }
          },
          "physical_backup_data" : {
            "$ref" : "#/components/schemas/V1BackupsResponsePhysicalBackupData"
          }
        }
      },
      "OAuthTokenBody" : {
        "type" : "object",
        "properties" : {
          "grant_type" : {
            "type" : "string",
            "enum" : [ "authorization_code", "refresh_token" ]
          },
          "client_id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "client_secret" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "code_verifier" : {
            "type" : "string"
          },
          "redirect_uri" : {
            "type" : "string"
          },
          "refresh_token" : {
            "type" : "string"
          },
          "resource" : {
            "type" : "string",
            "description" : "Resource indicator for MCP (Model Context Protocol) clients",
            "format" : "uri"
          },
          "scope" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "CreateProjectClaimTokenResponse" : {
        "required" : [ "created_at", "created_by", "expires_at", "token", "token_alias" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          },
          "token_alias" : {
            "type" : "string"
          },
          "expires_at" : {
            "type" : "string"
          },
          "created_at" : {
            "type" : "string"
          },
          "created_by" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "OrganizationProjectClaimResponse" : {
        "required" : [ "created_at", "created_by", "expires_at", "preview", "project" ],
        "type" : "object",
        "properties" : {
          "project" : {
            "$ref" : "#/components/schemas/OrganizationProjectClaimResponseProject"
          },
          "preview" : {
            "$ref" : "#/components/schemas/OrganizationProjectClaimResponsePreview"
          },
          "expires_at" : {
            "type" : "string"
          },
          "created_at" : {
            "type" : "string"
          },
          "created_by" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "ListProvidersResponseItems" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "saml" : {
            "$ref" : "#/components/schemas/CreateProviderResponseSaml"
          },
          "domains" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateProviderResponseDomains"
            }
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        }
      },
      "UpdateProviderBody" : {
        "type" : "object",
        "properties" : {
          "metadata_xml" : {
            "type" : "string"
          },
          "metadata_url" : {
            "type" : "string"
          },
          "domains" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "attribute_mapping" : {
            "$ref" : "#/components/schemas/CreateProviderBodyAttributeMapping"
          },
          "name_id_format" : {
            "type" : "string",
            "enum" : [ "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified", "urn:oasis:names:tc:SAML:2.0:nameid-format:transient", "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress", "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent" ]
          }
        }
      },
      "UpdateStorageConfigBody" : {
        "type" : "object",
        "properties" : {
          "fileSizeLimit" : {
            "maximum" : 536870912000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          },
          "features" : {
            "$ref" : "#/components/schemas/StorageConfigResponseFeatures"
          },
          "external" : {
            "$ref" : "#/components/schemas/StorageConfigResponseExternal"
          }
        },
        "additionalProperties" : false
      },
      "FunctionResponse" : {
        "required" : [ "created_at", "id", "name", "slug", "status", "updated_at", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "slug" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "REMOVED", "THROTTLED" ]
          },
          "version" : {
            "type" : "integer"
          },
          "created_at" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updated_at" : {
            "type" : "integer",
            "format" : "int64"
          },
          "verify_jwt" : {
            "type" : "boolean"
          },
          "import_map" : {
            "type" : "boolean"
          },
          "entrypoint_path" : {
            "type" : "string"
          },
          "import_map_path" : {
            "type" : "string"
          },
          "ezbr_sha256" : {
            "type" : "string"
          }
        }
      },
      "UpdateCustomHostnameResponseDataResult" : {
        "required" : [ "custom_origin_server", "hostname", "id", "ownership_verification", "ssl", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "hostname" : {
            "type" : "string"
          },
          "ssl" : {
            "$ref" : "#/components/schemas/UpdateCustomHostnameResponseDataResultSsl"
          },
          "ownership_verification" : {
            "$ref" : "#/components/schemas/UpdateCustomHostnameResponseDataResultOwnershipVerification"
          },
          "custom_origin_server" : {
            "type" : "string"
          },
          "verification_errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "status" : {
            "type" : "string"
          }
        }
      },
      "ProjectUpgradeInitiateResponse" : {
        "required" : [ "tracking_id" ],
        "type" : "object",
        "properties" : {
          "tracking_id" : {
            "type" : "string"
          }
        }
      },
      "JitAccessResponseAllowedNetworksAllowedCidrs" : {
        "required" : [ "cidr" ],
        "type" : "object",
        "properties" : {
          "cidr" : {
            "type" : "string"
          }
        }
      },
      "BranchIdOrRefOneOf1" : {
        "maxLength" : 20,
        "minLength" : 20,
        "pattern" : "^[a-z]+$",
        "type" : "string",
        "description" : "Project ref"
      },
      "TypescriptResponse" : {
        "required" : [ "types" ],
        "type" : "object",
        "properties" : {
          "types" : {
            "type" : "string"
          }
        }
      },
      "BranchIdOrRef3BranchIdOrRef3OneOf12" : {
        "type" : "string",
        "format" : "uuid",
        "deprecated" : true
      },
      "OrganizationProjectsResponsePagination" : {
        "required" : [ "count", "limit", "offset" ],
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "number",
            "description" : "Total number of projects. Use this to calculate the total number of pages."
          },
          "limit" : {
            "type" : "number",
            "description" : "Maximum number of projects per page"
          },
          "offset" : {
            "type" : "number",
            "description" : "Number of projects skipped in this response"
          }
        }
      },
      "SecretResponse" : {
        "required" : [ "name", "value" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        }
      },
      "V1ProjectAdvisorsResponseMetadata" : {
        "type" : "object",
        "properties" : {
          "schema" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "entity" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "table", "view", "auth", "function", "extension", "compliance" ]
          },
          "fkey_name" : {
            "type" : "string"
          },
          "fkey_columns" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "V1ProjectWithDatabaseResponse" : {
        "required" : [ "created_at", "database", "id", "name", "organization_id", "region", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of your project"
          },
          "organization_id" : {
            "type" : "string",
            "description" : "Slug of your organization"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of your project"
          },
          "region" : {
            "type" : "string",
            "description" : "Region of your project",
            "example" : "us-east-1"
          },
          "created_at" : {
            "type" : "string",
            "description" : "Creation timestamp",
            "example" : "2023-03-29T16:32:59Z"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "INACTIVE", "ACTIVE_HEALTHY", "ACTIVE_UNHEALTHY", "COMING_UP", "UNKNOWN", "GOING_DOWN", "INIT_FAILED", "REMOVED", "RESTORING", "UPGRADING", "PAUSING", "RESTORE_FAILED", "RESTARTING", "PAUSE_FAILED", "RESIZING" ]
          },
          "database" : {
            "$ref" : "#/components/schemas/V1ProjectWithDatabaseResponseDatabase"
          }
        }
      },
      "OrganizationProjectsResponseDatabases" : {
        "required" : [ "cloud_provider", "identifier", "region", "status", "type" ],
        "type" : "object",
        "properties" : {
          "infra_compute_size" : {
            "type" : "string",
            "enum" : [ "pico", "nano", "micro", "small", "medium", "large", "xlarge", "2xlarge", "4xlarge", "8xlarge", "12xlarge", "16xlarge", "24xlarge", "24xlarge_optimized_memory", "24xlarge_optimized_cpu", "24xlarge_high_memory", "48xlarge", "48xlarge_optimized_memory", "48xlarge_optimized_cpu", "48xlarge_high_memory" ]
          },
          "region" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE_HEALTHY", "ACTIVE_UNHEALTHY", "COMING_UP", "GOING_DOWN", "INIT_FAILED", "REMOVED", "RESTORING", "UNKNOWN", "INIT_READ_REPLICA", "INIT_READ_REPLICA_FAILED", "RESTARTING", "RESIZING" ]
          },
          "cloud_provider" : {
            "type" : "string"
          },
          "identifier" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "PRIMARY", "READ_REPLICA" ]
          },
          "disk_volume_size_gb" : {
            "type" : "number"
          },
          "disk_type" : {
            "type" : "string",
            "enum" : [ "gp3", "io2" ]
          },
          "disk_throughput_mbps" : {
            "type" : "number"
          },
          "disk_last_modified_at" : {
            "type" : "string"
          }
        }
      },
      "BranchIdOrRef6BranchIdOrRef6OneOf12" : {
        "type" : "string",
        "format" : "uuid",
        "deprecated" : true
      },
      "BranchIdOrRef5OneOf1" : {
        "maxLength" : 20,
        "minLength" : 20,
        "pattern" : "^[a-z]+$",
        "type" : "string",
        "description" : "Project ref"
      },
      "JitAccessResponse" : {
        "required" : [ "user_id", "user_roles" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "user_roles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JitAccessResponseUserRoles"
            }
          }
        }
      },
      "SnippetListOwner" : {
        "required" : [ "id", "username" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "username" : {
            "type" : "string"
          }
        }
      },
      "RemoveNetworkBanRequest" : {
        "required" : [ "ipv4_addresses" ],
        "type" : "object",
        "properties" : {
          "ipv4_addresses" : {
            "type" : "array",
            "description" : "List of IP addresses to unban.",
            "items" : {
              "type" : "string"
            }
          },
          "requester_ip" : {
            "type" : "boolean",
            "description" : "Include requester's public IP in the list of addresses to unban.",
            "default" : false
          },
          "identifier" : {
            "type" : "string"
          }
        }
      },
      "RemoveReadReplicaBody" : {
        "required" : [ "database_identifier" ],
        "type" : "object",
        "properties" : {
          "database_identifier" : {
            "type" : "string"
          }
        }
      },
      "StreamableFile" : {
        "type" : "object",
        "properties" : { }
      },
      "V1ProjectAdvisorsResponseLints" : {
        "required" : [ "cache_key", "categories", "description", "detail", "facing", "level", "name", "remediation", "title" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "enum" : [ "unindexed_foreign_keys", "auth_users_exposed", "auth_rls_initplan", "no_primary_key", "unused_index", "multiple_permissive_policies", "policy_exists_rls_disabled", "rls_enabled_no_policy", "duplicate_index", "security_definer_view", "function_search_path_mutable", "rls_disabled_in_public", "extension_in_public", "rls_references_user_metadata", "materialized_view_in_api", "foreign_table_in_api", "unsupported_reg_types", "auth_otp_long_expiry", "auth_otp_short_length", "ssl_not_enforced", "network_restrictions_not_set", "password_requirements_min_length", "pitr_not_enabled", "auth_leaked_password_protection", "auth_insufficient_mfa_options", "auth_password_policy_missing", "leaked_service_key", "no_backup_admin", "vulnerable_postgres_version" ]
          },
          "title" : {
            "type" : "string"
          },
          "level" : {
            "type" : "string",
            "enum" : [ "ERROR", "WARN", "INFO" ]
          },
          "facing" : {
            "type" : "string",
            "enum" : [ "EXTERNAL" ]
          },
          "categories" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "PERFORMANCE", "SECURITY" ]
            }
          },
          "description" : {
            "type" : "string"
          },
          "detail" : {
            "type" : "string"
          },
          "remediation" : {
            "type" : "string"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/V1ProjectAdvisorsResponseMetadata"
          },
          "cache_key" : {
            "type" : "string"
          }
        }
      },
      "UpdateCustomHostnameResponseDataResultSsl" : {
        "required" : [ "status", "validation_records" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string"
          },
          "validation_records" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateCustomHostnameResponseDataResultSslValidationRecords"
            }
          },
          "validation_errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateCustomHostnameResponseDataResultSslValidationErrors"
            }
          }
        }
      },
      "V1CreateProjectBody" : {
        "required" : [ "db_pass", "name", "organization_id" ],
        "type" : "object",
        "properties" : {
          "db_pass" : {
            "type" : "string",
            "description" : "Database password"
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "Name of your project"
          },
          "organization_id" : {
            "type" : "string",
            "description" : "Slug of your organization"
          },
          "plan" : {
            "type" : "string",
            "description" : "Subscription Plan is now set on organization level and is ignored in this request",
            "deprecated" : true,
            "enum" : [ "free", "pro" ]
          },
          "region" : {
            "type" : "string",
            "description" : "Region you want your server to reside in. Use region_selection instead.",
            "deprecated" : true,
            "enum" : [ "us-east-1", "us-east-2", "us-west-1", "us-west-2", "ap-east-1", "ap-southeast-1", "ap-northeast-1", "ap-northeast-2", "ap-southeast-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-north-1", "eu-central-1", "eu-central-2", "ca-central-1", "ap-south-1", "sa-east-1" ]
          },
          "region_selection" : {
            "description" : "Region selection. Only one of region or region_selection can be specified.",
            "example" : "{ type: 'smartGroup', code: 'americas' }",
            "discriminator" : {
              "propertyName" : "type"
            },
            "oneOf" : [ {
              "required" : [ "code", "type" ],
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "specific" ]
                },
                "code" : {
                  "minLength" : 1,
                  "type" : "string",
                  "description" : "Specific region code. The codes supported are not a stable API, and should be retrieved from the /available-regions endpoint.",
                  "enum" : [ "us-east-1", "us-east-2", "us-west-1", "us-west-2", "ap-east-1", "ap-southeast-1", "ap-northeast-1", "ap-northeast-2", "ap-southeast-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-north-1", "eu-central-1", "eu-central-2", "ca-central-1", "ap-south-1", "sa-east-1" ]
                }
              }
            }, {
              "required" : [ "code", "type" ],
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "smartGroup" ]
                },
                "code" : {
                  "type" : "string",
                  "description" : "The Smart Region Group's code. The codes supported are not a stable API, and should be retrieved from the /available-regions endpoint.",
                  "example" : "apac",
                  "enum" : [ "americas", "emea", "apac" ]
                }
              }
            } ]
          },
          "kps_enabled" : {
            "type" : "boolean",
            "description" : "This field is deprecated and is ignored in this request",
            "deprecated" : true
          },
          "desired_instance_size" : {
            "type" : "string",
            "enum" : [ "pico", "nano", "micro", "small", "medium", "large", "xlarge", "2xlarge", "4xlarge", "8xlarge", "12xlarge", "16xlarge", "24xlarge", "24xlarge_optimized_memory", "24xlarge_optimized_cpu", "24xlarge_high_memory", "48xlarge", "48xlarge_optimized_memory", "48xlarge_optimized_cpu", "48xlarge_high_memory" ]
          },
          "template_url" : {
            "type" : "string",
            "description" : "Template URL used to create the project from the CLI.",
            "format" : "uri",
            "example" : "https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone"
          },
          "release_channel" : {
            "type" : "string",
            "description" : "Release channel. If not provided, GA will be used.",
            "deprecated" : true,
            "enum" : [ "internal", "alpha", "beta", "ga", "withdrawn", "preview" ]
          },
          "postgres_engine" : {
            "type" : "string",
            "description" : "Postgres engine version. If not provided, the latest version will be used.",
            "deprecated" : true,
            "enum" : [ "15", "17", "17-oriole" ]
          }
        },
        "additionalProperties" : false
      },
      "NetworkBanResponseEnriched" : {
        "required" : [ "banned_ipv4_addresses" ],
        "type" : "object",
        "properties" : {
          "banned_ipv4_addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NetworkBanResponseEnrichedBannedIpv4Addresses"
            }
          }
        }
      },
      "CreateOrganizationV1" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RegionsInfoRecommendationsSmartGroup" : {
        "required" : [ "code", "name", "type" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string",
            "enum" : [ "americas", "emea", "apac" ]
          },
          "type" : {
            "type" : "string",
            "enum" : [ "smartGroup" ]
          }
        }
      },
      "RegionsInfoAll" : {
        "required" : [ "smartGroup", "specific" ],
        "type" : "object",
        "properties" : {
          "smartGroup" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegionsInfoRecommendationsSmartGroup"
            }
          },
          "specific" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegionsInfoRecommendationsSpecific"
            }
          }
        }
      },
      "JitListAccessResponseItems" : {
        "required" : [ "user_id", "user_roles" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "user_roles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JitAccessResponseUserRoles"
            }
          }
        }
      },
      "DeleteRolesResponse" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "enum" : [ "ok" ]
          }
        }
      },
      "NetworkRestrictionsResponseConfig" : {
        "type" : "object",
        "properties" : {
          "dbAllowedCidrs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dbAllowedCidrsV6" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "At any given point in time, this is the config that the user has requested be applied to their project. The `status` field indicates if it has been applied to the project, or is pending. When an updated config is received, the applied config is moved to `old_config`."
      },
      "CreateProviderResponseSaml" : {
        "required" : [ "entity_id", "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "entity_id" : {
            "type" : "string"
          },
          "metadata_url" : {
            "type" : "string"
          },
          "metadata_xml" : {
            "type" : "string"
          },
          "attribute_mapping" : {
            "$ref" : "#/components/schemas/CreateProviderBodyAttributeMapping"
          },
          "name_id_format" : {
            "type" : "string",
            "enum" : [ "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified", "urn:oasis:names:tc:SAML:2.0:nameid-format:transient", "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress", "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent" ]
          }
        }
      },
      "BranchIdOrRef5BranchIdOrRef5OneOf12" : {
        "type" : "string",
        "format" : "uuid",
        "deprecated" : true
      },
      "CreateSecretBody" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/CreateSecretBodyInner"
        }
      },
      "BranchDetailResponse" : {
        "required" : [ "db_host", "db_port", "postgres_engine", "postgres_version", "ref", "release_channel", "status" ],
        "type" : "object",
        "properties" : {
          "ref" : {
            "type" : "string"
          },
          "postgres_version" : {
            "type" : "string"
          },
          "postgres_engine" : {
            "type" : "string"
          },
          "release_channel" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "INACTIVE", "ACTIVE_HEALTHY", "ACTIVE_UNHEALTHY", "COMING_UP", "UNKNOWN", "GOING_DOWN", "INIT_FAILED", "REMOVED", "RESTORING", "UPGRADING", "PAUSING", "RESTORE_FAILED", "RESTARTING", "PAUSE_FAILED", "RESIZING" ]
          },
          "db_host" : {
            "type" : "string"
          },
          "db_port" : {
            "minimum" : 0,
            "exclusiveMinimum" : true,
            "type" : "integer"
          },
          "db_user" : {
            "type" : "string"
          },
          "db_pass" : {
            "type" : "string"
          },
          "jwt_secret" : {
            "type" : "string"
          }
        }
      },
      "JitAccessResponseUserRoles" : {
        "required" : [ "role" ],
        "type" : "object",
        "properties" : {
          "role" : {
            "minLength" : 1,
            "type" : "string"
          },
          "expires_at" : {
            "type" : "number"
          },
          "allowed_networks" : {
            "$ref" : "#/components/schemas/JitAccessResponseAllowedNetworks"
          }
        }
      },
      "JitAuthorizeAccessResponse" : {
        "required" : [ "user_id", "user_role" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "user_role" : {
            "$ref" : "#/components/schemas/JitAccessResponseUserRoles"
          }
        }
      },
      "SnippetResponseContent" : {
        "required" : [ "schema_version", "sql" ],
        "type" : "object",
        "properties" : {
          "favorite" : {
            "type" : "boolean",
            "description" : "Deprecated: Rely on root-level favorite property instead.",
            "deprecated" : true
          },
          "schema_version" : {
            "type" : "string"
          },
          "sql" : {
            "type" : "string"
          }
        }
      },
      "UpdateSupavisorConfigResponse" : {
        "required" : [ "default_pool_size", "pool_mode" ],
        "type" : "object",
        "properties" : {
          "default_pool_size" : {
            "type" : "integer",
            "nullable" : true
          },
          "pool_mode" : {
            "type" : "string"
          }
        }
      },
      "SnippetListProject" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "V1UpdatePostgrestConfigBody" : {
        "type" : "object",
        "properties" : {
          "db_extra_search_path" : {
            "type" : "string"
          },
          "db_schema" : {
            "type" : "string"
          },
          "max_rows" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer"
          },
          "db_pool" : {
            "maximum" : 1000,
            "minimum" : 0,
            "type" : "integer"
          }
        }
      },
      "AddonVariantAddonVariantAddonVariantOneOf123" : {
        "type" : "string",
        "enum" : [ "pitr_7", "pitr_14", "pitr_28" ]
      },
      "V1ProjectResponse" : {
        "required" : [ "created_at", "id", "name", "organization_id", "region", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of your project"
          },
          "organization_id" : {
            "type" : "string",
            "description" : "Slug of your organization"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of your project"
          },
          "region" : {
            "type" : "string",
            "description" : "Region of your project",
            "example" : "us-east-1"
          },
          "created_at" : {
            "type" : "string",
            "description" : "Creation timestamp",
            "example" : "2023-03-29T16:32:59Z"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "INACTIVE", "ACTIVE_HEALTHY", "ACTIVE_UNHEALTHY", "COMING_UP", "UNKNOWN", "GOING_DOWN", "INIT_FAILED", "REMOVED", "RESTORING", "UPGRADING", "PAUSING", "RESTORE_FAILED", "RESTARTING", "PAUSE_FAILED", "RESIZING" ]
          }
        }
      },
      "OrganizationProjectClaimResponseProject" : {
        "required" : [ "name", "ref" ],
        "type" : "object",
        "properties" : {
          "ref" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "OrganizationProjectsResponseProjects" : {
        "required" : [ "cloud_provider", "databases", "inserted_at", "is_branch", "name", "ref", "region", "status" ],
        "type" : "object",
        "properties" : {
          "ref" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "cloud_provider" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "is_branch" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "INACTIVE", "ACTIVE_HEALTHY", "ACTIVE_UNHEALTHY", "COMING_UP", "UNKNOWN", "GOING_DOWN", "INIT_FAILED", "REMOVED", "RESTORING", "UPGRADING", "PAUSING", "RESTORE_FAILED", "RESTARTING", "PAUSE_FAILED", "RESIZING" ]
          },
          "inserted_at" : {
            "type" : "string"
          },
          "databases" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrganizationProjectsResponseDatabases"
            }
          }
        }
      },
      "OrganizationProjectClaimResponsePreview" : {
        "required" : [ "errors", "info", "members_exceeding_free_project_limit", "source_subscription_plan", "target_subscription_plan", "valid", "warnings" ],
        "type" : "object",
        "properties" : {
          "valid" : {
            "type" : "boolean"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrganizationProjectClaimResponsePreviewWarnings"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrganizationProjectClaimResponsePreviewWarnings"
            }
          },
          "info" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrganizationProjectClaimResponsePreviewWarnings"
            }
          },
          "members_exceeding_free_project_limit" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrganizationProjectClaimResponsePreviewMembersExceedingFreeProjectLimit"
            }
          },
          "source_subscription_plan" : {
            "type" : "string",
            "enum" : [ "free", "pro", "team", "enterprise" ]
          },
          "target_subscription_plan" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "free", "pro", "team", "enterprise" ]
          }
        }
      },
      "FunctionDeployBodyMetadata" : {
        "required" : [ "entrypoint_path" ],
        "type" : "object",
        "properties" : {
          "entrypoint_path" : {
            "type" : "string"
          },
          "import_map_path" : {
            "type" : "string"
          },
          "static_patterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "verify_jwt" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "UpdateRunStatusBody" : {
        "type" : "object",
        "properties" : {
          "clone" : {
            "type" : "string",
            "enum" : [ "CREATED", "DEAD", "EXITED", "PAUSED", "REMOVING", "RESTARTING", "RUNNING" ]
          },
          "pull" : {
            "type" : "string",
            "enum" : [ "CREATED", "DEAD", "EXITED", "PAUSED", "REMOVING", "RESTARTING", "RUNNING" ]
          },
          "health" : {
            "type" : "string",
            "enum" : [ "CREATED", "DEAD", "EXITED", "PAUSED", "REMOVING", "RESTARTING", "RUNNING" ]
          },
          "configure" : {
            "type" : "string",
            "enum" : [ "CREATED", "DEAD", "EXITED", "PAUSED", "REMOVING", "RESTARTING", "RUNNING" ]
          },
          "migrate" : {
            "type" : "string",
            "enum" : [ "CREATED", "DEAD", "EXITED", "PAUSED", "REMOVING", "RESTARTING", "RUNNING" ]
          },
          "seed" : {
            "type" : "string",
            "enum" : [ "CREATED", "DEAD", "EXITED", "PAUSED", "REMOVING", "RESTARTING", "RUNNING" ]
          },
          "deploy" : {
            "type" : "string",
            "enum" : [ "CREATED", "DEAD", "EXITED", "PAUSED", "REMOVING", "RESTARTING", "RUNNING" ]
          }
        }
      },
      "BranchUpdateResponse" : {
        "required" : [ "message", "workflow_run_id" ],
        "type" : "object",
        "properties" : {
          "workflow_run_id" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string",
            "enum" : [ "ok" ]
          }
        }
      },
      "V1ListProjectsPaginatedResponsePagination" : {
        "required" : [ "count", "limit", "offset" ],
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "number",
            "description" : "Total number of projects. Use this to calculate the total number of pages."
          },
          "limit" : {
            "type" : "number",
            "description" : "Maximum number of projects per page (actual number may be less)"
          },
          "offset" : {
            "type" : "number",
            "description" : "Number of projects skipped in this response"
          }
        }
      },
      "ListActionRunResponseInner" : {
        "required" : [ "branch_id", "check_run_id", "created_at", "id", "run_steps", "updated_at", "workdir" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "branch_id" : {
            "type" : "string"
          },
          "run_steps" : {
            "type" : "array",
            "items" : {
              "required" : [ "created_at", "name", "status", "updated_at" ],
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "enum" : [ "clone", "pull", "health", "configure", "migrate", "seed", "deploy" ]
                },
                "status" : {
                  "type" : "string",
                  "enum" : [ "CREATED", "DEAD", "EXITED", "PAUSED", "REMOVING", "RESTARTING", "RUNNING" ]
                },
                "created_at" : {
                  "type" : "string"
                },
                "updated_at" : {
                  "type" : "string"
                }
              }
            }
          },
          "git_config" : {
            "nullable" : true
          },
          "workdir" : {
            "type" : "string",
            "nullable" : true
          },
          "check_run_id" : {
            "type" : "number",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        }
      },
      "V1UpsertMigrationBody" : {
        "required" : [ "query" ],
        "type" : "object",
        "properties" : {
          "query" : {
            "minLength" : 1,
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "CreateProviderResponseDomains" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        }
      },
      "UpdatePostgresConfigBody" : {
        "type" : "object",
        "properties" : {
          "effective_cache_size" : {
            "type" : "string"
          },
          "logical_decoding_work_mem" : {
            "type" : "string"
          },
          "maintenance_work_mem" : {
            "type" : "string"
          },
          "track_activity_query_size" : {
            "type" : "string"
          },
          "max_connections" : {
            "maximum" : 262143,
            "minimum" : 1,
            "type" : "integer"
          },
          "max_locks_per_transaction" : {
            "maximum" : 2147483640,
            "minimum" : 10,
            "type" : "integer"
          },
          "max_parallel_maintenance_workers" : {
            "maximum" : 1024,
            "minimum" : 0,
            "type" : "integer"
          },
          "max_parallel_workers" : {
            "maximum" : 1024,
            "minimum" : 0,
            "type" : "integer"
          },
          "max_parallel_workers_per_gather" : {
            "maximum" : 1024,
            "minimum" : 0,
            "type" : "integer"
          },
          "max_replication_slots" : {
            "type" : "integer"
          },
          "max_slot_wal_keep_size" : {
            "type" : "string"
          },
          "max_standby_archive_delay" : {
            "type" : "string"
          },
          "max_standby_streaming_delay" : {
            "type" : "string"
          },
          "max_wal_size" : {
            "type" : "string"
          },
          "max_wal_senders" : {
            "type" : "integer"
          },
          "max_worker_processes" : {
            "maximum" : 262143,
            "minimum" : 0,
            "type" : "integer"
          },
          "session_replication_role" : {
            "type" : "string",
            "enum" : [ "origin", "replica", "local" ]
          },
          "shared_buffers" : {
            "type" : "string"
          },
          "statement_timeout" : {
            "type" : "string"
          },
          "track_commit_timestamp" : {
            "type" : "boolean"
          },
          "wal_keep_size" : {
            "type" : "string"
          },
          "wal_sender_timeout" : {
            "type" : "string"
          },
          "work_mem" : {
            "type" : "string"
          },
          "hot_standby_feedback" : {
            "type" : "boolean"
          },
          "restart_database" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "UpdateCustomHostnameResponseData" : {
        "required" : [ "errors", "messages", "result", "success" ],
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "description" : "Any JSON-serializable value"
            }
          },
          "messages" : {
            "type" : "array",
            "items" : {
              "description" : "Any JSON-serializable value"
            }
          },
          "result" : {
            "$ref" : "#/components/schemas/UpdateCustomHostnameResponseDataResult"
          }
        }
      },
      "ListProvidersResponse" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ListProvidersResponseItems"
            }
          }
        }
      },
      "BranchIdOrRef3OneOf1" : {
        "maxLength" : 20,
        "minLength" : 20,
        "pattern" : "^[a-z]+$",
        "type" : "string",
        "description" : "Project ref"
      },
      "UpdateCustomHostnameResponse" : {
        "required" : [ "custom_hostname", "data", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "1_not_started", "2_initiated", "3_challenge_verified", "4_origin_setup_completed", "5_services_reconfigured" ]
          },
          "custom_hostname" : {
            "type" : "string"
          },
          "data" : {
            "$ref" : "#/components/schemas/UpdateCustomHostnameResponseData"
          }
        }
      },
      "BranchIdOrRef" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/BranchIdOrRefOneOf1"
        }, {
          "$ref" : "#/components/schemas/BranchIdOrRefBranchIdOrRefOneOf12"
        } ]
      },
      "SnippetList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SnippetListData"
            }
          },
          "cursor" : {
            "type" : "string"
          }
        }
      },
      "V1RestorePointPostBody" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 20,
            "type" : "string"
          }
        }
      },
      "SnippetResponse" : {
        "required" : [ "content", "description", "favorite", "id", "inserted_at", "name", "owner", "project", "type", "updated_at", "updated_by", "visibility" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "inserted_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "sql" ]
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "user", "project", "org", "public" ]
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "project" : {
            "$ref" : "#/components/schemas/SnippetListProject"
          },
          "owner" : {
            "$ref" : "#/components/schemas/SnippetListOwner"
          },
          "updated_by" : {
            "$ref" : "#/components/schemas/SnippetListOwner"
          },
          "favorite" : {
            "type" : "boolean"
          },
          "content" : {
            "$ref" : "#/components/schemas/SnippetResponseContent"
          }
        }
      },
      "OrganizationResponseV1" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "NetworkRestrictionsV2Response" : {
        "required" : [ "config", "entitlement", "status" ],
        "type" : "object",
        "properties" : {
          "entitlement" : {
            "type" : "string",
            "enum" : [ "disallowed", "allowed" ]
          },
          "config" : {
            "$ref" : "#/components/schemas/NetworkRestrictionsV2ResponseConfig"
          },
          "old_config" : {
            "$ref" : "#/components/schemas/NetworkRestrictionsV2ResponseOldConfig"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "applied_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "stored", "applied" ]
          }
        }
      },
      "V1BackupsResponsePhysicalBackupData" : {
        "type" : "object",
        "properties" : {
          "earliest_physical_backup_date_unix" : {
            "type" : "integer"
          },
          "latest_physical_backup_date_unix" : {
            "type" : "integer"
          }
        }
      },
      "NetworkRestrictionsV2ResponseConfigDbAllowedCidrs" : {
        "required" : [ "address", "type" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "v4", "v6" ]
          }
        }
      },
      "V1ListMigrationsResponse" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/V1ListMigrationsResponseInner"
        }
      },
      "NetworkRestrictionsResponseOldConfig" : {
        "type" : "object",
        "properties" : {
          "dbAllowedCidrs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dbAllowedCidrsV6" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Populated when a new config has been received, but not registered as successfully applied to a project."
      },
      "LegacyApiKeysResponse" : {
        "required" : [ "enabled" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean"
          }
        }
      },
      "SubdomainAvailabilityResponse" : {
        "required" : [ "available" ],
        "type" : "object",
        "properties" : {
          "available" : {
            "type" : "boolean"
          }
        }
      },
      "BranchIdOrRef2OneOf1" : {
        "maxLength" : 20,
        "minLength" : 20,
        "pattern" : "^[a-z]+$",
        "type" : "string",
        "description" : "Project ref"
      },
      "NetworkBanResponseEnrichedBannedIpv4Addresses" : {
        "required" : [ "banned_address", "identifier", "type" ],
        "type" : "object",
        "properties" : {
          "banned_address" : {
            "type" : "string"
          },
          "identifier" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "V1ListProjectsPaginatedResponse" : {
        "required" : [ "pagination", "projects" ],
        "type" : "object",
        "properties" : {
          "projects" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/V1ListProjectsPaginatedResponseProjects"
            }
          },
          "pagination" : {
            "$ref" : "#/components/schemas/V1ListProjectsPaginatedResponsePagination"
          }
        }
      },
      "BulkUpdateFunctionResponseFunctions" : {
        "required" : [ "created_at", "id", "name", "slug", "status", "updated_at", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "slug" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "REMOVED", "THROTTLED" ]
          },
          "version" : {
            "type" : "integer"
          },
          "created_at" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updated_at" : {
            "type" : "integer",
            "format" : "int64"
          },
          "verify_jwt" : {
            "type" : "boolean"
          },
          "import_map" : {
            "type" : "boolean"
          },
          "entrypoint_path" : {
            "type" : "string"
          },
          "import_map_path" : {
            "type" : "string"
          },
          "ezbr_sha256" : {
            "type" : "string"
          }
        }
      },
      "ApiKeyResponse" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "api_key" : {
            "type" : "string",
            "nullable" : true
          },
          "id" : {
            "type" : "string",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "legacy", "publishable", "secret" ]
          },
          "prefix" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "hash" : {
            "type" : "string",
            "nullable" : true
          },
          "secret_jwt_template" : {
            "type" : "object",
            "additionalProperties" : { },
            "nullable" : true
          },
          "inserted_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "UpdatePgsodiumConfigBody" : {
        "required" : [ "root_key" ],
        "type" : "object",
        "properties" : {
          "root_key" : {
            "type" : "string"
          }
        }
      },
      "V1ProjectAdvisorsResponse" : {
        "required" : [ "lints" ],
        "type" : "object",
        "properties" : {
          "lints" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/V1ProjectAdvisorsResponseLints"
            }
          }
        }
      },
      "V1ServiceHealthResponse" : {
        "required" : [ "healthy", "name", "status" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "enum" : [ "auth", "db", "db_postgres_user", "pooler", "realtime", "rest", "storage", "pg_bouncer" ]
          },
          "healthy" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "COMING_UP", "ACTIVE_HEALTHY", "UNHEALTHY" ]
          },
          "info" : {
            "oneOf" : [ {
              "required" : [ "description", "name", "version" ],
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "enum" : [ "GoTrue" ]
                },
                "version" : {
                  "type" : "string"
                },
                "description" : {
                  "type" : "string"
                }
              }
            }, {
              "required" : [ "connected_cluster", "db_connected", "healthy" ],
              "type" : "object",
              "properties" : {
                "healthy" : {
                  "type" : "boolean"
                },
                "db_connected" : {
                  "type" : "boolean"
                },
                "connected_cluster" : {
                  "type" : "integer"
                }
              }
            }, {
              "required" : [ "db_schema" ],
              "type" : "object",
              "properties" : {
                "db_schema" : {
                  "type" : "string"
                }
              }
            } ]
          },
          "error" : {
            "type" : "string"
          }
        }
      },
      "DatabaseUpgradeStatusResponse" : {
        "required" : [ "databaseUpgradeStatus" ],
        "type" : "object",
        "properties" : {
          "databaseUpgradeStatus" : {
            "$ref" : "#/components/schemas/DatabaseUpgradeStatusResponseDatabaseUpgradeStatus"
          }
        }
      },
      "RegionsInfoRecommendationsSpecific" : {
        "required" : [ "code", "name", "provider", "type" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "specific" ]
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "AWS", "FLY", "AWS_K8S", "AWS_NIMBUS" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "capacity", "other" ]
          }
        }
      },
      "DatabaseUpgradeStatusResponseDatabaseUpgradeStatus" : {
        "required" : [ "initiated_at", "latest_status_at", "status", "target_version" ],
        "type" : "object",
        "properties" : {
          "initiated_at" : {
            "type" : "string"
          },
          "latest_status_at" : {
            "type" : "string"
          },
          "target_version" : {
            "type" : "number"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "1_upgraded_instance_launch_failed", "2_volume_detachchment_from_upgraded_instance_failed", "3_volume_attachment_to_original_instance_failed", "4_data_upgrade_initiation_failed", "5_data_upgrade_completion_failed", "6_volume_detachchment_from_original_instance_failed", "7_volume_attachment_to_upgraded_instance_failed", "8_upgrade_completion_failed", "9_post_physical_backup_failed" ]
          },
          "progress" : {
            "type" : "string",
            "enum" : [ "0_requested", "1_started", "2_launched_upgraded_instance", "3_detached_volume_from_upgraded_instance", "4_attached_volume_to_original_instance", "5_initiated_data_upgrade", "6_completed_data_upgrade", "7_detached_volume_from_original_instance", "8_attached_volume_to_upgraded_instance", "9_completed_upgrade", "10_completed_post_physical_backup" ]
          },
          "status" : {
            "type" : "number"
          }
        },
        "nullable" : true
      },
      "SetUpReadReplicaBody" : {
        "required" : [ "read_replica_region" ],
        "type" : "object",
        "properties" : {
          "read_replica_region" : {
            "type" : "string",
            "description" : "Region you want your read replica to reside in",
            "example" : "us-east-1",
            "enum" : [ "us-east-1", "us-east-2", "us-west-1", "us-west-2", "ap-east-1", "ap-southeast-1", "ap-northeast-1", "ap-northeast-2", "ap-southeast-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-north-1", "eu-central-1", "eu-central-2", "ca-central-1", "ap-south-1", "sa-east-1" ]
          }
        }
      },
      "CreateProviderBody" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "What type of provider will be created",
            "enum" : [ "saml" ]
          },
          "metadata_xml" : {
            "type" : "string"
          },
          "metadata_url" : {
            "type" : "string"
          },
          "domains" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "attribute_mapping" : {
            "$ref" : "#/components/schemas/CreateProviderBodyAttributeMapping"
          },
          "name_id_format" : {
            "type" : "string",
            "enum" : [ "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified", "urn:oasis:names:tc:SAML:2.0:nameid-format:transient", "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress", "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent" ]
          }
        }
      },
      "StorageConfigResponseExternal" : {
        "required" : [ "upstreamTarget" ],
        "type" : "object",
        "properties" : {
          "upstreamTarget" : {
            "type" : "string",
            "enum" : [ "main", "canary" ]
          }
        }
      },
      "ReadOnlyStatusResponse" : {
        "required" : [ "enabled", "override_active_until", "override_enabled" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean"
          },
          "override_enabled" : {
            "type" : "boolean"
          },
          "override_active_until" : {
            "type" : "string"
          }
        }
      },
      "NetworkRestrictionsV2ResponseOldConfig" : {
        "type" : "object",
        "properties" : {
          "dbAllowedCidrs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NetworkRestrictionsV2ResponseConfigDbAllowedCidrs"
            }
          }
        },
        "description" : "Populated when a new config has been received, but not registered as successfully applied to a project."
      },
      "V1RestorePointResponse" : {
        "required" : [ "name", "status" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "PENDING", "REMOVED" ]
          }
        }
      },
      "JitListAccessResponse" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JitListAccessResponseItems"
            }
          }
        }
      },
      "BranchIdOrRef1OneOf1" : {
        "maxLength" : 20,
        "minLength" : 20,
        "pattern" : "^[a-z]+$",
        "type" : "string",
        "description" : "Project ref"
      },
      "CreateApiKeyBody" : {
        "required" : [ "name", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "publishable", "secret" ]
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 4,
            "pattern" : "^[a-z_][a-z0-9_]+$",
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "secret_jwt_template" : {
            "type" : "object",
            "additionalProperties" : { },
            "nullable" : true
          }
        }
      },
      "ListProjectAddonsResponse" : {
        "required" : [ "available_addons", "selected_addons" ],
        "type" : "object",
        "properties" : {
          "selected_addons" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ListProjectAddonsResponseSelectedAddons"
            }
          },
          "available_addons" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ListProjectAddonsResponseAvailableAddons"
            }
          }
        }
      },
      "CreateRoleBody" : {
        "required" : [ "read_only" ],
        "type" : "object",
        "properties" : {
          "read_only" : {
            "type" : "boolean"
          }
        }
      },
      "V1RestorePitrBody" : {
        "required" : [ "recovery_time_target_unix" ],
        "type" : "object",
        "properties" : {
          "recovery_time_target_unix" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "GetProjectAvailableRestoreVersionsResponseAvailableVersions" : {
        "required" : [ "postgres_engine", "release_channel", "version" ],
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "string"
          },
          "release_channel" : {
            "type" : "string",
            "enum" : [ "internal", "alpha", "beta", "ga", "withdrawn", "preview" ]
          },
          "postgres_engine" : {
            "type" : "string",
            "enum" : [ "13", "14", "15", "17", "17-oriole" ]
          }
        }
      },
      "StorageConfigResponseCapabilities" : {
        "required" : [ "iceberg_catalog", "list_v2" ],
        "type" : "object",
        "properties" : {
          "list_v2" : {
            "type" : "boolean"
          },
          "iceberg_catalog" : {
            "type" : "boolean"
          }
        }
      },
      "V1UndoBody" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 20,
            "type" : "string"
          }
        }
      },
      "DeployFunctionResponse" : {
        "required" : [ "id", "name", "slug", "status", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "slug" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "REMOVED", "THROTTLED" ]
          },
          "version" : {
            "type" : "integer"
          },
          "created_at" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updated_at" : {
            "type" : "integer",
            "format" : "int64"
          },
          "verify_jwt" : {
            "type" : "boolean"
          },
          "import_map" : {
            "type" : "boolean"
          },
          "entrypoint_path" : {
            "type" : "string"
          },
          "import_map_path" : {
            "type" : "string"
          },
          "ezbr_sha256" : {
            "type" : "string"
          }
        }
      },
      "CreateProviderResponse" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "saml" : {
            "$ref" : "#/components/schemas/CreateProviderResponseSaml"
          },
          "domains" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateProviderResponseDomains"
            }
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        }
      },
      "ListProjectAddonsResponseSelectedAddons" : {
        "required" : [ "type", "variant" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "custom_domain", "compute_instance", "pitr", "ipv4", "auth_mfa_phone", "auth_mfa_web_authn", "log_drain" ]
          },
          "variant" : {
            "$ref" : "#/components/schemas/ListProjectAddonsResponseVariant"
          }
        }
      },
      "V1StorageBucketResponse" : {
        "required" : [ "created_at", "id", "name", "owner", "public", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "owner" : {
            "type" : "string"
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          },
          "public" : {
            "type" : "boolean"
          }
        }
      },
      "NetworkRestrictionsPatchRequest" : {
        "type" : "object",
        "properties" : {
          "add" : {
            "$ref" : "#/components/schemas/NetworkRestrictionsPatchRequestAdd"
          },
          "remove" : {
            "$ref" : "#/components/schemas/NetworkRestrictionsPatchRequestAdd"
          }
        }
      },
      "V1CreateMigrationBody" : {
        "required" : [ "query" ],
        "type" : "object",
        "properties" : {
          "query" : {
            "minLength" : 1,
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "V1GetUsageApiRequestsCountResponseResult" : {
        "required" : [ "count" ],
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "number"
          }
        }
      },
      "ActivateVanitySubdomainResponse" : {
        "required" : [ "custom_domain" ],
        "type" : "object",
        "properties" : {
          "custom_domain" : {
            "type" : "string"
          }
        }
      },
      "BranchIdOrRef4BranchIdOrRef4OneOf12" : {
        "type" : "string",
        "format" : "uuid",
        "deprecated" : true
      },
      "BranchIdOrRef2BranchIdOrRef2OneOf12" : {
        "type" : "string",
        "format" : "uuid",
        "deprecated" : true
      },
      "GetProjectDbMetadataResponseDatabases" : {
        "required" : [ "name", "schemas" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "schemas" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetProjectDbMetadataResponseSchemas"
            }
          }
        },
        "additionalProperties" : true
      },
      "BranchDeleteResponse" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "enum" : [ "ok" ]
          }
        }
      },
      "ActionRunResponse" : {
        "required" : [ "branch_id", "check_run_id", "created_at", "id", "run_steps", "updated_at", "workdir" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "branch_id" : {
            "type" : "string"
          },
          "run_steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ActionRunResponseRunSteps"
            }
          },
          "git_config" : {
            "nullable" : true
          },
          "workdir" : {
            "type" : "string",
            "nullable" : true
          },
          "check_run_id" : {
            "type" : "number",
            "nullable" : true
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        }
      },
      "V1CreateFunctionBody" : {
        "required" : [ "body", "name", "slug" ],
        "type" : "object",
        "properties" : {
          "slug" : {
            "pattern" : "^[A-Za-z0-9_-]+$",
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "body" : {
            "type" : "string"
          },
          "verify_jwt" : {
            "type" : "boolean"
          }
        }
      },
      "ListProjectAddonsResponseVariant" : {
        "required" : [ "id", "name", "price" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "oneOf" : [ {
              "type" : "string",
              "enum" : [ "ci_micro", "ci_small", "ci_medium", "ci_large", "ci_xlarge", "ci_2xlarge", "ci_4xlarge", "ci_8xlarge", "ci_12xlarge", "ci_16xlarge", "ci_24xlarge", "ci_24xlarge_optimized_cpu", "ci_24xlarge_optimized_memory", "ci_24xlarge_high_memory", "ci_48xlarge", "ci_48xlarge_optimized_cpu", "ci_48xlarge_optimized_memory", "ci_48xlarge_high_memory" ]
            }, {
              "type" : "string",
              "enum" : [ "cd_default" ]
            }, {
              "type" : "string",
              "enum" : [ "pitr_7", "pitr_14", "pitr_28" ]
            }, {
              "type" : "string",
              "enum" : [ "ipv4_default" ]
            }, {
              "type" : "string",
              "enum" : [ "auth_mfa_phone_default" ]
            }, {
              "type" : "string",
              "enum" : [ "auth_mfa_web_authn_default" ]
            }, {
              "type" : "string",
              "enum" : [ "log_drain_default" ]
            } ]
          },
          "name" : {
            "type" : "string"
          },
          "price" : {
            "$ref" : "#/components/schemas/ListProjectAddonsResponseVariantPrice"
          },
          "meta" : {
            "description" : "Any JSON-serializable value"
          }
        }
      },
      "AddonVariantAddonVariantOneOf12" : {
        "type" : "string",
        "enum" : [ "cd_default" ]
      },
      "BranchIdOrRef6OneOf1" : {
        "maxLength" : 20,
        "minLength" : 20,
        "pattern" : "^[a-z]+$",
        "type" : "string",
        "description" : "Project ref"
      },
      "GetProviderResponse" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "saml" : {
            "$ref" : "#/components/schemas/CreateProviderResponseSaml"
          },
          "domains" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateProviderResponseDomains"
            }
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        }
      },
      "CreateProviderBodyAttributeMapping" : {
        "required" : [ "keys" ],
        "type" : "object",
        "properties" : {
          "keys" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CreateProviderBodyAttributeMappingKeys"
            }
          }
        }
      },
      "UpdateCustomHostnameResponseDataResultSslValidationRecords" : {
        "required" : [ "txt_name", "txt_value" ],
        "type" : "object",
        "properties" : {
          "txt_name" : {
            "type" : "string"
          },
          "txt_value" : {
            "type" : "string"
          }
        }
      },
      "GetProjectDbMetadataResponseSchemas" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          }
        },
        "additionalProperties" : true
      },
      "StorageConfigResponseFeaturesImageTransformation" : {
        "required" : [ "enabled" ],
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean"
          }
        }
      },
      "ThirdPartyAuth" : {
        "required" : [ "id", "inserted_at", "type", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "type" : {
            "type" : "string"
          },
          "oidc_issuer_url" : {
            "type" : "string",
            "nullable" : true
          },
          "jwks_url" : {
            "type" : "string",
            "nullable" : true
          },
          "custom_jwks" : {
            "nullable" : true
          },
          "resolved_jwks" : {
            "nullable" : true
          },
          "inserted_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          },
          "resolved_at" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "SnippetListData" : {
        "required" : [ "description", "favorite", "id", "inserted_at", "name", "owner", "project", "type", "updated_at", "updated_by", "visibility" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "inserted_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "sql" ]
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "user", "project", "org", "public" ]
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "project" : {
            "$ref" : "#/components/schemas/SnippetListProject"
          },
          "owner" : {
            "$ref" : "#/components/schemas/SnippetListOwner"
          },
          "updated_by" : {
            "$ref" : "#/components/schemas/SnippetListOwner"
          },
          "favorite" : {
            "type" : "boolean"
          }
        }
      },
      "UpdateCustomHostnameResponseDataResultSslValidationErrors" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          }
        }
      },
      "OrganizationProjectClaimResponsePreviewMembersExceedingFreeProjectLimit" : {
        "required" : [ "limit", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "limit" : {
            "type" : "number"
          }
        }
      },
      "V1ProjectWithDatabaseResponseDatabase" : {
        "required" : [ "host", "postgres_engine", "release_channel", "version" ],
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "Database host"
          },
          "version" : {
            "type" : "string",
            "description" : "Database version"
          },
          "postgres_engine" : {
            "type" : "string",
            "description" : "Database engine"
          },
          "release_channel" : {
            "type" : "string",
            "description" : "Release channel"
          }
        }
      },
      "V1OrganizationMemberResponse" : {
        "required" : [ "mfa_enabled", "role_name", "user_id", "user_name" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "type" : "string"
          },
          "user_name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "role_name" : {
            "type" : "string"
          },
          "mfa_enabled" : {
            "type" : "boolean"
          }
        }
      },
      "V1PostgrestConfigResponse" : {
        "required" : [ "db_extra_search_path", "db_pool", "db_schema", "max_rows" ],
        "type" : "object",
        "properties" : {
          "db_schema" : {
            "type" : "string"
          },
          "max_rows" : {
            "type" : "integer"
          },
          "db_extra_search_path" : {
            "type" : "string"
          },
          "db_pool" : {
            "type" : "integer",
            "description" : "If `null`, the value is automatically configured based on compute size.",
            "nullable" : true
          }
        }
      },
      "CreateBranchBody" : {
        "required" : [ "branch_name" ],
        "type" : "object",
        "properties" : {
          "branch_name" : {
            "minLength" : 1,
            "type" : "string"
          },
          "git_branch" : {
            "type" : "string"
          },
          "is_default" : {
            "type" : "boolean"
          },
          "persistent" : {
            "type" : "boolean"
          },
          "region" : {
            "type" : "string"
          },
          "desired_instance_size" : {
            "type" : "string",
            "enum" : [ "pico", "nano", "micro", "small", "medium", "large", "xlarge", "2xlarge", "4xlarge", "8xlarge", "12xlarge", "16xlarge", "24xlarge", "24xlarge_optimized_memory", "24xlarge_optimized_cpu", "24xlarge_high_memory", "48xlarge", "48xlarge_optimized_memory", "48xlarge_optimized_cpu", "48xlarge_high_memory" ]
          },
          "release_channel" : {
            "type" : "string",
            "description" : "Release channel. If not provided, GA will be used.",
            "enum" : [ "internal", "alpha", "beta", "ga", "withdrawn", "preview" ]
          },
          "postgres_engine" : {
            "type" : "string",
            "description" : "Postgres engine version. If not provided, the latest version will be used.",
            "enum" : [ "15", "17", "17-oriole" ]
          },
          "secrets" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "with_data" : {
            "type" : "boolean"
          },
          "notify_url" : {
            "type" : "string",
            "description" : "HTTP endpoint to receive branch status updates.",
            "format" : "uri"
          }
        }
      },
      "UpdateRunStatusResponse" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "enum" : [ "ok" ]
          }
        }
      },
      "BulkUpdateFunctionBodyInner" : {
        "required" : [ "id", "name", "slug", "status", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "slug" : {
            "pattern" : "^[A-Za-z0-9_-]+$",
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "REMOVED", "THROTTLED" ]
          },
          "version" : {
            "type" : "integer"
          },
          "created_at" : {
            "type" : "integer",
            "format" : "int64"
          },
          "verify_jwt" : {
            "type" : "boolean"
          },
          "import_map" : {
            "type" : "boolean"
          },
          "entrypoint_path" : {
            "type" : "string"
          },
          "import_map_path" : {
            "type" : "string"
          },
          "ezbr_sha256" : {
            "type" : "string"
          }
        }
      },
      "NetworkBanResponse" : {
        "required" : [ "banned_ipv4_addresses" ],
        "type" : "object",
        "properties" : {
          "banned_ipv4_addresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "V1GetUsageApiRequestsCountResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/V1GetUsageApiRequestsCountResponseResult"
            }
          },
          "error" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "required" : [ "code", "errors", "message", "status" ],
              "type" : "object",
              "properties" : {
                "code" : {
                  "type" : "number"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "required" : [ "domain", "location", "locationType", "message", "reason" ],
                    "type" : "object",
                    "properties" : {
                      "domain" : {
                        "type" : "string"
                      },
                      "location" : {
                        "type" : "string"
                      },
                      "locationType" : {
                        "type" : "string"
                      },
                      "message" : {
                        "type" : "string"
                      },
                      "reason" : {
                        "type" : "string"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "status" : {
                  "type" : "string"
                }
              }
            } ]
          }
        }
      },
      "SigningKeysResponseKeys" : {
        "required" : [ "algorithm", "created_at", "id", "status", "updated_at" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "algorithm" : {
            "type" : "string",
            "enum" : [ "EdDSA", "ES256", "RS256", "HS256" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "in_use", "previously_used", "revoked", "standby" ]
          },
          "public_jwk" : {
            "nullable" : true
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false
      },
      "NetworkRestrictionsRequest" : {
        "type" : "object",
        "properties" : {
          "dbAllowedCidrs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dbAllowedCidrsV6" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "AuthorizeJitAccessBody" : {
        "required" : [ "rhost", "role" ],
        "type" : "object",
        "properties" : {
          "role" : {
            "minLength" : 1,
            "type" : "string"
          },
          "rhost" : {
            "minLength" : 1,
            "type" : "string"
          }
        }
      },
      "ActionRunResponseRunSteps" : {
        "required" : [ "created_at", "name", "status", "updated_at" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "enum" : [ "clone", "pull", "health", "configure", "migrate", "seed", "deploy" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CREATED", "DEAD", "EXITED", "PAUSED", "REMOVING", "RESTARTING", "RUNNING" ]
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        }
      },
      "NetworkRestrictionsPatchRequestAdd" : {
        "type" : "object",
        "properties" : {
          "dbAllowedCidrs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dbAllowedCidrsV6" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "PostgresConfigResponse" : {
        "type" : "object",
        "properties" : {
          "effective_cache_size" : {
            "type" : "string"
          },
          "logical_decoding_work_mem" : {
            "type" : "string"
          },
          "maintenance_work_mem" : {
            "type" : "string"
          },
          "track_activity_query_size" : {
            "type" : "string"
          },
          "max_connections" : {
            "maximum" : 262143,
            "minimum" : 1,
            "type" : "integer"
          },
          "max_locks_per_transaction" : {
            "maximum" : 2147483640,
            "minimum" : 10,
            "type" : "integer"
          },
          "max_parallel_maintenance_workers" : {
            "maximum" : 1024,
            "minimum" : 0,
            "type" : "integer"
          },
          "max_parallel_workers" : {
            "maximum" : 1024,
            "minimum" : 0,
            "type" : "integer"
          },
          "max_parallel_workers_per_gather" : {
            "maximum" : 1024,
            "minimum" : 0,
            "type" : "integer"
          },
          "max_replication_slots" : {
            "type" : "integer"
          },
          "max_slot_wal_keep_size" : {
            "type" : "string"
          },
          "max_standby_archive_delay" : {
            "type" : "string"
          },
          "max_standby_streaming_delay" : {
            "type" : "string"
          },
          "max_wal_size" : {
            "type" : "string"
          },
          "max_wal_senders" : {
            "type" : "integer"
          },
          "max_worker_processes" : {
            "maximum" : 262143,
            "minimum" : 0,
            "type" : "integer"
          },
          "session_replication_role" : {
            "type" : "string",
            "enum" : [ "origin", "replica", "local" ]
          },
          "shared_buffers" : {
            "type" : "string"
          },
          "statement_timeout" : {
            "type" : "string"
          },
          "track_commit_timestamp" : {
            "type" : "boolean"
          },
          "wal_keep_size" : {
            "type" : "string"
          },
          "wal_sender_timeout" : {
            "type" : "string"
          },
          "work_mem" : {
            "type" : "string"
          },
          "hot_standby_feedback" : {
            "type" : "boolean"
          }
        }
      },
      "UpdateCustomHostnameResponseDataResultOwnershipVerification" : {
        "required" : [ "name", "type", "value" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "CreateProviderBodyAttributeMappingKeys" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "names" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "default" : {
            "oneOf" : [ {
              "type" : "object",
              "properties" : { }
            }, {
              "type" : "number"
            }, {
              "type" : "string"
            }, {
              "type" : "boolean"
            } ]
          },
          "array" : {
            "type" : "boolean"
          }
        }
      },
      "AddonVariant" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/AddonVariantOneOf1"
        }, {
          "$ref" : "#/components/schemas/AddonVariantAddonVariantOneOf12"
        }, {
          "$ref" : "#/components/schemas/AddonVariantAddonVariantAddonVariantOneOf123"
        }, {
          "$ref" : "#/components/schemas/AddonVariantAddonVariantAddonVariantAddonVariantOneOf1234"
        } ]
      },
      "V1ListProjectsPaginatedResponseProjects" : {
        "required" : [ "cloud_provider", "id", "inserted_at", "is_branch_enabled", "is_physical_backups_enabled", "name", "organization_id", "organization_slug", "preview_branch_refs", "ref", "region", "status", "subscription_id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "cloud_provider" : {
            "type" : "string"
          },
          "inserted_at" : {
            "type" : "string",
            "nullable" : true
          },
          "name" : {
            "type" : "string"
          },
          "organization_id" : {
            "type" : "number"
          },
          "organization_slug" : {
            "type" : "string"
          },
          "ref" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "subscription_id" : {
            "type" : "string",
            "nullable" : true
          },
          "is_branch_enabled" : {
            "type" : "boolean"
          },
          "is_physical_backups_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "preview_branch_refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "disk_volume_size_gb" : {
            "type" : "number"
          },
          "infra_compute_size" : {
            "type" : "string",
            "enum" : [ "pico", "nano", "micro", "small", "medium", "large", "xlarge", "2xlarge", "4xlarge", "8xlarge", "12xlarge", "16xlarge", "24xlarge", "24xlarge_optimized_memory", "24xlarge_optimized_cpu", "24xlarge_high_memory", "48xlarge", "48xlarge_optimized_memory", "48xlarge_optimized_cpu", "48xlarge_high_memory" ]
          }
        }
      },
      "ListProjectAddonsResponseVariantPrice" : {
        "required" : [ "amount", "description", "interval", "type" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "fixed", "usage" ]
          },
          "interval" : {
            "type" : "string",
            "enum" : [ "monthly", "hourly" ]
          },
          "amount" : {
            "type" : "number"
          }
        }
      },
      "SslEnforcementResponseCurrentConfig" : {
        "required" : [ "database" ],
        "type" : "object",
        "properties" : {
          "database" : {
            "type" : "boolean"
          }
        }
      },
      "SslEnforcementRequest" : {
        "required" : [ "requestedConfig" ],
        "type" : "object",
        "properties" : {
          "requestedConfig" : {
            "$ref" : "#/components/schemas/SslEnforcementResponseCurrentConfig"
          }
        }
      },
      "V1GetUsageApiCountResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/V1GetUsageApiCountResponseResult"
            }
          },
          "error" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "required" : [ "code", "errors", "message", "status" ],
              "type" : "object",
              "properties" : {
                "code" : {
                  "type" : "number"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "required" : [ "domain", "location", "locationType", "message", "reason" ],
                    "type" : "object",
                    "properties" : {
                      "domain" : {
                        "type" : "string"
                      },
                      "location" : {
                        "type" : "string"
                      },
                      "locationType" : {
                        "type" : "string"
                      },
                      "message" : {
                        "type" : "string"
                      },
                      "reason" : {
                        "type" : "string"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "status" : {
                  "type" : "string"
                }
              }
            } ]
          }
        }
      },
      "V1OrganizationSlugResponse" : {
        "required" : [ "allowed_release_channels", "id", "name", "opt_in_tags" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "plan" : {
            "type" : "string",
            "enum" : [ "free", "pro", "team", "enterprise" ]
          },
          "opt_in_tags" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "AI_SQL_GENERATOR_OPT_IN", "AI_DATA_GENERATOR_OPT_IN", "AI_LOG_GENERATOR_OPT_IN" ]
            }
          },
          "allowed_release_channels" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "internal", "alpha", "beta", "ga", "withdrawn", "preview" ]
            }
          }
        }
      },
      "FunctionDeployBody" : {
        "required" : [ "metadata" ],
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "binary"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/FunctionDeployBodyMetadata"
          }
        }
      },
      "DeleteProviderResponse" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "saml" : {
            "$ref" : "#/components/schemas/CreateProviderResponseSaml"
          },
          "domains" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateProviderResponseDomains"
            }
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        }
      },
      "ProjectClaimTokenResponse" : {
        "required" : [ "created_at", "created_by", "expires_at", "token_alias" ],
        "type" : "object",
        "properties" : {
          "token_alias" : {
            "type" : "string"
          },
          "expires_at" : {
            "type" : "string"
          },
          "created_at" : {
            "type" : "string"
          },
          "created_by" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "AddonVariantOneOf1" : {
        "type" : "string",
        "enum" : [ "ci_micro", "ci_small", "ci_medium", "ci_large", "ci_xlarge", "ci_2xlarge", "ci_4xlarge", "ci_8xlarge", "ci_12xlarge", "ci_16xlarge", "ci_24xlarge", "ci_24xlarge_optimized_cpu", "ci_24xlarge_optimized_memory", "ci_24xlarge_high_memory", "ci_48xlarge", "ci_48xlarge_optimized_cpu", "ci_48xlarge_optimized_memory", "ci_48xlarge_high_memory" ]
      },
      "AnalyticsResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "array",
            "items" : { }
          },
          "error" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "required" : [ "code", "errors", "message", "status" ],
              "type" : "object",
              "properties" : {
                "code" : {
                  "type" : "number"
                },
                "errors" : {
                  "type" : "array",
                  "items" : {
                    "required" : [ "domain", "location", "locationType", "message", "reason" ],
                    "type" : "object",
                    "properties" : {
                      "domain" : {
                        "type" : "string"
                      },
                      "location" : {
                        "type" : "string"
                      },
                      "locationType" : {
                        "type" : "string"
                      },
                      "message" : {
                        "type" : "string"
                      },
                      "reason" : {
                        "type" : "string"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "status" : {
                  "type" : "string"
                }
              }
            } ]
          }
        }
      },
      "UpdateJitAccessBody" : {
        "required" : [ "roles", "user_id" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "minLength" : 1,
            "type" : "string",
            "format" : "uuid"
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JitAccessResponseUserRoles"
            }
          }
        }
      },
      "CreateSecretBodyInner" : {
        "required" : [ "name", "value" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 256,
            "pattern" : "^(?!SUPABASE_).*",
            "type" : "string",
            "description" : "Secret name must not start with the SUPABASE_ prefix.",
            "example" : "string"
          },
          "value" : {
            "maxLength" : 24576,
            "type" : "string"
          }
        }
      },
      "V1ListMigrationsResponseInner" : {
        "required" : [ "version" ],
        "type" : "object",
        "properties" : {
          "version" : {
            "minLength" : 1,
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "SigningKeysResponse" : {
        "required" : [ "keys" ],
        "type" : "object",
        "properties" : {
          "keys" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SigningKeysResponseKeys"
            }
          }
        },
        "additionalProperties" : false
      },
      "BranchResponse" : {
        "required" : [ "created_at", "id", "is_default", "name", "parent_project_ref", "persistent", "project_ref", "status", "updated_at", "with_data" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string"
          },
          "project_ref" : {
            "type" : "string"
          },
          "parent_project_ref" : {
            "type" : "string"
          },
          "is_default" : {
            "type" : "boolean"
          },
          "git_branch" : {
            "type" : "string"
          },
          "pr_number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "latest_check_run_id" : {
            "type" : "number",
            "description" : "This field is deprecated and will not be populated.",
            "deprecated" : true
          },
          "persistent" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CREATING_PROJECT", "RUNNING_MIGRATIONS", "MIGRATIONS_PASSED", "MIGRATIONS_FAILED", "FUNCTIONS_DEPLOYED", "FUNCTIONS_FAILED" ]
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "review_requested_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "with_data" : {
            "type" : "boolean"
          },
          "notify_url" : {
            "type" : "string",
            "format" : "uri"
          }
        }
      },
      "RegionsInfoRecommendations" : {
        "required" : [ "smartGroup", "specific" ],
        "type" : "object",
        "properties" : {
          "smartGroup" : {
            "$ref" : "#/components/schemas/RegionsInfoRecommendationsSmartGroup"
          },
          "specific" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegionsInfoRecommendationsSpecific"
            }
          }
        }
      },
      "JitAccessResponseAllowedNetworks" : {
        "type" : "object",
        "properties" : {
          "allowed_cidrs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JitAccessResponseAllowedNetworksAllowedCidrs"
            }
          },
          "allowed_cidrs_v6" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JitAccessResponseAllowedNetworksAllowedCidrs"
            }
          }
        }
      },
      "BulkUpdateFunctionBody" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/BulkUpdateFunctionBodyInner"
        }
      },
      "V1UpdateFunctionBody" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "body" : {
            "type" : "string"
          },
          "verify_jwt" : {
            "type" : "boolean"
          }
        }
      },
      "PostgrestConfigWithJWTSecretResponse" : {
        "required" : [ "db_extra_search_path", "db_pool", "db_schema", "max_rows" ],
        "type" : "object",
        "properties" : {
          "db_schema" : {
            "type" : "string"
          },
          "max_rows" : {
            "type" : "integer"
          },
          "db_extra_search_path" : {
            "type" : "string"
          },
          "db_pool" : {
            "type" : "integer",
            "description" : "If `null`, the value is automatically configured based on compute size.",
            "nullable" : true
          },
          "jwt_secret" : {
            "type" : "string"
          }
        }
      },
      "BranchIdOrRef3" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/BranchIdOrRef3OneOf1"
        }, {
          "$ref" : "#/components/schemas/BranchIdOrRef3BranchIdOrRef3OneOf12"
        } ]
      },
      "BranchIdOrRef4" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/BranchIdOrRef4OneOf1"
        }, {
          "$ref" : "#/components/schemas/BranchIdOrRef4BranchIdOrRef4OneOf12"
        } ]
      },
      "BranchIdOrRef5" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/BranchIdOrRef5OneOf1"
        }, {
          "$ref" : "#/components/schemas/BranchIdOrRef5BranchIdOrRef5OneOf12"
        } ]
      },
      "BranchIdOrRef6" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/BranchIdOrRef6OneOf1"
        }, {
          "$ref" : "#/components/schemas/BranchIdOrRef6BranchIdOrRef6OneOf12"
        } ]
      },
      "PgsodiumConfigResponse" : {
        "required" : [ "root_key" ],
        "type" : "object",
        "properties" : {
          "root_key" : {
            "type" : "string"
          }
        }
      },
      "V1PgbouncerConfigResponse" : {
        "type" : "object",
        "properties" : {
          "default_pool_size" : {
            "type" : "integer"
          },
          "ignore_startup_parameters" : {
            "type" : "string"
          },
          "max_client_conn" : {
            "type" : "integer"
          },
          "pool_mode" : {
            "type" : "string",
            "enum" : [ "transaction", "session", "statement" ]
          },
          "connection_string" : {
            "type" : "string"
          },
          "server_idle_timeout" : {
            "type" : "integer"
          },
          "server_lifetime" : {
            "type" : "integer"
          },
          "query_wait_timeout" : {
            "type" : "integer"
          },
          "reserve_pool_size" : {
            "type" : "integer"
          }
        }
      },
      "VanitySubdomainConfigResponse" : {
        "required" : [ "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "not-used", "custom-domain-used", "active" ]
          },
          "custom_domain" : {
            "minLength" : 1,
            "type" : "string"
          }
        }
      },
      "OAuthTokenResponse" : {
        "required" : [ "access_token", "expires_in", "refresh_token", "token_type" ],
        "type" : "object",
        "properties" : {
          "access_token" : {
            "type" : "string"
          },
          "refresh_token" : {
            "type" : "string"
          },
          "expires_in" : {
            "type" : "integer"
          },
          "token_type" : {
            "type" : "string",
            "enum" : [ "Bearer" ]
          }
        },
        "additionalProperties" : false
      },
      "FunctionSlugResponse" : {
        "required" : [ "created_at", "id", "name", "slug", "status", "updated_at", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "slug" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "REMOVED", "THROTTLED" ]
          },
          "version" : {
            "type" : "integer"
          },
          "created_at" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updated_at" : {
            "type" : "integer",
            "format" : "int64"
          },
          "verify_jwt" : {
            "type" : "boolean"
          },
          "import_map" : {
            "type" : "boolean"
          },
          "entrypoint_path" : {
            "type" : "string"
          },
          "import_map_path" : {
            "type" : "string"
          },
          "ezbr_sha256" : {
            "type" : "string"
          }
        }
      },
      "BranchIdOrRef1" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/BranchIdOrRef1OneOf1"
        }, {
          "$ref" : "#/components/schemas/BranchIdOrRef1BranchIdOrRef1OneOf12"
        } ]
      },
      "BranchIdOrRef2" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/BranchIdOrRef2OneOf1"
        }, {
          "$ref" : "#/components/schemas/BranchIdOrRef2BranchIdOrRef2OneOf12"
        } ]
      },
      "CreateSigningKeyBody" : {
        "required" : [ "algorithm" ],
        "type" : "object",
        "properties" : {
          "algorithm" : {
            "type" : "string",
            "enum" : [ "EdDSA", "ES256", "RS256", "HS256" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "in_use", "standby" ]
          },
          "private_jwk" : {
            "discriminator" : {
              "propertyName" : "kty"
            },
            "oneOf" : [ {
              "required" : [ "d", "dp", "dq", "e", "kty", "n", "p", "q", "qi" ],
              "type" : "object",
              "properties" : {
                "kid" : {
                  "type" : "string",
                  "format" : "uuid"
                },
                "use" : {
                  "type" : "string",
                  "enum" : [ "sig" ]
                },
                "key_ops" : {
                  "maxItems" : 2,
                  "minItems" : 2,
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "enum" : [ "sign", "verify" ]
                  }
                },
                "ext" : {
                  "type" : "boolean",
                  "enum" : [ true ]
                },
                "kty" : {
                  "type" : "string",
                  "enum" : [ "RSA" ]
                },
                "alg" : {
                  "type" : "string",
                  "enum" : [ "RS256" ]
                },
                "n" : {
                  "type" : "string"
                },
                "e" : {
                  "type" : "string",
                  "enum" : [ "AQAB" ]
                },
                "d" : {
                  "type" : "string"
                },
                "p" : {
                  "type" : "string"
                },
                "q" : {
                  "type" : "string"
                },
                "dp" : {
                  "type" : "string"
                },
                "dq" : {
                  "type" : "string"
                },
                "qi" : {
                  "type" : "string"
                }
              },
              "additionalProperties" : false
            }, {
              "required" : [ "crv", "d", "kty", "x", "y" ],
              "type" : "object",
              "properties" : {
                "kid" : {
                  "type" : "string",
                  "format" : "uuid"
                },
                "use" : {
                  "type" : "string",
                  "enum" : [ "sig" ]
                },
                "key_ops" : {
                  "maxItems" : 2,
                  "minItems" : 2,
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "enum" : [ "sign", "verify" ]
                  }
                },
                "ext" : {
                  "type" : "boolean",
                  "enum" : [ true ]
                },
                "kty" : {
                  "type" : "string",
                  "enum" : [ "EC" ]
                },
                "alg" : {
                  "type" : "string",
                  "enum" : [ "ES256" ]
                },
                "crv" : {
                  "type" : "string",
                  "enum" : [ "P-256" ]
                },
                "x" : {
                  "type" : "string"
                },
                "y" : {
                  "type" : "string"
                },
                "d" : {
                  "type" : "string"
                }
              },
              "additionalProperties" : false
            }, {
              "required" : [ "crv", "d", "kty", "x" ],
              "type" : "object",
              "properties" : {
                "kid" : {
                  "type" : "string",
                  "format" : "uuid"
                },
                "use" : {
                  "type" : "string",
                  "enum" : [ "sig" ]
                },
                "key_ops" : {
                  "maxItems" : 2,
                  "minItems" : 2,
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "enum" : [ "sign", "verify" ]
                  }
                },
                "ext" : {
                  "type" : "boolean",
                  "enum" : [ true ]
                },
                "kty" : {
                  "type" : "string",
                  "enum" : [ "OKP" ]
                },
                "alg" : {
                  "type" : "string",
                  "enum" : [ "EdDSA" ]
                },
                "crv" : {
                  "type" : "string",
                  "enum" : [ "Ed25519" ]
                },
                "x" : {
                  "type" : "string"
                },
                "d" : {
                  "type" : "string"
                }
              },
              "additionalProperties" : false
            }, {
              "required" : [ "k", "kty" ],
              "type" : "object",
              "properties" : {
                "kid" : {
                  "type" : "string",
                  "format" : "uuid"
                },
                "use" : {
                  "type" : "string",
                  "enum" : [ "sig" ]
                },
                "key_ops" : {
                  "maxItems" : 2,
                  "minItems" : 2,
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "enum" : [ "sign", "verify" ]
                  }
                },
                "ext" : {
                  "type" : "boolean",
                  "enum" : [ true ]
                },
                "kty" : {
                  "type" : "string",
                  "enum" : [ "oct" ]
                },
                "alg" : {
                  "type" : "string",
                  "enum" : [ "HS256" ]
                },
                "k" : {
                  "minLength" : 16,
                  "type" : "string"
                }
              },
              "additionalProperties" : false
            } ]
          }
        },
        "additionalProperties" : false
      },
      "AddonVariantAddonVariantAddonVariantAddonVariantOneOf1234" : {
        "type" : "string",
        "enum" : [ "ipv4_default" ]
      },
      "UpdateBranchBody" : {
        "type" : "object",
        "properties" : {
          "branch_name" : {
            "type" : "string"
          },
          "git_branch" : {
            "type" : "string"
          },
          "reset_on_push" : {
            "type" : "boolean",
            "description" : "This field is deprecated and will be ignored. Use v1-reset-a-branch endpoint directly instead.",
            "deprecated" : true
          },
          "persistent" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CREATING_PROJECT", "RUNNING_MIGRATIONS", "MIGRATIONS_PASSED", "MIGRATIONS_FAILED", "FUNCTIONS_DEPLOYED", "FUNCTIONS_FAILED" ]
          },
          "request_review" : {
            "type" : "boolean"
          },
          "notify_url" : {
            "type" : "string",
            "description" : "HTTP endpoint to receive branch status updates.",
            "format" : "uri"
          }
        }
      },
      "ListActionRunResponse" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ListActionRunResponseInner"
        }
      },
      "AuthConfigResponse" : {
        "required" : [ "api_max_request_duration", "db_max_pool_size", "disable_signup", "external_anonymous_users_enabled", "external_apple_additional_client_ids", "external_apple_client_id", "external_apple_email_optional", "external_apple_enabled", "external_apple_secret", "external_azure_client_id", "external_azure_email_optional", "external_azure_enabled", "external_azure_secret", "external_azure_url", "external_bitbucket_client_id", "external_bitbucket_email_optional", "external_bitbucket_enabled", "external_bitbucket_secret", "external_discord_client_id", "external_discord_email_optional", "external_discord_enabled", "external_discord_secret", "external_email_enabled", "external_facebook_client_id", "external_facebook_email_optional", "external_facebook_enabled", "external_facebook_secret", "external_figma_client_id", "external_figma_email_optional", "external_figma_enabled", "external_figma_secret", "external_github_client_id", "external_github_email_optional", "external_github_enabled", "external_github_secret", "external_gitlab_client_id", "external_gitlab_email_optional", "external_gitlab_enabled", "external_gitlab_secret", "external_gitlab_url", "external_google_additional_client_ids", "external_google_client_id", "external_google_email_optional", "external_google_enabled", "external_google_secret", "external_google_skip_nonce_check", "external_kakao_client_id", "external_kakao_email_optional", "external_kakao_enabled", "external_kakao_secret", "external_keycloak_client_id", "external_keycloak_email_optional", "external_keycloak_enabled", "external_keycloak_secret", "external_keycloak_url", "external_linkedin_oidc_client_id", "external_linkedin_oidc_email_optional", "external_linkedin_oidc_enabled", "external_linkedin_oidc_secret", "external_notion_client_id", "external_notion_email_optional", "external_notion_enabled", "external_notion_secret", "external_phone_enabled", "external_slack_client_id", "external_slack_email_optional", "external_slack_enabled", "external_slack_oidc_client_id", "external_slack_oidc_email_optional", "external_slack_oidc_enabled", "external_slack_oidc_secret", "external_slack_secret", "external_spotify_client_id", "external_spotify_email_optional", "external_spotify_enabled", "external_spotify_secret", "external_twitch_client_id", "external_twitch_email_optional", "external_twitch_enabled", "external_twitch_secret", "external_twitter_client_id", "external_twitter_email_optional", "external_twitter_enabled", "external_twitter_secret", "external_web3_ethereum_enabled", "external_web3_solana_enabled", "external_workos_client_id", "external_workos_enabled", "external_workos_secret", "external_workos_url", "external_zoom_client_id", "external_zoom_email_optional", "external_zoom_enabled", "external_zoom_secret", "hook_after_user_created_enabled", "hook_after_user_created_secrets", "hook_after_user_created_uri", "hook_before_user_created_enabled", "hook_before_user_created_secrets", "hook_before_user_created_uri", "hook_custom_access_token_enabled", "hook_custom_access_token_secrets", "hook_custom_access_token_uri", "hook_mfa_verification_attempt_enabled", "hook_mfa_verification_attempt_secrets", "hook_mfa_verification_attempt_uri", "hook_password_verification_attempt_enabled", "hook_password_verification_attempt_secrets", "hook_password_verification_attempt_uri", "hook_send_email_enabled", "hook_send_email_secrets", "hook_send_email_uri", "hook_send_sms_enabled", "hook_send_sms_secrets", "hook_send_sms_uri", "jwt_exp", "mailer_allow_unverified_email_sign_ins", "mailer_autoconfirm", "mailer_notifications_email_changed_enabled", "mailer_notifications_identity_linked_enabled", "mailer_notifications_identity_unlinked_enabled", "mailer_notifications_mfa_factor_enrolled_enabled", "mailer_notifications_mfa_factor_unenrolled_enabled", "mailer_notifications_password_changed_enabled", "mailer_notifications_phone_changed_enabled", "mailer_otp_exp", "mailer_otp_length", "mailer_secure_email_change_enabled", "mailer_subjects_confirmation", "mailer_subjects_email_change", "mailer_subjects_email_changed_notification", "mailer_subjects_identity_linked_notification", "mailer_subjects_identity_unlinked_notification", "mailer_subjects_invite", "mailer_subjects_magic_link", "mailer_subjects_mfa_factor_enrolled_notification", "mailer_subjects_mfa_factor_unenrolled_notification", "mailer_subjects_password_changed_notification", "mailer_subjects_phone_changed_notification", "mailer_subjects_reauthentication", "mailer_subjects_recovery", "mailer_templates_confirmation_content", "mailer_templates_email_change_content", "mailer_templates_email_changed_notification_content", "mailer_templates_identity_linked_notification_content", "mailer_templates_identity_unlinked_notification_content", "mailer_templates_invite_content", "mailer_templates_magic_link_content", "mailer_templates_mfa_factor_enrolled_notification_content", "mailer_templates_mfa_factor_unenrolled_notification_content", "mailer_templates_password_changed_notification_content", "mailer_templates_phone_changed_notification_content", "mailer_templates_reauthentication_content", "mailer_templates_recovery_content", "mfa_max_enrolled_factors", "mfa_phone_enroll_enabled", "mfa_phone_max_frequency", "mfa_phone_otp_length", "mfa_phone_template", "mfa_phone_verify_enabled", "mfa_totp_enroll_enabled", "mfa_totp_verify_enabled", "mfa_web_authn_enroll_enabled", "mfa_web_authn_verify_enabled", "nimbus_oauth_client_id", "nimbus_oauth_client_secret", "nimbus_oauth_email_optional", "password_hibp_enabled", "password_min_length", "password_required_characters", "rate_limit_anonymous_users", "rate_limit_email_sent", "rate_limit_otp", "rate_limit_sms_sent", "rate_limit_token_refresh", "rate_limit_verify", "rate_limit_web3", "refresh_token_rotation_enabled", "saml_allow_encrypted_assertions", "saml_enabled", "saml_external_url", "security_captcha_enabled", "security_captcha_provider", "security_captcha_secret", "security_manual_linking_enabled", "security_refresh_token_reuse_interval", "security_update_password_require_reauthentication", "sessions_inactivity_timeout", "sessions_single_per_user", "sessions_tags", "sessions_timebox", "site_url", "sms_autoconfirm", "sms_max_frequency", "sms_messagebird_access_key", "sms_messagebird_originator", "sms_otp_exp", "sms_otp_length", "sms_provider", "sms_template", "sms_test_otp", "sms_test_otp_valid_until", "sms_textlocal_api_key", "sms_textlocal_sender", "sms_twilio_account_sid", "sms_twilio_auth_token", "sms_twilio_content_sid", "sms_twilio_message_service_sid", "sms_twilio_verify_account_sid", "sms_twilio_verify_auth_token", "sms_twilio_verify_message_service_sid", "sms_vonage_api_key", "sms_vonage_api_secret", "sms_vonage_from", "smtp_admin_email", "smtp_host", "smtp_max_frequency", "smtp_pass", "smtp_port", "smtp_sender_name", "smtp_user", "uri_allow_list" ],
        "type" : "object",
        "properties" : {
          "api_max_request_duration" : {
            "type" : "integer",
            "nullable" : true
          },
          "db_max_pool_size" : {
            "type" : "integer",
            "nullable" : true
          },
          "disable_signup" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_anonymous_users_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_apple_additional_client_ids" : {
            "type" : "string",
            "nullable" : true
          },
          "external_apple_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_apple_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_apple_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_apple_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_azure_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_azure_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_azure_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_azure_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_azure_url" : {
            "type" : "string",
            "nullable" : true
          },
          "external_bitbucket_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_bitbucket_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_bitbucket_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_bitbucket_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_discord_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_discord_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_discord_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_discord_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_email_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_facebook_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_facebook_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_facebook_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_facebook_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_figma_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_figma_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_figma_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_figma_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_github_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_github_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_github_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_github_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_gitlab_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_gitlab_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_gitlab_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_gitlab_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_gitlab_url" : {
            "type" : "string",
            "nullable" : true
          },
          "external_google_additional_client_ids" : {
            "type" : "string",
            "nullable" : true
          },
          "external_google_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_google_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_google_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_google_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_google_skip_nonce_check" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_kakao_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_kakao_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_kakao_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_kakao_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_keycloak_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_keycloak_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_keycloak_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_keycloak_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_keycloak_url" : {
            "type" : "string",
            "nullable" : true
          },
          "external_linkedin_oidc_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_linkedin_oidc_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_linkedin_oidc_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_linkedin_oidc_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_slack_oidc_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_slack_oidc_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_slack_oidc_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_slack_oidc_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_notion_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_notion_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_notion_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_notion_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_phone_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_slack_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_slack_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_slack_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_slack_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_spotify_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_spotify_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_spotify_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_spotify_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_twitch_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_twitch_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_twitch_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_twitch_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_twitter_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_twitter_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_twitter_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_twitter_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_workos_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_workos_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_workos_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "external_workos_url" : {
            "type" : "string",
            "nullable" : true
          },
          "external_web3_solana_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_web3_ethereum_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_zoom_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "external_zoom_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_zoom_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "external_zoom_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_custom_access_token_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_custom_access_token_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_custom_access_token_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_mfa_verification_attempt_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_mfa_verification_attempt_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_mfa_verification_attempt_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_password_verification_attempt_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_password_verification_attempt_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_password_verification_attempt_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_send_sms_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_send_sms_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_send_sms_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_send_email_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_send_email_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_send_email_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_before_user_created_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_before_user_created_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_before_user_created_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_after_user_created_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "hook_after_user_created_uri" : {
            "type" : "string",
            "nullable" : true
          },
          "hook_after_user_created_secrets" : {
            "type" : "string",
            "nullable" : true
          },
          "jwt_exp" : {
            "type" : "integer",
            "nullable" : true
          },
          "mailer_allow_unverified_email_sign_ins" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_autoconfirm" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_otp_exp" : {
            "type" : "integer"
          },
          "mailer_otp_length" : {
            "type" : "integer",
            "nullable" : true
          },
          "mailer_secure_email_change_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_subjects_confirmation" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_email_change" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_invite" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_magic_link" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_reauthentication" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_recovery" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_password_changed_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_email_changed_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_phone_changed_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_mfa_factor_enrolled_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_mfa_factor_unenrolled_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_identity_linked_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_subjects_identity_unlinked_notification" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_confirmation_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_email_change_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_invite_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_magic_link_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_reauthentication_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_recovery_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_password_changed_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_email_changed_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_phone_changed_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_mfa_factor_enrolled_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_mfa_factor_unenrolled_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_identity_linked_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_templates_identity_unlinked_notification_content" : {
            "type" : "string",
            "nullable" : true
          },
          "mailer_notifications_password_changed_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_email_changed_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_phone_changed_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_mfa_factor_enrolled_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_mfa_factor_unenrolled_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_identity_linked_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mailer_notifications_identity_unlinked_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_max_enrolled_factors" : {
            "type" : "integer",
            "nullable" : true
          },
          "mfa_totp_enroll_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_totp_verify_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_phone_enroll_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_phone_verify_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_web_authn_enroll_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_web_authn_verify_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "mfa_phone_otp_length" : {
            "type" : "integer"
          },
          "mfa_phone_template" : {
            "type" : "string",
            "nullable" : true
          },
          "mfa_phone_max_frequency" : {
            "type" : "integer",
            "nullable" : true
          },
          "nimbus_oauth_client_id" : {
            "type" : "string",
            "nullable" : true
          },
          "nimbus_oauth_email_optional" : {
            "type" : "boolean",
            "nullable" : true
          },
          "nimbus_oauth_client_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "password_hibp_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "password_min_length" : {
            "type" : "integer",
            "nullable" : true
          },
          "password_required_characters" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789", "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789", "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789:!@#$%^&*()_+-=[]{};'\\\\:\"|<>?,./`~", "" ]
          },
          "rate_limit_anonymous_users" : {
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_email_sent" : {
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_sms_sent" : {
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_token_refresh" : {
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_verify" : {
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_otp" : {
            "type" : "integer",
            "nullable" : true
          },
          "rate_limit_web3" : {
            "type" : "integer",
            "nullable" : true
          },
          "refresh_token_rotation_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "saml_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "saml_external_url" : {
            "type" : "string",
            "nullable" : true
          },
          "saml_allow_encrypted_assertions" : {
            "type" : "boolean",
            "nullable" : true
          },
          "security_captcha_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "security_captcha_provider" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "turnstile", "hcaptcha" ]
          },
          "security_captcha_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "security_manual_linking_enabled" : {
            "type" : "boolean",
            "nullable" : true
          },
          "security_refresh_token_reuse_interval" : {
            "type" : "integer",
            "nullable" : true
          },
          "security_update_password_require_reauthentication" : {
            "type" : "boolean",
            "nullable" : true
          },
          "sessions_inactivity_timeout" : {
            "type" : "integer",
            "nullable" : true
          },
          "sessions_single_per_user" : {
            "type" : "boolean",
            "nullable" : true
          },
          "sessions_tags" : {
            "type" : "string",
            "nullable" : true
          },
          "sessions_timebox" : {
            "type" : "integer",
            "nullable" : true
          },
          "site_url" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_autoconfirm" : {
            "type" : "boolean",
            "nullable" : true
          },
          "sms_max_frequency" : {
            "type" : "integer",
            "nullable" : true
          },
          "sms_messagebird_access_key" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_messagebird_originator" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_otp_exp" : {
            "type" : "integer",
            "nullable" : true
          },
          "sms_otp_length" : {
            "type" : "integer"
          },
          "sms_provider" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "messagebird", "textlocal", "twilio", "twilio_verify", "vonage" ]
          },
          "sms_template" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_test_otp" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_test_otp_valid_until" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "sms_textlocal_api_key" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_textlocal_sender" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_account_sid" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_auth_token" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_content_sid" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_message_service_sid" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_verify_account_sid" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_verify_auth_token" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_twilio_verify_message_service_sid" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_vonage_api_key" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_vonage_api_secret" : {
            "type" : "string",
            "nullable" : true
          },
          "sms_vonage_from" : {
            "type" : "string",
            "nullable" : true
          },
          "smtp_admin_email" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true
          },
          "smtp_host" : {
            "type" : "string",
            "nullable" : true
          },
          "smtp_max_frequency" : {
            "type" : "integer",
            "nullable" : true
          },
          "smtp_pass" : {
            "type" : "string",
            "nullable" : true
          },
          "smtp_port" : {
            "type" : "string",
            "nullable" : true
          },
          "smtp_sender_name" : {
            "type" : "string",
            "nullable" : true
          },
          "smtp_user" : {
            "type" : "string",
            "nullable" : true
          },
          "uri_allow_list" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "GetProjectDbMetadataResponse" : {
        "required" : [ "databases" ],
        "type" : "object",
        "properties" : {
          "databases" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetProjectDbMetadataResponseDatabases"
            }
          }
        }
      },
      "NetworkRestrictionsV2ResponseConfig" : {
        "type" : "object",
        "properties" : {
          "dbAllowedCidrs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NetworkRestrictionsV2ResponseConfigDbAllowedCidrs"
            }
          }
        },
        "description" : "At any given point in time, this is the config that the user has requested be applied to their project. The `status` field indicates if it has been applied to the project, or is pending. When an updated config is received, the applied config is moved to `old_config`."
      },
      "ProjectUpgradeEligibilityResponseTargetUpgradeVersions" : {
        "required" : [ "app_version", "postgres_version", "release_channel" ],
        "type" : "object",
        "properties" : {
          "postgres_version" : {
            "type" : "string",
            "enum" : [ "13", "14", "15", "17", "17-oriole" ]
          },
          "release_channel" : {
            "type" : "string",
            "enum" : [ "internal", "alpha", "beta", "ga", "withdrawn", "preview" ]
          },
          "app_version" : {
            "type" : "string"
          }
        }
      }
    },
    "securitySchemes" : {
      "bearer" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}
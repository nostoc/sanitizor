{
    "openapi": "3.0.0",
    "info": {
        "title": "Supabase API (v1)",
        "description": "Supabase API generated from the OpenAPI specification.<br>Visit [https://supabase.com/docs](https://supabase.com/docs) for a complete documentation.",
        "contact": {},
        "version": "1.0.0"
    },
    "tags": [
        {
            "name": "Advisors",
            "description": "Advisors related endpoints"
        },
        {
            "name": "Analytics",
            "description": "Analytics related endpoints"
        },
        {
            "name": "Auth",
            "description": "Auth related endpoints"
        },
        {
            "name": "Billing",
            "description": "Billing related endpoints"
        },
        {
            "name": "Database",
            "description": "Database related endpoints"
        },
        {
            "name": "Domains",
            "description": "Domains related endpoints"
        },
        {
            "name": "Edge Functions",
            "description": "Edge related endpoints"
        },
        {
            "name": "Environments",
            "description": "Environments related endpoints"
        },
        {
            "name": "OAuth",
            "description": "OAuth related endpoints"
        },
        {
            "name": "Organizations",
            "description": "Organizations related endpoints"
        },
        {
            "name": "Projects",
            "description": "Projects related endpoints"
        },
        {
            "name": "Rest",
            "description": "Rest related endpoints"
        },
        {
            "name": "Secrets",
            "description": "Secrets related endpoints"
        },
        {
            "name": "Storage",
            "description": "Storage related endpoints"
        }
    ],
    "paths": {
        "/v1/branches/{branchIdOrRef}": {
            "get": {
                "tags": [
                    "Environments"
                ],
                "summary": "Get database branch config",
                "description": "Fetches configurations of the specified database branch",
                "operationId": "v1-get-a-branch-config",
                "parameters": [
                    {
                        "name": "branchIdOrRef",
                        "in": "path",
                        "description": "Branch ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "$ref": "#/components/schemas/BranchIdOrRef"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchDetailResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve database branch"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Environments"
                ],
                "summary": "Delete a database branch",
                "description": "Deletes the specified database branch",
                "operationId": "v1-delete-a-branch",
                "parameters": [
                    {
                        "name": "branchIdOrRef",
                        "in": "path",
                        "description": "Branch ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "$ref": "#/components/schemas/BranchIdOrRef1"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchDeleteResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete database branch"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Environments"
                ],
                "summary": "Update database branch config",
                "description": "Updates the configuration of the specified database branch",
                "operationId": "v1-update-a-branch-config",
                "parameters": [
                    {
                        "name": "branchIdOrRef",
                        "in": "path",
                        "description": "Branch ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "$ref": "#/components/schemas/BranchIdOrRef2"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBranchBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update database branch"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/branches/{branchIdOrRef}/push": {
            "post": {
                "tags": [
                    "Environments"
                ],
                "summary": "Pushes a database branch",
                "description": "Pushes the specified database branch",
                "operationId": "v1-push-a-branch",
                "parameters": [
                    {
                        "name": "branchIdOrRef",
                        "in": "path",
                        "description": "Branch ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "$ref": "#/components/schemas/BranchIdOrRef3"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BranchActionBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchUpdateResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to push database branch"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/branches/{branchIdOrRef}/merge": {
            "post": {
                "tags": [
                    "Environments"
                ],
                "summary": "Merges a database branch",
                "description": "Merges the specified database branch",
                "operationId": "v1-merge-a-branch",
                "parameters": [
                    {
                        "name": "branchIdOrRef",
                        "in": "path",
                        "description": "Branch ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "$ref": "#/components/schemas/BranchIdOrRef4"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BranchActionBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchUpdateResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to merge database branch"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/branches/{branchIdOrRef}/reset": {
            "post": {
                "tags": [
                    "Environments"
                ],
                "summary": "Resets a database branch",
                "description": "Resets the specified database branch",
                "operationId": "v1-reset-a-branch",
                "parameters": [
                    {
                        "name": "branchIdOrRef",
                        "in": "path",
                        "description": "Branch ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "$ref": "#/components/schemas/BranchIdOrRef5"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BranchActionBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchUpdateResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to reset database branch"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/branches/{branchIdOrRef}/diff": {
            "get": {
                "tags": [
                    "Environments"
                ],
                "summary": "[Beta] Diffs a database branch",
                "description": "Diffs the specified database branch",
                "operationId": "v1-diff-a-branch",
                "parameters": [
                    {
                        "name": "branchIdOrRef",
                        "in": "path",
                        "description": "Branch ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "$ref": "#/components/schemas/BranchIdOrRef6"
                        }
                    },
                    {
                        "name": "included_schemas",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "includedSchemas"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to diff database branch"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "List all projects",
                "description": "Returns a list of all projects you've previously created.",
                "operationId": "v1-list-all-projects",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/V1ProjectWithDatabaseResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Create a project",
                "operationId": "v1-create-a-project",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1CreateProjectBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1ProjectResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/available-regions": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "[Beta] Gets the list of available regions that can be used for a new project",
                "operationId": "v1-get-available-regions",
                "parameters": [
                    {
                        "name": "organization_slug",
                        "in": "query",
                        "description": "Slug of your organization",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "organizationSlug"
                    },
                    {
                        "name": "continent",
                        "in": "query",
                        "description": "Continent code to determine regional recommendations: NA (North America), SA (South America), EU (Europe), AF (Africa), AS (Asia), OC (Oceania), AN (Antarctica)",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "example": "NA",
                            "enum": [
                                "NA",
                                "SA",
                                "EU",
                                "AF",
                                "AS",
                                "OC",
                                "AN"
                            ]
                        }
                    },
                    {
                        "name": "desired_instance_size",
                        "in": "query",
                        "description": "Desired instance size",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "example": "nano",
                            "enum": [
                                "pico",
                                "nano",
                                "micro",
                                "small",
                                "medium",
                                "large",
                                "xlarge",
                                "2xlarge",
                                "4xlarge",
                                "8xlarge",
                                "12xlarge",
                                "16xlarge",
                                "24xlarge",
                                "24xlarge_optimized_memory",
                                "24xlarge_optimized_cpu",
                                "24xlarge_high_memory",
                                "48xlarge",
                                "48xlarge_optimized_memory",
                                "48xlarge_optimized_cpu",
                                "48xlarge_high_memory"
                            ]
                        },
                        "x-ballerina-name": "desiredInstanceSize"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegionsInfo"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/organizations": {
            "get": {
                "tags": [
                    "Organizations"
                ],
                "summary": "List all organizations",
                "description": "Returns a list of organizations that you currently belong to.",
                "operationId": "v1-list-all-organizations",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganizationResponseV1"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error listing organizations"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Create an organization",
                "operationId": "v1-create-an-organization",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrganizationV1"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationResponseV1"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error creating an organization"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/oauth/authorize": {
            "get": {
                "tags": [
                    "OAuth"
                ],
                "summary": "[Beta] Authorize user through oauth",
                "operationId": "v1-authorize-user",
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "x-ballerina-name": "clientId"
                    },
                    {
                        "name": "response_type",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "code",
                                "token",
                                "id_token token"
                            ]
                        },
                        "x-ballerina-name": "responseType"
                    },
                    {
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "redirectUri"
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "response_mode",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "responseMode"
                    },
                    {
                        "name": "code_challenge",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "codeChallenge"
                    },
                    {
                        "name": "code_challenge_method",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "plain",
                                "sha256",
                                "S256"
                            ]
                        },
                        "x-ballerina-name": "codeChallengeMethod"
                    },
                    {
                        "name": "organization_slug",
                        "in": "query",
                        "description": "Organization slug",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "pattern": "^[\\w-]+$",
                            "type": "string"
                        },
                        "x-ballerina-name": "organizationSlug"
                    },
                    {
                        "name": "resource",
                        "in": "query",
                        "description": "Resource indicator for MCP (Model Context Protocol) clients",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "oauth2": [
                            "read"
                        ]
                    }
                ]
            }
        },
        "/v1/oauth/token": {
            "post": {
                "tags": [
                    "OAuth"
                ],
                "summary": "[Beta] Exchange auth code for user's access and refresh token",
                "operationId": "v1-exchange-oauth-token",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthTokenBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OAuthTokenResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "oauth2": [
                            "write"
                        ]
                    }
                ]
            }
        },
        "/v1/oauth/revoke": {
            "post": {
                "tags": [
                    "OAuth"
                ],
                "summary": "[Beta] Revoke oauth app authorization and it's corresponding tokens",
                "operationId": "v1-revoke-token",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OAuthRevokeTokenBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "oauth2": [
                            "write"
                        ]
                    }
                ]
            }
        },
        "/v1/oauth/authorize/project-claim": {
            "get": {
                "tags": [
                    "OAuth"
                ],
                "summary": "Authorize user through oauth and claim a project",
                "description": "Initiates the OAuth authorization flow for the specified provider. After successful authentication, the user can claim ownership of the specified project.",
                "operationId": "v1-oauth-authorize-project-claim",
                "parameters": [
                    {
                        "name": "project_ref",
                        "in": "query",
                        "description": "Project ref",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        },
                        "x-ballerina-name": "projectRef"
                    },
                    {
                        "name": "client_id",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "x-ballerina-name": "clientId"
                    },
                    {
                        "name": "response_type",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "code",
                                "token",
                                "id_token token"
                            ]
                        },
                        "x-ballerina-name": "responseType"
                    },
                    {
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "redirectUri"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "response_mode",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "responseMode"
                    },
                    {
                        "name": "code_challenge",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "codeChallenge"
                    },
                    {
                        "name": "code_challenge_method",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "plain",
                                "sha256",
                                "S256"
                            ]
                        },
                        "x-ballerina-name": "codeChallengeMethod"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/snippets": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "Lists SQL snippets for the logged in user",
                "operationId": "v1-list-all-snippets",
                "parameters": [
                    {
                        "name": "project_ref",
                        "in": "query",
                        "description": "Project ref",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        },
                        "x-ballerina-name": "projectRef"
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "name",
                                "inserted_at"
                            ]
                        },
                        "x-ballerina-name": "sortBy"
                    },
                    {
                        "name": "sort_order",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "x-ballerina-name": "sortOrder"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SnippetList"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to list user's SQL snippets"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/snippets/{id}": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "Gets a specific SQL snippet",
                "operationId": "v1-get-a-snippet",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SnippetResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve SQL snippet"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/actions": {
            "get": {
                "tags": [
                    "Environments"
                ],
                "summary": "List all action runs",
                "description": "Returns a paginated list of action runs of the specified project.",
                "operationId": "v1-list-action-runs",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "minimum": 0,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "minimum": 10,
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListActionRunResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to list action runs"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/actions/{runId}": {
            "get": {
                "tags": [
                    "Environments"
                ],
                "summary": "Get the status of an action run",
                "description": "Returns the current status of the specified action run.",
                "operationId": "v1-get-action-run",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "runId",
                        "in": "path",
                        "description": "Action Run ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionRunResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to get action run status"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/actions/{runId}/status": {
            "patch": {
                "tags": [
                    "Environments"
                ],
                "summary": "Update the status of an action run",
                "description": "Updates the status of an ongoing action run.",
                "operationId": "v1-update-action-run-status",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "runId",
                        "in": "path",
                        "description": "Action Run ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateRunStatusBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRunStatusResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update action run status"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/actions/{runId}/logs": {
            "get": {
                "tags": [
                    "Environments"
                ],
                "summary": "Get the logs of an action run",
                "description": "Returns the logs from the specified action run.",
                "operationId": "v1-get-action-run-logs",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "runId",
                        "in": "path",
                        "description": "Action Run ID",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to get action run logs"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/api-keys": {
            "get": {
                "tags": [
                    "Secrets"
                ],
                "summary": "Get project api keys",
                "operationId": "v1-get-project-api-keys",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "reveal",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiKeyResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Secrets"
                ],
                "summary": "Creates a new API key for the project",
                "operationId": "v1-create-project-api-key",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "reveal",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateApiKeyBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeyResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/api-keys/legacy": {
            "get": {
                "tags": [
                    "Secrets"
                ],
                "summary": "Check whether JWT based legacy (anon, service_role) API keys are enabled. This API endpoint will be removed in the future, check for HTTP 404 Not Found.",
                "operationId": "v1-get-project-legacy-api-keys",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegacyApiKeysResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Secrets"
                ],
                "summary": "Disable or re-enable JWT based legacy (anon, service_role) API keys. This API endpoint will be removed in the future, check for HTTP 404 Not Found.",
                "operationId": "v1-update-project-legacy-api-keys",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LegacyApiKeysResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/api-keys/{id}": {
            "get": {
                "tags": [
                    "Secrets"
                ],
                "summary": "Get API key",
                "operationId": "v1-get-project-api-key",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "reveal",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeyResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Secrets"
                ],
                "summary": "Deletes an API key for the project",
                "operationId": "v1-delete-project-api-key",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "reveal",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "was_compromised",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "x-ballerina-name": "wasCompromised"
                    },
                    {
                        "name": "reason",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeyResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Secrets"
                ],
                "summary": "Updates an API key for the project",
                "operationId": "v1-update-project-api-key",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "reveal",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateApiKeyBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeyResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/branches": {
            "get": {
                "tags": [
                    "Environments"
                ],
                "summary": "List all database branches",
                "description": "Returns all database branches of the specified project.",
                "operationId": "v1-list-all-branches",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BranchResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve database branches"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Environments"
                ],
                "summary": "Create a database branch",
                "description": "Creates a database branch from the specified project.",
                "operationId": "v1-create-a-branch",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBranchBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to create database branch"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Environments"
                ],
                "summary": "Disables preview branching",
                "description": "Disables preview branching for the specified project",
                "operationId": "v1-disable-preview-branching",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to disable preview branching"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/branches/{name}": {
            "get": {
                "tags": [
                    "Environments"
                ],
                "summary": "Get a database branch",
                "description": "Fetches the specified database branch by its name.",
                "operationId": "v1-get-a-branch",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to fetch database branch"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/custom-hostname": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "[Beta] Gets project's custom hostname config",
                "operationId": "v1-get-hostname-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateCustomHostnameResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's custom hostname config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Domains"
                ],
                "summary": "[Beta] Deletes a project's custom hostname configuration",
                "operationId": "v1-Delete hostname config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to delete project custom hostname configuration"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/custom-hostname/initialize": {
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "[Beta] Updates project's custom hostname configuration",
                "operationId": "v1-update-hostname-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCustomHostnameBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateCustomHostnameResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update project custom hostname configuration"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/custom-hostname/reverify": {
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "[Beta] Attempts to verify the DNS configuration for project's custom hostname configuration",
                "operationId": "v1-verify-dns-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateCustomHostnameResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to verify project custom hostname configuration"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/custom-hostname/activate": {
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "[Beta] Activates a custom hostname for a project.",
                "operationId": "v1-activate-custom-hostname",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateCustomHostnameResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to activate project custom hostname configuration"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/network-bans/retrieve": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "[Beta] Gets project's network bans",
                "operationId": "v1-list-all-network-bans",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NetworkBanResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's network bans"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/network-bans/retrieve/enriched": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "[Beta] Gets project's network bans with additional information about which databases they affect",
                "operationId": "v1-list-all-network-bans-enriched",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NetworkBanResponseEnriched"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's enriched network bans"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/network-bans": {
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "[Beta] Remove network bans.",
                "operationId": "v1-delete-network-bans",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoveNetworkBanRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to remove network bans."
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/network-restrictions": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "[Beta] Gets project's network restrictions",
                "operationId": "v1-get-network-restrictions",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NetworkRestrictionsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's network restrictions"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Projects"
                ],
                "summary": "[Alpha] Updates project's network restrictions by adding or removing CIDRs",
                "operationId": "v1-patch-network-restrictions",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NetworkRestrictionsPatchRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NetworkRestrictionsV2Response"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update project network restrictions"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/network-restrictions/apply": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "[Beta] Updates project's network restrictions",
                "operationId": "v1-update-network-restrictions",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NetworkRestrictionsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NetworkRestrictionsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update project network restrictions"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/pgsodium": {
            "get": {
                "tags": [
                    "Secrets"
                ],
                "summary": "[Beta] Gets project's pgsodium config",
                "operationId": "v1-get-pgsodium-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PgsodiumConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's pgsodium config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Secrets"
                ],
                "summary": "[Beta] Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible.",
                "operationId": "v1-update-pgsodium-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePgsodiumConfigBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PgsodiumConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update project's pgsodium config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/postgrest": {
            "get": {
                "tags": [
                    "Rest"
                ],
                "summary": "Gets project's postgrest config",
                "operationId": "v1-get-postgrest-service-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostgrestConfigWithJWTSecretResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's postgrest config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Rest"
                ],
                "summary": "Updates project's postgrest config",
                "operationId": "v1-update-postgrest-service-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1UpdatePostgrestConfigBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1PostgrestConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update project's postgrest config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Gets a specific project that belongs to the authenticated user",
                "operationId": "v1-get-project",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1ProjectWithDatabaseResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Deletes the given project",
                "operationId": "v1-delete-a-project",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1ProjectRefResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/secrets": {
            "get": {
                "tags": [
                    "Secrets"
                ],
                "summary": "List all secrets",
                "description": "Returns all secrets you've previously added to the specified project.",
                "operationId": "v1-list-all-secrets",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SecretResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's secrets"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Secrets"
                ],
                "summary": "Bulk create secrets",
                "description": "Creates multiple secrets and adds them to the specified project.",
                "operationId": "v1-bulk-create-secrets",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSecretBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to create project's secrets"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Secrets"
                ],
                "summary": "Bulk delete secrets",
                "description": "Deletes all secrets with the given names from the specified project",
                "operationId": "v1-bulk-delete-secrets",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to delete secrets with given names"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/ssl-enforcement": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "[Beta] Get project's SSL enforcement configuration.",
                "operationId": "v1-get-ssl-enforcement-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SslEnforcementResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's SSL enforcement config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Database"
                ],
                "summary": "[Beta] Update project's SSL enforcement configuration.",
                "operationId": "v1-update-ssl-enforcement-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SslEnforcementRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SslEnforcementResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update project's SSL enforcement configuration."
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/types/typescript": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "Generate TypeScript types",
                "description": "Returns the TypeScript types of your schema for use with supabase-js.",
                "operationId": "v1-generate-typescript-types",
                "parameters": [
                    {
                        "name": "included_schemas",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "public"
                        },
                        "x-ballerina-name": "includedSchemas"
                    },
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypescriptResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to generate TypeScript types"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/vanity-subdomain": {
            "get": {
                "tags": [
                    "Domains"
                ],
                "summary": "[Beta] Gets current vanity subdomain config",
                "operationId": "v1-get-vanity-subdomain-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VanitySubdomainConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to get project vanity subdomain configuration"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Domains"
                ],
                "summary": "[Beta] Deletes a project's vanity subdomain configuration",
                "operationId": "v1-deactivate-vanity-subdomain-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to delete project vanity subdomain configuration"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/vanity-subdomain/check-availability": {
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "[Beta] Checks vanity subdomain availability",
                "operationId": "v1-check-vanity-subdomain-availability",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VanitySubdomainBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubdomainAvailabilityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to check project vanity subdomain configuration"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/vanity-subdomain/activate": {
            "post": {
                "tags": [
                    "Domains"
                ],
                "summary": "[Beta] Activates a vanity subdomain for a project.",
                "operationId": "v1-activate-vanity-subdomain-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VanitySubdomainBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivateVanitySubdomainResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to activate project vanity subdomain configuration"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/upgrade": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "[Beta] Upgrades the project's Postgres version",
                "operationId": "v1-upgrade-postgres-version",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpgradeDatabaseBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectUpgradeInitiateResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to initiate project upgrade"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/upgrade/eligibility": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "[Beta] Returns the project's eligibility for upgrades",
                "operationId": "v1-get-postgres-upgrade-eligibility",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectUpgradeEligibilityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to determine project upgrade eligibility"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/upgrade/status": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "[Beta] Gets the latest status of the project's upgrade",
                "operationId": "v1-get-postgres-upgrade-status",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "tracking_id",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "trackingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatabaseUpgradeStatusResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project upgrade status"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/readonly": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "Returns project's readonly mode status",
                "operationId": "v1-get-readonly-mode-status",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadOnlyStatusResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to get project readonly mode status"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/readonly/temporary-disable": {
            "post": {
                "tags": [
                    "Database"
                ],
                "summary": "Disables project's readonly mode for the next 15 minutes",
                "operationId": "v1-disable-readonly-mode-temporarily",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to disable project's readonly mode"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/read-replicas/setup": {
            "post": {
                "tags": [
                    "Database"
                ],
                "summary": "[Beta] Set up a read replica",
                "operationId": "v1-setup-a-read-replica",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetUpReadReplicaBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to set up read replica"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/read-replicas/remove": {
            "post": {
                "tags": [
                    "Database"
                ],
                "summary": "[Beta] Remove a read replica",
                "operationId": "v1-remove-a-read-replica",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoveReadReplicaBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to remove read replica"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/health": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Gets project's service health status",
                "operationId": "v1-get-services-health",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "services",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "auth",
                                    "db",
                                    "db_postgres_user",
                                    "pooler",
                                    "realtime",
                                    "rest",
                                    "storage",
                                    "pg_bouncer"
                                ]
                            }
                        }
                    },
                    {
                        "name": "timeout_ms",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "maximum": 10000,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "x-ballerina-name": "timeoutMs"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/V1ServiceHealthResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's service health status"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/config/auth/signing-keys/legacy": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Get the signing key information for the JWT secret imported as signing key for this project. This endpoint will be removed in the future, check for HTTP 404 Not Found.",
                "operationId": "v1-get-legacy-signing-key",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SigningKeyResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Set up the project's existing JWT secret as an in_use JWT signing key. This endpoint will be removed in the future always check for HTTP 404 Not Found.",
                "operationId": "v1-create-legacy-signing-key",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SigningKeyResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/config/auth/signing-keys": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "List all signing keys for the project",
                "operationId": "v1-get-project-signing-keys",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SigningKeysResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Create a new signing key for the project in standby status",
                "operationId": "v1-create-project-signing-key",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSigningKeyBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SigningKeyResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/config/auth/signing-keys/{id}": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Get information about a signing key",
                "operationId": "v1-get-project-signing-key",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SigningKeyResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Auth"
                ],
                "summary": "Remove a signing key from a project. Only possible if the key has been in revoked status for a while.",
                "operationId": "v1-remove-project-signing-key",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SigningKeyResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Auth"
                ],
                "summary": "Update a signing key, mainly its status",
                "operationId": "v1-update-project-signing-key",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSigningKeyBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SigningKeyResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/config/storage": {
            "get": {
                "tags": [
                    "Storage"
                ],
                "summary": "Gets project's storage config",
                "operationId": "v1-get-storage-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StorageConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's storage config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Storage"
                ],
                "summary": "Updates project's storage config",
                "operationId": "v1-update-storage-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateStorageConfigBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update project's storage config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/config/database/postgres": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "Gets project's Postgres config",
                "operationId": "v1-get-postgres-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostgresConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's Postgres config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Database"
                ],
                "summary": "Updates project's Postgres config",
                "operationId": "v1-update-postgres-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePostgresConfigBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostgresConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update project's Postgres config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/config/database/pgbouncer": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "Get project's pgbouncer config",
                "operationId": "v1-get-project-pgbouncer-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1PgbouncerConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's pgbouncer config"
                    }
                }
            }
        },
        "/v1/projects/{ref}/config/database/pooler": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "Gets project's supavisor config",
                "operationId": "v1-get-pooler-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SupavisorConfigResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's supavisor config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Database"
                ],
                "summary": "Updates project's supavisor config",
                "operationId": "v1-update-pooler-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSupavisorConfigBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateSupavisorConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update project's supavisor config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/config/auth": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Gets project's auth config",
                "operationId": "v1-get-auth-service-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's auth config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Auth"
                ],
                "summary": "Updates a project's auth config",
                "operationId": "v1-update-auth-service-config",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAuthConfigBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update project's auth config"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/config/auth/third-party-auth": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Lists all third-party auth integrations",
                "operationId": "v1-list-project-tpa-integrations",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ThirdPartyAuth"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Creates a new third-party auth integration",
                "operationId": "v1-create-project-tpa-integration",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateThirdPartyAuthBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThirdPartyAuth"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/config/auth/third-party-auth/{tpaId}": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Get a third-party integration",
                "operationId": "v1-get-project-tpa-integration",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "tpaId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThirdPartyAuth"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Auth"
                ],
                "summary": "Removes a third-party auth integration",
                "operationId": "v1-delete-project-tpa-integration",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "tpaId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThirdPartyAuth"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/pause": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Pauses the given project",
                "operationId": "v1-pause-a-project",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/restore": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Lists available restore versions for the given project",
                "operationId": "v1-list-available-restore-versions",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetProjectAvailableRestoreVersionsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Restores the given project",
                "operationId": "v1-restore-a-project",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/restore/cancel": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Cancels the given project restoration",
                "operationId": "v1-cancel-a-project-restoration",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/billing/addons": {
            "get": {
                "tags": [
                    "Billing"
                ],
                "summary": "List billing addons and compute instance selections",
                "description": "Returns the billing addons that are currently applied, including the active compute instance size, and lists every addon option that can be provisioned with pricing metadata.",
                "operationId": "v1-list-project-addons",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListProjectAddonsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to list project addons"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Billing"
                ],
                "summary": "Apply or update billing addons, including compute instance size",
                "description": "Selects an addon variant, for example scaling the project’s compute instance up or down, and applies it to the project.",
                "operationId": "v1-apply-project-addon",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplyProjectAddonBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to apply project addon"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/billing/addons/{addonVariant}": {
            "delete": {
                "tags": [
                    "Billing"
                ],
                "summary": "Remove billing addons or revert compute instance sizing",
                "description": "Disables the selected addon variant, including rolling the compute instance back to its previous size.",
                "operationId": "v1-remove-project-addon",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "addonVariant",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "$ref": "#/components/schemas/AddonVariant"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to remove project addon"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/claim-token": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Gets project claim token",
                "operationId": "v1-get-project-claim-token",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectClaimTokenResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "x-internal": true
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Creates project claim token",
                "operationId": "v1-create-project-claim-token",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateProjectClaimTokenResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "x-internal": true
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Revokes project claim token",
                "operationId": "v1-delete-project-claim-token",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "x-internal": true
            }
        },
        "/v1/projects/{ref}/advisors/performance": {
            "get": {
                "tags": [
                    "Advisors"
                ],
                "summary": "Gets project performance advisors.",
                "description": "This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.",
                "operationId": "v1-get-performance-advisors",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1ProjectAdvisorsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/advisors/security": {
            "get": {
                "tags": [
                    "Advisors"
                ],
                "summary": "Gets project security advisors.",
                "description": "This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.",
                "operationId": "v1-get-security-advisors",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "lint_type",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "sql"
                            ]
                        },
                        "x-ballerina-name": "lintType"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1ProjectAdvisorsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/analytics/endpoints/logs.all": {
            "get": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Gets project's logs",
                "description": "Executes a SQL query on the project's logs.\n\nEither the 'iso_timestamp_start' and 'iso_timestamp_end' parameters must be provided.\nIf both are not provided, only the last 1 minute of logs will be queried.\nThe timestamp range must be no more than 24 hours and is rounded to the nearest minute. If the range is more than 24 hours, a validation error will be thrown.\n",
                "operationId": "v1-get-project-logs",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sql",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "iso_timestamp_start",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "x-ballerina-name": "isoTimestampStart"
                    },
                    {
                        "name": "iso_timestamp_end",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "x-ballerina-name": "isoTimestampEnd"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/analytics/endpoints/usage.api-counts": {
            "get": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Gets project's usage api counts",
                "operationId": "v1-get-project-usage-api-count",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "interval",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "15min",
                                "30min",
                                "1hr",
                                "3hr",
                                "1day",
                                "3day",
                                "7day"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1GetUsageApiCountResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to get project's usage api counts"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/analytics/endpoints/usage.api-requests-count": {
            "get": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Gets project's usage api requests count",
                "operationId": "v1-get-project-usage-request-count",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1GetUsageApiRequestsCountResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to get project's usage api requests count"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/analytics/endpoints/functions.combined-stats": {
            "get": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Gets a project's function combined statistics",
                "operationId": "v1-get-project-function-combined-stats",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "interval",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "15min",
                                "1hr",
                                "3hr",
                                "1day"
                            ]
                        }
                    },
                    {
                        "name": "function_id",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "functionId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to get project's function combined statistics"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/cli/login-role": {
            "post": {
                "tags": [
                    "Database"
                ],
                "summary": "[Beta] Create a login role for CLI with temporary password",
                "operationId": "v1-create-login-role",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRoleBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRoleResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to create login role"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Database"
                ],
                "summary": "[Beta] Delete existing login roles used by CLI",
                "operationId": "v1-delete-login-roles",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteRolesResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to delete login roles"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/database/migrations": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "[Beta] List applied migration versions",
                "description": "Only available to selected partner OAuth apps",
                "operationId": "v1-list-migration-history",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1ListMigrationsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to list database migrations"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Database"
                ],
                "summary": "[Beta] Upsert a database migration without applying",
                "description": "Only available to selected partner OAuth apps",
                "operationId": "v1-upsert-a-migration",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "Idempotency-Key",
                        "in": "header",
                        "description": "A unique key to ensure the same migration is tracked only once",
                        "required": false,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "idempotencyKey"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1UpsertMigrationBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to upsert database migration"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Database"
                ],
                "summary": "[Beta] Apply a database migration",
                "description": "Only available to selected partner OAuth apps",
                "operationId": "v1-apply-a-migration",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "Idempotency-Key",
                        "in": "header",
                        "description": "A unique key to ensure the same migration is tracked only once",
                        "required": false,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "idempotencyKey"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1CreateMigrationBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to apply database migration"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/database/query": {
            "post": {
                "tags": [
                    "Database"
                ],
                "summary": "[Beta] Run sql query",
                "operationId": "v1-run-a-query",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1RunQueryBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to run sql query"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/database/webhooks/enable": {
            "post": {
                "tags": [
                    "Database"
                ],
                "summary": "[Beta] Enables Database Webhooks on the project",
                "operationId": "v1-enable-database-webhook",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to enable Database Webhooks on the project"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/database/context": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "Gets database metadata for the given project.",
                "description": "This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.",
                "operationId": "v1-get-database-metadata",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetProjectDbMetadataResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/database/jit": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "Get user-id to role mappings for JIT access",
                "description": "Mappings of roles a user can assume in the project database",
                "operationId": "v1-get-jit-access",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JitAccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to list database jit access"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Database"
                ],
                "summary": "Updates a user mapping for JIT access",
                "description": "Modifies the roles that can be assumed and for how long",
                "operationId": "v1-update-jit-access",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateJitAccessBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JitAccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to upsert database migration"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Database"
                ],
                "summary": "Authorize user-id to role mappings for JIT access",
                "description": "Authorizes the request to assume a role in the project database",
                "operationId": "v1-authorize-jit-access",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthorizeJitAccessBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JitAuthorizeAccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to authorize database jit access"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/database/jit/list": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "List all user-id to role mappings for JIT access",
                "description": "Mappings of roles a user can assume in the project database",
                "operationId": "v1-list-jit-access",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JitListAccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to list database jit access"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/database/jit/{userId}": {
            "delete": {
                "tags": [
                    "Database"
                ],
                "summary": "Delete JIT access by user-id",
                "description": "Remove JIT mappings of a user, revoking all JIT database access",
                "operationId": "v1-delete-jit-access",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to remove JIT access"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/functions": {
            "get": {
                "tags": [
                    "Edge Functions"
                ],
                "summary": "List all functions",
                "description": "Returns all functions you've previously added to the specified project.",
                "operationId": "v1-list-all-functions",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FunctionResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve project's functions"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Edge Functions"
                ],
                "summary": "Bulk update functions",
                "description": "Bulk update functions. It will create a new function or replace existing. The operation is idempotent. NOTE: You will need to manually bump the version.",
                "operationId": "v1-bulk-update-functions",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkUpdateFunctionBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkUpdateFunctionResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "402": {
                        "description": "Maximum number of functions reached for Plan"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update functions"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Edge Functions"
                ],
                "summary": "Create a function",
                "description": "This endpoint is deprecated - use the deploy endpoint. Creates a function and adds it to the specified project.",
                "operationId": "v1-create-a-function",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "slug",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "pattern": "^[A-Za-z0-9_-]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "verify_jwt",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "x-ballerina-name": "verifyJwt"
                    },
                    {
                        "name": "import_map",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "x-ballerina-name": "importMap"
                    },
                    {
                        "name": "entrypoint_path",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "entrypointPath"
                    },
                    {
                        "name": "import_map_path",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "importMapPath"
                    },
                    {
                        "name": "ezbr_sha256",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "ezbrSha256"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.denoland.eszip": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1CreateFunctionBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FunctionResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "402": {
                        "description": "Maximum number of functions reached for Plan"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to create project's function"
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/functions/deploy": {
            "post": {
                "tags": [
                    "Edge Functions"
                ],
                "summary": "Deploy a function",
                "description": "A new endpoint to deploy functions. It will create if function does not exist.",
                "operationId": "v1-deploy-a-function",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "slug",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "pattern": "^[A-Za-z0-9_-]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "bundleOnly",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/FunctionDeployBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeployFunctionResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "402": {
                        "description": "Maximum number of functions reached for Plan"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to deploy function"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/functions/{functionSlug}": {
            "get": {
                "tags": [
                    "Edge Functions"
                ],
                "summary": "Retrieve a function",
                "description": "Retrieves a function with the specified slug and project.",
                "operationId": "v1-get-a-function",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "functionSlug",
                        "in": "path",
                        "description": "Function slug",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "pattern": "^[A-Za-z0-9_-]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FunctionSlugResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve function with given slug"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Edge Functions"
                ],
                "summary": "Delete a function",
                "description": "Deletes a function with the specified slug from the specified project.",
                "operationId": "v1-delete-a-function",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "functionSlug",
                        "in": "path",
                        "description": "Function slug",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "pattern": "^[A-Za-z0-9_-]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to delete function with given slug"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Edge Functions"
                ],
                "summary": "Update a function",
                "description": "Updates a function with the specified slug and project.",
                "operationId": "v1-update-a-function",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "functionSlug",
                        "in": "path",
                        "description": "Function slug",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "pattern": "^[A-Za-z0-9_-]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "slug",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "pattern": "^[A-Za-z0-9_-]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "verify_jwt",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "x-ballerina-name": "verifyJwt"
                    },
                    {
                        "name": "import_map",
                        "in": "query",
                        "description": "Boolean string, true or false",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "x-ballerina-name": "importMap"
                    },
                    {
                        "name": "entrypoint_path",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "entrypointPath"
                    },
                    {
                        "name": "import_map_path",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "importMapPath"
                    },
                    {
                        "name": "ezbr_sha256",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-ballerina-name": "ezbrSha256"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.denoland.eszip": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1UpdateFunctionBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FunctionResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to update function with given slug"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/functions/{functionSlug}/body": {
            "get": {
                "tags": [
                    "Edge Functions"
                ],
                "summary": "Retrieve a function body",
                "description": "Retrieves a function body for the specified slug and project.",
                "operationId": "v1-get-a-function-body",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "functionSlug",
                        "in": "path",
                        "description": "Function slug",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "pattern": "^[A-Za-z0-9_-]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamableFile"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to retrieve function body with given slug"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/storage/buckets": {
            "get": {
                "tags": [
                    "Storage"
                ],
                "summary": "Lists all buckets",
                "operationId": "v1-list-all-buckets",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/V1StorageBucketResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to get list of buckets"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/config/auth/sso/providers": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Lists all SSO providers",
                "operationId": "v1-list-all-sso-provider",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListProvidersResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "404": {
                        "description": "SAML 2.0 support is not enabled for this project"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Creates a new SSO provider",
                "operationId": "v1-create-a-sso-provider",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProviderBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateProviderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "404": {
                        "description": "SAML 2.0 support is not enabled for this project"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/config/auth/sso/providers/{providerId}": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Gets a SSO provider by its UUID",
                "operationId": "v1-get-a-sso-provider",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "providerId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetProviderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "404": {
                        "description": "Either SAML 2.0 was not enabled for this project, or the provider does not exist"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Auth"
                ],
                "summary": "Updates a SSO provider by its UUID",
                "operationId": "v1-update-a-sso-provider",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "providerId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProviderBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateProviderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "404": {
                        "description": "Either SAML 2.0 was not enabled for this project, or the provider does not exist"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Auth"
                ],
                "summary": "Removes a SSO provider by its UUID",
                "operationId": "v1-delete-a-sso-provider",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "providerId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteProviderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "404": {
                        "description": "Either SAML 2.0 was not enabled for this project, or the provider does not exist"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/database/backups": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "Lists all backups",
                "operationId": "v1-list-all-backups",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1BackupsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to get backups"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/database/backups/restore-pitr": {
            "post": {
                "tags": [
                    "Database"
                ],
                "summary": "Restores a PITR backup for a database",
                "operationId": "v1-restore-pitr-backup",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1RestorePitrBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/projects/{ref}/database/backups/restore-point": {
            "get": {
                "tags": [
                    "Database"
                ],
                "summary": "Get restore points for project",
                "operationId": "v1-get-restore-point",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "maxLength": 20,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1RestorePointResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Failed to get requested restore points"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "x-internal": true
            },
            "post": {
                "tags": [
                    "Database"
                ],
                "summary": "Initiates a creation of a restore point for a database",
                "operationId": "v1-create-restore-point",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1RestorePointPostBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1RestorePointResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "x-internal": true
            }
        },
        "/v1/projects/{ref}/database/backups/undo": {
            "post": {
                "tags": [
                    "Database"
                ],
                "summary": "Initiates an undo to a given restore point",
                "operationId": "v1-undo",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "path",
                        "description": "Project ref",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "maxLength": 20,
                            "minLength": 20,
                            "pattern": "^[a-z]+$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1UndoBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "x-internal": true
            }
        },
        "/v1/organizations/{slug}/members": {
            "get": {
                "tags": [
                    "Organizations"
                ],
                "summary": "List members of an organization",
                "operationId": "v1-list-organization-members",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Organization slug",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "pattern": "^[\\w-]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/V1OrganizationMemberResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/organizations/{slug}": {
            "get": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Gets information about the organization",
                "operationId": "v1-get-an-organization",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Organization slug",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "pattern": "^[\\w-]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/V1OrganizationSlugResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/v1/organizations/{slug}/project-claim/{token}": {
            "get": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Gets project details for the specified organization and claim token",
                "operationId": "v1-get-organization-project-claim",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Organization slug",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "pattern": "^[\\w-]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "token",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationProjectClaimResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "x-internal": true
            },
            "post": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Claims project for the specified organization",
                "operationId": "v1-claim-project-for-organization",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Organization slug",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "pattern": "^[\\w-]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "token",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden action"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ],
                "x-internal": true
            }
        },
        "/v1/organizations/{slug}/projects": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Gets all projects for the given organization",
                "description": "Returns a paginated list of projects for the specified organization.\n\n    This endpoint uses offset-based pagination. Use the `offset` parameter to skip a number of projects and the `limit` parameter to control the number of projects returned per page.",
                "operationId": "v1-get-all-projects-for-organization",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Organization slug",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "pattern": "^[\\w-]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Number of projects to skip",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of projects to return per page",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search projects by name",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort order for projects",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "default": "name_asc",
                            "enum": [
                                "name_asc",
                                "name_desc",
                                "created_asc",
                                "created_desc"
                            ]
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "A comma-separated list of project statuses to filter by.\n\nThe following values are supported: `ACTIVE_HEALTHY`, `INACTIVE`",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "example": "?statuses=ACTIVE_HEALTHY,INACTIVE"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationProjectsResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve projects"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "BulkUpdateFunctionResponse": {
                "required": [
                    "functions"
                ],
                "type": "object",
                "properties": {
                    "functions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BulkUpdateFunctionResponseFunctions"
                        },
                        "description": "Array of function update results"
                    }
                },
                "description": "Response object containing the results of bulk function updates"
            },
            "OAuthRevokeTokenBody": {
                "required": [
                    "client_id",
                    "client_secret",
                    "refresh_token"
                ],
                "type": "object",
                "properties": {
                    "refresh_token": {
                        "type": "string",
                        "x-ballerina-name": "refreshToken",
                        "description": "The refresh token to be revoked"
                    },
                    "client_secret": {
                        "type": "string",
                        "x-ballerina-name": "clientSecret",
                        "description": "OAuth client secret for authentication"
                    },
                    "client_id": {
                        "type": "string",
                        "format": "uuid",
                        "x-ballerina-name": "clientId",
                        "description": "Unique identifier for the OAuth client"
                    }
                },
                "additionalProperties": false,
                "description": "Request body for revoking OAuth refresh tokens"
            },
            "UpdateApiKeyBody": {
                "type": "object",
                "properties": {
                    "secret_jwt_template": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "x-ballerina-name": "secretJwtTemplate",
                        "description": "JWT template configuration for the API key"
                    },
                    "name": {
                        "maxLength": 64,
                        "minLength": 4,
                        "pattern": "^[a-z_][a-z0-9_]+$",
                        "type": "string",
                        "description": "API key name (4-64 chars, lowercase letters, numbers, underscores)"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Optional description for the API key"
                    }
                },
                "description": "Request body for updating API key properties"
            },
            "OrganizationProjectClaimResponsePreviewWarnings": {
                "required": [
                    "key",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Warning message text"
                    },
                    "key": {
                        "type": "string",
                        "description": "Warning identifier key"
                    }
                },
                "description": "Warning information for project claim preview operations"
            },
            "SigningKeyResponse": {
                "required": [
                    "algorithm",
                    "created_at",
                    "id",
                    "status",
                    "updated_at"
                ],
                "type": "object",
                "properties": {
                    "public_jwk": {
                        "nullable": true,
                        "x-ballerina-name": "publicJwk",
                        "description": "Public JSON Web Key for signature verification"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the signing key was last updated"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the signing key was created"
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier for the signing key"
                    },
                    "algorithm": {
                        "type": "string",
                        "enum": [
                            "EdDSA",
                            "ES256",
                            "RS256",
                            "HS256"
                        ],
                        "description": "Cryptographic algorithm used for signing"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "in_use",
                            "previously_used",
                            "revoked",
                            "standby"
                        ],
                        "description": "Current status of the signing key"
                    }
                },
                "additionalProperties": false,
                "description": "Response containing signing key information and metadata"
            },
            "BranchIdOrRefBranchIdOrRefOneOf12": {
                "type": "string",
                "format": "uuid",
                "deprecated": true,
                "description": "Deprecated UUID string identifier for branch reference"
            },
            "ListProjectAddonsResponseAvailableAddons": {
                "required": [
                    "name",
                    "type",
                    "variants"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the available addon"
                    },
                    "variants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListProjectAddonsResponseVariant"
                        },
                        "description": "Array of available addon variants"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "custom_domain",
                            "compute_instance",
                            "pitr",
                            "ipv4",
                            "auth_mfa_phone",
                            "auth_mfa_web_authn",
                            "log_drain"
                        ],
                        "description": "Type of addon (custom_domain, compute_instance, pitr, etc.)"
                    }
                },
                "description": "Available addon configuration with name, type, and variants"
            },
            "UpdateSupavisorConfigBody": {
                "type": "object",
                "properties": {
                    "default_pool_size": {
                        "maximum": 3000,
                        "minimum": 0,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "defaultPoolSize",
                        "description": "Default connection pool size (0-3000, nullable)"
                    },
                    "pool_mode": {
                        "type": "string",
                        "description": "Dedicated pooler mode for the project",
                        "enum": [
                            "transaction",
                            "session"
                        ],
                        "x-ballerina-name": "poolMode"
                    }
                },
                "description": "Configuration parameters for updating Supabase connection pooler settings"
            },
            "ProjectUpgradeEligibilityResponse": {
                "required": [
                    "current_app_version",
                    "current_app_version_release_channel",
                    "duration_estimate_hours",
                    "eligible",
                    "latest_app_version",
                    "legacy_auth_custom_roles",
                    "objects_to_be_dropped",
                    "target_upgrade_versions",
                    "unsupported_extensions",
                    "user_defined_objects_in_internal_schemas"
                ],
                "type": "object",
                "properties": {
                    "target_upgrade_versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProjectUpgradeEligibilityResponseTargetUpgradeVersions"
                        },
                        "x-ballerina-name": "targetUpgradeVersions",
                        "description": "Array of available target versions for upgrade"
                    },
                    "unsupported_extensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-ballerina-name": "unsupportedExtensions",
                        "description": "List of extensions not supported in target version"
                    },
                    "user_defined_objects_in_internal_schemas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-ballerina-name": "userDefinedObjectsInInternalSchemas",
                        "description": "User-defined objects found in internal schemas"
                    },
                    "legacy_auth_custom_roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-ballerina-name": "legacyAuthCustomRoles",
                        "description": "Legacy authentication custom roles that may be affected"
                    },
                    "current_app_version": {
                        "type": "string",
                        "x-ballerina-name": "currentAppVersion",
                        "description": "Current application version of the project"
                    },
                    "eligible": {
                        "type": "boolean",
                        "description": "Whether the project is eligible for upgrade"
                    },
                    "current_app_version_release_channel": {
                        "type": "string",
                        "enum": [
                            "internal",
                            "alpha",
                            "beta",
                            "ga",
                            "withdrawn",
                            "preview"
                        ],
                        "x-ballerina-name": "currentAppVersionReleaseChannel",
                        "description": "Release channel of current app version (alpha, beta, ga, etc.)"
                    },
                    "latest_app_version": {
                        "type": "string",
                        "x-ballerina-name": "latestAppVersion",
                        "description": "Latest available application version"
                    },
                    "duration_estimate_hours": {
                        "type": "number",
                        "x-ballerina-name": "durationEstimateHours",
                        "description": "Estimated duration for upgrade completion in hours"
                    },
                    "objects_to_be_dropped": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-ballerina-name": "objectsToBeDropped",
                        "description": "Database objects that will be dropped during upgrade"
                    }
                },
                "description": "Project upgrade eligibility assessment with version and compatibility info"
            },
            "UpdateProviderResponse": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the provider was last updated"
                    },
                    "saml": {
                        "$ref": "#/components/schemas/CreateProviderResponseSaml"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreateProviderResponseDomains"
                        },
                        "description": "Array of domains associated with the updated provider"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the provider was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the provider"
                    }
                },
                "description": "Response object for updated authentication provider configuration"
            },
            "SslEnforcementResponse": {
                "required": [
                    "appliedSuccessfully",
                    "currentConfig"
                ],
                "type": "object",
                "properties": {
                    "currentConfig": {
                        "$ref": "#/components/schemas/SslEnforcementResponseCurrentConfig"
                    },
                    "appliedSuccessfully": {
                        "type": "boolean",
                        "description": "Indicates if SSL enforcement was applied successfully"
                    }
                },
                "description": "Response object for SSL enforcement configuration operations"
            },
            "OrganizationProjectsResponse": {
                "required": [
                    "pagination",
                    "projects"
                ],
                "type": "object",
                "properties": {
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganizationProjectsResponseProjects"
                        },
                        "description": "Array of projects belonging to the organization"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/OrganizationProjectsResponsePagination"
                    }
                },
                "description": "Response containing organization projects with pagination metadata"
            },
            "VanitySubdomainBody": {
                "required": [
                    "vanity_subdomain"
                ],
                "type": "object",
                "properties": {
                    "vanity_subdomain": {
                        "type": "string",
                        "x-ballerina-name": "vanitySubdomain",
                        "description": "Custom subdomain name for the project"
                    }
                },
                "description": "Request body for configuring vanity subdomain settings"
            },
            "V1ProjectRefResponse": {
                "required": [
                    "id",
                    "name",
                    "ref"
                ],
                "type": "object",
                "properties": {
                    "ref": {
                        "type": "string",
                        "description": "Reference string identifier for the project"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the project"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Numeric identifier of the project"
                    }
                },
                "description": "Response containing project reference information"
            },
            "NetworkRestrictionsResponse": {
                "required": [
                    "config",
                    "entitlement",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "old_config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NetworkRestrictionsResponseOldConfig"
                            }
                        ],
                        "x-ballerina-name": "oldConfig",
                        "description": "Previous network restrictions configuration"
                    },
                    "applied_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-ballerina-name": "appliedAt",
                        "description": "Timestamp when restrictions were applied"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when restrictions were last updated"
                    },
                    "entitlement": {
                        "type": "string",
                        "enum": [
                            "disallowed",
                            "allowed"
                        ],
                        "description": "Permission status for network restrictions feature"
                    },
                    "config": {
                        "$ref": "#/components/schemas/NetworkRestrictionsResponseConfig"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "stored",
                            "applied"
                        ],
                        "description": "Current status of network restrictions configuration"
                    }
                },
                "description": "Response containing network access restriction configuration"
            },
            "GetProjectAvailableRestoreVersionsResponse": {
                "required": [
                    "available_versions"
                ],
                "type": "object",
                "properties": {
                    "available_versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GetProjectAvailableRestoreVersionsResponseAvailableVersions"
                        },
                        "x-ballerina-name": "availableVersions",
                        "description": "Array of available backup versions for project restoration"
                    }
                },
                "description": "Response containing available project restore versions"
            },
            "UpdateAuthConfigBody": {
                "type": "object",
                "properties": {
                    "disable_signup": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "disableSignup",
                        "description": "Whether to disable new user registration"
                    },
                    "external_slack_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackEmailOptional",
                        "description": "Whether email is optional for Slack OAuth authentication"
                    },
                    "external_google_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleClientId",
                        "description": "Google OAuth client ID for external authentication"
                    },
                    "sms_textlocal_api_key": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTextlocalApiKey",
                        "description": "API key for Textlocal SMS provider integration"
                    },
                    "external_phone_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalPhoneEnabled",
                        "description": "Whether phone number authentication is enabled"
                    },
                    "hook_before_user_created_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookBeforeUserCreatedEnabled",
                        "description": "Whether pre-user creation webhook is enabled"
                    },
                    "external_github_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGithubSecret",
                        "description": "GitHub OAuth client secret for external authentication"
                    },
                    "external_google_additional_client_ids": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleAdditionalClientIds",
                        "description": "Additional Google OAuth client IDs for authentication"
                    },
                    "smtp_admin_email": {
                        "type": "string",
                        "format": "email",
                        "nullable": true,
                        "x-ballerina-name": "smtpAdminEmail",
                        "description": "Administrator email address for SMTP configuration"
                    },
                    "password_hibp_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "passwordHibpEnabled",
                        "description": "Whether Have I Been Pwned password checking is enabled"
                    },
                    "mailer_subjects_password_changed_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsPasswordChangedNotification",
                        "description": "Email subject line for password change notifications"
                    },
                    "external_web3_solana_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalWeb3SolanaEnabled",
                        "description": "Whether Solana Web3 authentication is enabled"
                    },
                    "sms_test_otp": {
                        "pattern": "^([0-9]{1,15}=[0-9]+,?)*$",
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTestOtp",
                        "description": "Test OTP codes for SMS authentication in development"
                    },
                    "external_github_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGithubClientId",
                        "description": "GitHub OAuth client ID for external authentication"
                    },
                    "api_max_request_duration": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "apiMaxRequestDuration",
                        "description": "Maximum allowed duration for API requests in milliseconds"
                    },
                    "external_spotify_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSpotifyEmailOptional",
                        "description": "Whether email is optional for Spotify OAuth authentication"
                    },
                    "smtp_pass": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smtpPass",
                        "description": "Password for SMTP server authentication"
                    },
                    "external_keycloak_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalKeycloakClientId",
                        "description": "Keycloak OAuth client ID for external authentication"
                    },
                    "nimbus_oauth_client_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "nimbusOauthClientSecret",
                        "description": "OAuth client secret for Nimbus authentication provider"
                    },
                    "mailer_subjects_reauthentication": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsReauthentication",
                        "description": "Email subject line for reauthentication messages"
                    },
                    "hook_send_sms_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookSendSmsSecrets",
                        "description": "Secrets configuration for SMS sending hooks"
                    },
                    "external_facebook_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalFacebookSecret",
                        "description": "Client secret for Facebook OAuth authentication"
                    },
                    "external_slack_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackEnabled",
                        "description": "Enable or disable Slack OAuth authentication"
                    },
                    "site_url": {
                        "pattern": "^[^,]+$",
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "siteUrl",
                        "description": "Primary site URL for authentication redirects"
                    },
                    "sms_twilio_message_service_sid": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioMessageServiceSid",
                        "description": "Twilio Message Service SID for SMS delivery"
                    },
                    "mfa_phone_otp_length": {
                        "maximum": 32767,
                        "minimum": 0,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "mfaPhoneOtpLength",
                        "description": "Length of OTP codes for phone-based MFA (0-32767)"
                    },
                    "sms_twilio_verify_auth_token": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioVerifyAuthToken",
                        "description": "Twilio Verify service authentication token"
                    },
                    "external_slack_oidc_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackOidcClientId",
                        "description": "Client ID for Slack OIDC authentication"
                    },
                    "mfa_max_enrolled_factors": {
                        "maximum": 2147483647,
                        "minimum": 0,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "mfaMaxEnrolledFactors",
                        "description": "Maximum number of MFA factors a user can enroll"
                    },
                    "mailer_subjects_confirmation": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsConfirmation",
                        "description": "Email subject line for account confirmation messages"
                    },
                    "external_github_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGithubEmailOptional",
                        "description": "Make email optional for GitHub OAuth authentication"
                    },
                    "mailer_subjects_magic_link": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsMagicLink",
                        "description": "Email subject line for magic link authentication"
                    },
                    "mailer_subjects_email_changed_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsEmailChangedNotification",
                        "description": "Email subject for email address change notifications"
                    },
                    "mfa_phone_verify_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaPhoneVerifyEnabled",
                        "description": "Enable phone verification for MFA enrollment"
                    },
                    "jwt_exp": {
                        "maximum": 604800,
                        "minimum": 0,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "jwtExp",
                        "description": "JWT token expiration time in seconds (0-604800)"
                    },
                    "external_slack_oidc_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackOidcEmailOptional",
                        "description": "Make email optional for Slack OIDC authentication"
                    },
                    "external_slack_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackClientId",
                        "description": "Client ID for Slack OAuth authentication"
                    },
                    "external_twitch_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitchSecret",
                        "description": "Client secret for Twitch OAuth authentication"
                    },
                    "external_figma_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalFigmaEmailOptional",
                        "description": "Whether email is optional for Figma OAuth authentication"
                    },
                    "external_keycloak_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalKeycloakUrl",
                        "description": "Keycloak server URL for OAuth authentication"
                    },
                    "external_spotify_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSpotifyEnabled",
                        "description": "Enable Spotify OAuth provider for authentication"
                    },
                    "hook_password_verification_attempt_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookPasswordVerificationAttemptSecrets",
                        "description": "Secrets for password verification attempt webhook"
                    },
                    "external_notion_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalNotionSecret",
                        "description": "Client secret for Notion OAuth provider"
                    },
                    "external_azure_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAzureSecret",
                        "description": "Client secret for Azure OAuth provider"
                    },
                    "rate_limit_otp": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitOtp",
                        "description": "Rate limit for OTP requests per hour (1-2147483647)"
                    },
                    "sms_twilio_auth_token": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioAuthToken",
                        "description": "Twilio authentication token for SMS delivery"
                    },
                    "mailer_subjects_recovery": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsRecovery",
                        "description": "Email subject line for password recovery messages"
                    },
                    "mfa_totp_enroll_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaTotpEnrollEnabled",
                        "description": "Enable TOTP enrollment for multi-factor authentication"
                    },
                    "smtp_sender_name": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smtpSenderName",
                        "description": "Display name for SMTP email sender"
                    },
                    "sessions_tags": {
                        "pattern": "^\\s*([a-zA-Z0-9_-]+(\\s*,+\\s*)?)*\\s*$",
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "sessionsTags",
                        "description": "Comma-separated tags for session management"
                    },
                    "mailer_templates_mfa_factor_enrolled_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesMfaFactorEnrolledNotificationContent",
                        "description": "Email template content for MFA enrollment notifications"
                    },
                    "mailer_allow_unverified_email_sign_ins": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerAllowUnverifiedEmailSignIns",
                        "description": "Allow sign-ins with unverified email addresses"
                    },
                    "external_discord_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalDiscordClientId",
                        "description": "Client ID for Discord OAuth provider"
                    },
                    "external_slack_oidc_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackOidcEnabled",
                        "description": "Enable Slack OIDC provider for authentication"
                    },
                    "rate_limit_token_refresh": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitTokenRefresh",
                        "description": "Rate limit for token refresh requests per hour (1-2147483647)"
                    },
                    "sms_messagebird_access_key": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsMessagebirdAccessKey",
                        "description": "MessageBird access key for SMS delivery"
                    },
                    "external_discord_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalDiscordSecret",
                        "description": "Client secret for Discord OAuth provider"
                    },
                    "external_figma_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalFigmaSecret",
                        "description": "Client secret for Figma OAuth provider"
                    },
                    "mailer_notifications_mfa_factor_enrolled_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsMfaFactorEnrolledEnabled",
                        "description": "Enable email notifications when MFA factor is enrolled"
                    },
                    "hook_password_verification_attempt_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookPasswordVerificationAttemptUri",
                        "description": "URI for password verification attempt webhook"
                    },
                    "mailer_templates_email_change_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesEmailChangeContent",
                        "description": "Email template content for email change notifications"
                    },
                    "external_gitlab_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGitlabEnabled",
                        "description": "Enable GitLab OAuth provider authentication"
                    },
                    "mfa_phone_max_frequency": {
                        "maximum": 32767,
                        "minimum": 0,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "mfaPhoneMaxFrequency",
                        "description": "Maximum frequency for phone-based MFA attempts (0-32767)"
                    },
                    "smtp_user": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smtpUser",
                        "description": "SMTP server username for email delivery"
                    },
                    "password_min_length": {
                        "maximum": 32767,
                        "minimum": 6,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "passwordMinLength",
                        "description": "Minimum password length requirement (6-32767 characters)"
                    },
                    "hook_mfa_verification_attempt_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookMfaVerificationAttemptEnabled",
                        "description": "Enable webhook for MFA verification attempts"
                    },
                    "security_captcha_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "securityCaptchaEnabled",
                        "description": "Enable CAPTCHA security verification"
                    },
                    "mailer_notifications_email_changed_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsEmailChangedEnabled",
                        "description": "Enable email notifications when email address is changed"
                    },
                    "external_twitter_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitterEnabled",
                        "description": "Enable Twitter OAuth provider authentication"
                    },
                    "external_email_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalEmailEnabled",
                        "description": "Enable email-based authentication provider"
                    },
                    "external_keycloak_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalKeycloakSecret",
                        "description": "Client secret for Keycloak OAuth provider"
                    },
                    "external_workos_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalWorkosEnabled",
                        "description": "Enable WorkOS OAuth provider authentication"
                    },
                    "smtp_port": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smtpPort",
                        "description": "SMTP server port for email delivery"
                    },
                    "external_kakao_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalKakaoEnabled",
                        "description": "Enable Kakao OAuth provider authentication"
                    },
                    "external_bitbucket_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalBitbucketSecret",
                        "description": "Client secret for Bitbucket OAuth provider"
                    },
                    "external_apple_additional_client_ids": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAppleAdditionalClientIds",
                        "description": "Additional client IDs for Apple OAuth provider"
                    },
                    "hook_mfa_verification_attempt_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookMfaVerificationAttemptSecrets",
                        "description": "Webhook secrets for MFA verification attempt hooks"
                    },
                    "hook_send_email_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookSendEmailUri",
                        "description": "URI for send email webhook"
                    },
                    "sms_messagebird_originator": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsMessagebirdOriginator",
                        "description": "MessageBird SMS originator identifier for outbound messages"
                    },
                    "mailer_subjects_mfa_factor_enrolled_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsMfaFactorEnrolledNotification",
                        "description": "Email subject line for MFA factor enrollment notifications"
                    },
                    "external_twitch_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitchEnabled",
                        "description": "Enable Twitch OAuth provider for authentication"
                    },
                    "hook_send_sms_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookSendSmsEnabled",
                        "description": "Enable custom SMS sending webhook"
                    },
                    "external_google_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleEnabled",
                        "description": "Enable Google OAuth provider for authentication"
                    },
                    "external_workos_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalWorkosSecret",
                        "description": "WorkOS OAuth provider client secret"
                    },
                    "external_github_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGithubEnabled",
                        "description": "Enable GitHub OAuth provider for authentication"
                    },
                    "mailer_notifications_phone_changed_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsPhoneChangedEnabled",
                        "description": "Enable email notifications when user phone number changes"
                    },
                    "external_twitter_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitterSecret",
                        "description": "Twitter OAuth provider client secret"
                    },
                    "mfa_web_authn_verify_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaWebAuthnVerifyEnabled",
                        "description": "Enable WebAuthn verification for multi-factor authentication"
                    },
                    "external_facebook_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalFacebookEmailOptional",
                        "description": "Make email optional for Facebook OAuth registration"
                    },
                    "mailer_notifications_password_changed_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsPasswordChangedEnabled",
                        "description": "Enable email notifications when user password changes"
                    },
                    "external_azure_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAzureUrl",
                        "description": "Azure OAuth provider endpoint URL"
                    },
                    "mailer_templates_identity_unlinked_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesIdentityUnlinkedNotificationContent",
                        "description": "Email template content for identity unlinked notifications"
                    },
                    "hook_after_user_created_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookAfterUserCreatedUri",
                        "description": "Webhook URI triggered after user account creation"
                    },
                    "external_gitlab_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGitlabUrl",
                        "description": "GitLab OAuth provider endpoint URL"
                    },
                    "hook_send_sms_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookSendSmsUri",
                        "description": "Custom webhook URI for SMS sending functionality"
                    },
                    "external_notion_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalNotionEmailOptional",
                        "description": "Make email optional for Notion OAuth registration"
                    },
                    "security_update_password_require_reauthentication": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "securityUpdatePasswordRequireReauthentication",
                        "description": "Require user reauthentication before password updates"
                    },
                    "mailer_templates_magic_link_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesMagicLinkContent",
                        "description": "Email template content for magic link authentication"
                    },
                    "external_twitch_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitchEmailOptional",
                        "description": "Whether email is optional for Twitch OAuth authentication"
                    },
                    "sms_textlocal_sender": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTextlocalSender",
                        "description": "Sender ID for Textlocal SMS provider"
                    },
                    "sms_vonage_from": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsVonageFrom",
                        "description": "Sender phone number or ID for Vonage SMS provider"
                    },
                    "mailer_templates_confirmation_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesConfirmationContent",
                        "description": "HTML content template for email confirmation messages"
                    },
                    "external_kakao_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalKakaoClientId",
                        "description": "Client ID for Kakao OAuth authentication"
                    },
                    "nimbus_oauth_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "nimbusOauthClientId",
                        "description": "OAuth client ID for Nimbus authentication provider"
                    },
                    "mailer_subjects_mfa_factor_unenrolled_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsMfaFactorUnenrolledNotification",
                        "description": "Email subject for MFA factor unenrollment notifications"
                    },
                    "rate_limit_anonymous_users": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitAnonymousUsers",
                        "description": "Rate limit for anonymous users (requests per time window)"
                    },
                    "external_google_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleEmailOptional",
                        "description": "Whether email is optional for Google OAuth authentication"
                    },
                    "mfa_web_authn_enroll_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaWebAuthnEnrollEnabled",
                        "description": "Whether WebAuthn enrollment is enabled for MFA"
                    },
                    "external_slack_oidc_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackOidcSecret",
                        "description": "Client secret for Slack OIDC authentication"
                    },
                    "external_workos_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalWorkosUrl",
                        "description": "Base URL for WorkOS authentication provider"
                    },
                    "external_bitbucket_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalBitbucketEmailOptional",
                        "description": "Whether email is optional for Bitbucket OAuth authentication"
                    },
                    "external_twitch_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitchClientId",
                        "description": "Client ID for Twitch OAuth authentication"
                    },
                    "security_captcha_provider": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "turnstile",
                            "hcaptcha"
                        ],
                        "x-ballerina-name": "securityCaptchaProvider",
                        "description": "CAPTCHA provider (turnstile or hcaptcha)"
                    },
                    "external_azure_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAzureClientId",
                        "description": "Client ID for Azure AD OAuth authentication"
                    },
                    "saml_external_url": {
                        "pattern": "^[^,]+$",
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "samlExternalUrl",
                        "description": "External URL for SAML authentication endpoint"
                    },
                    "external_apple_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAppleSecret",
                        "description": "Client secret for Apple OAuth authentication"
                    },
                    "sessions_timebox": {
                        "minimum": 0,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "sessionsTimebox",
                        "description": "Session duration limit in seconds"
                    },
                    "security_captcha_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "securityCaptchaSecret",
                        "description": "Secret key for CAPTCHA provider verification"
                    },
                    "sms_autoconfirm": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "smsAutoconfirm",
                        "description": "Automatically confirm SMS verification without manual confirmation"
                    },
                    "sms_test_otp_valid_until": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "x-ballerina-name": "smsTestOtpValidUntil",
                        "description": "Expiration timestamp for test SMS OTP codes"
                    },
                    "external_facebook_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalFacebookClientId",
                        "description": "Facebook OAuth application client ID"
                    },
                    "external_gitlab_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGitlabEmailOptional",
                        "description": "Make email optional for GitLab OAuth authentication"
                    },
                    "external_figma_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalFigmaEnabled",
                        "description": "Enable Figma OAuth provider for authentication"
                    },
                    "mailer_autoconfirm": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerAutoconfirm",
                        "description": "Automatically confirm email verification without manual confirmation"
                    },
                    "external_discord_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalDiscordEnabled",
                        "description": "Enable Discord OAuth provider for authentication"
                    },
                    "external_keycloak_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalKeycloakEmailOptional",
                        "description": "Make email optional for Keycloak OAuth authentication"
                    },
                    "mailer_subjects_invite": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsInvite",
                        "description": "Email subject line for user invitation emails"
                    },
                    "sms_twilio_verify_message_service_sid": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioVerifyMessageServiceSid",
                        "description": "Twilio Verify service SID for SMS message delivery"
                    },
                    "external_discord_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalDiscordEmailOptional",
                        "description": "Make email optional for Discord OAuth authentication"
                    },
                    "external_zoom_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalZoomSecret",
                        "description": "Zoom OAuth application client secret"
                    },
                    "mfa_phone_enroll_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaPhoneEnrollEnabled",
                        "description": "Enable phone number enrollment for multi-factor authentication"
                    },
                    "external_workos_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalWorkosClientId",
                        "description": "WorkOS OAuth application client ID"
                    },
                    "rate_limit_email_sent": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitEmailSent",
                        "description": "Maximum number of emails that can be sent per rate limit window"
                    },
                    "sms_vonage_api_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsVonageApiSecret",
                        "description": "Vonage API secret key for SMS service integration"
                    },
                    "external_spotify_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSpotifyClientId",
                        "description": "Spotify OAuth application client ID"
                    },
                    "mailer_subjects_identity_linked_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsIdentityLinkedNotification",
                        "description": "Email subject for identity linking notification emails"
                    },
                    "mailer_templates_mfa_factor_unenrolled_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesMfaFactorUnenrolledNotificationContent",
                        "description": "Email template content for MFA factor unenrollment notifications"
                    },
                    "external_azure_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalAzureEmailOptional",
                        "description": "Make email optional for Azure OAuth authentication"
                    },
                    "hook_password_verification_attempt_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookPasswordVerificationAttemptEnabled",
                        "description": "Enable webhook for password verification attempts"
                    },
                    "sms_otp_exp": {
                        "maximum": 2147483647,
                        "minimum": 0,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "smsOtpExp",
                        "description": "SMS OTP expiration time in seconds (0-2147483647)"
                    },
                    "mailer_subjects_email_change": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsEmailChange",
                        "description": "Subject line for email change notification emails"
                    },
                    "security_manual_linking_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "securityManualLinkingEnabled",
                        "description": "Allow manual linking of user accounts"
                    },
                    "mailer_templates_email_changed_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesEmailChangedNotificationContent",
                        "description": "HTML content template for email change notification"
                    },
                    "external_linkedin_oidc_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalLinkedinOidcEmailOptional",
                        "description": "Make email optional for LinkedIn OIDC authentication"
                    },
                    "external_anonymous_users_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalAnonymousUsersEnabled",
                        "description": "Enable anonymous user authentication"
                    },
                    "external_google_skip_nonce_check": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleSkipNonceCheck",
                        "description": "Skip nonce validation for Google OAuth"
                    },
                    "external_twitter_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitterClientId",
                        "description": "Twitter OAuth client ID"
                    },
                    "saml_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "samlEnabled",
                        "description": "Enable SAML authentication"
                    },
                    "rate_limit_verify": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitVerify",
                        "description": "Rate limit for verification requests per hour (1-2147483647)"
                    },
                    "external_gitlab_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGitlabSecret",
                        "description": "GitLab OAuth client secret"
                    },
                    "mailer_otp_length": {
                        "maximum": 10,
                        "minimum": 6,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "mailerOtpLength",
                        "description": "Length of email OTP codes (6-10 characters)"
                    },
                    "rate_limit_sms_sent": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitSmsSent",
                        "description": "Rate limit for SMS messages per hour (1-2147483647)"
                    },
                    "external_azure_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalAzureEnabled",
                        "description": "Enable Azure Active Directory authentication"
                    },
                    "external_zoom_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalZoomClientId",
                        "description": "Zoom OAuth client ID"
                    },
                    "external_apple_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAppleClientId",
                        "description": "Apple Sign-In client ID"
                    },
                    "sms_twilio_content_sid": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioContentSid",
                        "description": "Twilio Content SID for SMS templates"
                    },
                    "sms_vonage_api_key": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsVonageApiKey",
                        "description": "Vonage API key for SMS service"
                    },
                    "hook_after_user_created_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookAfterUserCreatedSecrets",
                        "description": "Secret values for after user creation webhook"
                    },
                    "sms_template": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTemplate",
                        "description": "SMS message template for authentication notifications"
                    },
                    "sms_max_frequency": {
                        "maximum": 32767,
                        "minimum": 0,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "smsMaxFrequency",
                        "description": "Maximum SMS frequency limit (0-32767)"
                    },
                    "mailer_templates_identity_linked_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesIdentityLinkedNotificationContent",
                        "description": "Email template content for identity linked notifications"
                    },
                    "external_notion_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalNotionClientId",
                        "description": "Client ID for Notion OAuth integration"
                    },
                    "external_facebook_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalFacebookEnabled",
                        "description": "Enable Facebook OAuth authentication"
                    },
                    "mailer_templates_phone_changed_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesPhoneChangedNotificationContent",
                        "description": "Email template content for phone number change notifications"
                    },
                    "mailer_templates_reauthentication_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesReauthenticationContent",
                        "description": "Email template content for reauthentication requests"
                    },
                    "hook_mfa_verification_attempt_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookMfaVerificationAttemptUri",
                        "description": "Webhook URI for MFA verification attempts"
                    },
                    "sessions_inactivity_timeout": {
                        "minimum": 0,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "sessionsInactivityTimeout",
                        "description": "Session inactivity timeout in seconds"
                    },
                    "password_required_characters": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789",
                            "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789",
                            "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789:!@#$%^&*()_+-=[]{};'\\\\:\"|<>?,.\/`~",
                            ""
                        ],
                        "x-ballerina-name": "passwordRequiredCharacters",
                        "description": "Required character sets for password validation"
                    },
                    "mailer_notifications_identity_linked_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsIdentityLinkedEnabled",
                        "description": "Enable email notifications for identity linking"
                    },
                    "mailer_templates_recovery_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesRecoveryContent",
                        "description": "Email template content for password recovery"
                    },
                    "external_linkedin_oidc_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalLinkedinOidcEnabled",
                        "description": "Enable LinkedIn OIDC authentication"
                    },
                    "external_slack_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackSecret",
                        "description": "Client secret for Slack OAuth integration"
                    },
                    "mfa_totp_verify_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaTotpVerifyEnabled",
                        "description": "Enable TOTP verification for multi-factor authentication"
                    },
                    "smtp_host": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smtpHost",
                        "description": "SMTP server hostname for email delivery"
                    },
                    "hook_after_user_created_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookAfterUserCreatedEnabled",
                        "description": "Enable webhook trigger after user creation"
                    },
                    "external_kakao_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalKakaoSecret",
                        "description": "Client secret for Kakao OAuth integration"
                    },
                    "mailer_templates_password_changed_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesPasswordChangedNotificationContent",
                        "description": "Email template content for password change notifications"
                    },
                    "external_apple_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalAppleEmailOptional",
                        "description": "Make email optional for Apple OAuth authentication"
                    },
                    "mailer_notifications_identity_unlinked_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsIdentityUnlinkedEnabled",
                        "description": "Enable email notifications when user identity is unlinked"
                    },
                    "sms_provider": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "messagebird",
                            "textlocal",
                            "twilio",
                            "twilio_verify",
                            "vonage"
                        ],
                        "x-ballerina-name": "smsProvider",
                        "description": "SMS service provider for authentication messages"
                    },
                    "sms_twilio_verify_account_sid": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioVerifyAccountSid",
                        "description": "Twilio Verify service account SID for SMS authentication"
                    },
                    "external_google_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleSecret",
                        "description": "Google OAuth client secret for external authentication"
                    },
                    "smtp_max_frequency": {
                        "maximum": 32767,
                        "minimum": 0,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "smtpMaxFrequency",
                        "description": "Maximum SMTP email sending frequency limit (0-32767)"
                    },
                    "hook_custom_access_token_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookCustomAccessTokenUri",
                        "description": "Custom webhook URI for access token generation"
                    },
                    "sms_twilio_account_sid": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioAccountSid",
                        "description": "Twilio account SID for SMS messaging service"
                    },
                    "external_web3_ethereum_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalWeb3EthereumEnabled",
                        "description": "Enable Web3 Ethereum wallet authentication"
                    },
                    "security_refresh_token_reuse_interval": {
                        "maximum": 2147483647,
                        "minimum": 0,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "securityRefreshTokenReuseInterval",
                        "description": "Refresh token reuse interval in seconds for security"
                    },
                    "external_zoom_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalZoomEnabled",
                        "description": "Enable Zoom OAuth authentication provider"
                    },
                    "refresh_token_rotation_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "refreshTokenRotationEnabled",
                        "description": "Enable automatic refresh token rotation for security"
                    },
                    "external_twitter_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitterEmailOptional",
                        "description": "Make email optional for Twitter OAuth authentication"
                    },
                    "external_keycloak_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalKeycloakEnabled",
                        "description": "Enable Keycloak OAuth authentication provider"
                    },
                    "mfa_phone_template": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mfaPhoneTemplate",
                        "description": "SMS template for multi-factor authentication codes"
                    },
                    "sessions_single_per_user": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "sessionsSinglePerUser",
                        "description": "Limit users to single active session at a time"
                    },
                    "external_apple_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalAppleEnabled",
                        "description": "Enable Apple Sign-In authentication provider"
                    },
                    "hook_send_email_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookSendEmailSecrets",
                        "description": "Secrets for custom email sending webhook"
                    },
                    "db_max_pool_size": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "dbMaxPoolSize",
                        "description": "Maximum database connection pool size"
                    },
                    "sms_otp_length": {
                        "maximum": 32767,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "smsOtpLength",
                        "description": "Length of SMS one-time password codes (0-32767)"
                    },
                    "external_linkedin_oidc_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalLinkedinOidcClientId",
                        "description": "LinkedIn OIDC client ID for OAuth authentication"
                    },
                    "hook_custom_access_token_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookCustomAccessTokenSecrets",
                        "description": "Secrets for custom access token hook authentication"
                    },
                    "external_notion_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalNotionEnabled",
                        "description": "Enable Notion OAuth provider integration"
                    },
                    "mailer_notifications_mfa_factor_unenrolled_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsMfaFactorUnenrolledEnabled",
                        "description": "Enable email notifications when MFA factor is unenrolled"
                    },
                    "external_gitlab_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGitlabClientId",
                        "description": "GitLab OAuth application client ID"
                    },
                    "mailer_secure_email_change_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerSecureEmailChangeEnabled",
                        "description": "Enable secure email change confirmation process"
                    },
                    "mailer_otp_exp": {
                        "maximum": 2147483647,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "mailerOtpExp",
                        "description": "OTP email expiration time in seconds"
                    },
                    "mailer_subjects_phone_changed_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsPhoneChangedNotification",
                        "description": "Email subject line for phone number change notifications"
                    },
                    "external_zoom_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalZoomEmailOptional",
                        "description": "Make email optional for Zoom OAuth authentication"
                    },
                    "external_figma_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalFigmaClientId",
                        "description": "Figma OAuth application client ID"
                    },
                    "external_linkedin_oidc_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalLinkedinOidcSecret",
                        "description": "LinkedIn OIDC OAuth application secret"
                    },
                    "hook_send_email_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookSendEmailEnabled",
                        "description": "Enable send email hook functionality"
                    },
                    "external_spotify_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSpotifySecret",
                        "description": "Spotify OAuth application secret"
                    },
                    "hook_before_user_created_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookBeforeUserCreatedSecrets",
                        "description": "Secrets for before user created hook authentication"
                    },
                    "rate_limit_web3": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitWeb3",
                        "description": "Rate limit for Web3 authentication requests per hour"
                    },
                    "hook_before_user_created_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookBeforeUserCreatedUri",
                        "description": "URI endpoint for before user created hook"
                    },
                    "uri_allow_list": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "uriAllowList",
                        "description": "Comma-separated list of allowed redirect URIs"
                    },
                    "external_kakao_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalKakaoEmailOptional",
                        "description": "Make email optional for Kakao OAuth authentication"
                    },
                    "mailer_templates_invite_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesInviteContent",
                        "description": "HTML content template for invitation emails"
                    },
                    "mailer_subjects_identity_unlinked_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsIdentityUnlinkedNotification",
                        "description": "Email subject line for identity unlinked notifications"
                    },
                    "hook_custom_access_token_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookCustomAccessTokenEnabled",
                        "description": "Enable custom access token hook functionality"
                    },
                    "external_bitbucket_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalBitbucketEnabled",
                        "description": "Enable or disable Bitbucket OAuth provider authentication"
                    },
                    "external_bitbucket_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalBitbucketClientId",
                        "description": "OAuth client ID for Bitbucket authentication provider"
                    }
                },
                "description": "Request body for updating authentication configuration settings"
            },
            "SupavisorConfigResponse": {
                "required": [
                    "connectionString",
                    "connection_string",
                    "database_type",
                    "db_host",
                    "db_name",
                    "db_port",
                    "db_user",
                    "default_pool_size",
                    "identifier",
                    "is_using_scram_auth",
                    "max_client_conn",
                    "pool_mode"
                ],
                "type": "object",
                "properties": {
                    "database_type": {
                        "type": "string",
                        "enum": [
                            "PRIMARY",
                            "READ_REPLICA"
                        ],
                        "x-ballerina-name": "databaseType",
                        "description": "Type of database instance (PRIMARY or READ_REPLICA)"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier for the Supavisor configuration"
                    },
                    "is_using_scram_auth": {
                        "type": "boolean",
                        "x-ballerina-name": "isUsingScramAuth",
                        "description": "Whether SCRAM authentication is enabled for the database connection"
                    },
                    "default_pool_size": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "defaultPoolSize",
                        "description": "Default number of connections in the database connection pool"
                    },
                    "db_name": {
                        "type": "string",
                        "x-ballerina-name": "dbName",
                        "description": "Name of the target database"
                    },
                    "pool_mode": {
                        "type": "string",
                        "enum": [
                            "transaction",
                            "session"
                        ],
                        "x-ballerina-name": "poolMode",
                        "description": "Connection pooling mode (transaction or session level)"
                    },
                    "db_user": {
                        "type": "string",
                        "x-ballerina-name": "dbUser",
                        "description": "Username for database authentication"
                    },
                    "db_port": {
                        "type": "integer",
                        "x-ballerina-name": "dbPort",
                        "description": "Port number for database connection"
                    },
                    "db_host": {
                        "type": "string",
                        "x-ballerina-name": "dbHost",
                        "description": "Hostname or IP address of the database server"
                    },
                    "connection_string": {
                        "type": "string",
                        "x-ballerina-name": "connectionString",
                        "description": "Complete database connection string"
                    },
                    "max_client_conn": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "maxClientConn",
                        "description": "Maximum number of concurrent client connections allowed"
                    }
                },
                "description": "Configuration response for Supavisor database connection pooling settings"
            },
            "V1GetUsageApiCountResponseResult": {
                "required": [
                    "timestamp",
                    "total_auth_requests",
                    "total_realtime_requests",
                    "total_rest_requests",
                    "total_storage_requests"
                ],
                "type": "object",
                "properties": {
                    "total_auth_requests": {
                        "type": "number",
                        "x-ballerina-name": "totalAuthRequests",
                        "description": "Total number of authentication API requests"
                    },
                    "total_realtime_requests": {
                        "type": "number",
                        "x-ballerina-name": "totalRealtimeRequests",
                        "description": "Total number of realtime API requests"
                    },
                    "total_storage_requests": {
                        "type": "number",
                        "x-ballerina-name": "totalStorageRequests",
                        "description": "Total number of storage API requests"
                    },
                    "total_rest_requests": {
                        "type": "number",
                        "x-ballerina-name": "totalRestRequests",
                        "description": "Total number of REST API requests"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the usage statistics were recorded"
                    }
                },
                "description": "API usage statistics result containing request counts by service type"
            },
            "RegionsInfo": {
                "required": [
                    "all",
                    "recommendations"
                ],
                "type": "object",
                "properties": {
                    "all": {
                        "$ref": "#/components/schemas/RegionsInfoAll"
                    },
                    "recommendations": {
                        "$ref": "#/components/schemas/RegionsInfoRecommendations"
                    }
                },
                "description": "Schema containing comprehensive region information and recommendations"
            },
            "ApplyProjectAddonBody": {
                "required": [
                    "addon_type",
                    "addon_variant"
                ],
                "type": "object",
                "properties": {
                    "addon_type": {
                        "type": "string",
                        "enum": [
                            "custom_domain",
                            "compute_instance",
                            "pitr",
                            "ipv4",
                            "auth_mfa_phone",
                            "auth_mfa_web_authn",
                            "log_drain"
                        ],
                        "x-ballerina-name": "addonType",
                        "description": "Type of addon to apply (custom_domain, compute_instance, pitr, etc.)"
                    },
                    "addon_variant": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "ci_micro",
                                    "ci_small",
                                    "ci_medium",
                                    "ci_large",
                                    "ci_xlarge",
                                    "ci_2xlarge",
                                    "ci_4xlarge",
                                    "ci_8xlarge",
                                    "ci_12xlarge",
                                    "ci_16xlarge",
                                    "ci_24xlarge",
                                    "ci_24xlarge_optimized_cpu",
                                    "ci_24xlarge_optimized_memory",
                                    "ci_24xlarge_high_memory",
                                    "ci_48xlarge",
                                    "ci_48xlarge_optimized_cpu",
                                    "ci_48xlarge_optimized_memory",
                                    "ci_48xlarge_high_memory"
                                ]
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "cd_default"
                                ]
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "pitr_7",
                                    "pitr_14",
                                    "pitr_28"
                                ]
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "ipv4_default"
                                ]
                            }
                        ],
                        "x-ballerina-name": "addonVariant",
                        "description": "Specific variant configuration for the selected addon type"
                    }
                },
                "description": "Request body for applying project addons with type and variant"
            },
            "V1RunQueryBody": {
                "required": [
                    "query"
                ],
                "type": "object",
                "properties": {
                    "read_only": {
                        "type": "boolean",
                        "x-ballerina-name": "readOnly",
                        "description": "Flag indicating if the query should be executed in read-only mode"
                    },
                    "query": {
                        "minLength": 1,
                        "type": "string",
                        "description": "SQL query string to execute (minimum 1 character required)"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {},
                        "description": "Array of parameters to bind to the SQL query"
                    }
                },
                "description": "Request body for executing database queries with optional parameters"
            },
            "UpdateCustomHostnameBody": {
                "required": [
                    "custom_hostname"
                ],
                "type": "object",
                "properties": {
                    "custom_hostname": {
                        "minLength": 1,
                        "type": "string",
                        "x-ballerina-name": "customHostname",
                        "description": "Custom hostname to set for the project (minimum 1 character)"
                    }
                },
                "description": "Request body for updating project custom hostname configuration"
            },
            "StorageConfigResponse": {
                "required": [
                    "capabilities",
                    "external",
                    "features",
                    "fileSizeLimit"
                ],
                "type": "object",
                "properties": {
                    "features": {
                        "$ref": "#/components/schemas/StorageConfigResponseFeatures"
                    },
                    "external": {
                        "$ref": "#/components/schemas/StorageConfigResponseExternal"
                    },
                    "capabilities": {
                        "$ref": "#/components/schemas/StorageConfigResponseCapabilities"
                    },
                    "fileSizeLimit": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum file size limit in bytes for storage operations"
                    }
                },
                "description": "Storage configuration response with features, capabilities, and limits"
            },
            "BranchIdOrRef1BranchIdOrRef1OneOf12": {
                "type": "string",
                "format": "uuid",
                "deprecated": true,
                "description": "Deprecated UUID string identifier for branch reference"
            },
            "BranchActionBody": {
                "type": "object",
                "properties": {
                    "migration_version": {
                        "type": "string",
                        "x-ballerina-name": "migrationVersion",
                        "description": "Database migration version to apply to the branch"
                    }
                },
                "description": "Request body for performing actions on database branches"
            },
            "BranchIdOrRef4OneOf1": {
                "maxLength": 20,
                "minLength": 20,
                "pattern": "^[a-z]+$",
                "type": "string",
                "description": "Project ref"
            },
            "StorageConfigResponseFeatures": {
                "required": [
                    "imageTransformation",
                    "s3Protocol"
                ],
                "type": "object",
                "properties": {
                    "s3Protocol": {
                        "$ref": "#/components/schemas/StorageConfigResponseFeaturesImageTransformation"
                    },
                    "imageTransformation": {
                        "$ref": "#/components/schemas/StorageConfigResponseFeaturesImageTransformation"
                    },
                    "icebergCatalog": {
                        "$ref": "#/components/schemas/StorageConfigResponseFeaturesImageTransformation"
                    }
                },
                "description": "Available storage features including S3 protocol and image transformation"
            },
            "CreateThirdPartyAuthBody": {
                "type": "object",
                "properties": {
                    "oidc_issuer_url": {
                        "type": "string",
                        "x-ballerina-name": "oidcIssuerUrl",
                        "description": "OpenID Connect issuer URL for third-party authentication"
                    },
                    "custom_jwks": {
                        "x-ballerina-name": "customJwks",
                        "description": "Custom JSON Web Key Set for token verification"
                    },
                    "jwks_url": {
                        "type": "string",
                        "x-ballerina-name": "jwksUrl",
                        "description": "URL endpoint for retrieving JSON Web Key Set"
                    }
                },
                "description": "Request body for configuring third-party authentication providers"
            },
            "CreateRoleResponse": {
                "required": [
                    "password",
                    "role",
                    "ttl_seconds"
                ],
                "type": "object",
                "properties": {
                    "password": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Generated password for the created role"
                    },
                    "role": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Name of the created role"
                    },
                    "ttl_seconds": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int64",
                        "x-ballerina-name": "ttlSeconds",
                        "description": "Time-to-live duration for the role in seconds"
                    }
                },
                "description": "Response object containing role creation details with password and TTL"
            },
            "UpdateSigningKeyBody": {
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "in_use",
                            "previously_used",
                            "revoked",
                            "standby"
                        ],
                        "description": "New status for the signing key"
                    }
                },
                "additionalProperties": false,
                "description": "Request body for updating a signing key's status"
            },
            "UpgradeDatabaseBody": {
                "required": [
                    "target_version"
                ],
                "type": "object",
                "properties": {
                    "release_channel": {
                        "type": "string",
                        "enum": [
                            "internal",
                            "alpha",
                            "beta",
                            "ga",
                            "withdrawn",
                            "preview"
                        ],
                        "x-ballerina-name": "releaseChannel",
                        "description": "Release channel for the database upgrade"
                    },
                    "target_version": {
                        "type": "string",
                        "x-ballerina-name": "targetVersion",
                        "description": "Target version for the database upgrade"
                    }
                },
                "description": "Request body for upgrading database to a specific version"
            },
            "V1BackupsResponseBackups": {
                "required": [
                    "inserted_at",
                    "is_physical_backup",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "inserted_at": {
                        "type": "string",
                        "x-ballerina-name": "insertedAt",
                        "description": "Timestamp when the backup was created"
                    },
                    "is_physical_backup": {
                        "type": "boolean",
                        "x-ballerina-name": "isPhysicalBackup",
                        "description": "Indicates if this is a physical backup"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "COMPLETED",
                            "FAILED",
                            "PENDING",
                            "REMOVED",
                            "ARCHIVED",
                            "CANCELLED"
                        ],
                        "description": "Current status of the backup operation"
                    }
                },
                "description": "Individual backup entry with status and metadata"
            },
            "V1BackupsResponse": {
                "required": [
                    "backups",
                    "physical_backup_data",
                    "pitr_enabled",
                    "region",
                    "walg_enabled"
                ],
                "type": "object",
                "properties": {
                    "physical_backup_data": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/V1BackupsResponsePhysicalBackupData"
                            }
                        ],
                        "x-ballerina-name": "physicalBackupData",
                        "description": "Physical backup configuration and metadata"
                    },
                    "walg_enabled": {
                        "type": "boolean",
                        "x-ballerina-name": "walgEnabled",
                        "description": "Indicates if WAL-G backup system is enabled"
                    },
                    "region": {
                        "type": "string",
                        "description": "Geographic region where backups are stored"
                    },
                    "pitr_enabled": {
                        "type": "boolean",
                        "x-ballerina-name": "pitrEnabled",
                        "description": "Indicates if Point-in-Time Recovery is enabled"
                    },
                    "backups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/V1BackupsResponseBackups"
                        },
                        "description": "Array of available backup entries"
                    }
                },
                "description": "Complete backup information including configuration and backup list"
            },
            "OAuthTokenBody": {
                "type": "object",
                "properties": {
                    "refresh_token": {
                        "type": "string",
                        "x-ballerina-name": "refreshToken",
                        "description": "Refresh token used to obtain new access tokens"
                    },
                    "code": {
                        "type": "string",
                        "description": "Authorization code received from the authorization server"
                    },
                    "grant_type": {
                        "type": "string",
                        "enum": [
                            "authorization_code",
                            "refresh_token"
                        ],
                        "x-ballerina-name": "grantType",
                        "description": "OAuth grant type: authorization_code or refresh_token"
                    },
                    "resource": {
                        "type": "string",
                        "description": "Resource indicator for MCP (Model Context Protocol) clients",
                        "format": "uri"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Requested scope for the access token"
                    },
                    "client_secret": {
                        "type": "string",
                        "x-ballerina-name": "clientSecret",
                        "description": "Client secret for authenticating the OAuth application"
                    },
                    "redirect_uri": {
                        "type": "string",
                        "x-ballerina-name": "redirectUri",
                        "description": "URI to redirect to after authorization"
                    },
                    "client_id": {
                        "type": "string",
                        "format": "uuid",
                        "x-ballerina-name": "clientId",
                        "description": "Unique identifier for the OAuth client application"
                    },
                    "code_verifier": {
                        "type": "string",
                        "x-ballerina-name": "codeVerifier",
                        "description": "PKCE code verifier for secure authorization code exchange"
                    }
                },
                "additionalProperties": false,
                "description": "OAuth token request body with various grant type parameters"
            },
            "CreateProjectClaimTokenResponse": {
                "required": [
                    "created_at",
                    "created_by",
                    "expires_at",
                    "token",
                    "token_alias"
                ],
                "type": "object",
                "properties": {
                    "expires_at": {
                        "type": "string",
                        "x-ballerina-name": "expiresAt",
                        "description": "Timestamp when the project claim token expires"
                    },
                    "token_alias": {
                        "type": "string",
                        "x-ballerina-name": "tokenAlias",
                        "description": "Human-readable alias for the project claim token"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the project claim token was created"
                    },
                    "created_by": {
                        "type": "string",
                        "format": "uuid",
                        "x-ballerina-name": "createdBy",
                        "description": "UUID of the user who created the project claim token"
                    },
                    "token": {
                        "type": "string",
                        "description": "The actual project claim token string"
                    }
                },
                "description": "Response containing project claim token details and metadata"
            },
            "OrganizationProjectClaimResponse": {
                "required": [
                    "created_at",
                    "created_by",
                    "expires_at",
                    "preview",
                    "project"
                ],
                "type": "object",
                "properties": {
                    "preview": {
                        "$ref": "#/components/schemas/OrganizationProjectClaimResponsePreview"
                    },
                    "expires_at": {
                        "type": "string",
                        "x-ballerina-name": "expiresAt",
                        "description": "Timestamp when the organization project claim expires"
                    },
                    "project": {
                        "$ref": "#/components/schemas/OrganizationProjectClaimResponseProject"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the organization project claim was created"
                    },
                    "created_by": {
                        "type": "string",
                        "format": "uuid",
                        "x-ballerina-name": "createdBy",
                        "description": "UUID of the user who created the organization project claim"
                    }
                },
                "description": "Response containing organization project claim details and preview"
            },
            "ListProvidersResponseItems": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the provider was last updated"
                    },
                    "saml": {
                        "$ref": "#/components/schemas/CreateProviderResponseSaml"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreateProviderResponseDomains"
                        },
                        "description": "Array of domains associated with the authentication provider"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the provider was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the provider"
                    }
                },
                "description": "Individual provider item in the providers list response"
            },
            "UpdateProviderBody": {
                "type": "object",
                "properties": {
                    "metadata_url": {
                        "type": "string",
                        "x-ballerina-name": "metadataUrl",
                        "description": "URL to the SAML metadata endpoint"
                    },
                    "attribute_mapping": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CreateProviderBodyAttributeMapping"
                            }
                        ],
                        "x-ballerina-name": "attributeMapping",
                        "description": "Configuration for mapping SAML attributes to user properties"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of domain strings associated with the provider"
                    },
                    "metadata_xml": {
                        "type": "string",
                        "x-ballerina-name": "metadataXml",
                        "description": "Raw XML metadata for SAML configuration"
                    },
                    "name_id_format": {
                        "type": "string",
                        "enum": [
                            "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                            "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                            "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                            "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
                        ],
                        "x-ballerina-name": "nameIdFormat",
                        "description": "SAML NameID format specification for user identification"
                    }
                },
                "description": "Request body schema for updating SAML provider configuration"
            },
            "UpdateStorageConfigBody": {
                "type": "object",
                "properties": {
                    "features": {
                        "$ref": "#/components/schemas/StorageConfigResponseFeatures"
                    },
                    "external": {
                        "$ref": "#/components/schemas/StorageConfigResponseExternal"
                    },
                    "fileSizeLimit": {
                        "maximum": 536870912000,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum file size limit in bytes (0 to 536GB)"
                    }
                },
                "additionalProperties": false,
                "description": "Request body schema for updating storage configuration settings"
            },
            "FunctionResponse": {
                "required": [
                    "created_at",
                    "id",
                    "name",
                    "slug",
                    "status",
                    "updated_at",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "verify_jwt": {
                        "type": "boolean",
                        "x-ballerina-name": "verifyJwt",
                        "description": "Whether JWT verification is enabled for the function"
                    },
                    "import_map": {
                        "type": "boolean",
                        "x-ballerina-name": "importMap",
                        "description": "Whether import map is enabled for the function"
                    },
                    "updated_at": {
                        "type": "integer",
                        "format": "int64",
                        "x-ballerina-name": "updatedAt",
                        "description": "Unix timestamp when the function was last updated"
                    },
                    "import_map_path": {
                        "type": "string",
                        "x-ballerina-name": "importMapPath",
                        "description": "File path to the import map configuration"
                    },
                    "ezbr_sha256": {
                        "type": "string",
                        "x-ballerina-name": "ezbrSha256",
                        "description": "SHA256 hash of the function bundle"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the edge function"
                    },
                    "created_at": {
                        "type": "integer",
                        "format": "int64",
                        "x-ballerina-name": "createdAt",
                        "description": "Unix timestamp when the function was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the function"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version number of the function"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Unique identifier slug for the function"
                    },
                    "entrypoint_path": {
                        "type": "string",
                        "x-ballerina-name": "entrypointPath",
                        "description": "File path to the function's entry point"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "REMOVED",
                            "THROTTLED"
                        ],
                        "description": "Current status of the function (ACTIVE, REMOVED, or THROTTLED)"
                    }
                },
                "description": "Response schema containing edge function details and metadata"
            },
            "UpdateCustomHostnameResponseDataResult": {
                "required": [
                    "custom_origin_server",
                    "hostname",
                    "id",
                    "ownership_verification",
                    "ssl",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The custom hostname domain"
                    },
                    "ownership_verification": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UpdateCustomHostnameResponseDataResultOwnershipVerification"
                            }
                        ],
                        "x-ballerina-name": "ownershipVerification",
                        "description": "Ownership verification details for the custom hostname"
                    },
                    "custom_origin_server": {
                        "type": "string",
                        "x-ballerina-name": "customOriginServer",
                        "description": "Origin server for the custom hostname"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the custom hostname configuration"
                    },
                    "ssl": {
                        "$ref": "#/components/schemas/UpdateCustomHostnameResponseDataResultSsl"
                    },
                    "verification_errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-ballerina-name": "verificationErrors",
                        "description": "Array of verification error messages, if any"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the custom hostname"
                    }
                },
                "description": "Response data containing custom hostname configuration details"
            },
            "ProjectUpgradeInitiateResponse": {
                "required": [
                    "tracking_id"
                ],
                "type": "object",
                "properties": {
                    "tracking_id": {
                        "type": "string",
                        "x-ballerina-name": "trackingId",
                        "description": "Tracking identifier for the project upgrade process"
                    }
                },
                "description": "Response containing project upgrade initiation details"
            },
            "JitAccessResponseAllowedNetworksAllowedCidrs": {
                "required": [
                    "cidr"
                ],
                "type": "object",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "CIDR notation for allowed network range"
                    }
                },
                "description": "CIDR block configuration for just-in-time access allowed networks"
            },
            "BranchIdOrRefOneOf1": {
                "maxLength": 20,
                "minLength": 20,
                "pattern": "^[a-z]+$",
                "type": "string",
                "description": "Project ref"
            },
            "TypescriptResponse": {
                "required": [
                    "types"
                ],
                "type": "object",
                "properties": {
                    "types": {
                        "type": "string",
                        "description": "Generated TypeScript type definitions"
                    }
                },
                "description": "Response containing TypeScript type definitions"
            },
            "BranchIdOrRef3BranchIdOrRef3OneOf12": {
                "type": "string",
                "format": "uuid",
                "deprecated": true,
                "description": "Deprecated UUID format branch identifier"
            },
            "OrganizationProjectsResponsePagination": {
                "required": [
                    "count",
                    "limit",
                    "offset"
                ],
                "type": "object",
                "properties": {
                    "offset": {
                        "type": "number",
                        "description": "Number of projects skipped in this response"
                    },
                    "count": {
                        "type": "number",
                        "description": "Total number of projects. Use this to calculate the total number of pages"
                    },
                    "limit": {
                        "type": "number",
                        "description": "Maximum number of projects per page"
                    }
                },
                "description": "Pagination information for organization projects listing"
            },
            "SecretResponse": {
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the secret was last updated"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name identifier of the secret"
                    },
                    "value": {
                        "type": "string",
                        "description": "The secret value content"
                    }
                },
                "description": "Response containing secret configuration details"
            },
            "V1ProjectAdvisorsResponseMetadata": {
                "type": "object",
                "properties": {
                    "schema": {
                        "type": "string",
                        "description": "Database schema name"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database object"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "table",
                            "view",
                            "auth",
                            "function",
                            "extension",
                            "compliance"
                        ],
                        "description": "Type of database object (table, view, auth, function, extension, compliance)"
                    },
                    "fkey_columns": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "x-ballerina-name": "fkeyColumns",
                        "description": "Array of foreign key column indices"
                    },
                    "entity": {
                        "type": "string",
                        "description": "Entity name associated with the database object"
                    },
                    "fkey_name": {
                        "type": "string",
                        "x-ballerina-name": "fkeyName",
                        "description": "Name of the foreign key constraint"
                    }
                },
                "description": "Metadata information for project advisor recommendations"
            },
            "V1ProjectWithDatabaseResponse": {
                "required": [
                    "created_at",
                    "database",
                    "id",
                    "name",
                    "organization_id",
                    "region",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "database": {
                        "$ref": "#/components/schemas/V1ProjectWithDatabaseResponseDatabase"
                    },
                    "organization_id": {
                        "type": "string",
                        "description": "Slug of your organization",
                        "x-ballerina-name": "organizationId"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of your project"
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Creation timestamp",
                        "example": "2023-03-29T16:32:59Z",
                        "x-ballerina-name": "createdAt"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of your project"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of your project",
                        "example": "us-east-1"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "INACTIVE",
                            "ACTIVE_HEALTHY",
                            "ACTIVE_UNHEALTHY",
                            "COMING_UP",
                            "UNKNOWN",
                            "GOING_DOWN",
                            "INIT_FAILED",
                            "REMOVED",
                            "RESTORING",
                            "UPGRADING",
                            "PAUSING",
                            "RESTORE_FAILED",
                            "RESTARTING",
                            "PAUSE_FAILED",
                            "RESIZING"
                        ],
                        "description": "Current operational status of the project"
                    }
                },
                "description": "Project information including database details and configuration"
            },
            "OrganizationProjectsResponseDatabases": {
                "required": [
                    "cloud_provider",
                    "identifier",
                    "region",
                    "status",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "infra_compute_size": {
                        "type": "string",
                        "enum": [
                            "pico",
                            "nano",
                            "micro",
                            "small",
                            "medium",
                            "large",
                            "xlarge",
                            "2xlarge",
                            "4xlarge",
                            "8xlarge",
                            "12xlarge",
                            "16xlarge",
                            "24xlarge",
                            "24xlarge_optimized_memory",
                            "24xlarge_optimized_cpu",
                            "24xlarge_high_memory",
                            "48xlarge",
                            "48xlarge_optimized_memory",
                            "48xlarge_optimized_cpu",
                            "48xlarge_high_memory"
                        ],
                        "x-ballerina-name": "infraComputeSize",
                        "description": "Compute instance size for database infrastructure"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier for the database instance"
                    },
                    "disk_type": {
                        "type": "string",
                        "enum": [
                            "gp3",
                            "io2"
                        ],
                        "x-ballerina-name": "diskType",
                        "description": "Storage disk type (gp3 or io2)"
                    },
                    "cloud_provider": {
                        "type": "string",
                        "x-ballerina-name": "cloudProvider",
                        "description": "Cloud provider hosting the database"
                    },
                    "disk_volume_size_gb": {
                        "type": "number",
                        "x-ballerina-name": "diskVolumeSizeGb",
                        "description": "Storage volume size in gigabytes"
                    },
                    "region": {
                        "type": "string",
                        "description": "Geographic region where database is deployed"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PRIMARY",
                            "READ_REPLICA"
                        ],
                        "description": "Database type (PRIMARY or READ_REPLICA)"
                    },
                    "disk_throughput_mbps": {
                        "type": "number",
                        "x-ballerina-name": "diskThroughputMbps",
                        "description": "Database disk throughput in megabytes per second"
                    },
                    "disk_last_modified_at": {
                        "type": "string",
                        "x-ballerina-name": "diskLastModifiedAt",
                        "description": "Timestamp when the database disk was last modified"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ACTIVE_HEALTHY",
                            "ACTIVE_UNHEALTHY",
                            "COMING_UP",
                            "GOING_DOWN",
                            "INIT_FAILED",
                            "REMOVED",
                            "RESTORING",
                            "UNKNOWN",
                            "INIT_READ_REPLICA",
                            "INIT_READ_REPLICA_FAILED",
                            "RESTARTING",
                            "RESIZING"
                        ],
                        "description": "Current operational status of the database"
                    }
                },
                "description": "Database configuration and status information for organization projects"
            },
            "BranchIdOrRef6BranchIdOrRef6OneOf12": {
                "type": "string",
                "format": "uuid",
                "deprecated": true,
                "description": "Deprecated UUID identifier for a branch reference"
            },
            "BranchIdOrRef5OneOf1": {
                "maxLength": 20,
                "minLength": 20,
                "pattern": "^[a-z]+$",
                "type": "string",
                "description": "Project ref"
            },
            "JitAccessResponse": {
                "required": [
                    "user_id",
                    "user_roles"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "format": "uuid",
                        "x-ballerina-name": "userId",
                        "description": "UUID of the user granted just-in-time access"
                    },
                    "user_roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JitAccessResponseUserRoles"
                        },
                        "x-ballerina-name": "userRoles",
                        "description": "Array of roles assigned to the user for just-in-time access"
                    }
                },
                "description": "Response containing just-in-time access user information and roles"
            },
            "SnippetListOwner": {
                "required": [
                    "id",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Numeric identifier of the snippet owner"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username of the snippet owner"
                    }
                },
                "description": "Owner information for a code snippet"
            },
            "RemoveNetworkBanRequest": {
                "required": [
                    "ipv4_addresses"
                ],
                "type": "object",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Optional identifier for the network ban removal request"
                    },
                    "ipv4_addresses": {
                        "type": "array",
                        "description": "List of IP addresses to unban",
                        "items": {
                            "type": "string"
                        },
                        "x-ballerina-name": "ipv4Addresses"
                    },
                    "requester_ip": {
                        "type": "boolean",
                        "description": "Include requester's public IP in the list of addresses to unban",
                        "default": false,
                        "x-ballerina-name": "requesterIp"
                    }
                },
                "description": "Request to remove IP addresses from network ban list"
            },
            "RemoveReadReplicaBody": {
                "required": [
                    "database_identifier"
                ],
                "type": "object",
                "properties": {
                    "database_identifier": {
                        "type": "string",
                        "x-ballerina-name": "databaseIdentifier",
                        "description": "Identifier of the database read replica to remove"
                    }
                },
                "description": "Request body for removing a read replica database"
            },
            "StreamableFile": {
                "type": "object",
                "properties": {},
                "description": "Represents a file that can be streamed"
            },
            "V1ProjectAdvisorsResponseLints": {
                "required": [
                    "cache_key",
                    "categories",
                    "description",
                    "detail",
                    "facing",
                    "level",
                    "name",
                    "remediation",
                    "title"
                ],
                "type": "object",
                "properties": {
                    "remediation": {
                        "type": "string",
                        "description": "Recommended solution for the identified lint issue"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/V1ProjectAdvisorsResponseMetadata"
                    },
                    "level": {
                        "type": "string",
                        "enum": [
                            "ERROR",
                            "WARN",
                            "INFO"
                        ],
                        "description": "Severity level of the lint issue (ERROR, WARN, or INFO)"
                    },
                    "cache_key": {
                        "type": "string",
                        "x-ballerina-name": "cacheKey",
                        "description": "Cache key for the lint check result"
                    },
                    "name": {
                        "type": "string",
                        "enum": [
                            "unindexed_foreign_keys",
                            "auth_users_exposed",
                            "auth_rls_initplan",
                            "no_primary_key",
                            "unused_index",
                            "multiple_permissive_policies",
                            "policy_exists_rls_disabled",
                            "rls_enabled_no_policy",
                            "duplicate_index",
                            "security_definer_view",
                            "function_search_path_mutable",
                            "rls_disabled_in_public",
                            "extension_in_public",
                            "rls_references_user_metadata",
                            "materialized_view_in_api",
                            "foreign_table_in_api",
                            "unsupported_reg_types",
                            "auth_otp_long_expiry",
                            "auth_otp_short_length",
                            "ssl_not_enforced",
                            "network_restrictions_not_set",
                            "password_requirements_min_length",
                            "pitr_not_enabled",
                            "auth_leaked_password_protection",
                            "auth_insufficient_mfa_options",
                            "auth_password_policy_missing",
                            "leaked_service_key",
                            "no_backup_admin",
                            "vulnerable_postgres_version"
                        ],
                        "description": "Specific name identifier of the lint rule that was triggered"
                    },
                    "facing": {
                        "type": "string",
                        "enum": [
                            "EXTERNAL"
                        ],
                        "description": "Indicates the direction or scope of the lint issue (external-facing)"
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description of the lint issue or recommendation"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "PERFORMANCE",
                                "SECURITY"
                            ]
                        },
                        "description": "Array of lint categories (performance, security)"
                    },
                    "detail": {
                        "type": "string",
                        "description": "Additional detailed information about the lint issue"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title or summary of the lint issue"
                    }
                },
                "description": "Project advisor lint issue with recommendations and metadata"
            },
            "UpdateCustomHostnameResponseDataResultSsl": {
                "required": [
                    "status",
                    "validation_records"
                ],
                "type": "object",
                "properties": {
                    "validation_records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UpdateCustomHostnameResponseDataResultSslValidationRecords"
                        },
                        "x-ballerina-name": "validationRecords",
                        "description": "Array of SSL validation records for hostname verification"
                    },
                    "validation_errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UpdateCustomHostnameResponseDataResultSslValidationErrors"
                        },
                        "x-ballerina-name": "validationErrors",
                        "description": "Array of SSL validation errors encountered during verification"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of SSL certificate validation"
                    }
                },
                "description": "SSL configuration and validation details for custom hostname"
            },
            "V1CreateProjectBody": {
                "required": [
                    "db_pass",
                    "name",
                    "organization_id"
                ],
                "type": "object",
                "properties": {
                    "desired_instance_size": {
                        "type": "string",
                        "enum": [
                            "pico",
                            "nano",
                            "micro",
                            "small",
                            "medium",
                            "large",
                            "xlarge",
                            "2xlarge",
                            "4xlarge",
                            "8xlarge",
                            "12xlarge",
                            "16xlarge",
                            "24xlarge",
                            "24xlarge_optimized_memory",
                            "24xlarge_optimized_cpu",
                            "24xlarge_high_memory",
                            "48xlarge",
                            "48xlarge_optimized_memory",
                            "48xlarge_optimized_cpu",
                            "48xlarge_high_memory"
                        ],
                        "x-ballerina-name": "desiredInstanceSize",
                        "description": "Desired compute instance size for the project"
                    },
                    "template_url": {
                        "type": "string",
                        "description": "Template URL used to create the project from the CLI",
                        "format": "uri",
                        "example": "https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone",
                        "x-ballerina-name": "templateUrl"
                    },
                    "postgres_engine": {
                        "type": "string",
                        "description": "Postgres engine version. If not provided, the latest version will be used",
                        "deprecated": true,
                        "enum": [
                            "15",
                            "17",
                            "17-oriole"
                        ],
                        "x-ballerina-name": "postgresEngine"
                    },
                    "region_selection": {
                        "description": "Region selection. Only one of region or region_selection can be specified",
                        "example": "{ type: 'smartGroup', code: 'americas' }",
                        "discriminator": {
                            "propertyName": "type"
                        },
                        "oneOf": [
                            {
                                "required": [
                                    "code",
                                    "type"
                                ],
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "specific"
                                        ]
                                    },
                                    "code": {
                                        "minLength": 1,
                                        "type": "string",
                                        "description": "Specific region code. The codes supported are not a stable API, and should be retrieved from the /available-regions endpoint.",
                                        "enum": [
                                            "us-east-1",
                                            "us-east-2",
                                            "us-west-1",
                                            "us-west-2",
                                            "ap-east-1",
                                            "ap-southeast-1",
                                            "ap-northeast-1",
                                            "ap-northeast-2",
                                            "ap-southeast-2",
                                            "eu-west-1",
                                            "eu-west-2",
                                            "eu-west-3",
                                            "eu-north-1",
                                            "eu-central-1",
                                            "eu-central-2",
                                            "ca-central-1",
                                            "ap-south-1",
                                            "sa-east-1"
                                        ]
                                    }
                                }
                            },
                            {
                                "required": [
                                    "code",
                                    "type"
                                ],
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "smartGroup"
                                        ]
                                    },
                                    "code": {
                                        "type": "string",
                                        "description": "The Smart Region Group's code. The codes supported are not a stable API, and should be retrieved from the /available-regions endpoint.",
                                        "example": "apac",
                                        "enum": [
                                            "americas",
                                            "emea",
                                            "apac"
                                        ]
                                    }
                                }
                            }
                        ],
                        "x-ballerina-name": "regionSelection"
                    },
                    "kps_enabled": {
                        "type": "boolean",
                        "description": "This field is deprecated and is ignored in this request",
                        "deprecated": true,
                        "x-ballerina-name": "kpsEnabled"
                    },
                    "organization_id": {
                        "type": "string",
                        "description": "Slug of your organization",
                        "x-ballerina-name": "organizationId"
                    },
                    "name": {
                        "maxLength": 256,
                        "type": "string",
                        "description": "Name of your project"
                    },
                    "release_channel": {
                        "type": "string",
                        "description": "Release channel. If not provided, GA will be used",
                        "deprecated": true,
                        "enum": [
                            "internal",
                            "alpha",
                            "beta",
                            "ga",
                            "withdrawn",
                            "preview"
                        ],
                        "x-ballerina-name": "releaseChannel"
                    },
                    "db_pass": {
                        "type": "string",
                        "description": "Database password",
                        "x-ballerina-name": "dbPass"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region you want your server to reside in. Use region_selection instead",
                        "deprecated": true,
                        "enum": [
                            "us-east-1",
                            "us-east-2",
                            "us-west-1",
                            "us-west-2",
                            "ap-east-1",
                            "ap-southeast-1",
                            "ap-northeast-1",
                            "ap-northeast-2",
                            "ap-southeast-2",
                            "eu-west-1",
                            "eu-west-2",
                            "eu-west-3",
                            "eu-north-1",
                            "eu-central-1",
                            "eu-central-2",
                            "ca-central-1",
                            "ap-south-1",
                            "sa-east-1"
                        ]
                    },
                    "plan": {
                        "type": "string",
                        "description": "Subscription Plan is now set on organization level and is ignored in this request",
                        "deprecated": true,
                        "enum": [
                            "free",
                            "pro"
                        ]
                    }
                },
                "additionalProperties": false,
                "description": "Request body schema for creating a new Supabase project"
            },
            "NetworkBanResponseEnriched": {
                "required": [
                    "banned_ipv4_addresses"
                ],
                "type": "object",
                "properties": {
                    "banned_ipv4_addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NetworkBanResponseEnrichedBannedIpv4Addresses"
                        },
                        "x-ballerina-name": "bannedIpv4Addresses",
                        "description": "Array of banned IPv4 addresses with additional details"
                    }
                },
                "description": "Enhanced network ban information with banned IP addresses"
            },
            "CreateOrganizationV1": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the organization to be created"
                    }
                },
                "additionalProperties": false,
                "description": "Request body schema for creating a new organization"
            },
            "RegionsInfoRecommendationsSmartGroup": {
                "required": [
                    "code",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "enum": [
                            "americas",
                            "emea",
                            "apac"
                        ],
                        "description": "Geographic region group code (americas, emea, apac)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-readable name of the smart region group"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "smartGroup"
                        ],
                        "description": "Type identifier indicating this is a smart region group"
                    }
                },
                "description": "Smart region group information with geographic grouping details"
            },
            "RegionsInfoAll": {
                "required": [
                    "smartGroup",
                    "specific"
                ],
                "type": "object",
                "properties": {
                    "specific": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RegionsInfoRecommendationsSpecific"
                        },
                        "description": "Array of region-specific recommendation configurations"
                    },
                    "smartGroup": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RegionsInfoRecommendationsSmartGroup"
                        },
                        "description": "Array of smart group recommendation configurations"
                    }
                },
                "description": "Complete region information including specific and smart group options"
            },
            "JitListAccessResponseItems": {
                "required": [
                    "user_id",
                    "user_roles"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "format": "uuid",
                        "x-ballerina-name": "userId",
                        "description": "Unique identifier for the user (UUID format)"
                    },
                    "user_roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JitAccessResponseUserRoles"
                        },
                        "x-ballerina-name": "userRoles",
                        "description": "Array of roles assigned to the user"
                    }
                },
                "description": "Response item containing user ID and associated roles for JIT access"
            },
            "DeleteRolesResponse": {
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "enum": [
                            "ok"
                        ],
                        "description": "Status message confirming operation success (always 'ok')"
                    }
                },
                "description": "Response confirming successful role deletion operation"
            },
            "NetworkRestrictionsResponseConfig": {
                "type": "object",
                "properties": {
                    "dbAllowedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of allowed IPv4 CIDR blocks for database access"
                    },
                    "dbAllowedCidrsV6": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of allowed IPv6 CIDR blocks for database access"
                    }
                },
                "description": "At any given point in time, this is the config that the user has requested be applied to their project. The `status` field indicates if it has been applied to the project, or is pending. When an updated config is received, the applied config is moved to `old_config`"
            },
            "CreateProviderResponseSaml": {
                "required": [
                    "entity_id",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "metadata_url": {
                        "type": "string",
                        "x-ballerina-name": "metadataUrl",
                        "description": "URL endpoint for SAML provider metadata"
                    },
                    "attribute_mapping": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CreateProviderBodyAttributeMapping"
                            }
                        ],
                        "x-ballerina-name": "attributeMapping",
                        "description": "Configuration mapping SAML attributes to user properties"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the SAML provider"
                    },
                    "entity_id": {
                        "type": "string",
                        "x-ballerina-name": "entityId",
                        "description": "SAML entity identifier for the provider"
                    },
                    "metadata_xml": {
                        "type": "string",
                        "x-ballerina-name": "metadataXml",
                        "description": "XML metadata document for SAML provider configuration"
                    },
                    "name_id_format": {
                        "type": "string",
                        "enum": [
                            "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                            "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                            "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                            "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
                        ],
                        "x-ballerina-name": "nameIdFormat",
                        "description": "SAML name identifier format specification"
                    }
                },
                "description": "Response object for created SAML authentication provider"
            },
            "BranchIdOrRef5BranchIdOrRef5OneOf12": {
                "type": "string",
                "format": "uuid",
                "deprecated": true,
                "description": "Deprecated UUID string identifier for branch reference"
            },
            "CreateSecretBody": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CreateSecretBodyInner"
                },
                "description": "Array of secret configurations to be created"
            },
            "BranchDetailResponse": {
                "required": [
                    "db_host",
                    "db_port",
                    "postgres_engine",
                    "postgres_version",
                    "ref",
                    "release_channel",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "postgres_version": {
                        "type": "string",
                        "x-ballerina-name": "postgresVersion",
                        "description": "PostgreSQL version running on the branch"
                    },
                    "ref": {
                        "type": "string",
                        "description": "Branch reference identifier"
                    },
                    "postgres_engine": {
                        "type": "string",
                        "x-ballerina-name": "postgresEngine",
                        "description": "PostgreSQL engine version used by the branch"
                    },
                    "jwt_secret": {
                        "type": "string",
                        "x-ballerina-name": "jwtSecret",
                        "description": "JWT secret key for authentication"
                    },
                    "db_user": {
                        "type": "string",
                        "x-ballerina-name": "dbUser",
                        "description": "Database username for connection"
                    },
                    "release_channel": {
                        "type": "string",
                        "x-ballerina-name": "releaseChannel",
                        "description": "Release channel for the branch deployment"
                    },
                    "db_port": {
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "type": "integer",
                        "x-ballerina-name": "dbPort",
                        "description": "Database port number for connection"
                    },
                    "db_pass": {
                        "type": "string",
                        "x-ballerina-name": "dbPass",
                        "description": "Database password for authentication"
                    },
                    "db_host": {
                        "type": "string",
                        "x-ballerina-name": "dbHost",
                        "description": "Database host address"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "INACTIVE",
                            "ACTIVE_HEALTHY",
                            "ACTIVE_UNHEALTHY",
                            "COMING_UP",
                            "UNKNOWN",
                            "GOING_DOWN",
                            "INIT_FAILED",
                            "REMOVED",
                            "RESTORING",
                            "UPGRADING",
                            "PAUSING",
                            "RESTORE_FAILED",
                            "RESTARTING",
                            "PAUSE_FAILED",
                            "RESIZING"
                        ],
                        "description": "Current operational status of the branch"
                    }
                },
                "description": "Detailed information about a database branch instance"
            },
            "JitAccessResponseUserRoles": {
                "required": [
                    "role"
                ],
                "type": "object",
                "properties": {
                    "role": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Role name assigned to the user"
                    },
                    "expires_at": {
                        "type": "number",
                        "x-ballerina-name": "expiresAt",
                        "description": "Unix timestamp when the role expires"
                    },
                    "allowed_networks": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/JitAccessResponseAllowedNetworks"
                            }
                        ],
                        "x-ballerina-name": "allowedNetworks",
                        "description": "Network restrictions for the user role"
                    }
                },
                "description": "User role configuration for just-in-time access"
            },
            "JitAuthorizeAccessResponse": {
                "required": [
                    "user_id",
                    "user_role"
                ],
                "type": "object",
                "properties": {
                    "user_role": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/JitAccessResponseUserRoles"
                            }
                        ],
                        "x-ballerina-name": "userRole",
                        "description": "User role details for authorized access"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid",
                        "x-ballerina-name": "userId",
                        "description": "UUID of the authorized user"
                    }
                },
                "description": "Response for just-in-time access authorization"
            },
            "SnippetResponseContent": {
                "required": [
                    "schema_version",
                    "sql"
                ],
                "type": "object",
                "properties": {
                    "schema_version": {
                        "type": "string",
                        "x-ballerina-name": "schemaVersion",
                        "description": "Schema version of the snippet content"
                    },
                    "favorite": {
                        "type": "boolean",
                        "description": "Deprecated: Rely on root-level favorite property instead",
                        "deprecated": true
                    },
                    "sql": {
                        "type": "string",
                        "description": "SQL query content of the snippet"
                    }
                },
                "description": "Content structure for SQL snippet responses"
            },
            "UpdateSupavisorConfigResponse": {
                "required": [
                    "default_pool_size",
                    "pool_mode"
                ],
                "type": "object",
                "properties": {
                    "default_pool_size": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "defaultPoolSize",
                        "description": "Default connection pool size for database connections"
                    },
                    "pool_mode": {
                        "type": "string",
                        "x-ballerina-name": "poolMode",
                        "description": "Connection pooling mode configuration"
                    }
                },
                "description": "Response for Supavisor configuration updates"
            },
            "SnippetListProject": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Project name"
                    },
                    "id": {
                        "type": "number",
                        "description": "Unique project identifier"
                    }
                },
                "description": "Project information for snippet listing operations"
            },
            "V1UpdatePostgrestConfigBody": {
                "type": "object",
                "properties": {
                    "db_pool": {
                        "maximum": 1000,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "dbPool",
                        "description": "Database connection pool size (0-1000)"
                    },
                    "max_rows": {
                        "maximum": 1000000,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "maxRows",
                        "description": "Maximum number of rows returned per query (0-1000000)"
                    },
                    "db_extra_search_path": {
                        "type": "string",
                        "x-ballerina-name": "dbExtraSearchPath",
                        "description": "Additional database schema search path"
                    },
                    "db_schema": {
                        "type": "string",
                        "x-ballerina-name": "dbSchema",
                        "description": "Target database schema name"
                    }
                },
                "description": "Configuration parameters for updating PostgREST settings"
            },
            "AddonVariantAddonVariantAddonVariantOneOf123": {
                "type": "string",
                "enum": [
                    "pitr_7",
                    "pitr_14",
                    "pitr_28"
                ],
                "description": "Point-in-time recovery addon variants (7, 14, or 28 days)"
            },
            "V1ProjectResponse": {
                "required": [
                    "created_at",
                    "id",
                    "name",
                    "organization_id",
                    "region",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "organization_id": {
                        "type": "string",
                        "description": "Slug of your organization",
                        "x-ballerina-name": "organizationId"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of your project"
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Creation timestamp",
                        "example": "2023-03-29T16:32:59Z",
                        "x-ballerina-name": "createdAt"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of your project"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of your project",
                        "example": "us-east-1"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "INACTIVE",
                            "ACTIVE_HEALTHY",
                            "ACTIVE_UNHEALTHY",
                            "COMING_UP",
                            "UNKNOWN",
                            "GOING_DOWN",
                            "INIT_FAILED",
                            "REMOVED",
                            "RESTORING",
                            "UPGRADING",
                            "PAUSING",
                            "RESTORE_FAILED",
                            "RESTARTING",
                            "PAUSE_FAILED",
                            "RESIZING"
                        ],
                        "description": "Current operational status of the project"
                    }
                },
                "description": "Complete project information response"
            },
            "OrganizationProjectClaimResponseProject": {
                "required": [
                    "name",
                    "ref"
                ],
                "type": "object",
                "properties": {
                    "ref": {
                        "type": "string",
                        "description": "Project reference identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Project name"
                    }
                },
                "description": "Project details in organization claim response"
            },
            "OrganizationProjectsResponseProjects": {
                "required": [
                    "cloud_provider",
                    "databases",
                    "inserted_at",
                    "is_branch",
                    "name",
                    "ref",
                    "region",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "is_branch": {
                        "type": "boolean",
                        "x-ballerina-name": "isBranch",
                        "description": "Indicates if this is a branch project"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganizationProjectsResponseDatabases"
                        },
                        "description": "List of databases associated with the project"
                    },
                    "ref": {
                        "type": "string",
                        "description": "Project reference identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Project name identifier"
                    },
                    "cloud_provider": {
                        "type": "string",
                        "x-ballerina-name": "cloudProvider",
                        "description": "Cloud infrastructure provider hosting the project"
                    },
                    "region": {
                        "type": "string",
                        "description": "Geographic region where the project is deployed"
                    },
                    "inserted_at": {
                        "type": "string",
                        "x-ballerina-name": "insertedAt",
                        "description": "Timestamp when the project was created"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "INACTIVE",
                            "ACTIVE_HEALTHY",
                            "ACTIVE_UNHEALTHY",
                            "COMING_UP",
                            "UNKNOWN",
                            "GOING_DOWN",
                            "INIT_FAILED",
                            "REMOVED",
                            "RESTORING",
                            "UPGRADING",
                            "PAUSING",
                            "RESTORE_FAILED",
                            "RESTARTING",
                            "PAUSE_FAILED",
                            "RESIZING"
                        ],
                        "description": "Current operational status of the project"
                    }
                },
                "description": "Project details within organization projects response"
            },
            "OrganizationProjectClaimResponsePreview": {
                "required": [
                    "errors",
                    "info",
                    "members_exceeding_free_project_limit",
                    "source_subscription_plan",
                    "target_subscription_plan",
                    "valid",
                    "warnings"
                ],
                "type": "object",
                "properties": {
                    "valid": {
                        "type": "boolean",
                        "description": "Whether the project claim operation is valid"
                    },
                    "target_subscription_plan": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "free",
                            "pro",
                            "team",
                            "enterprise"
                        ],
                        "x-ballerina-name": "targetSubscriptionPlan",
                        "description": "Destination subscription plan after claiming the project"
                    },
                    "source_subscription_plan": {
                        "type": "string",
                        "enum": [
                            "free",
                            "pro",
                            "team",
                            "enterprise"
                        ],
                        "x-ballerina-name": "sourceSubscriptionPlan",
                        "description": "Current subscription plan of the project being claimed"
                    },
                    "warnings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganizationProjectClaimResponsePreviewWarnings"
                        },
                        "description": "Warning messages for the project claim preview"
                    },
                    "members_exceeding_free_project_limit": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganizationProjectClaimResponsePreviewMembersExceedingFreeProjectLimit"
                        },
                        "x-ballerina-name": "membersExceedingFreeProjectLimit",
                        "description": "Organization members who exceed free project limits"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganizationProjectClaimResponsePreviewWarnings"
                        },
                        "description": "Error messages preventing the project claim operation"
                    },
                    "info": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganizationProjectClaimResponsePreviewWarnings"
                        },
                        "description": "Informational messages about the project claim preview"
                    }
                },
                "description": "Preview response for organization project claim operation"
            },
            "FunctionDeployBodyMetadata": {
                "required": [
                    "entrypoint_path"
                ],
                "type": "object",
                "properties": {
                    "verify_jwt": {
                        "type": "boolean",
                        "x-ballerina-name": "verifyJwt",
                        "description": "Enable JWT verification for the function"
                    },
                    "static_patterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-ballerina-name": "staticPatterns",
                        "description": "URL patterns to serve as static assets"
                    },
                    "import_map_path": {
                        "type": "string",
                        "x-ballerina-name": "importMapPath",
                        "description": "Path to the import map file for module resolution"
                    },
                    "name": {
                        "type": "string",
                        "description": "Function name identifier"
                    },
                    "entrypoint_path": {
                        "type": "string",
                        "x-ballerina-name": "entrypointPath",
                        "description": "Path to the main function entry point file"
                    }
                },
                "description": "Metadata configuration for function deployment"
            },
            "UpdateRunStatusBody": {
                "type": "object",
                "properties": {
                    "pull": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "DEAD",
                            "EXITED",
                            "PAUSED",
                            "REMOVING",
                            "RESTARTING",
                            "RUNNING"
                        ],
                        "description": "Status of the pull operation step in the deployment run"
                    },
                    "seed": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "DEAD",
                            "EXITED",
                            "PAUSED",
                            "REMOVING",
                            "RESTARTING",
                            "RUNNING"
                        ],
                        "description": "Status of the seed operation step in the deployment run"
                    },
                    "clone": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "DEAD",
                            "EXITED",
                            "PAUSED",
                            "REMOVING",
                            "RESTARTING",
                            "RUNNING"
                        ],
                        "description": "Status of the clone operation step in the deployment run"
                    },
                    "health": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "DEAD",
                            "EXITED",
                            "PAUSED",
                            "REMOVING",
                            "RESTARTING",
                            "RUNNING"
                        ],
                        "description": "Status of the health check step in the deployment run"
                    },
                    "configure": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "DEAD",
                            "EXITED",
                            "PAUSED",
                            "REMOVING",
                            "RESTARTING",
                            "RUNNING"
                        ],
                        "description": "Status of the configure operation step in the deployment run"
                    },
                    "migrate": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "DEAD",
                            "EXITED",
                            "PAUSED",
                            "REMOVING",
                            "RESTARTING",
                            "RUNNING"
                        ],
                        "description": "Status of the migrate operation step in the deployment run"
                    },
                    "deploy": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "DEAD",
                            "EXITED",
                            "PAUSED",
                            "REMOVING",
                            "RESTARTING",
                            "RUNNING"
                        ],
                        "description": "Status of the deploy operation step in the deployment run"
                    }
                },
                "description": "Container status updates for different deployment phases"
            },
            "BranchUpdateResponse": {
                "required": [
                    "message",
                    "workflow_run_id"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "enum": [
                            "ok"
                        ],
                        "description": "Success confirmation message for the branch update operation"
                    },
                    "workflow_run_id": {
                        "type": "string",
                        "x-ballerina-name": "workflowRunId",
                        "description": "Unique identifier for the workflow run triggered by the branch update"
                    }
                },
                "description": "Response object for branch update operations with workflow run details"
            },
            "V1ListProjectsPaginatedResponsePagination": {
                "required": [
                    "count",
                    "limit",
                    "offset"
                ],
                "type": "object",
                "properties": {
                    "offset": {
                        "type": "number",
                        "description": "Number of projects skipped in this response"
                    },
                    "count": {
                        "type": "number",
                        "description": "Total number of projects. Use this to calculate the total number of pages"
                    },
                    "limit": {
                        "type": "number",
                        "description": "Maximum number of projects per page (actual number may be less)"
                    }
                },
                "description": "Pagination metadata for project listing responses"
            },
            "ListActionRunResponseInner": {
                "required": [
                    "branch_id",
                    "check_run_id",
                    "created_at",
                    "id",
                    "run_steps",
                    "updated_at",
                    "workdir"
                ],
                "type": "object",
                "properties": {
                    "check_run_id": {
                        "type": "number",
                        "nullable": true,
                        "x-ballerina-name": "checkRunId",
                        "description": "Optional identifier for the associated check run"
                    },
                    "run_steps": {
                        "type": "array",
                        "items": {
                            "required": [
                                "created_at",
                                "name",
                                "status",
                                "updated_at"
                            ],
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "enum": [
                                        "clone",
                                        "pull",
                                        "health",
                                        "configure",
                                        "migrate",
                                        "seed",
                                        "deploy"
                                    ],
                                    "description": "Name of the deployment step being executed"
                                },
                                "status": {
                                    "type": "string",
                                    "enum": [
                                        "CREATED",
                                        "DEAD",
                                        "EXITED",
                                        "PAUSED",
                                        "REMOVING",
                                        "RESTARTING",
                                        "RUNNING"
                                    ],
                                    "description": "Current execution status of the deployment step"
                                },
                                "created_at": {
                                    "type": "string",
                                    "description": "Timestamp when the run step was created"
                                },
                                "updated_at": {
                                    "type": "string",
                                    "description": "Timestamp when the run step was last updated"
                                }
                            }
                        },
                        "x-ballerina-name": "runSteps",
                        "description": "Array of execution steps performed during the action run"
                    },
                    "workdir": {
                        "type": "string",
                        "nullable": true,
                        "description": "Optional working directory path for the action run"
                    },
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the action run was last updated"
                    },
                    "branch_id": {
                        "type": "string",
                        "x-ballerina-name": "branchId",
                        "description": "Unique identifier of the git branch associated with the action run"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the action run was created"
                    },
                    "git_config": {
                        "nullable": true,
                        "x-ballerina-name": "gitConfig",
                        "description": "Git configuration settings for the action run (nullable)"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the action run"
                    }
                },
                "description": "Individual action run details with execution steps and metadata"
            },
            "V1UpsertMigrationBody": {
                "required": [
                    "query"
                ],
                "type": "object",
                "properties": {
                    "query": {
                        "minLength": 1,
                        "type": "string",
                        "description": "SQL query string for the migration (required, minimum 1 character)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional name for the migration"
                    }
                },
                "description": "Request body for creating or updating a database migration"
            },
            "CreateProviderResponseDomains": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the domain was last updated"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Domain name associated with the authentication provider"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the domain was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the domain (required)"
                    }
                },
                "description": "Domain configuration response for authentication provider creation"
            },
            "UpdatePostgresConfigBody": {
                "type": "object",
                "properties": {
                    "max_parallel_workers": {
                        "maximum": 1024,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "maxParallelWorkers",
                        "description": "Maximum number of parallel worker processes (0-1024)"
                    },
                    "session_replication_role": {
                        "type": "string",
                        "enum": [
                            "origin",
                            "replica",
                            "local"
                        ],
                        "x-ballerina-name": "sessionReplicationRole",
                        "description": "Session replication role: origin, replica, or local"
                    },
                    "shared_buffers": {
                        "type": "string",
                        "x-ballerina-name": "sharedBuffers",
                        "description": "Amount of memory allocated for shared buffer cache"
                    },
                    "max_wal_senders": {
                        "type": "integer",
                        "x-ballerina-name": "maxWalSenders",
                        "description": "Maximum number of WAL sender processes for replication"
                    },
                    "wal_sender_timeout": {
                        "type": "string",
                        "x-ballerina-name": "walSenderTimeout",
                        "description": "Timeout duration for WAL sender processes"
                    },
                    "max_standby_streaming_delay": {
                        "type": "string",
                        "x-ballerina-name": "maxStandbyStreamingDelay",
                        "description": "Maximum delay for standby streaming replication queries"
                    },
                    "max_standby_archive_delay": {
                        "type": "string",
                        "x-ballerina-name": "maxStandbyArchiveDelay",
                        "description": "Maximum delay for standby archive recovery queries"
                    },
                    "max_parallel_maintenance_workers": {
                        "maximum": 1024,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "maxParallelMaintenanceWorkers",
                        "description": "Maximum number of parallel maintenance workers (0-1024)"
                    },
                    "wal_keep_size": {
                        "type": "string",
                        "x-ballerina-name": "walKeepSize",
                        "description": "Minimum size of WAL files kept in pg_wal directory"
                    },
                    "logical_decoding_work_mem": {
                        "type": "string",
                        "x-ballerina-name": "logicalDecodingWorkMem",
                        "description": "Memory allocated for logical decoding operations"
                    },
                    "max_worker_processes": {
                        "maximum": 262143,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "maxWorkerProcesses",
                        "description": "Maximum number of background worker processes (0-262143)"
                    },
                    "max_connections": {
                        "maximum": 262143,
                        "minimum": 1,
                        "type": "integer",
                        "x-ballerina-name": "maxConnections",
                        "description": "Maximum number of concurrent database connections (1-262143)"
                    },
                    "max_locks_per_transaction": {
                        "maximum": 2147483640,
                        "minimum": 10,
                        "type": "integer",
                        "x-ballerina-name": "maxLocksPerTransaction",
                        "description": "Maximum number of locks per transaction (10-2147483640)"
                    },
                    "hot_standby_feedback": {
                        "type": "boolean",
                        "x-ballerina-name": "hotStandbyFeedback",
                        "description": "Enable feedback from hot standby to primary server"
                    },
                    "restart_database": {
                        "type": "boolean",
                        "x-ballerina-name": "restartDatabase",
                        "description": "Whether to restart the database after configuration update"
                    },
                    "max_slot_wal_keep_size": {
                        "type": "string",
                        "x-ballerina-name": "maxSlotWalKeepSize",
                        "description": "Maximum size of WAL files kept for replication slots"
                    },
                    "maintenance_work_mem": {
                        "type": "string",
                        "x-ballerina-name": "maintenanceWorkMem",
                        "description": "Memory allocated for maintenance operations like VACUUM"
                    },
                    "max_parallel_workers_per_gather": {
                        "maximum": 1024,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "maxParallelWorkersPerGather",
                        "description": "Maximum parallel workers per gather node (0-1024)"
                    },
                    "effective_cache_size": {
                        "type": "string",
                        "x-ballerina-name": "effectiveCacheSize",
                        "description": "Planner's assumption about effective disk cache size"
                    },
                    "track_activity_query_size": {
                        "type": "string",
                        "x-ballerina-name": "trackActivityQuerySize",
                        "description": "Size of buffer for tracking currently executing queries"
                    },
                    "max_wal_size": {
                        "type": "string",
                        "x-ballerina-name": "maxWalSize",
                        "description": "Maximum size WAL can grow between checkpoints"
                    },
                    "statement_timeout": {
                        "type": "string",
                        "x-ballerina-name": "statementTimeout",
                        "description": "Maximum allowed duration of any statement"
                    },
                    "track_commit_timestamp": {
                        "type": "boolean",
                        "x-ballerina-name": "trackCommitTimestamp",
                        "description": "Enable tracking of transaction commit timestamps"
                    },
                    "max_replication_slots": {
                        "type": "integer",
                        "x-ballerina-name": "maxReplicationSlots",
                        "description": "Maximum number of replication slots"
                    },
                    "work_mem": {
                        "type": "string",
                        "x-ballerina-name": "workMem",
                        "description": "Memory allocated for query operations like sorting and hashing"
                    }
                },
                "additionalProperties": false,
                "description": "Request body for updating PostgreSQL database configuration settings"
            },
            "UpdateCustomHostnameResponseData": {
                "required": [
                    "errors",
                    "messages",
                    "result",
                    "success"
                ],
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/components/schemas/UpdateCustomHostnameResponseDataResult"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicates if the custom hostname update was successful"
                    },
                    "messages": {
                        "type": "array",
                        "items": {
                            "description": "Any JSON-serializable value"
                        },
                        "description": "Array of informational messages related to the hostname update operation"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "description": "Any JSON-serializable value"
                        },
                        "description": "Array of error messages encountered during the hostname update process"
                    }
                },
                "description": "Response data for custom hostname update operation"
            },
            "ListProvidersResponse": {
                "required": [
                    "items"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListProvidersResponseItems"
                        },
                        "description": "Array of provider configuration items"
                    }
                },
                "description": "Response schema containing a list of authentication providers"
            },
            "BranchIdOrRef3OneOf1": {
                "maxLength": 20,
                "minLength": 20,
                "pattern": "^[a-z]+$",
                "type": "string",
                "description": "Project ref"
            },
            "UpdateCustomHostnameResponse": {
                "required": [
                    "custom_hostname",
                    "data",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/UpdateCustomHostnameResponseData"
                    },
                    "custom_hostname": {
                        "type": "string",
                        "x-ballerina-name": "customHostname",
                        "description": "The custom hostname being configured"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "1_not_started",
                            "2_initiated",
                            "3_challenge_verified",
                            "4_origin_setup_completed",
                            "5_services_reconfigured"
                        ],
                        "description": "Current setup status of the custom hostname configuration process"
                    }
                },
                "description": "Response schema for custom hostname update operations with status tracking"
            },
            "BranchIdOrRef": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BranchIdOrRefOneOf1",
                        "description": "First variant of the branch identifier union type"
                    },
                    {
                        "$ref": "#/components/schemas/BranchIdOrRefBranchIdOrRefOneOf12",
                        "description": "Second variant of the branch identifier union type"
                    }
                ],
                "description": "Union type accepting either a branch ID or branch reference"
            },
            "SnippetList": {
                "required": [
                    "data"
                ],
                "type": "object",
                "properties": {
                    "cursor": {
                        "type": "string",
                        "description": "Pagination cursor for retrieving the next set of results"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SnippetListData"
                        },
                        "description": "Array of snippet data objects in the current page"
                    }
                },
                "description": "Response schema for paginated list of code snippets"
            },
            "V1RestorePointPostBody": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 20,
                        "type": "string",
                        "description": "Name of the restore point (maximum 20 characters)"
                    }
                },
                "description": "Request body for creating a new database restore point"
            },
            "SnippetResponse": {
                "required": [
                    "content",
                    "description",
                    "favorite",
                    "id",
                    "inserted_at",
                    "name",
                    "owner",
                    "project",
                    "type",
                    "updated_at",
                    "updated_by",
                    "visibility"
                ],
                "type": "object",
                "properties": {
                    "owner": {
                        "$ref": "#/components/schemas/SnippetListOwner"
                    },
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the snippet was last modified"
                    },
                    "visibility": {
                        "type": "string",
                        "enum": [
                            "user",
                            "project",
                            "org",
                            "public"
                        ],
                        "description": "Access level of the snippet (user, project, org, or public)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the code snippet"
                    },
                    "updated_by": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SnippetListOwner"
                            }
                        ],
                        "x-ballerina-name": "updatedBy",
                        "description": "User information for who last updated the snippet"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Optional description text for the snippet"
                    },
                    "project": {
                        "$ref": "#/components/schemas/SnippetListProject"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the snippet"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "sql"
                        ],
                        "description": "Type of snippet, currently only 'sql' is supported"
                    },
                    "inserted_at": {
                        "type": "string",
                        "x-ballerina-name": "insertedAt",
                        "description": "Timestamp when the snippet was created"
                    },
                    "favorite": {
                        "type": "boolean",
                        "description": "Whether the snippet is marked as favorite"
                    },
                    "content": {
                        "$ref": "#/components/schemas/SnippetResponseContent"
                    }
                },
                "description": "Complete response schema for a single code snippet with metadata"
            },
            "OrganizationResponseV1": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the organization"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the organization"
                    }
                },
                "description": "Organization details including unique identifier and name"
            },
            "NetworkRestrictionsV2Response": {
                "required": [
                    "config",
                    "entitlement",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "old_config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NetworkRestrictionsV2ResponseOldConfig"
                            }
                        ],
                        "x-ballerina-name": "oldConfig",
                        "description": "Previous network restrictions configuration before updates"
                    },
                    "applied_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-ballerina-name": "appliedAt",
                        "description": "Timestamp when restrictions were applied to the system"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when restrictions configuration was last updated"
                    },
                    "entitlement": {
                        "type": "string",
                        "enum": [
                            "disallowed",
                            "allowed"
                        ],
                        "description": "Permission level for network restrictions feature"
                    },
                    "config": {
                        "$ref": "#/components/schemas/NetworkRestrictionsV2ResponseConfig"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "stored",
                            "applied"
                        ],
                        "description": "Current status of network restrictions configuration"
                    }
                },
                "description": "Network access restrictions configuration and status information"
            },
            "V1BackupsResponsePhysicalBackupData": {
                "type": "object",
                "properties": {
                    "latest_physical_backup_date_unix": {
                        "type": "integer",
                        "x-ballerina-name": "latestPhysicalBackupDateUnix",
                        "description": "Unix timestamp of the most recent physical backup"
                    },
                    "earliest_physical_backup_date_unix": {
                        "type": "integer",
                        "x-ballerina-name": "earliestPhysicalBackupDateUnix",
                        "description": "Unix timestamp of the oldest available physical backup"
                    }
                },
                "description": "Physical backup information with earliest and latest backup timestamps"
            },
            "NetworkRestrictionsV2ResponseConfigDbAllowedCidrs": {
                "required": [
                    "address",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "CIDR block address for network access"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "v4",
                            "v6"
                        ],
                        "description": "IP version type of the CIDR block (IPv4 or IPv6)"
                    }
                },
                "description": "CIDR block configuration for database network access restrictions"
            },
            "V1ListMigrationsResponse": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/V1ListMigrationsResponseInner"
                },
                "description": "Array of database migration records"
            },
            "NetworkRestrictionsResponseOldConfig": {
                "type": "object",
                "properties": {
                    "dbAllowedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of allowed IPv4 CIDR blocks for database access"
                    },
                    "dbAllowedCidrsV6": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of allowed IPv6 CIDR blocks for database access"
                    }
                },
                "description": "Populated when a new config has been received, but not registered as successfully applied to a project"
            },
            "LegacyApiKeysResponse": {
                "required": [
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether legacy API keys are enabled"
                    }
                },
                "description": "Response indicating legacy API keys status"
            },
            "SubdomainAvailabilityResponse": {
                "required": [
                    "available"
                ],
                "type": "object",
                "properties": {
                    "available": {
                        "type": "boolean",
                        "description": "Whether the subdomain is available for use"
                    }
                },
                "description": "Response indicating subdomain availability status"
            },
            "BranchIdOrRef2OneOf1": {
                "maxLength": 20,
                "minLength": 20,
                "pattern": "^[a-z]+$",
                "type": "string",
                "description": "Project ref"
            },
            "NetworkBanResponseEnrichedBannedIpv4Addresses": {
                "required": [
                    "banned_address",
                    "identifier",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "banned_address": {
                        "type": "string",
                        "x-ballerina-name": "bannedAddress",
                        "description": "The banned IP address"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier for the banned address entry"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type or category of the network ban"
                    }
                },
                "description": "Details of a banned IPv4 address with enriched information"
            },
            "V1ListProjectsPaginatedResponse": {
                "required": [
                    "pagination",
                    "projects"
                ],
                "type": "object",
                "properties": {
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/V1ListProjectsPaginatedResponseProjects"
                        },
                        "description": "Array of project objects in the paginated response"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/V1ListProjectsPaginatedResponsePagination"
                    }
                },
                "description": "Paginated response containing projects list and pagination info"
            },
            "BulkUpdateFunctionResponseFunctions": {
                "required": [
                    "created_at",
                    "id",
                    "name",
                    "slug",
                    "status",
                    "updated_at",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "verify_jwt": {
                        "type": "boolean",
                        "x-ballerina-name": "verifyJwt",
                        "description": "Whether JWT verification is enabled for the function"
                    },
                    "import_map": {
                        "type": "boolean",
                        "x-ballerina-name": "importMap",
                        "description": "Whether import map is enabled for the function"
                    },
                    "updated_at": {
                        "type": "integer",
                        "format": "int64",
                        "x-ballerina-name": "updatedAt",
                        "description": "Unix timestamp when the function was last updated"
                    },
                    "import_map_path": {
                        "type": "string",
                        "x-ballerina-name": "importMapPath",
                        "description": "File path to the function's import map"
                    },
                    "ezbr_sha256": {
                        "type": "string",
                        "x-ballerina-name": "ezbrSha256",
                        "description": "SHA256 hash of the function bundle"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the edge function"
                    },
                    "created_at": {
                        "type": "integer",
                        "format": "int64",
                        "x-ballerina-name": "createdAt",
                        "description": "Unix timestamp indicating when the function was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the function"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version number of the function"
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL-friendly name identifier for the function"
                    },
                    "entrypoint_path": {
                        "type": "string",
                        "x-ballerina-name": "entrypointPath",
                        "description": "File path to the function's main entry point"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "REMOVED",
                            "THROTTLED"
                        ],
                        "description": "Current operational status of the function"
                    }
                },
                "description": "Edge function details returned from bulk update operation"
            },
            "ApiKeyResponse": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "secret_jwt_template": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "x-ballerina-name": "secretJwtTemplate",
                        "description": "JWT template configuration for secret key generation"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp of the last API key modification"
                    },
                    "api_key": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "apiKey",
                        "description": "The actual API key string value"
                    },
                    "prefix": {
                        "type": "string",
                        "nullable": true,
                        "description": "Optional prefix for the API key identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name for the API key"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Optional description explaining the API key's purpose"
                    },
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier for the API key record"
                    },
                    "type": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "legacy",
                            "publishable",
                            "secret"
                        ],
                        "description": "Classification of the API key type"
                    },
                    "inserted_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "x-ballerina-name": "insertedAt",
                        "description": "Timestamp when the API key was first created"
                    },
                    "hash": {
                        "type": "string",
                        "nullable": true,
                        "description": "Hashed representation of the API key for security"
                    }
                },
                "description": "Response object containing API key details and metadata"
            },
            "UpdatePgsodiumConfigBody": {
                "required": [
                    "root_key"
                ],
                "type": "object",
                "properties": {
                    "root_key": {
                        "type": "string",
                        "x-ballerina-name": "rootKey",
                        "description": "Root encryption key for PgSodium configuration"
                    }
                },
                "description": "Request body for updating PgSodium encryption configuration"
            },
            "V1ProjectAdvisorsResponse": {
                "required": [
                    "lints"
                ],
                "type": "object",
                "properties": {
                    "lints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/V1ProjectAdvisorsResponseLints"
                        },
                        "description": "Array of lint recommendations for project optimization"
                    }
                },
                "description": "Response containing project analysis and advisory recommendations"
            },
            "V1ServiceHealthResponse": {
                "required": [
                    "healthy",
                    "name",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "healthy": {
                        "type": "boolean",
                        "description": "Boolean indicating if the service is healthy"
                    },
                    "name": {
                        "type": "string",
                        "enum": [
                            "auth",
                            "db",
                            "db_postgres_user",
                            "pooler",
                            "realtime",
                            "rest",
                            "storage",
                            "pg_bouncer"
                        ],
                        "description": "Name of the Supabase service being checked"
                    },
                    "error": {
                        "type": "string",
                        "description": "Error message if service health check failed"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "COMING_UP",
                            "ACTIVE_HEALTHY",
                            "UNHEALTHY"
                        ],
                        "description": "Current operational status of the service"
                    },
                    "info": {
                        "oneOf": [
                            {
                                "required": [
                                    "description",
                                    "name",
                                    "version"
                                ],
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "enum": [
                                            "GoTrue"
                                        ]
                                    },
                                    "version": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "required": [
                                    "connected_cluster",
                                    "db_connected",
                                    "healthy"
                                ],
                                "type": "object",
                                "properties": {
                                    "healthy": {
                                        "type": "boolean"
                                    },
                                    "db_connected": {
                                        "type": "boolean"
                                    },
                                    "connected_cluster": {
                                        "type": "integer"
                                    }
                                }
                            },
                            {
                                "required": [
                                    "db_schema"
                                ],
                                "type": "object",
                                "properties": {
                                    "db_schema": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "description": "Additional service-specific health information"
                    }
                },
                "description": "Response schema for Supabase service health status checks"
            },
            "DatabaseUpgradeStatusResponse": {
                "required": [
                    "databaseUpgradeStatus"
                ],
                "type": "object",
                "properties": {
                    "databaseUpgradeStatus": {
                        "$ref": "#/components/schemas/DatabaseUpgradeStatusResponseDatabaseUpgradeStatus"
                    }
                },
                "description": "Response containing database upgrade status information"
            },
            "RegionsInfoRecommendationsSpecific": {
                "required": [
                    "code",
                    "name",
                    "provider",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Region identifier code"
                    },
                    "provider": {
                        "type": "string",
                        "enum": [
                            "AWS",
                            "FLY",
                            "AWS_K8S",
                            "AWS_NIMBUS"
                        ],
                        "description": "Cloud provider hosting the region"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-readable name of the region"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "specific"
                        ],
                        "description": "Type of region recommendation (specific)"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "capacity",
                            "other"
                        ],
                        "description": "Current availability status of the region"
                    }
                },
                "description": "Specific region recommendation with provider and availability details"
            },
            "DatabaseUpgradeStatusResponseDatabaseUpgradeStatus": {
                "required": [
                    "initiated_at",
                    "latest_status_at",
                    "status",
                    "target_version"
                ],
                "type": "object",
                "properties": {
                    "latest_status_at": {
                        "type": "string",
                        "x-ballerina-name": "latestStatusAt",
                        "description": "Timestamp of the last status update"
                    },
                    "progress": {
                        "type": "string",
                        "enum": [
                            "0_requested",
                            "1_started",
                            "2_launched_upgraded_instance",
                            "3_detached_volume_from_upgraded_instance",
                            "4_attached_volume_to_original_instance",
                            "5_initiated_data_upgrade",
                            "6_completed_data_upgrade",
                            "7_detached_volume_from_original_instance",
                            "8_attached_volume_to_upgraded_instance",
                            "9_completed_upgrade",
                            "10_completed_post_physical_backup"
                        ],
                        "description": "Current progress stage of the database upgrade"
                    },
                    "initiated_at": {
                        "type": "string",
                        "x-ballerina-name": "initiatedAt",
                        "description": "Timestamp when the upgrade was initiated"
                    },
                    "error": {
                        "type": "string",
                        "enum": [
                            "1_upgraded_instance_launch_failed",
                            "2_volume_detachchment_from_upgraded_instance_failed",
                            "3_volume_attachment_to_original_instance_failed",
                            "4_data_upgrade_initiation_failed",
                            "5_data_upgrade_completion_failed",
                            "6_volume_detachchment_from_original_instance_failed",
                            "7_volume_attachment_to_upgraded_instance_failed",
                            "8_upgrade_completion_failed",
                            "9_post_physical_backup_failed"
                        ],
                        "description": "Error type if the upgrade process failed"
                    },
                    "target_version": {
                        "type": "number",
                        "x-ballerina-name": "targetVersion",
                        "description": "Target database version for the upgrade"
                    },
                    "status": {
                        "type": "number",
                        "description": "Numeric status code indicating the current database upgrade status"
                    }
                },
                "nullable": true,
                "description": "Database upgrade process status and progress information"
            },
            "SetUpReadReplicaBody": {
                "required": [
                    "read_replica_region"
                ],
                "type": "object",
                "properties": {
                    "read_replica_region": {
                        "type": "string",
                        "description": "Region you want your read replica to reside in",
                        "example": "us-east-1",
                        "enum": [
                            "us-east-1",
                            "us-east-2",
                            "us-west-1",
                            "us-west-2",
                            "ap-east-1",
                            "ap-southeast-1",
                            "ap-northeast-1",
                            "ap-northeast-2",
                            "ap-southeast-2",
                            "eu-west-1",
                            "eu-west-2",
                            "eu-west-3",
                            "eu-north-1",
                            "eu-central-1",
                            "eu-central-2",
                            "ca-central-1",
                            "ap-south-1",
                            "sa-east-1"
                        ],
                        "x-ballerina-name": "readReplicaRegion"
                    }
                },
                "description": "Request body for setting up a read replica in a specified region"
            },
            "CreateProviderBody": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "metadata_url": {
                        "type": "string",
                        "x-ballerina-name": "metadataUrl",
                        "description": "URL endpoint for retrieving SAML provider metadata"
                    },
                    "attribute_mapping": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CreateProviderBodyAttributeMapping"
                            }
                        ],
                        "x-ballerina-name": "attributeMapping",
                        "description": "Configuration for mapping SAML attributes to user properties"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of authorized domains for the SAML provider"
                    },
                    "type": {
                        "type": "string",
                        "description": "What type of provider will be created",
                        "enum": [
                            "saml"
                        ]
                    },
                    "metadata_xml": {
                        "type": "string",
                        "x-ballerina-name": "metadataXml",
                        "description": "Raw XML metadata content for the SAML provider configuration"
                    },
                    "name_id_format": {
                        "type": "string",
                        "enum": [
                            "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                            "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                            "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                            "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
                        ],
                        "x-ballerina-name": "nameIdFormat",
                        "description": "SAML NameID format specification for user identification"
                    }
                },
                "description": "Request body for creating a SAML authentication provider"
            },
            "StorageConfigResponseExternal": {
                "required": [
                    "upstreamTarget"
                ],
                "type": "object",
                "properties": {
                    "upstreamTarget": {
                        "type": "string",
                        "enum": [
                            "main",
                            "canary"
                        ],
                        "description": "Target upstream environment (main or canary) for storage requests"
                    }
                },
                "description": "External storage configuration response with upstream target settings"
            },
            "ReadOnlyStatusResponse": {
                "required": [
                    "enabled",
                    "override_active_until",
                    "override_enabled"
                ],
                "type": "object",
                "properties": {
                    "override_active_until": {
                        "type": "string",
                        "x-ballerina-name": "overrideActiveUntil",
                        "description": "Timestamp when the read-only override expires"
                    },
                    "override_enabled": {
                        "type": "boolean",
                        "x-ballerina-name": "overrideEnabled",
                        "description": "Whether read-only mode override is currently enabled"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether read-only mode is currently active"
                    }
                },
                "description": "Response containing read-only mode status and override settings"
            },
            "NetworkRestrictionsV2ResponseOldConfig": {
                "type": "object",
                "properties": {
                    "dbAllowedCidrs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NetworkRestrictionsV2ResponseConfigDbAllowedCidrs"
                        },
                        "description": "Array of CIDR blocks allowed for database access"
                    }
                },
                "description": "Populated when a new config has been received, but not registered as successfully applied to a project"
            },
            "V1RestorePointResponse": {
                "required": [
                    "name",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name identifier for the restore point"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "AVAILABLE",
                            "PENDING",
                            "REMOVED"
                        ],
                        "description": "Current status of the restore point (AVAILABLE, PENDING, or REMOVED)"
                    }
                },
                "description": "Response containing restore point information and availability status"
            },
            "JitListAccessResponse": {
                "required": [
                    "items"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JitListAccessResponseItems"
                        },
                        "description": "Array of just-in-time access request items"
                    }
                },
                "description": "Response containing list of just-in-time access items"
            },
            "BranchIdOrRef1OneOf1": {
                "maxLength": 20,
                "minLength": 20,
                "pattern": "^[a-z]+$",
                "type": "string",
                "description": "Project ref"
            },
            "CreateApiKeyBody": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "secret_jwt_template": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "x-ballerina-name": "secretJwtTemplate",
                        "description": "Optional JWT template configuration object for secret API keys"
                    },
                    "name": {
                        "maxLength": 64,
                        "minLength": 4,
                        "pattern": "^[a-z_][a-z0-9_]+$",
                        "type": "string",
                        "description": "API key name (4-64 chars, lowercase letters, numbers, underscores)"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Optional description text for the API key"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "publishable",
                            "secret"
                        ],
                        "description": "API key type: 'publishable' for client-side or 'secret' for server-side use"
                    }
                },
                "description": "Request body schema for creating a new API key with name, type, and optional JWT template"
            },
            "ListProjectAddonsResponse": {
                "required": [
                    "available_addons",
                    "selected_addons"
                ],
                "type": "object",
                "properties": {
                    "selected_addons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListProjectAddonsResponseSelectedAddons"
                        },
                        "x-ballerina-name": "selectedAddons",
                        "description": "Array of add-ons currently enabled for the project"
                    },
                    "available_addons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListProjectAddonsResponseAvailableAddons"
                        },
                        "x-ballerina-name": "availableAddons",
                        "description": "Array of add-ons available for activation on the project"
                    }
                },
                "description": "Response containing available and currently selected project add-ons"
            },
            "CreateRoleBody": {
                "required": [
                    "read_only"
                ],
                "type": "object",
                "properties": {
                    "read_only": {
                        "type": "boolean",
                        "x-ballerina-name": "readOnly",
                        "description": "Whether the role has read-only permissions (true) or full access (false)"
                    }
                },
                "description": "Request body schema for creating a new role with read-only permission flag"
            },
            "V1RestorePitrBody": {
                "required": [
                    "recovery_time_target_unix"
                ],
                "type": "object",
                "properties": {
                    "recovery_time_target_unix": {
                        "minimum": 0,
                        "type": "integer",
                        "format": "int64",
                        "x-ballerina-name": "recoveryTimeTargetUnix",
                        "description": "Unix timestamp specifying the target recovery point (minimum: 0)"
                    }
                },
                "description": "Request body for point-in-time recovery with target timestamp"
            },
            "GetProjectAvailableRestoreVersionsResponseAvailableVersions": {
                "required": [
                    "postgres_engine",
                    "release_channel",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "postgres_engine": {
                        "type": "string",
                        "enum": [
                            "13",
                            "14",
                            "15",
                            "17",
                            "17-oriole"
                        ],
                        "x-ballerina-name": "postgresEngine",
                        "description": "PostgreSQL engine version (13, 14, 15, 17, or 17-oriole)"
                    },
                    "release_channel": {
                        "type": "string",
                        "enum": [
                            "internal",
                            "alpha",
                            "beta",
                            "ga",
                            "withdrawn",
                            "preview"
                        ],
                        "x-ballerina-name": "releaseChannel",
                        "description": "Release stability channel (internal, alpha, beta, ga, withdrawn, preview)"
                    },
                    "version": {
                        "type": "string",
                        "description": "Specific version identifier string for the database release"
                    }
                },
                "description": "Available database version for project restoration with engine and channel info"
            },
            "StorageConfigResponseCapabilities": {
                "required": [
                    "iceberg_catalog",
                    "list_v2"
                ],
                "type": "object",
                "properties": {
                    "iceberg_catalog": {
                        "type": "boolean",
                        "x-ballerina-name": "icebergCatalog",
                        "description": "Whether Iceberg catalog functionality is supported"
                    },
                    "list_v2": {
                        "type": "boolean",
                        "x-ballerina-name": "listV2",
                        "description": "Whether list API version 2 is supported"
                    }
                },
                "description": "Storage service capabilities including Iceberg catalog and list API v2 support"
            },
            "V1UndoBody": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 20,
                        "type": "string",
                        "description": "Name identifier with maximum length of 20 characters"
                    }
                },
                "description": "Request body for undo operation with operation name (max 20 characters)"
            },
            "DeployFunctionResponse": {
                "required": [
                    "id",
                    "name",
                    "slug",
                    "status",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "verify_jwt": {
                        "type": "boolean",
                        "x-ballerina-name": "verifyJwt",
                        "description": "Whether JWT verification is enabled for the function"
                    },
                    "import_map": {
                        "type": "boolean",
                        "x-ballerina-name": "importMap",
                        "description": "Whether import map is enabled for the function"
                    },
                    "updated_at": {
                        "type": "integer",
                        "format": "int64",
                        "x-ballerina-name": "updatedAt",
                        "description": "Unix timestamp when the function was last updated"
                    },
                    "import_map_path": {
                        "type": "string",
                        "x-ballerina-name": "importMapPath",
                        "description": "File path to the import map configuration"
                    },
                    "ezbr_sha256": {
                        "type": "string",
                        "x-ballerina-name": "ezbrSha256",
                        "description": "SHA256 hash of the function bundle"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the deployed function"
                    },
                    "created_at": {
                        "type": "integer",
                        "format": "int64",
                        "x-ballerina-name": "createdAt",
                        "description": "Unix timestamp when the function was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the function"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version number of the deployed function"
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL-friendly identifier for the function"
                    },
                    "entrypoint_path": {
                        "type": "string",
                        "x-ballerina-name": "entrypointPath",
                        "description": "File path to the function's entry point"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "REMOVED",
                            "THROTTLED"
                        ],
                        "description": "Current status of the function (ACTIVE, REMOVED, or THROTTLED)"
                    }
                },
                "description": "Response object containing deployed function details and metadata"
            },
            "CreateProviderResponse": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the provider was last updated"
                    },
                    "saml": {
                        "$ref": "#/components/schemas/CreateProviderResponseSaml"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreateProviderResponseDomains"
                        },
                        "description": "Array of domains associated with the provider"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the provider was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the authentication provider"
                    }
                },
                "description": "Response object for created authentication provider configuration"
            },
            "ListProjectAddonsResponseSelectedAddons": {
                "required": [
                    "type",
                    "variant"
                ],
                "type": "object",
                "properties": {
                    "variant": {
                        "$ref": "#/components/schemas/ListProjectAddonsResponseVariant"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "custom_domain",
                            "compute_instance",
                            "pitr",
                            "ipv4",
                            "auth_mfa_phone",
                            "auth_mfa_web_authn",
                            "log_drain"
                        ],
                        "description": "Type of project addon (custom domain, compute instance, PITR, etc.)"
                    }
                },
                "description": "Selected addon configuration with type and variant details"
            },
            "V1StorageBucketResponse": {
                "required": [
                    "created_at",
                    "id",
                    "name",
                    "owner",
                    "public",
                    "updated_at"
                ],
                "type": "object",
                "properties": {
                    "owner": {
                        "type": "string",
                        "description": "Owner identifier of the storage bucket"
                    },
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the bucket was last updated"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether the storage bucket is publicly accessible"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the storage bucket"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the bucket was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the storage bucket"
                    }
                },
                "description": "Storage bucket response containing metadata and configuration details"
            },
            "NetworkRestrictionsPatchRequest": {
                "type": "object",
                "properties": {
                    "add": {
                        "$ref": "#/components/schemas/NetworkRestrictionsPatchRequestAdd"
                    },
                    "remove": {
                        "$ref": "#/components/schemas/NetworkRestrictionsPatchRequestAdd"
                    }
                },
                "description": "Request to modify network access restrictions by adding or removing rules"
            },
            "V1CreateMigrationBody": {
                "required": [
                    "query"
                ],
                "type": "object",
                "properties": {
                    "query": {
                        "minLength": 1,
                        "type": "string",
                        "description": "SQL query to execute for the migration (required, non-empty)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional name for the migration"
                    }
                },
                "description": "Request body for creating a database migration with SQL query and name"
            },
            "V1GetUsageApiRequestsCountResponseResult": {
                "required": [
                    "count"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "type": "number",
                        "description": "Total number of API requests"
                    }
                },
                "description": "Response containing the count of API requests for usage tracking"
            },
            "ActivateVanitySubdomainResponse": {
                "required": [
                    "custom_domain"
                ],
                "type": "object",
                "properties": {
                    "custom_domain": {
                        "type": "string",
                        "x-ballerina-name": "customDomain",
                        "description": "The activated custom domain name"
                    }
                },
                "description": "Response after activating a custom vanity subdomain for the project"
            },
            "BranchIdOrRef4BranchIdOrRef4OneOf12": {
                "type": "string",
                "format": "uuid",
                "deprecated": true,
                "description": "Branch identifier as UUID format (deprecated)"
            },
            "BranchIdOrRef2BranchIdOrRef2OneOf12": {
                "type": "string",
                "format": "uuid",
                "deprecated": true,
                "description": "Branch identifier as UUID format (deprecated)"
            },
            "GetProjectDbMetadataResponseDatabases": {
                "required": [
                    "name",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the database"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GetProjectDbMetadataResponseSchemas"
                        },
                        "description": "Array of database schemas containing metadata information"
                    }
                },
                "additionalProperties": true,
                "description": "Database metadata containing name and associated schemas information"
            },
            "BranchDeleteResponse": {
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "enum": [
                            "ok"
                        ],
                        "description": "Status message confirming successful branch deletion"
                    }
                },
                "description": "Response object returned after successfully deleting a branch"
            },
            "ActionRunResponse": {
                "required": [
                    "branch_id",
                    "check_run_id",
                    "created_at",
                    "id",
                    "run_steps",
                    "updated_at",
                    "workdir"
                ],
                "type": "object",
                "properties": {
                    "check_run_id": {
                        "type": "number",
                        "nullable": true,
                        "x-ballerina-name": "checkRunId",
                        "description": "Unique identifier for the associated check run"
                    },
                    "run_steps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActionRunResponseRunSteps"
                        },
                        "x-ballerina-name": "runSteps",
                        "description": "Array of execution steps performed during the action run"
                    },
                    "workdir": {
                        "type": "string",
                        "nullable": true,
                        "description": "Working directory path used during action execution"
                    },
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the action run was last updated"
                    },
                    "branch_id": {
                        "type": "string",
                        "x-ballerina-name": "branchId",
                        "description": "Identifier of the branch where the action was executed"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the action run was created"
                    },
                    "git_config": {
                        "nullable": true,
                        "x-ballerina-name": "gitConfig",
                        "description": "Git configuration settings used for the action run"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the action run"
                    }
                },
                "description": "Response object containing details of an executed action run"
            },
            "V1CreateFunctionBody": {
                "required": [
                    "body",
                    "name",
                    "slug"
                ],
                "type": "object",
                "properties": {
                    "verify_jwt": {
                        "type": "boolean",
                        "x-ballerina-name": "verifyJwt",
                        "description": "Whether to verify JWT tokens for function authentication"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name for the function"
                    },
                    "body": {
                        "type": "string",
                        "description": "Source code content of the function"
                    },
                    "slug": {
                        "pattern": "^[A-Za-z0-9_-]+$",
                        "type": "string",
                        "description": "URL-safe identifier for the function endpoint"
                    }
                },
                "description": "Request body for creating a new serverless function"
            },
            "ListProjectAddonsResponseVariant": {
                "required": [
                    "id",
                    "name",
                    "price"
                ],
                "type": "object",
                "properties": {
                    "price": {
                        "$ref": "#/components/schemas/ListProjectAddonsResponseVariantPrice"
                    },
                    "meta": {
                        "description": "Any JSON-serializable value"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the addon variant"
                    },
                    "id": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "ci_micro",
                                    "ci_small",
                                    "ci_medium",
                                    "ci_large",
                                    "ci_xlarge",
                                    "ci_2xlarge",
                                    "ci_4xlarge",
                                    "ci_8xlarge",
                                    "ci_12xlarge",
                                    "ci_16xlarge",
                                    "ci_24xlarge",
                                    "ci_24xlarge_optimized_cpu",
                                    "ci_24xlarge_optimized_memory",
                                    "ci_24xlarge_high_memory",
                                    "ci_48xlarge",
                                    "ci_48xlarge_optimized_cpu",
                                    "ci_48xlarge_optimized_memory",
                                    "ci_48xlarge_high_memory"
                                ]
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "cd_default"
                                ]
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "pitr_7",
                                    "pitr_14",
                                    "pitr_28"
                                ]
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "ipv4_default"
                                ]
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "auth_mfa_phone_default"
                                ]
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "auth_mfa_web_authn_default"
                                ]
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "log_drain_default"
                                ]
                            }
                        ],
                        "description": "Unique identifier for the addon variant type"
                    }
                },
                "description": "Addon variant with pricing and configuration options"
            },
            "AddonVariantAddonVariantOneOf12": {
                "type": "string",
                "enum": [
                    "cd_default"
                ],
                "description": "Addon variant enumeration with default CD configuration option"
            },
            "BranchIdOrRef6OneOf1": {
                "maxLength": 20,
                "minLength": 20,
                "pattern": "^[a-z]+$",
                "type": "string",
                "description": "Project ref"
            },
            "GetProviderResponse": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the provider was last updated"
                    },
                    "saml": {
                        "$ref": "#/components/schemas/CreateProviderResponseSaml"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreateProviderResponseDomains"
                        },
                        "description": "Array of domains associated with the provider"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the provider was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the provider"
                    }
                },
                "description": "Response object containing provider details including SAML config and domains"
            },
            "CreateProviderBodyAttributeMapping": {
                "required": [
                    "keys"
                ],
                "type": "object",
                "properties": {
                    "keys": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/CreateProviderBodyAttributeMappingKeys"
                        },
                        "description": "Key-value pairs defining attribute mapping configuration"
                    }
                },
                "description": "Configuration for mapping SAML attributes to user properties"
            },
            "UpdateCustomHostnameResponseDataResultSslValidationRecords": {
                "required": [
                    "txt_name",
                    "txt_value"
                ],
                "type": "object",
                "properties": {
                    "txt_value": {
                        "type": "string",
                        "x-ballerina-name": "txtValue",
                        "description": "TXT record value for SSL certificate validation"
                    },
                    "txt_name": {
                        "type": "string",
                        "x-ballerina-name": "txtName",
                        "description": "TXT record name for SSL certificate validation"
                    }
                },
                "description": "SSL validation records containing DNS TXT record information"
            },
            "GetProjectDbMetadataResponseSchemas": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the database schema"
                    }
                },
                "additionalProperties": true,
                "description": "Database schema metadata with name and additional properties"
            },
            "StorageConfigResponseFeaturesImageTransformation": {
                "required": [
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether image transformation feature is enabled"
                    }
                },
                "description": "Configuration for image transformation feature availability"
            },
            "ThirdPartyAuth": {
                "required": [
                    "id",
                    "inserted_at",
                    "type",
                    "updated_at"
                ],
                "type": "object",
                "properties": {
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the auth provider was last updated"
                    },
                    "resolved_at": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "resolvedAt",
                        "description": "Timestamp when JWKS was last resolved, nullable"
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "UUID identifier for the third-party auth provider"
                    },
                    "oidc_issuer_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "oidcIssuerUrl",
                        "description": "OIDC issuer URL for the auth provider, nullable"
                    },
                    "custom_jwks": {
                        "nullable": true,
                        "x-ballerina-name": "customJwks",
                        "description": "Custom JSON Web Key Set for third-party authentication validation"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of third-party authentication provider"
                    },
                    "inserted_at": {
                        "type": "string",
                        "x-ballerina-name": "insertedAt",
                        "description": "Timestamp when the third-party auth configuration was created"
                    },
                    "jwks_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "jwksUrl",
                        "description": "URL endpoint for retrieving JSON Web Key Set"
                    },
                    "resolved_jwks": {
                        "nullable": true,
                        "x-ballerina-name": "resolvedJwks",
                        "description": "Resolved JSON Web Key Set from the specified JWKS URL"
                    }
                },
                "description": "Third-party authentication provider configuration and metadata"
            },
            "SnippetListData": {
                "required": [
                    "description",
                    "favorite",
                    "id",
                    "inserted_at",
                    "name",
                    "owner",
                    "project",
                    "type",
                    "updated_at",
                    "updated_by",
                    "visibility"
                ],
                "type": "object",
                "properties": {
                    "owner": {
                        "$ref": "#/components/schemas/SnippetListOwner"
                    },
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the snippet was last modified"
                    },
                    "visibility": {
                        "type": "string",
                        "enum": [
                            "user",
                            "project",
                            "org",
                            "public"
                        ],
                        "description": "Access level for the snippet (user, project, org, or public)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the snippet"
                    },
                    "updated_by": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SnippetListOwner"
                            }
                        ],
                        "x-ballerina-name": "updatedBy",
                        "description": "User who last modified the snippet"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Optional description text for the snippet"
                    },
                    "project": {
                        "$ref": "#/components/schemas/SnippetListProject"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the snippet"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "sql"
                        ],
                        "description": "Content type of the snippet (currently supports SQL)"
                    },
                    "inserted_at": {
                        "type": "string",
                        "x-ballerina-name": "insertedAt",
                        "description": "Timestamp when the snippet was created"
                    },
                    "favorite": {
                        "type": "boolean",
                        "description": "Whether the snippet is marked as favorite by the user"
                    }
                },
                "description": "Data structure containing snippet information and metadata"
            },
            "UpdateCustomHostnameResponseDataResultSslValidationErrors": {
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Error message describing the SSL validation failure"
                    }
                },
                "description": "SSL validation error details for custom hostname update"
            },
            "OrganizationProjectClaimResponsePreviewMembersExceedingFreeProjectLimit": {
                "required": [
                    "limit",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the member exceeding free project limits"
                    },
                    "limit": {
                        "type": "number",
                        "description": "Maximum number of free projects allowed for the member"
                    }
                },
                "description": "Members exceeding free project limits during organization claim preview"
            },
            "V1ProjectWithDatabaseResponseDatabase": {
                "required": [
                    "host",
                    "postgres_engine",
                    "release_channel",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "postgres_engine": {
                        "type": "string",
                        "description": "Database engine",
                        "x-ballerina-name": "postgresEngine"
                    },
                    "host": {
                        "type": "string",
                        "description": "Database host"
                    },
                    "release_channel": {
                        "type": "string",
                        "description": "Release channel",
                        "x-ballerina-name": "releaseChannel"
                    },
                    "version": {
                        "type": "string",
                        "description": "Database version"
                    }
                },
                "description": "Database configuration details for a Supabase project"
            },
            "V1OrganizationMemberResponse": {
                "required": [
                    "mfa_enabled",
                    "role_name",
                    "user_id",
                    "user_name"
                ],
                "type": "object",
                "properties": {
                    "role_name": {
                        "type": "string",
                        "x-ballerina-name": "roleName",
                        "description": "Role assigned to the organization member"
                    },
                    "user_id": {
                        "type": "string",
                        "x-ballerina-name": "userId",
                        "description": "Unique identifier for the user"
                    },
                    "user_name": {
                        "type": "string",
                        "x-ballerina-name": "userName",
                        "description": "Display name of the user"
                    },
                    "mfa_enabled": {
                        "type": "boolean",
                        "x-ballerina-name": "mfaEnabled",
                        "description": "Whether multi-factor authentication is enabled for the user"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the organization member"
                    }
                },
                "description": "Organization member information with role and authentication details"
            },
            "V1PostgrestConfigResponse": {
                "required": [
                    "db_extra_search_path",
                    "db_pool",
                    "db_schema",
                    "max_rows"
                ],
                "type": "object",
                "properties": {
                    "db_pool": {
                        "type": "integer",
                        "description": "If `null`, the value is automatically configured based on compute size",
                        "nullable": true,
                        "x-ballerina-name": "dbPool"
                    },
                    "max_rows": {
                        "type": "integer",
                        "x-ballerina-name": "maxRows",
                        "description": "Maximum number of rows returned by PostgREST queries"
                    },
                    "db_extra_search_path": {
                        "type": "string",
                        "x-ballerina-name": "dbExtraSearchPath",
                        "description": "Additional PostgreSQL schema search paths"
                    },
                    "db_schema": {
                        "type": "string",
                        "x-ballerina-name": "dbSchema",
                        "description": "Default database schema for PostgREST operations"
                    }
                },
                "description": "PostgREST API configuration settings for database access"
            },
            "CreateBranchBody": {
                "required": [
                    "branch_name"
                ],
                "type": "object",
                "properties": {
                    "desired_instance_size": {
                        "type": "string",
                        "enum": [
                            "pico",
                            "nano",
                            "micro",
                            "small",
                            "medium",
                            "large",
                            "xlarge",
                            "2xlarge",
                            "4xlarge",
                            "8xlarge",
                            "12xlarge",
                            "16xlarge",
                            "24xlarge",
                            "24xlarge_optimized_memory",
                            "24xlarge_optimized_cpu",
                            "24xlarge_high_memory",
                            "48xlarge",
                            "48xlarge_optimized_memory",
                            "48xlarge_optimized_cpu",
                            "48xlarge_high_memory"
                        ],
                        "x-ballerina-name": "desiredInstanceSize",
                        "description": "Compute instance size for the branch"
                    },
                    "postgres_engine": {
                        "type": "string",
                        "description": "Postgres engine version. If not provided, the latest version will be used",
                        "enum": [
                            "15",
                            "17",
                            "17-oriole"
                        ],
                        "x-ballerina-name": "postgresEngine"
                    },
                    "branch_name": {
                        "minLength": 1,
                        "type": "string",
                        "x-ballerina-name": "branchName",
                        "description": "Name for the new database branch"
                    },
                    "release_channel": {
                        "type": "string",
                        "description": "Release channel. If not provided, GA will be used",
                        "enum": [
                            "internal",
                            "alpha",
                            "beta",
                            "ga",
                            "withdrawn",
                            "preview"
                        ],
                        "x-ballerina-name": "releaseChannel"
                    },
                    "git_branch": {
                        "type": "string",
                        "x-ballerina-name": "gitBranch",
                        "description": "Associated Git branch name"
                    },
                    "is_default": {
                        "type": "boolean",
                        "x-ballerina-name": "isDefault",
                        "description": "Whether this branch should be the default branch"
                    },
                    "persistent": {
                        "type": "boolean",
                        "description": "Whether the branch should persist after inactivity"
                    },
                    "region": {
                        "type": "string",
                        "description": "Geographic region where the branch will be deployed"
                    },
                    "with_data": {
                        "type": "boolean",
                        "x-ballerina-name": "withData",
                        "description": "Whether to copy data from the parent branch"
                    },
                    "notify_url": {
                        "type": "string",
                        "description": "HTTP endpoint to receive branch status updates",
                        "format": "uri",
                        "x-ballerina-name": "notifyUrl"
                    },
                    "secrets": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value pairs of environment secrets for the branch"
                    }
                },
                "description": "Request payload for creating a new database branch"
            },
            "UpdateRunStatusResponse": {
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "enum": [
                            "ok"
                        ],
                        "description": "Status message confirming successful operation"
                    }
                },
                "description": "Response object for updating run status operations"
            },
            "BulkUpdateFunctionBodyInner": {
                "required": [
                    "id",
                    "name",
                    "slug",
                    "status",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "verify_jwt": {
                        "type": "boolean",
                        "x-ballerina-name": "verifyJwt",
                        "description": "Whether JWT verification is enabled for the function"
                    },
                    "import_map": {
                        "type": "boolean",
                        "x-ballerina-name": "importMap",
                        "description": "Whether import map is enabled for the function"
                    },
                    "import_map_path": {
                        "type": "string",
                        "x-ballerina-name": "importMapPath",
                        "description": "File path to the import map configuration"
                    },
                    "ezbr_sha256": {
                        "type": "string",
                        "x-ballerina-name": "ezbrSha256",
                        "description": "SHA256 hash of the function bundle"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the function"
                    },
                    "created_at": {
                        "type": "integer",
                        "format": "int64",
                        "x-ballerina-name": "createdAt",
                        "description": "Unix timestamp when the function was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the function"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version number of the function"
                    },
                    "slug": {
                        "pattern": "^[A-Za-z0-9_-]+$",
                        "type": "string",
                        "description": "URL-safe identifier for the function (alphanumeric, dash, underscore)"
                    },
                    "entrypoint_path": {
                        "type": "string",
                        "x-ballerina-name": "entrypointPath",
                        "description": "File path to the function's entry point"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "REMOVED",
                            "THROTTLED"
                        ],
                        "description": "Current operational status of the function"
                    }
                },
                "description": "Function configuration object for bulk update operations"
            },
            "NetworkBanResponse": {
                "required": [
                    "banned_ipv4_addresses"
                ],
                "type": "object",
                "properties": {
                    "banned_ipv4_addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-ballerina-name": "bannedIpv4Addresses",
                        "description": "Array of banned IPv4 addresses"
                    }
                },
                "description": "Response containing list of banned IP addresses"
            },
            "V1GetUsageApiRequestsCountResponse": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/V1GetUsageApiRequestsCountResponseResult"
                        },
                        "description": "Array of usage count results"
                    },
                    "error": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "required": [
                                    "code",
                                    "errors",
                                    "message",
                                    "status"
                                ],
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "number"
                                    },
                                    "errors": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "domain",
                                                "location",
                                                "locationType",
                                                "message",
                                                "reason"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "domain": {
                                                    "type": "string"
                                                },
                                                "location": {
                                                    "type": "string"
                                                },
                                                "locationType": {
                                                    "type": "string"
                                                },
                                                "message": {
                                                    "type": "string"
                                                },
                                                "reason": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "status": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "description": "Error information if the request failed"
                    }
                },
                "description": "Response object for API request count usage statistics"
            },
            "SigningKeysResponseKeys": {
                "required": [
                    "algorithm",
                    "created_at",
                    "id",
                    "status",
                    "updated_at"
                ],
                "type": "object",
                "properties": {
                    "public_jwk": {
                        "nullable": true,
                        "x-ballerina-name": "publicJwk",
                        "description": "Public JSON Web Key for signature verification (nullable)"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the signing key was last updated"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the signing key was created"
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier for the signing key in UUID format"
                    },
                    "algorithm": {
                        "type": "string",
                        "enum": [
                            "EdDSA",
                            "ES256",
                            "RS256",
                            "HS256"
                        ],
                        "description": "Cryptographic algorithm used for signing (EdDSA, ES256, RS256, HS256)"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "in_use",
                            "previously_used",
                            "revoked",
                            "standby"
                        ],
                        "description": "Current status of the signing key (in_use, previously_used, revoked, standby)"
                    }
                },
                "additionalProperties": false,
                "description": "Cryptographic signing key configuration and metadata"
            },
            "NetworkRestrictionsRequest": {
                "type": "object",
                "properties": {
                    "dbAllowedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of allowed IPv4 CIDR blocks for database access"
                    },
                    "dbAllowedCidrsV6": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of allowed IPv6 CIDR blocks for database access"
                    }
                },
                "description": "Request object for configuring network access restrictions"
            },
            "AuthorizeJitAccessBody": {
                "required": [
                    "rhost",
                    "role"
                ],
                "type": "object",
                "properties": {
                    "role": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Role to be granted for just-in-time access (required, min length 1)"
                    },
                    "rhost": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Remote host for just-in-time access (required, min length 1)"
                    }
                },
                "description": "Request body for authorizing just-in-time access"
            },
            "ActionRunResponseRunSteps": {
                "required": [
                    "created_at",
                    "name",
                    "status",
                    "updated_at"
                ],
                "type": "object",
                "properties": {
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the run step was last updated"
                    },
                    "name": {
                        "type": "string",
                        "enum": [
                            "clone",
                            "pull",
                            "health",
                            "configure",
                            "migrate",
                            "seed",
                            "deploy"
                        ],
                        "description": "Name of the run step (clone, pull, health, configure, migrate, seed, deploy)"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the run step was created"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "DEAD",
                            "EXITED",
                            "PAUSED",
                            "REMOVING",
                            "RESTARTING",
                            "RUNNING"
                        ],
                        "description": "Current execution status of the run step"
                    }
                },
                "description": "Represents individual steps in an action run execution"
            },
            "NetworkRestrictionsPatchRequestAdd": {
                "type": "object",
                "properties": {
                    "dbAllowedCidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv4 CIDR blocks to add to database access allowlist"
                    },
                    "dbAllowedCidrsV6": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv6 CIDR blocks to add to database access allowlist"
                    }
                },
                "description": "Request object for adding network access restrictions"
            },
            "PostgresConfigResponse": {
                "type": "object",
                "properties": {
                    "max_connections": {
                        "maximum": 262143,
                        "minimum": 1,
                        "type": "integer",
                        "x-ballerina-name": "maxConnections",
                        "description": "Maximum number of concurrent database connections (1-262143)"
                    },
                    "max_locks_per_transaction": {
                        "maximum": 2147483640,
                        "minimum": 10,
                        "type": "integer",
                        "x-ballerina-name": "maxLocksPerTransaction",
                        "description": "Maximum locks per transaction (10-2147483640)"
                    },
                    "max_parallel_workers": {
                        "maximum": 1024,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "maxParallelWorkers",
                        "description": "Maximum number of parallel worker processes (0-1024)"
                    },
                    "session_replication_role": {
                        "type": "string",
                        "enum": [
                            "origin",
                            "replica",
                            "local"
                        ],
                        "x-ballerina-name": "sessionReplicationRole",
                        "description": "Session replication role: origin, replica, or local"
                    },
                    "shared_buffers": {
                        "type": "string",
                        "x-ballerina-name": "sharedBuffers",
                        "description": "Amount of memory for shared buffer cache"
                    },
                    "max_wal_senders": {
                        "type": "integer",
                        "x-ballerina-name": "maxWalSenders",
                        "description": "Maximum number of WAL sender processes for replication"
                    },
                    "wal_sender_timeout": {
                        "type": "string",
                        "x-ballerina-name": "walSenderTimeout",
                        "description": "Timeout duration for WAL sender processes"
                    },
                    "hot_standby_feedback": {
                        "type": "boolean",
                        "x-ballerina-name": "hotStandbyFeedback",
                        "description": "Enable hot standby feedback to prevent query conflicts"
                    },
                    "max_slot_wal_keep_size": {
                        "type": "string",
                        "x-ballerina-name": "maxSlotWalKeepSize",
                        "description": "Maximum WAL size retained for replication slots"
                    },
                    "max_standby_streaming_delay": {
                        "type": "string",
                        "x-ballerina-name": "maxStandbyStreamingDelay",
                        "description": "Maximum delay before canceling queries on hot standby"
                    },
                    "maintenance_work_mem": {
                        "type": "string",
                        "x-ballerina-name": "maintenanceWorkMem",
                        "description": "Memory allocated for maintenance operations like VACUUM"
                    },
                    "max_parallel_workers_per_gather": {
                        "maximum": 1024,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "maxParallelWorkersPerGather",
                        "description": "Maximum parallel workers per Gather node (0-1024)"
                    },
                    "effective_cache_size": {
                        "type": "string",
                        "x-ballerina-name": "effectiveCacheSize",
                        "description": "Effective size of disk cache available to PostgreSQL"
                    },
                    "max_standby_archive_delay": {
                        "type": "string",
                        "x-ballerina-name": "maxStandbyArchiveDelay",
                        "description": "Maximum delay before canceling queries when reading WAL from archive"
                    },
                    "max_parallel_maintenance_workers": {
                        "maximum": 1024,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "maxParallelMaintenanceWorkers",
                        "description": "Maximum parallel workers for maintenance operations (0-1024)"
                    },
                    "track_activity_query_size": {
                        "type": "string",
                        "x-ballerina-name": "trackActivityQuerySize",
                        "description": "Size of buffer for tracking currently executing queries"
                    },
                    "wal_keep_size": {
                        "type": "string",
                        "x-ballerina-name": "walKeepSize",
                        "description": "Minimum size of WAL files kept in pg_wal directory"
                    },
                    "max_wal_size": {
                        "type": "string",
                        "x-ballerina-name": "maxWalSize",
                        "description": "Maximum size WAL can grow between automatic checkpoints"
                    },
                    "statement_timeout": {
                        "type": "string",
                        "x-ballerina-name": "statementTimeout",
                        "description": "Maximum allowed duration for any statement execution"
                    },
                    "track_commit_timestamp": {
                        "type": "boolean",
                        "x-ballerina-name": "trackCommitTimestamp",
                        "description": "Enables tracking of commit timestamps for transactions"
                    },
                    "logical_decoding_work_mem": {
                        "type": "string",
                        "x-ballerina-name": "logicalDecodingWorkMem",
                        "description": "Memory limit for logical decoding operations"
                    },
                    "max_replication_slots": {
                        "type": "integer",
                        "x-ballerina-name": "maxReplicationSlots",
                        "description": "Maximum number of replication slots allowed"
                    },
                    "max_worker_processes": {
                        "maximum": 262143,
                        "minimum": 0,
                        "type": "integer",
                        "x-ballerina-name": "maxWorkerProcesses",
                        "description": "Maximum number of worker processes (0-262143)"
                    },
                    "work_mem": {
                        "type": "string",
                        "x-ballerina-name": "workMem",
                        "description": "Memory allocated for query operations before writing to disk"
                    }
                },
                "description": "PostgreSQL database configuration parameters and settings response object"
            },
            "UpdateCustomHostnameResponseDataResultOwnershipVerification": {
                "required": [
                    "name",
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "DNS record name for ownership verification"
                    },
                    "type": {
                        "type": "string",
                        "description": "DNS record type for ownership verification"
                    },
                    "value": {
                        "type": "string",
                        "description": "DNS record value for ownership verification"
                    }
                },
                "description": "DNS verification record details for custom hostname ownership"
            },
            "CreateProviderBodyAttributeMappingKeys": {
                "type": "object",
                "properties": {
                    "default": {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {}
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "string"
                            },
                            {
                                "type": "boolean"
                            }
                        ],
                        "description": "Default value for the attribute mapping"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of attribute names to map"
                    },
                    "array": {
                        "type": "boolean",
                        "description": "Indicates if the attribute is an array type"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the attribute mapping"
                    }
                },
                "description": "Attribute mapping configuration for identity provider"
            },
            "AddonVariant": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AddonVariantOneOf1",
                        "description": "First addon variant option reference"
                    },
                    {
                        "$ref": "#/components/schemas/AddonVariantAddonVariantOneOf12",
                        "description": "Second addon variant option reference"
                    },
                    {
                        "$ref": "#/components/schemas/AddonVariantAddonVariantAddonVariantOneOf123",
                        "description": "Third addon variant option reference"
                    },
                    {
                        "$ref": "#/components/schemas/AddonVariantAddonVariantAddonVariantAddonVariantOneOf1234",
                        "description": "Fourth addon variant option reference"
                    }
                ],
                "description": "Addon variant configuration with multiple possible schemas"
            },
            "V1ListProjectsPaginatedResponseProjects": {
                "required": [
                    "cloud_provider",
                    "id",
                    "inserted_at",
                    "is_branch_enabled",
                    "is_physical_backups_enabled",
                    "name",
                    "organization_id",
                    "organization_slug",
                    "preview_branch_refs",
                    "ref",
                    "region",
                    "status",
                    "subscription_id"
                ],
                "type": "object",
                "properties": {
                    "organization_slug": {
                        "type": "string",
                        "x-ballerina-name": "organizationSlug",
                        "description": "URL-friendly identifier for the organization that owns the project"
                    },
                    "cloud_provider": {
                        "type": "string",
                        "x-ballerina-name": "cloudProvider",
                        "description": "Cloud infrastructure provider hosting the project"
                    },
                    "subscription_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "subscriptionId",
                        "description": "Unique identifier for the project's billing subscription"
                    },
                    "preview_branch_refs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-ballerina-name": "previewBranchRefs",
                        "description": "Array of Git branch references enabled for preview environments"
                    },
                    "infra_compute_size": {
                        "type": "string",
                        "enum": [
                            "pico",
                            "nano",
                            "micro",
                            "small",
                            "medium",
                            "large",
                            "xlarge",
                            "2xlarge",
                            "4xlarge",
                            "8xlarge",
                            "12xlarge",
                            "16xlarge",
                            "24xlarge",
                            "24xlarge_optimized_memory",
                            "24xlarge_optimized_cpu",
                            "24xlarge_high_memory",
                            "48xlarge",
                            "48xlarge_optimized_memory",
                            "48xlarge_optimized_cpu",
                            "48xlarge_high_memory"
                        ],
                        "x-ballerina-name": "infraComputeSize",
                        "description": "Compute tier size allocated to the project infrastructure"
                    },
                    "ref": {
                        "type": "string",
                        "description": "Git reference or branch currently deployed for the project"
                    },
                    "organization_id": {
                        "type": "number",
                        "x-ballerina-name": "organizationId",
                        "description": "Numeric identifier of the organization that owns the project"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the Supabase project"
                    },
                    "id": {
                        "type": "number",
                        "description": "Unique numeric identifier for the project"
                    },
                    "is_physical_backups_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "isPhysicalBackupsEnabled",
                        "description": "Whether physical database backups are enabled for the project"
                    },
                    "disk_volume_size_gb": {
                        "type": "number",
                        "x-ballerina-name": "diskVolumeSizeGb",
                        "description": "Allocated disk storage size in gigabytes for the project"
                    },
                    "region": {
                        "type": "string",
                        "description": "Geographic region where the project infrastructure is deployed"
                    },
                    "inserted_at": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "insertedAt",
                        "description": "Timestamp when the project was created in the system"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current operational status of the project"
                    },
                    "is_branch_enabled": {
                        "type": "boolean",
                        "x-ballerina-name": "isBranchEnabled",
                        "description": "Whether Git branching functionality is enabled for the project"
                    }
                },
                "description": "Project information including metadata, configuration, and status"
            },
            "ListProjectAddonsResponseVariantPrice": {
                "required": [
                    "amount",
                    "description",
                    "interval",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "Price amount for the addon variant"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-readable description of the pricing structure"
                    },
                    "interval": {
                        "type": "string",
                        "enum": [
                            "monthly",
                            "hourly"
                        ],
                        "description": "Billing frequency for the addon pricing"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "fixed",
                            "usage"
                        ],
                        "description": "Pricing model type for the addon"
                    }
                },
                "description": "Pricing information for a project addon variant"
            },
            "SslEnforcementResponseCurrentConfig": {
                "required": [
                    "database"
                ],
                "type": "object",
                "properties": {
                    "database": {
                        "type": "boolean",
                        "description": "Whether SSL enforcement is enabled for database connections"
                    }
                },
                "description": "SSL enforcement configuration settings for database connections"
            },
            "SslEnforcementRequest": {
                "required": [
                    "requestedConfig"
                ],
                "type": "object",
                "properties": {
                    "requestedConfig": {
                        "$ref": "#/components/schemas/SslEnforcementResponseCurrentConfig"
                    }
                },
                "description": "Request to update SSL enforcement configuration settings"
            },
            "V1GetUsageApiCountResponse": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/V1GetUsageApiCountResponseResult"
                        },
                        "description": "Array of API usage count results"
                    },
                    "error": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "required": [
                                    "code",
                                    "errors",
                                    "message",
                                    "status"
                                ],
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "number"
                                    },
                                    "errors": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "domain",
                                                "location",
                                                "locationType",
                                                "message",
                                                "reason"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "domain": {
                                                    "type": "string"
                                                },
                                                "location": {
                                                    "type": "string"
                                                },
                                                "locationType": {
                                                    "type": "string"
                                                },
                                                "message": {
                                                    "type": "string"
                                                },
                                                "reason": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "status": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "description": "Error information if the request failed"
                    }
                },
                "description": "Response containing API usage count data with optional error information"
            },
            "V1OrganizationSlugResponse": {
                "required": [
                    "allowed_release_channels",
                    "id",
                    "name",
                    "opt_in_tags"
                ],
                "type": "object",
                "properties": {
                    "opt_in_tags": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "AI_SQL_GENERATOR_OPT_IN",
                                "AI_DATA_GENERATOR_OPT_IN",
                                "AI_LOG_GENERATOR_OPT_IN"
                            ]
                        },
                        "x-ballerina-name": "optInTags",
                        "description": "Array of AI feature opt-in tags for the organization"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the organization"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the organization"
                    },
                    "plan": {
                        "type": "string",
                        "enum": [
                            "free",
                            "pro",
                            "team",
                            "enterprise"
                        ],
                        "description": "Subscription plan type (free, pro, team, enterprise)"
                    },
                    "allowed_release_channels": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "internal",
                                "alpha",
                                "beta",
                                "ga",
                                "withdrawn",
                                "preview"
                            ]
                        },
                        "x-ballerina-name": "allowedReleaseChannels",
                        "description": "Release channels the organization can access"
                    }
                },
                "description": "Organization details including ID, name, plan, and feature settings"
            },
            "FunctionDeployBody": {
                "required": [
                    "metadata"
                ],
                "type": "object",
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/FunctionDeployBodyMetadata"
                    },
                    "file": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "binary"
                        },
                        "description": "Array of binary files to deploy as Edge Functions"
                    }
                },
                "description": "Request body for deploying Edge Functions with metadata and files"
            },
            "DeleteProviderResponse": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "updated_at": {
                        "type": "string",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the provider was last updated"
                    },
                    "saml": {
                        "$ref": "#/components/schemas/CreateProviderResponseSaml"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreateProviderResponseDomains"
                        },
                        "description": "Array of domains associated with the provider"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the provider was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the deleted provider"
                    }
                },
                "description": "Response after deleting an authentication provider"
            },
            "ProjectClaimTokenResponse": {
                "required": [
                    "created_at",
                    "created_by",
                    "expires_at",
                    "token_alias"
                ],
                "type": "object",
                "properties": {
                    "expires_at": {
                        "type": "string",
                        "x-ballerina-name": "expiresAt",
                        "description": "Timestamp when the project claim token expires"
                    },
                    "token_alias": {
                        "type": "string",
                        "x-ballerina-name": "tokenAlias",
                        "description": "Alias identifier for the project claim token"
                    },
                    "created_at": {
                        "type": "string",
                        "x-ballerina-name": "createdAt",
                        "description": "Timestamp when the project claim token was created"
                    },
                    "created_by": {
                        "type": "string",
                        "format": "uuid",
                        "x-ballerina-name": "createdBy",
                        "description": "UUID of the user who created the project claim token"
                    }
                },
                "description": "Response containing project claim token details and metadata"
            },
            "AddonVariantOneOf1": {
                "type": "string",
                "enum": [
                    "ci_micro",
                    "ci_small",
                    "ci_medium",
                    "ci_large",
                    "ci_xlarge",
                    "ci_2xlarge",
                    "ci_4xlarge",
                    "ci_8xlarge",
                    "ci_12xlarge",
                    "ci_16xlarge",
                    "ci_24xlarge",
                    "ci_24xlarge_optimized_cpu",
                    "ci_24xlarge_optimized_memory",
                    "ci_24xlarge_high_memory",
                    "ci_48xlarge",
                    "ci_48xlarge_optimized_cpu",
                    "ci_48xlarge_optimized_memory",
                    "ci_48xlarge_high_memory"
                ],
                "description": "CI compute instance size variants from micro to 48xlarge with optimization"
            },
            "AnalyticsResponse": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "array",
                        "items": {},
                        "description": "Array containing the analytics query result data"
                    },
                    "error": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "required": [
                                    "code",
                                    "errors",
                                    "message",
                                    "status"
                                ],
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "number"
                                    },
                                    "errors": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "domain",
                                                "location",
                                                "locationType",
                                                "message",
                                                "reason"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "domain": {
                                                    "type": "string"
                                                },
                                                "location": {
                                                    "type": "string"
                                                },
                                                "locationType": {
                                                    "type": "string"
                                                },
                                                "message": {
                                                    "type": "string"
                                                },
                                                "reason": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "status": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "description": "Error information as string or structured error object with details"
                    }
                },
                "description": "Response schema containing analytics result data and optional error details"
            },
            "UpdateJitAccessBody": {
                "required": [
                    "roles",
                    "user_id"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "minLength": 1,
                        "type": "string",
                        "format": "uuid",
                        "x-ballerina-name": "userId",
                        "description": "UUID of the user to update just-in-time access for"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JitAccessResponseUserRoles"
                        },
                        "description": "Array of roles to assign for just-in-time access"
                    }
                },
                "description": "Request body for updating just-in-time access with user ID and roles"
            },
            "CreateSecretBodyInner": {
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 256,
                        "pattern": "^(?!SUPABASE_).*",
                        "type": "string",
                        "description": "Secret name must not start with the SUPABASE_ prefix",
                        "example": "string"
                    },
                    "value": {
                        "maxLength": 24576,
                        "type": "string",
                        "description": "Secret value string with maximum length of 24576 characters"
                    }
                },
                "description": "Secret creation object with name and value constraints"
            },
            "V1ListMigrationsResponseInner": {
                "required": [
                    "version"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Optional name identifier for the database migration"
                    },
                    "version": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Version identifier for the database migration"
                    }
                },
                "description": "Migration item containing optional name and required version"
            },
            "SigningKeysResponse": {
                "required": [
                    "keys"
                ],
                "type": "object",
                "properties": {
                    "keys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SigningKeysResponseKeys"
                        },
                        "description": "Array of signing key objects for cryptographic operations"
                    }
                },
                "additionalProperties": false,
                "description": "Response containing array of cryptographic signing keys"
            },
            "BranchResponse": {
                "required": [
                    "created_at",
                    "id",
                    "is_default",
                    "name",
                    "parent_project_ref",
                    "persistent",
                    "project_ref",
                    "status",
                    "updated_at",
                    "with_data"
                ],
                "type": "object",
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-ballerina-name": "createdAt",
                        "description": "ISO 8601 timestamp when the branch was created"
                    },
                    "git_branch": {
                        "type": "string",
                        "x-ballerina-name": "gitBranch",
                        "description": "Git branch name associated with this project branch"
                    },
                    "is_default": {
                        "type": "boolean",
                        "x-ballerina-name": "isDefault",
                        "description": "Indicates if this is the default branch for the project"
                    },
                    "notify_url": {
                        "type": "string",
                        "format": "uri",
                        "x-ballerina-name": "notifyUrl",
                        "description": "Webhook URL for branch notifications and status updates"
                    },
                    "project_ref": {
                        "type": "string",
                        "x-ballerina-name": "projectRef",
                        "description": "Unique reference identifier for the project"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-ballerina-name": "updatedAt",
                        "description": "Timestamp when the branch was last updated"
                    },
                    "parent_project_ref": {
                        "type": "string",
                        "x-ballerina-name": "parentProjectRef",
                        "description": "Reference to the parent project this branch was created from"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the branch"
                    },
                    "pr_number": {
                        "type": "integer",
                        "format": "int32",
                        "x-ballerina-name": "prNumber",
                        "description": "Pull request number associated with this branch"
                    },
                    "review_requested_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-ballerina-name": "reviewRequestedAt",
                        "description": "Timestamp when review was requested for this branch"
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique UUID identifier for the branch"
                    },
                    "persistent": {
                        "type": "boolean",
                        "description": "Whether the branch persists after PR closure"
                    },
                    "with_data": {
                        "type": "boolean",
                        "x-ballerina-name": "withData",
                        "description": "Indicates if branch was created with data from parent project"
                    },
                    "latest_check_run_id": {
                        "type": "number",
                        "description": "This field is deprecated and will not be populated",
                        "deprecated": true,
                        "x-ballerina-name": "latestCheckRunId"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "CREATING_PROJECT",
                            "RUNNING_MIGRATIONS",
                            "MIGRATIONS_PASSED",
                            "MIGRATIONS_FAILED",
                            "FUNCTIONS_DEPLOYED",
                            "FUNCTIONS_FAILED"
                        ],
                        "description": "Current deployment status of the branch"
                    }
                },
                "description": "Branch information with metadata, status, and configuration details"
            },
            "RegionsInfoRecommendations": {
                "required": [
                    "smartGroup",
                    "specific"
                ],
                "type": "object",
                "properties": {
                    "specific": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RegionsInfoRecommendationsSpecific"
                        },
                        "description": "Array of specific region recommendations"
                    },
                    "smartGroup": {
                        "$ref": "#/components/schemas/RegionsInfoRecommendationsSmartGroup"
                    }
                },
                "description": "Regional deployment recommendations with specific and smart grouping options"
            },
            "JitAccessResponseAllowedNetworks": {
                "type": "object",
                "properties": {
                    "allowed_cidrs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JitAccessResponseAllowedNetworksAllowedCidrs"
                        },
                        "x-ballerina-name": "allowedCidrs",
                        "description": "List of allowed IPv4 CIDR blocks for network access"
                    },
                    "allowed_cidrs_v6": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JitAccessResponseAllowedNetworksAllowedCidrs"
                        },
                        "x-ballerina-name": "allowedCidrsV6",
                        "description": "List of allowed IPv6 CIDR blocks for network access"
                    }
                },
                "description": "Network access configuration for just-in-time access permissions"
            },
            "BulkUpdateFunctionBody": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BulkUpdateFunctionBodyInner"
                },
                "description": "Array of function updates for bulk operation requests"
            },
            "V1UpdateFunctionBody": {
                "type": "object",
                "properties": {
                    "verify_jwt": {
                        "type": "boolean",
                        "x-ballerina-name": "verifyJwt",
                        "description": "Whether to verify JWT tokens for the function"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the function to update"
                    },
                    "body": {
                        "type": "string",
                        "description": "Function body/code content"
                    }
                },
                "description": "Request body for updating a single function's configuration and code"
            },
            "PostgrestConfigWithJWTSecretResponse": {
                "required": [
                    "db_extra_search_path",
                    "db_pool",
                    "db_schema",
                    "max_rows"
                ],
                "type": "object",
                "properties": {
                    "db_pool": {
                        "type": "integer",
                        "description": "If `null`, the value is automatically configured based on compute size",
                        "nullable": true,
                        "x-ballerina-name": "dbPool"
                    },
                    "jwt_secret": {
                        "type": "string",
                        "x-ballerina-name": "jwtSecret",
                        "description": "JWT secret key for authentication"
                    },
                    "max_rows": {
                        "type": "integer",
                        "x-ballerina-name": "maxRows",
                        "description": "Maximum number of rows returned in queries"
                    },
                    "db_extra_search_path": {
                        "type": "string",
                        "x-ballerina-name": "dbExtraSearchPath",
                        "description": "Additional database schema search paths"
                    },
                    "db_schema": {
                        "type": "string",
                        "x-ballerina-name": "dbSchema",
                        "description": "Primary database schema name"
                    }
                },
                "description": "PostgREST configuration response including JWT secret and database settings"
            },
            "BranchIdOrRef3": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef3OneOf1",
                        "description": "First option for branch identifier or reference"
                    },
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef3BranchIdOrRef3OneOf12",
                        "description": "Second option for branch identifier or reference"
                    }
                ],
                "description": "Branch identifier or reference (variant 3)"
            },
            "BranchIdOrRef4": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef4OneOf1",
                        "description": "First option for branch identifier or reference"
                    },
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef4BranchIdOrRef4OneOf12",
                        "description": "Second option for branch identifier or reference"
                    }
                ],
                "description": "Branch identifier or reference (variant 4)"
            },
            "BranchIdOrRef5": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef5OneOf1",
                        "description": "First option for branch identifier or reference"
                    },
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef5BranchIdOrRef5OneOf12",
                        "description": "Second option for branch identifier or reference"
                    }
                ],
                "description": "Branch identifier or reference (variant 5)"
            },
            "BranchIdOrRef6": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef6OneOf1",
                        "description": "First option for branch identifier or reference"
                    },
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef6BranchIdOrRef6OneOf12",
                        "description": "Second option for branch identifier or reference"
                    }
                ],
                "description": "Branch identifier or reference (variant 6)"
            },
            "PgsodiumConfigResponse": {
                "required": [
                    "root_key"
                ],
                "type": "object",
                "properties": {
                    "root_key": {
                        "type": "string",
                        "x-ballerina-name": "rootKey",
                        "description": "The root encryption key used by pgsodium for database encryption"
                    }
                },
                "description": "Response schema containing pgsodium encryption configuration settings"
            },
            "V1PgbouncerConfigResponse": {
                "type": "object",
                "properties": {
                    "ignore_startup_parameters": {
                        "type": "string",
                        "x-ballerina-name": "ignoreStartupParameters",
                        "description": "Comma-separated list of startup parameters to ignore"
                    },
                    "default_pool_size": {
                        "type": "integer",
                        "x-ballerina-name": "defaultPoolSize",
                        "description": "Default number of connections per pool"
                    },
                    "server_lifetime": {
                        "type": "integer",
                        "x-ballerina-name": "serverLifetime",
                        "description": "Maximum lifetime of server connections in seconds"
                    },
                    "pool_mode": {
                        "type": "string",
                        "enum": [
                            "transaction",
                            "session",
                            "statement"
                        ],
                        "x-ballerina-name": "poolMode",
                        "description": "Connection pooling mode: transaction, session, or statement"
                    },
                    "query_wait_timeout": {
                        "type": "integer",
                        "x-ballerina-name": "queryWaitTimeout",
                        "description": "Maximum time in seconds a query can wait for a connection"
                    },
                    "server_idle_timeout": {
                        "type": "integer",
                        "x-ballerina-name": "serverIdleTimeout",
                        "description": "Maximum idle time for server connections in seconds"
                    },
                    "reserve_pool_size": {
                        "type": "integer",
                        "x-ballerina-name": "reservePoolSize",
                        "description": "Number of connections reserved for high-priority queries"
                    },
                    "max_client_conn": {
                        "type": "integer",
                        "x-ballerina-name": "maxClientConn",
                        "description": "Maximum number of client connections allowed"
                    },
                    "connection_string": {
                        "type": "string",
                        "x-ballerina-name": "connectionString",
                        "description": "Database connection string used by PgBouncer"
                    }
                },
                "description": "Response schema containing PgBouncer connection pooling configuration"
            },
            "VanitySubdomainConfigResponse": {
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "custom_domain": {
                        "minLength": 1,
                        "type": "string",
                        "x-ballerina-name": "customDomain",
                        "description": "Custom domain name configured for the project"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "not-used",
                            "custom-domain-used",
                            "active"
                        ],
                        "description": "Current status of the vanity subdomain configuration"
                    }
                },
                "description": "Response schema for vanity subdomain configuration settings"
            },
            "OAuthTokenResponse": {
                "required": [
                    "access_token",
                    "expires_in",
                    "refresh_token",
                    "token_type"
                ],
                "type": "object",
                "properties": {
                    "access_token": {
                        "type": "string",
                        "x-ballerina-name": "accessToken",
                        "description": "JWT access token for authenticating API requests"
                    },
                    "refresh_token": {
                        "type": "string",
                        "x-ballerina-name": "refreshToken",
                        "description": "Token used to refresh the access token when it expires"
                    },
                    "token_type": {
                        "type": "string",
                        "enum": [
                            "Bearer"
                        ],
                        "x-ballerina-name": "tokenType",
                        "description": "Type of token, always 'Bearer' for OAuth authentication"
                    },
                    "expires_in": {
                        "type": "integer",
                        "x-ballerina-name": "expiresIn",
                        "description": "Number of seconds until the access token expires"
                    }
                },
                "additionalProperties": false,
                "description": "OAuth token response containing access and refresh tokens"
            },
            "FunctionSlugResponse": {
                "required": [
                    "created_at",
                    "id",
                    "name",
                    "slug",
                    "status",
                    "updated_at",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "verify_jwt": {
                        "type": "boolean",
                        "x-ballerina-name": "verifyJwt",
                        "description": "Whether JWT verification is enabled for the function"
                    },
                    "import_map": {
                        "type": "boolean",
                        "x-ballerina-name": "importMap",
                        "description": "Whether import map is enabled for the function"
                    },
                    "updated_at": {
                        "type": "integer",
                        "format": "int64",
                        "x-ballerina-name": "updatedAt",
                        "description": "Unix timestamp when the function was last updated"
                    },
                    "import_map_path": {
                        "type": "string",
                        "x-ballerina-name": "importMapPath",
                        "description": "File path to the import map configuration"
                    },
                    "ezbr_sha256": {
                        "type": "string",
                        "x-ballerina-name": "ezbrSha256",
                        "description": "SHA256 hash of the function's EZBR bundle"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the function"
                    },
                    "created_at": {
                        "type": "integer",
                        "format": "int64",
                        "x-ballerina-name": "createdAt",
                        "description": "Unix timestamp when the function was created"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the function"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version number of the function deployment"
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL-friendly identifier for the function"
                    },
                    "entrypoint_path": {
                        "type": "string",
                        "x-ballerina-name": "entrypointPath",
                        "description": "File path to the function's entry point"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "REMOVED",
                            "THROTTLED"
                        ],
                        "description": "Current deployment status: ACTIVE, REMOVED, or THROTTLED"
                    }
                },
                "description": "Response schema containing function metadata and deployment details"
            },
            "BranchIdOrRef1": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef1OneOf1",
                        "description": "First branch identifier format option"
                    },
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef1BranchIdOrRef1OneOf12",
                        "description": "Second branch identifier format option"
                    }
                ],
                "description": "Branch identifier that accepts either ID or reference format"
            },
            "BranchIdOrRef2": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef2OneOf1",
                        "description": "First branch identifier format option"
                    },
                    {
                        "$ref": "#/components/schemas/BranchIdOrRef2BranchIdOrRef2OneOf12",
                        "description": "Second branch identifier format option"
                    }
                ],
                "description": "Branch identifier that accepts either ID or reference format"
            },
            "CreateSigningKeyBody": {
                "required": [
                    "algorithm"
                ],
                "type": "object",
                "properties": {
                    "private_jwk": {
                        "discriminator": {
                            "propertyName": "kty"
                        },
                        "oneOf": [
                            {
                                "required": [
                                    "d",
                                    "dp",
                                    "dq",
                                    "e",
                                    "kty",
                                    "n",
                                    "p",
                                    "q",
                                    "qi"
                                ],
                                "type": "object",
                                "properties": {
                                    "kid": {
                                        "type": "string",
                                        "format": "uuid"
                                    },
                                    "use": {
                                        "type": "string",
                                        "enum": [
                                            "sig"
                                        ]
                                    },
                                    "key_ops": {
                                        "maxItems": 2,
                                        "minItems": 2,
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "sign",
                                                "verify"
                                            ]
                                        }
                                    },
                                    "ext": {
                                        "type": "boolean",
                                        "enum": [
                                            true
                                        ]
                                    },
                                    "kty": {
                                        "type": "string",
                                        "enum": [
                                            "RSA"
                                        ]
                                    },
                                    "alg": {
                                        "type": "string",
                                        "enum": [
                                            "RS256"
                                        ]
                                    },
                                    "n": {
                                        "type": "string"
                                    },
                                    "e": {
                                        "type": "string",
                                        "enum": [
                                            "AQAB"
                                        ]
                                    },
                                    "d": {
                                        "type": "string"
                                    },
                                    "p": {
                                        "type": "string"
                                    },
                                    "q": {
                                        "type": "string"
                                    },
                                    "dp": {
                                        "type": "string"
                                    },
                                    "dq": {
                                        "type": "string"
                                    },
                                    "qi": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "required": [
                                    "crv",
                                    "d",
                                    "kty",
                                    "x",
                                    "y"
                                ],
                                "type": "object",
                                "properties": {
                                    "kid": {
                                        "type": "string",
                                        "format": "uuid"
                                    },
                                    "use": {
                                        "type": "string",
                                        "enum": [
                                            "sig"
                                        ]
                                    },
                                    "key_ops": {
                                        "maxItems": 2,
                                        "minItems": 2,
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "sign",
                                                "verify"
                                            ]
                                        }
                                    },
                                    "ext": {
                                        "type": "boolean",
                                        "enum": [
                                            true
                                        ]
                                    },
                                    "kty": {
                                        "type": "string",
                                        "enum": [
                                            "EC"
                                        ]
                                    },
                                    "alg": {
                                        "type": "string",
                                        "enum": [
                                            "ES256"
                                        ]
                                    },
                                    "crv": {
                                        "type": "string",
                                        "enum": [
                                            "P-256"
                                        ]
                                    },
                                    "x": {
                                        "type": "string"
                                    },
                                    "y": {
                                        "type": "string"
                                    },
                                    "d": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "required": [
                                    "crv",
                                    "d",
                                    "kty",
                                    "x"
                                ],
                                "type": "object",
                                "properties": {
                                    "kid": {
                                        "type": "string",
                                        "format": "uuid"
                                    },
                                    "use": {
                                        "type": "string",
                                        "enum": [
                                            "sig"
                                        ]
                                    },
                                    "key_ops": {
                                        "maxItems": 2,
                                        "minItems": 2,
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "sign",
                                                "verify"
                                            ]
                                        }
                                    },
                                    "ext": {
                                        "type": "boolean",
                                        "enum": [
                                            true
                                        ]
                                    },
                                    "kty": {
                                        "type": "string",
                                        "enum": [
                                            "OKP"
                                        ]
                                    },
                                    "alg": {
                                        "type": "string",
                                        "enum": [
                                            "EdDSA"
                                        ]
                                    },
                                    "crv": {
                                        "type": "string",
                                        "enum": [
                                            "Ed25519"
                                        ]
                                    },
                                    "x": {
                                        "type": "string"
                                    },
                                    "d": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "required": [
                                    "k",
                                    "kty"
                                ],
                                "type": "object",
                                "properties": {
                                    "kid": {
                                        "type": "string",
                                        "format": "uuid"
                                    },
                                    "use": {
                                        "type": "string",
                                        "enum": [
                                            "sig"
                                        ]
                                    },
                                    "key_ops": {
                                        "maxItems": 2,
                                        "minItems": 2,
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "sign",
                                                "verify"
                                            ]
                                        }
                                    },
                                    "ext": {
                                        "type": "boolean",
                                        "enum": [
                                            true
                                        ]
                                    },
                                    "kty": {
                                        "type": "string",
                                        "enum": [
                                            "oct"
                                        ]
                                    },
                                    "alg": {
                                        "type": "string",
                                        "enum": [
                                            "HS256"
                                        ]
                                    },
                                    "k": {
                                        "minLength": 16,
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "x-ballerina-name": "privateJwk",
                        "description": "Private JSON Web Key for signing operations (RSA, EC, OKP, or oct)"
                    },
                    "algorithm": {
                        "type": "string",
                        "enum": [
                            "EdDSA",
                            "ES256",
                            "RS256",
                            "HS256"
                        ],
                        "description": "Cryptographic algorithm for signing key (EdDSA, ES256, RS256, or HS256)"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "in_use",
                            "standby"
                        ],
                        "description": "Current status of the signing key (in_use or standby)"
                    }
                },
                "additionalProperties": false,
                "description": "Request body for creating cryptographic signing keys with JWK format"
            },
            "AddonVariantAddonVariantAddonVariantAddonVariantOneOf1234": {
                "type": "string",
                "enum": [
                    "ipv4_default"
                ],
                "description": "IPv4 default addon variant configuration"
            },
            "UpdateBranchBody": {
                "type": "object",
                "properties": {
                    "reset_on_push": {
                        "type": "boolean",
                        "description": "This field is deprecated and will be ignored. Use v1-reset-a-branch endpoint directly instead",
                        "deprecated": true,
                        "x-ballerina-name": "resetOnPush"
                    },
                    "branch_name": {
                        "type": "string",
                        "x-ballerina-name": "branchName",
                        "description": "Name of the branch to update"
                    },
                    "git_branch": {
                        "type": "string",
                        "x-ballerina-name": "gitBranch",
                        "description": "Git branch reference to associate with this branch"
                    },
                    "request_review": {
                        "type": "boolean",
                        "x-ballerina-name": "requestReview",
                        "description": "Whether to request review for branch changes"
                    },
                    "persistent": {
                        "type": "boolean",
                        "description": "Whether the branch should persist across deployments"
                    },
                    "notify_url": {
                        "type": "string",
                        "description": "HTTP endpoint to receive branch status updates",
                        "format": "uri",
                        "x-ballerina-name": "notifyUrl"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "CREATING_PROJECT",
                            "RUNNING_MIGRATIONS",
                            "MIGRATIONS_PASSED",
                            "MIGRATIONS_FAILED",
                            "FUNCTIONS_DEPLOYED",
                            "FUNCTIONS_FAILED"
                        ],
                        "description": "Current deployment status of the branch"
                    }
                },
                "description": "Request body for updating branch configuration and settings"
            },
            "ListActionRunResponse": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ListActionRunResponseInner"
                },
                "description": "Array of action run responses"
            },
            "AuthConfigResponse": {
                "required": [
                    "api_max_request_duration",
                    "db_max_pool_size",
                    "disable_signup",
                    "external_anonymous_users_enabled",
                    "external_apple_additional_client_ids",
                    "external_apple_client_id",
                    "external_apple_email_optional",
                    "external_apple_enabled",
                    "external_apple_secret",
                    "external_azure_client_id",
                    "external_azure_email_optional",
                    "external_azure_enabled",
                    "external_azure_secret",
                    "external_azure_url",
                    "external_bitbucket_client_id",
                    "external_bitbucket_email_optional",
                    "external_bitbucket_enabled",
                    "external_bitbucket_secret",
                    "external_discord_client_id",
                    "external_discord_email_optional",
                    "external_discord_enabled",
                    "external_discord_secret",
                    "external_email_enabled",
                    "external_facebook_client_id",
                    "external_facebook_email_optional",
                    "external_facebook_enabled",
                    "external_facebook_secret",
                    "external_figma_client_id",
                    "external_figma_email_optional",
                    "external_figma_enabled",
                    "external_figma_secret",
                    "external_github_client_id",
                    "external_github_email_optional",
                    "external_github_enabled",
                    "external_github_secret",
                    "external_gitlab_client_id",
                    "external_gitlab_email_optional",
                    "external_gitlab_enabled",
                    "external_gitlab_secret",
                    "external_gitlab_url",
                    "external_google_additional_client_ids",
                    "external_google_client_id",
                    "external_google_email_optional",
                    "external_google_enabled",
                    "external_google_secret",
                    "external_google_skip_nonce_check",
                    "external_kakao_client_id",
                    "external_kakao_email_optional",
                    "external_kakao_enabled",
                    "external_kakao_secret",
                    "external_keycloak_client_id",
                    "external_keycloak_email_optional",
                    "external_keycloak_enabled",
                    "external_keycloak_secret",
                    "external_keycloak_url",
                    "external_linkedin_oidc_client_id",
                    "external_linkedin_oidc_email_optional",
                    "external_linkedin_oidc_enabled",
                    "external_linkedin_oidc_secret",
                    "external_notion_client_id",
                    "external_notion_email_optional",
                    "external_notion_enabled",
                    "external_notion_secret",
                    "external_phone_enabled",
                    "external_slack_client_id",
                    "external_slack_email_optional",
                    "external_slack_enabled",
                    "external_slack_oidc_client_id",
                    "external_slack_oidc_email_optional",
                    "external_slack_oidc_enabled",
                    "external_slack_oidc_secret",
                    "external_slack_secret",
                    "external_spotify_client_id",
                    "external_spotify_email_optional",
                    "external_spotify_enabled",
                    "external_spotify_secret",
                    "external_twitch_client_id",
                    "external_twitch_email_optional",
                    "external_twitch_enabled",
                    "external_twitch_secret",
                    "external_twitter_client_id",
                    "external_twitter_email_optional",
                    "external_twitter_enabled",
                    "external_twitter_secret",
                    "external_web3_ethereum_enabled",
                    "external_web3_solana_enabled",
                    "external_workos_client_id",
                    "external_workos_enabled",
                    "external_workos_secret",
                    "external_workos_url",
                    "external_zoom_client_id",
                    "external_zoom_email_optional",
                    "external_zoom_enabled",
                    "external_zoom_secret",
                    "hook_after_user_created_enabled",
                    "hook_after_user_created_secrets",
                    "hook_after_user_created_uri",
                    "hook_before_user_created_enabled",
                    "hook_before_user_created_secrets",
                    "hook_before_user_created_uri",
                    "hook_custom_access_token_enabled",
                    "hook_custom_access_token_secrets",
                    "hook_custom_access_token_uri",
                    "hook_mfa_verification_attempt_enabled",
                    "hook_mfa_verification_attempt_secrets",
                    "hook_mfa_verification_attempt_uri",
                    "hook_password_verification_attempt_enabled",
                    "hook_password_verification_attempt_secrets",
                    "hook_password_verification_attempt_uri",
                    "hook_send_email_enabled",
                    "hook_send_email_secrets",
                    "hook_send_email_uri",
                    "hook_send_sms_enabled",
                    "hook_send_sms_secrets",
                    "hook_send_sms_uri",
                    "jwt_exp",
                    "mailer_allow_unverified_email_sign_ins",
                    "mailer_autoconfirm",
                    "mailer_notifications_email_changed_enabled",
                    "mailer_notifications_identity_linked_enabled",
                    "mailer_notifications_identity_unlinked_enabled",
                    "mailer_notifications_mfa_factor_enrolled_enabled",
                    "mailer_notifications_mfa_factor_unenrolled_enabled",
                    "mailer_notifications_password_changed_enabled",
                    "mailer_notifications_phone_changed_enabled",
                    "mailer_otp_exp",
                    "mailer_otp_length",
                    "mailer_secure_email_change_enabled",
                    "mailer_subjects_confirmation",
                    "mailer_subjects_email_change",
                    "mailer_subjects_email_changed_notification",
                    "mailer_subjects_identity_linked_notification",
                    "mailer_subjects_identity_unlinked_notification",
                    "mailer_subjects_invite",
                    "mailer_subjects_magic_link",
                    "mailer_subjects_mfa_factor_enrolled_notification",
                    "mailer_subjects_mfa_factor_unenrolled_notification",
                    "mailer_subjects_password_changed_notification",
                    "mailer_subjects_phone_changed_notification",
                    "mailer_subjects_reauthentication",
                    "mailer_subjects_recovery",
                    "mailer_templates_confirmation_content",
                    "mailer_templates_email_change_content",
                    "mailer_templates_email_changed_notification_content",
                    "mailer_templates_identity_linked_notification_content",
                    "mailer_templates_identity_unlinked_notification_content",
                    "mailer_templates_invite_content",
                    "mailer_templates_magic_link_content",
                    "mailer_templates_mfa_factor_enrolled_notification_content",
                    "mailer_templates_mfa_factor_unenrolled_notification_content",
                    "mailer_templates_password_changed_notification_content",
                    "mailer_templates_phone_changed_notification_content",
                    "mailer_templates_reauthentication_content",
                    "mailer_templates_recovery_content",
                    "mfa_max_enrolled_factors",
                    "mfa_phone_enroll_enabled",
                    "mfa_phone_max_frequency",
                    "mfa_phone_otp_length",
                    "mfa_phone_template",
                    "mfa_phone_verify_enabled",
                    "mfa_totp_enroll_enabled",
                    "mfa_totp_verify_enabled",
                    "mfa_web_authn_enroll_enabled",
                    "mfa_web_authn_verify_enabled",
                    "nimbus_oauth_client_id",
                    "nimbus_oauth_client_secret",
                    "nimbus_oauth_email_optional",
                    "password_hibp_enabled",
                    "password_min_length",
                    "password_required_characters",
                    "rate_limit_anonymous_users",
                    "rate_limit_email_sent",
                    "rate_limit_otp",
                    "rate_limit_sms_sent",
                    "rate_limit_token_refresh",
                    "rate_limit_verify",
                    "rate_limit_web3",
                    "refresh_token_rotation_enabled",
                    "saml_allow_encrypted_assertions",
                    "saml_enabled",
                    "saml_external_url",
                    "security_captcha_enabled",
                    "security_captcha_provider",
                    "security_captcha_secret",
                    "security_manual_linking_enabled",
                    "security_refresh_token_reuse_interval",
                    "security_update_password_require_reauthentication",
                    "sessions_inactivity_timeout",
                    "sessions_single_per_user",
                    "sessions_tags",
                    "sessions_timebox",
                    "site_url",
                    "sms_autoconfirm",
                    "sms_max_frequency",
                    "sms_messagebird_access_key",
                    "sms_messagebird_originator",
                    "sms_otp_exp",
                    "sms_otp_length",
                    "sms_provider",
                    "sms_template",
                    "sms_test_otp",
                    "sms_test_otp_valid_until",
                    "sms_textlocal_api_key",
                    "sms_textlocal_sender",
                    "sms_twilio_account_sid",
                    "sms_twilio_auth_token",
                    "sms_twilio_content_sid",
                    "sms_twilio_message_service_sid",
                    "sms_twilio_verify_account_sid",
                    "sms_twilio_verify_auth_token",
                    "sms_twilio_verify_message_service_sid",
                    "sms_vonage_api_key",
                    "sms_vonage_api_secret",
                    "sms_vonage_from",
                    "smtp_admin_email",
                    "smtp_host",
                    "smtp_max_frequency",
                    "smtp_pass",
                    "smtp_port",
                    "smtp_sender_name",
                    "smtp_user",
                    "uri_allow_list"
                ],
                "type": "object",
                "properties": {
                    "disable_signup": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "disableSignup",
                        "description": "Whether user registration is disabled"
                    },
                    "external_slack_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackEmailOptional",
                        "description": "Whether email is optional for Slack OAuth authentication"
                    },
                    "external_google_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleClientId",
                        "description": "Google OAuth client identifier"
                    },
                    "sms_textlocal_api_key": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTextlocalApiKey",
                        "description": "API key for Textlocal SMS provider"
                    },
                    "external_phone_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalPhoneEnabled",
                        "description": "Whether phone number authentication is enabled"
                    },
                    "hook_before_user_created_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookBeforeUserCreatedEnabled",
                        "description": "Whether pre-user creation webhook is enabled"
                    },
                    "external_github_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGithubSecret",
                        "description": "GitHub OAuth client secret"
                    },
                    "external_google_additional_client_ids": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleAdditionalClientIds",
                        "description": "Additional Google OAuth client IDs for multi-app support"
                    },
                    "password_hibp_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "passwordHibpEnabled",
                        "description": "Enable HaveIBeenPwned password breach checking for user passwords"
                    },
                    "smtp_admin_email": {
                        "type": "string",
                        "format": "email",
                        "nullable": true,
                        "x-ballerina-name": "smtpAdminEmail",
                        "description": "Administrator email address for SMTP email configuration"
                    },
                    "mailer_subjects_password_changed_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsPasswordChangedNotification",
                        "description": "Email subject line for password change notification messages"
                    },
                    "external_web3_solana_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalWeb3SolanaEnabled",
                        "description": "Enable Solana Web3 wallet authentication provider"
                    },
                    "api_max_request_duration": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "apiMaxRequestDuration",
                        "description": "Maximum allowed duration for API requests in seconds"
                    },
                    "external_github_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGithubClientId",
                        "description": "GitHub OAuth client ID for external authentication"
                    },
                    "sms_test_otp": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTestOtp",
                        "description": "Test OTP code for SMS authentication in development mode"
                    },
                    "external_spotify_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSpotifyEmailOptional",
                        "description": "Make email optional for Spotify OAuth authentication"
                    },
                    "external_keycloak_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalKeycloakClientId",
                        "description": "Keycloak OAuth client ID for external authentication"
                    },
                    "smtp_pass": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smtpPass",
                        "description": "Password for SMTP server authentication"
                    },
                    "nimbus_oauth_client_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "nimbusOauthClientSecret",
                        "description": "Nimbus OAuth client secret for external authentication"
                    },
                    "mailer_subjects_reauthentication": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsReauthentication",
                        "description": "Email subject line for reauthentication request messages"
                    },
                    "external_facebook_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalFacebookSecret",
                        "description": "Facebook OAuth client secret for external authentication"
                    },
                    "hook_send_sms_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookSendSmsSecrets",
                        "description": "Secrets configuration for SMS sending webhook"
                    },
                    "external_slack_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackEnabled",
                        "description": "Enable Slack OAuth authentication provider"
                    },
                    "site_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "siteUrl",
                        "description": "Primary site URL for authentication redirects and callbacks"
                    },
                    "mfa_phone_otp_length": {
                        "type": "integer",
                        "x-ballerina-name": "mfaPhoneOtpLength",
                        "description": "Length of OTP codes for phone-based multi-factor authentication"
                    },
                    "sms_twilio_message_service_sid": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioMessageServiceSid",
                        "description": "Twilio Message Service SID for SMS delivery"
                    },
                    "sms_twilio_verify_auth_token": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioVerifyAuthToken",
                        "description": "Twilio Verify service authentication token for SMS verification"
                    },
                    "external_slack_oidc_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackOidcClientId",
                        "description": "Slack OIDC client ID for external authentication"
                    },
                    "mfa_max_enrolled_factors": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "mfaMaxEnrolledFactors",
                        "description": "Maximum number of MFA factors a user can enroll"
                    },
                    "mailer_subjects_confirmation": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsConfirmation",
                        "description": "Email subject line for account confirmation messages"
                    },
                    "external_github_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGithubEmailOptional",
                        "description": "Whether email is optional for GitHub OAuth authentication"
                    },
                    "mailer_subjects_magic_link": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsMagicLink",
                        "description": "Email subject line for magic link authentication messages"
                    },
                    "mailer_subjects_email_changed_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsEmailChangedNotification",
                        "description": "Email subject line for email change notification messages"
                    },
                    "mfa_phone_verify_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaPhoneVerifyEnabled",
                        "description": "Whether phone verification is enabled for MFA"
                    },
                    "jwt_exp": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "jwtExp",
                        "description": "JWT token expiration time in seconds"
                    },
                    "external_slack_oidc_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackOidcEmailOptional",
                        "description": "Whether email is optional for Slack OIDC authentication"
                    },
                    "external_slack_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackClientId",
                        "description": "Client ID for Slack OAuth integration"
                    },
                    "external_twitch_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitchSecret",
                        "description": "Client secret for Twitch OAuth integration"
                    },
                    "external_figma_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalFigmaEmailOptional",
                        "description": "Whether email is optional for Figma OAuth authentication"
                    },
                    "external_keycloak_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalKeycloakUrl",
                        "description": "Base URL for Keycloak OAuth provider"
                    },
                    "external_spotify_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSpotifyEnabled",
                        "description": "Whether Spotify OAuth authentication is enabled"
                    },
                    "external_notion_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalNotionSecret",
                        "description": "Client secret for Notion OAuth integration"
                    },
                    "hook_password_verification_attempt_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookPasswordVerificationAttemptSecrets",
                        "description": "Secrets for password verification attempt webhook"
                    },
                    "external_azure_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAzureSecret",
                        "description": "Client secret for Azure OAuth integration"
                    },
                    "rate_limit_otp": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitOtp",
                        "description": "Rate limit for OTP requests per hour"
                    },
                    "sms_twilio_auth_token": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioAuthToken",
                        "description": "Authentication token for Twilio SMS service"
                    },
                    "mailer_subjects_recovery": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsRecovery",
                        "description": "Email subject line for password recovery messages"
                    },
                    "mfa_totp_enroll_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaTotpEnrollEnabled",
                        "description": "Whether TOTP enrollment is enabled for MFA"
                    },
                    "smtp_sender_name": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smtpSenderName",
                        "description": "Display name for SMTP email sender"
                    },
                    "nimbus_oauth_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "nimbusOauthEmailOptional",
                        "description": "Whether email is optional for Nimbus OAuth authentication"
                    },
                    "sessions_tags": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "sessionsTags",
                        "description": "Tags associated with user sessions"
                    },
                    "mailer_templates_mfa_factor_enrolled_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesMfaFactorEnrolledNotificationContent",
                        "description": "Email template content for MFA factor enrollment notifications"
                    },
                    "mailer_allow_unverified_email_sign_ins": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerAllowUnverifiedEmailSignIns",
                        "description": "Allow sign-ins with unverified email addresses"
                    },
                    "external_discord_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalDiscordClientId",
                        "description": "Discord OAuth client ID for external authentication"
                    },
                    "external_slack_oidc_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackOidcEnabled",
                        "description": "Enable Slack OIDC for external authentication"
                    },
                    "rate_limit_token_refresh": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitTokenRefresh",
                        "description": "Rate limit for token refresh requests per time window"
                    },
                    "sms_messagebird_access_key": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsMessagebirdAccessKey",
                        "description": "MessageBird access key for SMS authentication services"
                    },
                    "external_discord_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalDiscordSecret",
                        "description": "Discord OAuth client secret for external authentication"
                    },
                    "external_figma_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalFigmaSecret",
                        "description": "Figma OAuth client secret for external authentication"
                    },
                    "mailer_notifications_mfa_factor_enrolled_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsMfaFactorEnrolledEnabled",
                        "description": "Enable email notifications for MFA factor enrollment"
                    },
                    "hook_password_verification_attempt_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookPasswordVerificationAttemptUri",
                        "description": "Webhook URI for password verification attempt events"
                    },
                    "external_gitlab_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGitlabEnabled",
                        "description": "Enable GitLab OAuth for external authentication"
                    },
                    "mailer_templates_email_change_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesEmailChangeContent",
                        "description": "Email template content for email change confirmations"
                    },
                    "mfa_phone_max_frequency": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "mfaPhoneMaxFrequency",
                        "description": "Maximum frequency for phone-based MFA attempts"
                    },
                    "smtp_user": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smtpUser",
                        "description": "SMTP username for email authentication"
                    },
                    "password_min_length": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "passwordMinLength",
                        "description": "Minimum required length for user passwords"
                    },
                    "hook_mfa_verification_attempt_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookMfaVerificationAttemptEnabled",
                        "description": "Enable webhook for MFA verification attempt events"
                    },
                    "security_captcha_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "securityCaptchaEnabled",
                        "description": "Enable CAPTCHA verification for security"
                    },
                    "external_twitter_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitterEnabled",
                        "description": "Indicates if Twitter OAuth authentication is enabled"
                    },
                    "mailer_notifications_email_changed_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsEmailChangedEnabled",
                        "description": "Enables email notifications when user email address is changed"
                    },
                    "external_email_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalEmailEnabled",
                        "description": "Indicates if email/password authentication is enabled"
                    },
                    "external_keycloak_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalKeycloakSecret",
                        "description": "Client secret for Keycloak OAuth authentication"
                    },
                    "external_workos_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalWorkosEnabled",
                        "description": "Indicates if WorkOS authentication is enabled"
                    },
                    "smtp_port": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smtpPort",
                        "description": "SMTP server port for sending authentication emails"
                    },
                    "external_kakao_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalKakaoEnabled",
                        "description": "Indicates if Kakao OAuth authentication is enabled"
                    },
                    "external_bitbucket_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalBitbucketSecret",
                        "description": "Client secret for Bitbucket OAuth authentication"
                    },
                    "external_apple_additional_client_ids": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAppleAdditionalClientIds",
                        "description": "Additional client IDs for Apple Sign In authentication"
                    },
                    "hook_mfa_verification_attempt_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookMfaVerificationAttemptSecrets",
                        "description": "Webhook secrets for MFA verification attempt events"
                    },
                    "hook_send_email_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookSendEmailUri",
                        "description": "Webhook URI for custom email sending functionality"
                    },
                    "sms_messagebird_originator": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsMessagebirdOriginator",
                        "description": "MessageBird SMS sender identifier for authentication messages"
                    },
                    "mailer_subjects_mfa_factor_enrolled_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsMfaFactorEnrolledNotification",
                        "description": "Email subject for MFA factor enrollment notifications"
                    },
                    "external_twitch_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitchEnabled",
                        "description": "Indicates if Twitch OAuth authentication is enabled"
                    },
                    "hook_send_sms_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookSendSmsEnabled",
                        "description": "Enables webhook for custom SMS sending functionality"
                    },
                    "external_google_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleEnabled",
                        "description": "Indicates if Google OAuth authentication is enabled"
                    },
                    "external_workos_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalWorkosSecret",
                        "description": "Client secret for WorkOS authentication"
                    },
                    "external_github_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGithubEnabled",
                        "description": "Indicates if GitHub OAuth authentication is enabled"
                    },
                    "mailer_notifications_phone_changed_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsPhoneChangedEnabled",
                        "description": "Enables email notifications when user phone number is changed"
                    },
                    "external_twitter_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitterSecret",
                        "description": "Client secret for Twitter OAuth authentication"
                    },
                    "mfa_web_authn_verify_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaWebAuthnVerifyEnabled",
                        "description": "Enables WebAuthn verification for multi-factor authentication"
                    },
                    "external_facebook_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalFacebookEmailOptional",
                        "description": "Makes email optional for Facebook OAuth authentication"
                    },
                    "external_azure_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAzureUrl",
                        "description": "Azure OAuth provider endpoint URL"
                    },
                    "mailer_notifications_password_changed_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsPasswordChangedEnabled",
                        "description": "Enables email notifications when user password is changed"
                    },
                    "mailer_templates_identity_unlinked_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesIdentityUnlinkedNotificationContent",
                        "description": "Email template content for identity unlinked notifications"
                    },
                    "hook_after_user_created_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookAfterUserCreatedUri",
                        "description": "Webhook URI triggered after user account creation"
                    },
                    "external_gitlab_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGitlabUrl",
                        "description": "GitLab OAuth provider endpoint URL"
                    },
                    "external_notion_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalNotionEmailOptional",
                        "description": "Makes email optional for Notion OAuth authentication"
                    },
                    "hook_send_sms_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookSendSmsUri",
                        "description": "Webhook URI for custom SMS sending functionality"
                    },
                    "security_update_password_require_reauthentication": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "securityUpdatePasswordRequireReauthentication",
                        "description": "Requires user reauthentication before password updates"
                    },
                    "mailer_templates_magic_link_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesMagicLinkContent",
                        "description": "Email template content for magic link authentication"
                    },
                    "external_twitch_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitchEmailOptional",
                        "description": "Makes email optional for Twitch OAuth authentication"
                    },
                    "sms_textlocal_sender": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTextlocalSender",
                        "description": "Sender identifier for Textlocal SMS provider"
                    },
                    "sms_vonage_from": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsVonageFrom",
                        "description": "Sender phone number for Vonage SMS provider"
                    },
                    "external_kakao_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalKakaoClientId",
                        "description": "Client ID for Kakao OAuth authentication"
                    },
                    "mailer_templates_confirmation_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesConfirmationContent",
                        "description": "Email template content for account confirmation emails"
                    },
                    "nimbus_oauth_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "nimbusOauthClientId",
                        "description": "Client ID for Nimbus OAuth authentication"
                    },
                    "mailer_subjects_mfa_factor_unenrolled_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsMfaFactorUnenrolledNotification",
                        "description": "Email subject for MFA factor unenrollment notifications"
                    },
                    "external_google_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleEmailOptional",
                        "description": "Makes email optional for Google OAuth authentication"
                    },
                    "rate_limit_anonymous_users": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitAnonymousUsers",
                        "description": "Rate limit threshold for anonymous user requests"
                    },
                    "mfa_web_authn_enroll_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaWebAuthnEnrollEnabled",
                        "description": "Enables WebAuthn enrollment for multi-factor authentication"
                    },
                    "external_slack_oidc_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackOidcSecret",
                        "description": "Client secret for Slack OIDC authentication provider"
                    },
                    "external_workos_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalWorkosUrl",
                        "description": "WorkOS authentication provider URL endpoint"
                    },
                    "external_bitbucket_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalBitbucketEmailOptional",
                        "description": "Makes email optional for Bitbucket OAuth authentication"
                    },
                    "external_twitch_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitchClientId",
                        "description": "Client ID for Twitch OAuth authentication provider"
                    },
                    "security_captcha_provider": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "turnstile",
                            "hcaptcha"
                        ],
                        "x-ballerina-name": "securityCaptchaProvider",
                        "description": "CAPTCHA provider for security verification (turnstile or hcaptcha)"
                    },
                    "saml_allow_encrypted_assertions": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "samlAllowEncryptedAssertions",
                        "description": "Allows encrypted SAML assertions for enhanced security"
                    },
                    "external_azure_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAzureClientId",
                        "description": "Client ID for Azure Active Directory OAuth authentication"
                    },
                    "external_apple_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAppleSecret",
                        "description": "Client secret for Apple OAuth authentication provider"
                    },
                    "saml_external_url": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "samlExternalUrl",
                        "description": "External URL for SAML authentication provider"
                    },
                    "sessions_timebox": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "sessionsTimebox",
                        "description": "Session duration limit in seconds"
                    },
                    "security_captcha_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "securityCaptchaSecret",
                        "description": "Secret key for CAPTCHA provider authentication"
                    },
                    "sms_autoconfirm": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "smsAutoconfirm",
                        "description": "Automatically confirms SMS verification without user action"
                    },
                    "external_facebook_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalFacebookClientId",
                        "description": "Client ID for Facebook OAuth authentication provider"
                    },
                    "sms_test_otp_valid_until": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "x-ballerina-name": "smsTestOtpValidUntil",
                        "description": "Expiration timestamp for SMS test OTP validity"
                    },
                    "external_gitlab_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGitlabEmailOptional",
                        "description": "Makes email optional for GitLab OAuth authentication"
                    },
                    "external_figma_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalFigmaEnabled",
                        "description": "Enables Figma OAuth authentication provider"
                    },
                    "mailer_autoconfirm": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerAutoconfirm",
                        "description": "Automatically confirms email verification without user action"
                    },
                    "external_discord_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalDiscordEnabled",
                        "description": "Enables Discord OAuth authentication provider"
                    },
                    "external_keycloak_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalKeycloakEmailOptional",
                        "description": "Makes email optional for Keycloak OAuth authentication"
                    },
                    "mailer_subjects_invite": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsInvite",
                        "description": "Email subject line for user invitation messages"
                    },
                    "sms_twilio_verify_message_service_sid": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioVerifyMessageServiceSid",
                        "description": "Twilio Verify message service SID for SMS verification"
                    },
                    "external_discord_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalDiscordEmailOptional",
                        "description": "Whether email is optional for Discord OAuth authentication"
                    },
                    "external_zoom_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalZoomSecret",
                        "description": "Client secret for Zoom OAuth integration"
                    },
                    "mfa_phone_enroll_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaPhoneEnrollEnabled",
                        "description": "Whether phone-based MFA enrollment is enabled"
                    },
                    "external_workos_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalWorkosClientId",
                        "description": "Client ID for WorkOS OAuth integration"
                    },
                    "rate_limit_email_sent": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitEmailSent",
                        "description": "Rate limit for sent emails per time period"
                    },
                    "sms_vonage_api_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsVonageApiSecret",
                        "description": "API secret for Vonage SMS service integration"
                    },
                    "external_spotify_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSpotifyClientId",
                        "description": "Client ID for Spotify OAuth integration"
                    },
                    "mailer_subjects_identity_linked_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsIdentityLinkedNotification",
                        "description": "Email subject for identity linking notification messages"
                    },
                    "mailer_templates_mfa_factor_unenrolled_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesMfaFactorUnenrolledNotificationContent",
                        "description": "Email template content for MFA factor unenrollment notifications"
                    },
                    "external_azure_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalAzureEmailOptional",
                        "description": "Whether email is optional for Azure OAuth authentication"
                    },
                    "hook_password_verification_attempt_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookPasswordVerificationAttemptEnabled",
                        "description": "Whether password verification attempt hooks are enabled"
                    },
                    "sms_otp_exp": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "smsOtpExp",
                        "description": "SMS OTP expiration time in seconds"
                    },
                    "mailer_subjects_email_change": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsEmailChange",
                        "description": "Email subject line for email change confirmation messages"
                    },
                    "security_manual_linking_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "securityManualLinkingEnabled",
                        "description": "Whether manual account linking is enabled for security"
                    },
                    "mailer_templates_email_changed_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesEmailChangedNotificationContent",
                        "description": "Email template content for email change notifications"
                    },
                    "external_linkedin_oidc_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalLinkedinOidcEmailOptional",
                        "description": "Whether email is optional for LinkedIn OIDC authentication"
                    },
                    "external_anonymous_users_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalAnonymousUsersEnabled",
                        "description": "Whether anonymous user authentication is enabled"
                    },
                    "external_google_skip_nonce_check": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleSkipNonceCheck",
                        "description": "Whether to skip nonce verification for Google OAuth"
                    },
                    "external_twitter_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitterClientId",
                        "description": "Twitter OAuth client ID for external authentication integration"
                    },
                    "saml_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "samlEnabled",
                        "description": "Whether SAML authentication is enabled for the project"
                    },
                    "external_gitlab_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGitlabSecret",
                        "description": "GitLab OAuth client secret for external authentication integration"
                    },
                    "rate_limit_verify": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitVerify",
                        "description": "Rate limit for verification attempts per time window"
                    },
                    "mailer_otp_length": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "mailerOtpLength",
                        "description": "Length of OTP codes sent via email"
                    },
                    "rate_limit_sms_sent": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitSmsSent",
                        "description": "Rate limit for SMS messages sent per time window"
                    },
                    "external_azure_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalAzureEnabled",
                        "description": "Whether Azure AD authentication is enabled"
                    },
                    "external_zoom_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalZoomClientId",
                        "description": "Zoom OAuth client ID for external authentication integration"
                    },
                    "external_apple_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalAppleClientId",
                        "description": "Apple OAuth client ID for external authentication integration"
                    },
                    "sms_twilio_content_sid": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioContentSid",
                        "description": "Twilio Content SID for SMS template configuration"
                    },
                    "sms_vonage_api_key": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsVonageApiKey",
                        "description": "Vonage API key for SMS service integration"
                    },
                    "hook_after_user_created_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookAfterUserCreatedSecrets",
                        "description": "Secrets for the after user created webhook"
                    },
                    "sms_template": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTemplate",
                        "description": "Template content for SMS messages"
                    },
                    "sms_max_frequency": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "smsMaxFrequency",
                        "description": "Maximum frequency for SMS sending in seconds"
                    },
                    "mailer_templates_identity_linked_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesIdentityLinkedNotificationContent",
                        "description": "Email template content for identity linked notifications"
                    },
                    "external_notion_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalNotionClientId",
                        "description": "Notion OAuth client ID for external authentication integration"
                    },
                    "external_facebook_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalFacebookEnabled",
                        "description": "Whether Facebook authentication is enabled"
                    },
                    "mailer_templates_phone_changed_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesPhoneChangedNotificationContent",
                        "description": "Email template content for phone number change notifications"
                    },
                    "hook_mfa_verification_attempt_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookMfaVerificationAttemptUri",
                        "description": "Webhook URI for MFA verification attempt events"
                    },
                    "mailer_templates_reauthentication_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesReauthenticationContent",
                        "description": "Email template content for reauthentication requests"
                    },
                    "sessions_inactivity_timeout": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "sessionsInactivityTimeout",
                        "description": "Session inactivity timeout duration in seconds"
                    },
                    "password_required_characters": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789",
                            "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789",
                            "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789:!@#$%^&*()_+-=[]{};'\\\\:\"|<>?,.\/`~",
                            ""
                        ],
                        "x-ballerina-name": "passwordRequiredCharacters",
                        "description": "Required character sets for password validation"
                    },
                    "mailer_notifications_identity_linked_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsIdentityLinkedEnabled",
                        "description": "Enable email notifications when identity is linked to account"
                    },
                    "mailer_templates_recovery_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesRecoveryContent",
                        "description": "Email template content for password recovery messages"
                    },
                    "external_linkedin_oidc_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalLinkedinOidcEnabled",
                        "description": "Enable LinkedIn OpenID Connect authentication provider"
                    },
                    "external_slack_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSlackSecret",
                        "description": "Client secret for Slack OAuth authentication"
                    },
                    "mfa_totp_verify_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mfaTotpVerifyEnabled",
                        "description": "Enable TOTP verification for multi-factor authentication"
                    },
                    "smtp_host": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smtpHost",
                        "description": "SMTP server hostname for email delivery"
                    },
                    "hook_after_user_created_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookAfterUserCreatedEnabled",
                        "description": "Enable webhook trigger after user account creation"
                    },
                    "external_kakao_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalKakaoSecret",
                        "description": "Client secret for Kakao OAuth authentication"
                    },
                    "external_apple_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalAppleEmailOptional",
                        "description": "Make email optional for Apple Sign-In authentication"
                    },
                    "mailer_templates_password_changed_notification_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesPasswordChangedNotificationContent",
                        "description": "Email template content for password change notifications"
                    },
                    "mailer_notifications_identity_unlinked_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsIdentityUnlinkedEnabled",
                        "description": "Enable email notifications when identity is unlinked from account"
                    },
                    "sms_provider": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "messagebird",
                            "textlocal",
                            "twilio",
                            "twilio_verify",
                            "vonage"
                        ],
                        "x-ballerina-name": "smsProvider",
                        "description": "SMS service provider for phone authentication"
                    },
                    "sms_twilio_verify_account_sid": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioVerifyAccountSid",
                        "description": "Twilio Verify service account SID for SMS authentication"
                    },
                    "external_google_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGoogleSecret",
                        "description": "Client secret for Google OAuth authentication"
                    },
                    "smtp_max_frequency": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "smtpMaxFrequency",
                        "description": "Maximum email sending frequency limit per hour"
                    },
                    "hook_custom_access_token_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookCustomAccessTokenUri",
                        "description": "Custom webhook URI for access token generation"
                    },
                    "external_web3_ethereum_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalWeb3EthereumEnabled",
                        "description": "Enable Ethereum Web3 wallet authentication"
                    },
                    "sms_twilio_account_sid": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "smsTwilioAccountSid",
                        "description": "Twilio account SID for SMS service configuration"
                    },
                    "external_zoom_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalZoomEnabled",
                        "description": "Indicates whether Zoom external authentication provider is enabled"
                    },
                    "security_refresh_token_reuse_interval": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "securityRefreshTokenReuseInterval",
                        "description": "Time interval in seconds for refresh token reuse security policy"
                    },
                    "refresh_token_rotation_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "refreshTokenRotationEnabled",
                        "description": "Indicates whether refresh token rotation security feature is enabled"
                    },
                    "external_twitter_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalTwitterEmailOptional",
                        "description": "Indicates whether email is optional for Twitter authentication"
                    },
                    "external_keycloak_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalKeycloakEnabled",
                        "description": "Indicates whether Keycloak external authentication provider is enabled"
                    },
                    "mfa_phone_template": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mfaPhoneTemplate",
                        "description": "Template string for multi-factor authentication phone messages"
                    },
                    "sessions_single_per_user": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "sessionsSinglePerUser",
                        "description": "Indicates whether only one session per user is allowed"
                    },
                    "external_apple_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalAppleEnabled",
                        "description": "Indicates whether Apple external authentication provider is enabled"
                    },
                    "hook_send_email_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookSendEmailSecrets",
                        "description": "Secret configuration for send email webhook functionality"
                    },
                    "db_max_pool_size": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "dbMaxPoolSize",
                        "description": "Maximum number of database connections in the connection pool"
                    },
                    "sms_otp_length": {
                        "type": "integer",
                        "x-ballerina-name": "smsOtpLength",
                        "description": "Length of one-time password sent via SMS"
                    },
                    "external_linkedin_oidc_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalLinkedinOidcClientId",
                        "description": "Client ID for LinkedIn OpenID Connect authentication"
                    },
                    "external_notion_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalNotionEnabled",
                        "description": "Indicates whether Notion external authentication provider is enabled"
                    },
                    "hook_custom_access_token_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookCustomAccessTokenSecrets",
                        "description": "Secret configuration for custom access token webhook functionality"
                    },
                    "mailer_notifications_mfa_factor_unenrolled_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerNotificationsMfaFactorUnenrolledEnabled",
                        "description": "Indicates whether MFA factor unenrollment email notifications are enabled"
                    },
                    "external_gitlab_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalGitlabClientId",
                        "description": "Client ID for GitLab external authentication provider"
                    },
                    "mailer_secure_email_change_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "mailerSecureEmailChangeEnabled",
                        "description": "Indicates whether secure email change confirmation is enabled"
                    },
                    "mailer_otp_exp": {
                        "type": "integer",
                        "x-ballerina-name": "mailerOtpExp",
                        "description": "Expiration time in seconds for email one-time passwords"
                    },
                    "external_zoom_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalZoomEmailOptional",
                        "description": "Indicates whether email is optional for Zoom authentication"
                    },
                    "mailer_subjects_phone_changed_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsPhoneChangedNotification",
                        "description": "Email subject line for phone number change notifications"
                    },
                    "external_figma_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalFigmaClientId",
                        "description": "Client ID for Figma OAuth integration"
                    },
                    "external_linkedin_oidc_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalLinkedinOidcSecret",
                        "description": "Client secret for LinkedIn OIDC authentication"
                    },
                    "hook_send_email_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookSendEmailEnabled",
                        "description": "Whether email sending hooks are enabled"
                    },
                    "external_spotify_secret": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalSpotifySecret",
                        "description": "Client secret for Spotify OAuth integration"
                    },
                    "hook_before_user_created_secrets": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookBeforeUserCreatedSecrets",
                        "description": "Secrets for before user created hook"
                    },
                    "rate_limit_web3": {
                        "type": "integer",
                        "nullable": true,
                        "x-ballerina-name": "rateLimitWeb3",
                        "description": "Rate limit for Web3 authentication requests"
                    },
                    "hook_before_user_created_uri": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "hookBeforeUserCreatedUri",
                        "description": "URI endpoint for before user created hook"
                    },
                    "uri_allow_list": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "uriAllowList",
                        "description": "Comma-separated list of allowed redirect URIs"
                    },
                    "external_kakao_email_optional": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalKakaoEmailOptional",
                        "description": "Whether email is optional for Kakao authentication"
                    },
                    "mailer_templates_invite_content": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerTemplatesInviteContent",
                        "description": "HTML content template for invitation emails"
                    },
                    "mailer_subjects_identity_unlinked_notification": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "mailerSubjectsIdentityUnlinkedNotification",
                        "description": "Email subject for identity unlinked notifications"
                    },
                    "external_bitbucket_client_id": {
                        "type": "string",
                        "nullable": true,
                        "x-ballerina-name": "externalBitbucketClientId",
                        "description": "Client ID for Bitbucket OAuth integration"
                    },
                    "external_bitbucket_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "externalBitbucketEnabled",
                        "description": "Whether Bitbucket authentication is enabled"
                    },
                    "hook_custom_access_token_enabled": {
                        "type": "boolean",
                        "nullable": true,
                        "x-ballerina-name": "hookCustomAccessTokenEnabled",
                        "description": "Whether custom access token hooks are enabled"
                    }
                },
                "description": "Complete authentication configuration settings and provider options"
            },
            "GetProjectDbMetadataResponse": {
                "required": [
                    "databases"
                ],
                "type": "object",
                "properties": {
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GetProjectDbMetadataResponseDatabases"
                        },
                        "description": "Array of database metadata objects"
                    }
                },
                "description": "Response containing project database metadata information"
            },
            "NetworkRestrictionsV2ResponseConfig": {
                "type": "object",
                "properties": {
                    "dbAllowedCidrs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NetworkRestrictionsV2ResponseConfigDbAllowedCidrs"
                        },
                        "description": "Array of allowed CIDR blocks for database access"
                    }
                },
                "description": "At any given point in time, this is the config that the user has requested be applied to their project. The `status` field indicates if it has been applied to the project, or is pending. When an updated config is received, the applied config is moved to `old_config`"
            },
            "ProjectUpgradeEligibilityResponseTargetUpgradeVersions": {
                "required": [
                    "app_version",
                    "postgres_version",
                    "release_channel"
                ],
                "type": "object",
                "properties": {
                    "postgres_version": {
                        "type": "string",
                        "enum": [
                            "13",
                            "14",
                            "15",
                            "17",
                            "17-oriole"
                        ],
                        "x-ballerina-name": "postgresVersion",
                        "description": "Target PostgreSQL version for upgrade"
                    },
                    "app_version": {
                        "type": "string",
                        "x-ballerina-name": "appVersion",
                        "description": "Target application version for upgrade"
                    },
                    "release_channel": {
                        "type": "string",
                        "enum": [
                            "internal",
                            "alpha",
                            "beta",
                            "ga",
                            "withdrawn",
                            "preview"
                        ],
                        "x-ballerina-name": "releaseChannel",
                        "description": "Release channel type for the target upgrade version"
                    }
                },
                "description": "Available target versions for project upgrade"
            }
        },
        "securitySchemes": {
            "bearer": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}
import ballerina/io;
import ballerinax/ballerina;

configurable string apiKey = ?;
configurable string projectRef = ?;

public function main() returns error? {
    ballerina:Client ballerinaClient = check new ({
        auth: {
            token: apiKey
        }
    });

    // Step 1: Create a new feature branch from the main branch
    io:println("Creating feature branch for database migration...");
    CreateBranchBody createBranchPayload = {
        branchName: "feature/database-migration-v2"
    };
    
    BranchResponse branchResponse = check ballerinaClient->/v1/projects/[projectRef]/branches.post(createBranchPayload);
    io:println("Feature branch created successfully:");
    io:println("Branch Name: " + branchResponse.gitBranch.toString());
    io:println("Created At: " + branchResponse.createdAt);
    io:println("Is Default: " + branchResponse.isDefault.toString());

    // Step 2: Push local changes to the remote feature branch
    io:println("\nPushing local changes to remote feature branch...");
    BranchActionBody pushPayload = {
        migrationVersion: "v2.1.0"
    };
    
    BranchUpdateResponse pushResponse = check ballerinaClient->/v1/branches/["feature/database-migration-v2"]/push.post(pushPayload);
    io:println("Changes pushed successfully:");
    io:println("Status: " + pushResponse.message);
    io:println("Workflow Run ID: " + pushResponse.workflowRunId);

    // Step 3: Merge the feature branch back into the main branch
    io:println("\nMerging feature branch into main branch...");
    BranchActionBody mergePayload = {
        migrationVersion: "v2.1.0"
    };
    
    BranchUpdateResponse mergeResponse = check ballerinaClient->/v1/branches/["feature/database-migration-v2"]/merge.post(mergePayload);
    io:println("Feature branch merged successfully:");
    io:println("Status: " + mergeResponse.message);
    io:println("Workflow Run ID: " + mergeResponse.workflowRunId);

    io:println("\nDatabase migration workflow completed successfully!");
}
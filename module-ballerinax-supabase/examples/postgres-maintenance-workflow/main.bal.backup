import ballerina/io;
import ballerinax/supabase;

configurable string supabaseUrl = ?;
configurable string supabaseKey = ?;
configurable string projectRef = ?;

public function main() returns error? {
    supabase:ConnectionConfig config = {
        auth: {
            token: supabaseKey
        }
    };
    supabase:Client supabaseClient = check new (supabaseUrl, config);

    io:println("=== Starting Database Maintenance Workflow ===");

    // Step 1: Retrieve current database configuration
    io:println("\n1. Retrieving current PostgreSQL configuration...");
    supabase:PostgresConfigResponse currentConfig = check supabaseClient->/v1/projects/[projectRef]/config/database/postgres();
    io:println("Current Configuration:");
    io:println("  Max Connections: ", currentConfig.maxConnections ?: "Not set");
    io:println("  Max Parallel Workers: ", currentConfig.maxParallelWorkers ?: "Not set");
    io:println("  Shared Buffers: ", currentConfig.sharedBuffers ?: "Not set");
    io:println("  Session Replication Role: ", currentConfig.sessionReplicationRole ?: "Not set");

    // Step 2: Check project health status
    io:println("\n2. Checking project health status...");
    supabase:V1GetServicesHealthQueries healthQueries = {
        services: ["db", "pooler", "rest", "auth", "storage"],
        timeoutMs: 30000
    };
    supabase:V1ServiceHealthResponse[] healthResponses = check supabaseClient->/v1/projects/[projectRef]/health(queries = healthQueries);
    
    io:println("Health Status:");
    foreach supabase:V1ServiceHealthResponse response in healthResponses {
        io:println("  Service: ", response.name, " | Healthy: ", response.healthy, " | Status: ", response.status);
        if response.'error != () {
            io:println("    Error: ", response.'error);
        }
    }

    // Check if all critical services are healthy before proceeding
    boolean allHealthy = true;
    foreach supabase:V1ServiceHealthResponse response in healthResponses {
        if !response.healthy {
            allHealthy = false;
            break;
        }
    }

    if !allHealthy {
        io:println("\nWarning: Some services are not healthy. Proceeding with caution...");
    } else {
        io:println("\nAll services are healthy. Safe to proceed with configuration updates.");
    }

    // Step 3: Update PostgreSQL configuration with optimized settings
    io:println("\n3. Updating PostgreSQL configuration with optimized settings...");
    supabase:UpdatePostgresConfigBody updateConfig = {
        maxParallelWorkers: 8,
        sharedBuffers: "256MB",
        sessionReplicationRole: "origin"
    };

    supabase:PostgresConfigResponse updatedConfig = check supabaseClient->/v1/projects/[projectRef]/config/database/postgres.put(updateConfig);
    
    io:println("Configuration updated successfully!");
    io:println("Updated Configuration:");
    io:println("  Max Connections: ", updatedConfig.maxConnections ?: "Not set");
    io:println("  Max Parallel Workers: ", updatedConfig.maxParallelWorkers ?: "Not set");
    io:println("  Shared Buffers: ", updatedConfig.sharedBuffers ?: "Not set");
    io:println("  Session Replication Role: ", updatedConfig.sessionReplicationRole ?: "Not set");

    io:println("\n=== Database Maintenance Workflow Completed Successfully ===");
}
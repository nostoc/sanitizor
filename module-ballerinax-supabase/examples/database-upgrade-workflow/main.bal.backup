import ballerina/io;
import ballerina/http;

configurable string accessToken = ?;
configurable string serviceUrl = ?;

public function main() returns error? {
    http:Client supabaseClient = check new(serviceUrl, {
        auth: {
            token: accessToken
        }
    });

    string projectRef = "my-production-project";

    io:println("=== Database Maintenance Workflow ===");
    
    io:println("\n1. Retrieving current PostgreSQL database configuration...");
    json dbConfig = check supabaseClient->/v1/projects/[projectRef]/config/database/postgres();
    io:println("Database Configuration Retrieved:");
    json maxConnections = check dbConfig.maxConnections;
    if maxConnections is int {
        io:println(string `  Max Connections: ${maxConnections}`);
    }
    json maxLocksPerTransaction = check dbConfig.maxLocksPerTransaction;
    if maxLocksPerTransaction is int {
        io:println(string `  Max Locks Per Transaction: ${maxLocksPerTransaction}`);
    }
    json maxParallelWorkers = check dbConfig.maxParallelWorkers;
    if maxParallelWorkers is int {
        io:println(string `  Max Parallel Workers: ${maxParallelWorkers}`);
    }

    io:println("\n2. Checking project upgrade eligibility...");
    json upgradeEligibility = check supabaseClient->/v1/projects/[projectRef]/upgrade/eligibility();
    io:println("Upgrade Eligibility Check Results:");
    json targetVersionsJson = check upgradeEligibility.targetUpgradeVersions;
    json[] targetVersions = <json[]>targetVersionsJson;
    io:println(string `  Available Target Versions: ${targetVersions.length()}`);
    foreach json targetVersion in targetVersions {
        json postgresVersion = check targetVersion.postgresVersion;
        json appVersion = check targetVersion.appVersion;
        json releaseChannel = check targetVersion.releaseChannel;
        io:println(string `    - PostgreSQL ${postgresVersion} (App: ${appVersion}, Channel: ${releaseChannel})`);
    }
    json unsupportedExtensionsJson = check upgradeEligibility.unsupportedExtensions;
    json[] unsupportedExtensions = <json[]>unsupportedExtensionsJson;
    io:println(string `  Unsupported Extensions: ${unsupportedExtensions.length()}`);
    foreach json extension in unsupportedExtensions {
        string extensionStr = extension.toString();
        io:println(string `    - ${extensionStr}`);
    }
    json userObjectsJson = check upgradeEligibility.userDefinedObjectsInInternalSchemas;
    json[] userObjects = <json[]>userObjectsJson;
    io:println(string `  User Objects in Internal Schemas: ${userObjects.length()}`);

    if targetVersions.length() > 0 {
        io:println("\n3. Initiating database upgrade process...");
        json selectedVersion = targetVersions[0];
        
        json upgradeRequest = {
            targetVersion: check selectedVersion.appVersion,
            releaseChannel: check selectedVersion.releaseChannel
        };

        json upgradeResponse = check supabaseClient->/v1/projects/[projectRef]/upgrade.post(upgradeRequest);
        json trackingId = check upgradeResponse.trackingId;
        json targetVersionValue = check upgradeRequest.targetVersion;
        json releaseChannelValue = check upgradeRequest.releaseChannel;
        io:println("Database Upgrade Initiated Successfully:");
        io:println(string `  Tracking ID: ${trackingId}`);
        io:println(string `  Target Version: ${targetVersionValue}`);
        io:println(string `  Release Channel: ${releaseChannelValue}`);
    } else {
        io:println("\n3. No upgrade versions available - skipping upgrade initiation");
    }

    io:println("\n=== Database Maintenance Workflow Completed ===");
}
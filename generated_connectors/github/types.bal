// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

# Array of string values for branch protection app restrictions
public type ReposownerrepobranchesbranchprotectionrestrictionsappsreposownerrepobranchesbranchprotectionrestrictionsappsOneOf12 string[];

# Repository security and analysis feature configurations
public type SecurityAndAnalysis record {
    # Secret scanning push protection feature settings
    @jsondata:Name {value: "secret_scanning_push_protection"}
    SecurityAndAnalysisAdvancedSecurity secretScanningPushProtection?;
    # Dependabot security updates configuration
    @jsondata:Name {value: "dependabot_security_updates"}
    SecurityAndAnalysisDependabotSecurityUpdates dependabotSecurityUpdates?;
    # Secret scanning feature configuration
    @jsondata:Name {value: "secret_scanning"}
    SecurityAndAnalysisAdvancedSecurity secretScanning?;
    # Advanced security features configuration
    @jsondata:Name {value: "advanced_security"}
    SecurityAndAnalysisAdvancedSecurity advancedSecurity?;
};

# Authentication Token
public type AuthenticationToken record {
    # Describe whether all repositories have been selected or there's a selection involved
    @jsondata:Name {value: "repository_selection"}
    "all"|"selected" repositorySelection?;
    # Single file path restriction for token access
    @jsondata:Name {value: "single_file"}
    string? singleFile?;
    # The time this token expires
    @jsondata:Name {value: "expires_at"}
    string expiresAt;
    # The repositories this token has access to
    Repository[] repositories?;
    # Token permissions object with scope-specific access levels
    record {} permissions?;
    # The token used for authentication
    string token;
};

# Team permission levels for repository access and management
public type TeamPermissions record {
    # Permission to pull/read repository content
    boolean pull;
    # Permission to maintain repository settings and manage issues
    boolean maintain;
    # Full administrative access to the repository
    boolean admin;
    # Permission to triage issues and pull requests
    boolean triage;
    # Permission to push/write to the repository
    boolean push;
};

# SPDX SBOM creation metadata including timestamp and creator tools
public type DependencyGraphSpdxSbomSbomCreationInfo record {
    # The date and time the SPDX document was created
    string created;
    # The tools that were used to generate the SPDX document
    string[] creators;
};

# Code Search Result Item
public type CodeSearchResultItem record {
    # Array of line number ranges where search matches occur in the file
    @jsondata:Name {value: "line_numbers"}
    string[] lineNumbers?;
    # Programming language of the code file, if detected
    string? language?;
    # Minimal Repository
    MinimalRepository repository;
    # SHA hash of the file content
    string sha;
    # API URL for retrieving the file content
    string url;
    # Size of the file in bytes
    @jsondata:Name {value: "file_size"}
    int fileSize?;
    # Timestamp when the file was last modified
    @jsondata:Name {value: "last_modified_at"}
    string lastModifiedAt?;
    # File path within the repository
    string path;
    # Search relevance score for the code result
    decimal score;
    # GitHub web URL for viewing the file
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Details of text matches found in the search result
    @jsondata:Name {value: "text_matches"}
    SearchResultTextMatches textMatches?;
    # Name of the file
    string name;
    # Git URL for accessing the file content
    @jsondata:Name {value: "git_url"}
    string gitUrl;
};

# String representation of a label
public type LabelsOneOf1 string;

# Represents the Queries record for the operation: reactions/list-for-issue
public type ReactionsListForIssueQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content?;
};

# Represents a topic relationship in search results
public type TopicSearchResultItemTopicRelation record {
    # Name of the related topic
    string name?;
    # Unique identifier for the topic relation
    int id?;
    # Unique identifier of the related topic
    @jsondata:Name {value: "topic_id"}
    int topicId?;
    # Type of relationship between topics
    @jsondata:Name {value: "relation_type"}
    string relationType?;
};

# Minimal Repository
public type MinimalRepositoryResponse record {
    # Array of minimal repository objects
    MinimalRepository[] repositories;
    # Total number of repositories found
    @jsondata:Name {value: "total_count"}
    int totalCount;
};

# Parent commit information for a file commit
public type FileCommitCommitParents record {
    # HTML URL to view the parent commit
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # SHA hash of the parent commit
    string sha?;
    # API URL for the parent commit
    string url?;
};

# Information about the seat breakdown and policies set for an organization with a Copilot for Business subscription
public type CopilotOrganizationDetails record {
    # The breakdown of Copilot for Business seats for the organization
    CopilotSeatBreakdown seat_breakdown;
    # The organization policy for allowing or disallowing Copilot to make suggestions that match public code.
    "allow"|"block"|"unconfigured"|"unknown" public_code_suggestions;
    # The organization policy for allowing or disallowing organization members to use Copilot Chat within their editor.
    "enabled"|"disabled"|"unconfigured" copilot_chat?;
    # The mode of assigning new seats.
    "assign_all"|"assign_selected"|"disabled"|"unconfigured" seat_management_setting;
};

# Array of starred repositories
public type StarredRepositoryResponseStarredRepositoryResponseAnyOf12 Repository[];

# Removed from Project Issue Event
public type RemovedFromProjectIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the project removal event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed the project removal action
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Timestamp when the project removal event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the project removal event
    int id;
    # Type of event that occurred
    string event;
    # SHA of the commit associated with the project removal event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for the project removal event
    string url;
    # Project card details associated with the removal event
    @jsondata:Name {value: "project_card"}
    AddedToProjectIssueEventProjectCard projectCard?;
    # Global node identifier for the project removal event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# A GitHub App that is providing a custom deployment protection rule
public type CustomDeploymentRuleApp record {
    # The URL for the endpoint to get details about the app
    @jsondata:Name {value: "integration_url"}
    string integrationUrl;
    # The unique identifier of the deployment protection rule integration
    int id;
    # The slugified name of the deployment protection rule integration
    string slug;
    # The node ID for the deployment protection rule integration
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Repository IDs selected for user codespace secret access
public type UsercodespacessecretssecretNameSelectedRepositoryIds SelectedRepositoryIdsAnyOf1|SelectedRepositoryIdsSelectedRepositoryIdsAnyOf12;

# The status of a commit
public type Status record {
    # A GitHub user
    NullableSimpleUser? creator;
    # URL of the avatar image for the status
    @jsondata:Name {value: "avatar_url"}
    string? avatarUrl;
    # Timestamp when the status was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # URL to view detailed status information
    @jsondata:Name {value: "target_url"}
    string? targetUrl;
    # A string label to differentiate this status from the status of other systems
    string context;
    # A short description of the status
    string? description;
    # The time that the status was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The unique identifier of the status
    int id;
    # The state of the status
    string state;
    # The target URL to associate with this status
    string url;
    # The GraphQL node ID of the status
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Api Overview
public type ApiOverview record {
    # SSH key fingerprints for GitHub's SSH keys
    @jsondata:Name {value: "ssh_key_fingerprints"}
    ApiOverviewSshKeyFingerprints sshKeyFingerprints?;
    # IP addresses for the GitHub Importer service
    string[] importer?;
    # Whether password authentication is verifiable
    @jsondata:Name {value: "verifiable_password_authentication"}
    boolean verifiablePasswordAuthentication;
    # GitHub API service domains for various features and services
    ApiOverviewDomains domains?;
    # IP addresses for GitHub Packages service
    string[] packages?;
    # IP addresses for GitHub Enterprise Importer service
    @jsondata:Name {value: "github_enterprise_importer"}
    string[] githubEnterpriseImporter?;
    # Public SSH keys for GitHub
    @jsondata:Name {value: "ssh_keys"}
    string[] sshKeys?;
    # IP addresses for Git operations
    string[] git?;
    # IP addresses for GitHub Pages service
    string[] pages?;
    # Array of IP addresses for GitHub's web interface
    string[] web?;
    # Array of IP addresses for GitHub's REST API endpoints
    string[] api?;
    # Array of IP addresses for GitHub webhook deliveries
    string[] hooks?;
    # Array of IP addresses for GitHub Actions runners
    string[] actions?;
    # Array of IP addresses for Dependabot service
    string[] dependabot?;
};

# Represents the Queries record for the operation: activity/list-watchers-for-repo
public type ActivityListWatchersForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for granting GitHub Copilot access to selected users
public type BillingSelectedUsersBody record {
    # The usernames of the organization members to be granted access to GitHub Copilot
    @jsondata:Name {value: "selected_usernames"}
    string[] selectedUsernames;
};

# Request body for adding a public SSH key to user account
public type UserKeysBody record {
    # A descriptive name for the new key
    string title?;
    # The public SSH key to add to your GitHub account
    @constraint:String {pattern: re `^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) `}
    string 'key;
};

# Review Requested Issue Event
public type ReviewRequestedIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the review request event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # Team that was requested to review the pull request
    @jsondata:Name {value: "requested_team"}
    Team requestedTeam?;
    # GitHub App that performed the review request action
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # User who requested the review
    @jsondata:Name {value: "review_requester"}
    SimpleUser reviewRequester;
    # Timestamp when the review request event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # User who was requested to review the pull request
    @jsondata:Name {value: "requested_reviewer"}
    SimpleUser requestedReviewer?;
    # Unique identifier for the review request event
    int id;
    # Type of event that occurred
    string event;
    # The SHA of the commit associated with the review request event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # The API URL of the review requested issue event
    string url;
    # The GraphQL node ID of the review requested issue event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Array of user email addresses
public type UseremailsuseremailsOneOf112 string[];

# Repository name targeting conditions for ruleset enforcement
public type RepositoryRulesetConditionsRepositoryNameTargetRepositoryName record {
    # Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories
    string[] include?;
    # Whether renaming of target repositories is prevented
    boolean protected?;
    # Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match
    string[] exclude?;
};

# Represents the Queries record for the operation: repos/get-org-rule-suites
public type ReposGetOrgRuleSuitesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned
    @http:Query {name: "actor_name"}
    string actorName?;
    # Page number of the results to fetch
    int page = 1;
    # The name of the repository to filter on. When specified, only rule evaluations from this repository will be returned
    @http:Query {name: "repository_name"}
    int repositoryName?;
    # The time period to filter by.
    # 
    # For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for insights that occurred in the past 7 days (168 hours)
    @http:Query {name: "time_period"}
    "hour"|"day"|"week"|"month" timePeriod = "day";
    # The rule results to filter on. When specified, only suites with this result will be returned
    @http:Query {name: "rule_suite_result"}
    "pass"|"fail"|"bypass"|"all" ruleSuiteResult = "all";
};

# Rate limit information for various GitHub API resources
public type RateLimitOverviewResources record {
    # API rate limiting information including usage and reset time
    RateLimit core;
    # API rate limiting information including usage and reset time
    RateLimit scim?;
    # API rate limiting information including usage and reset time
    RateLimit search;
    # Rate limit details for source import operations
    @jsondata:Name {value: "source_import"}
    RateLimit sourceImport?;
    # Rate limit details for GitHub Actions runner registration
    @jsondata:Name {value: "actions_runner_registration"}
    RateLimit actionsRunnerRegistration?;
    # API rate limiting information including usage and reset time
    RateLimit graphql?;
    # Rate limit details for code scanning upload operations
    @jsondata:Name {value: "code_scanning_upload"}
    RateLimit codeScanningUpload?;
    # Rate limit details for integration manifest operations
    @jsondata:Name {value: "integration_manifest"}
    RateLimit integrationManifest?;
    # Rate limit information for code search API endpoints
    @jsondata:Name {value: "code_search"}
    RateLimit codeSearch?;
    # Rate limit information for dependency snapshots API endpoints
    @jsondata:Name {value: "dependency_snapshots"}
    RateLimit dependencySnapshots?;
};

# Represents the Queries record for the operation: activity/list-received-events-for-user
public type ActivityListReceivedEventsForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# A GitHub repository view for Classroom
public type SimpleClassroomRepository record {
    # Whether the repository is private
    boolean 'private;
    # The full, globally unique name of the repository
    @jsondata:Name {value: "full_name"}
    string fullName;
    # The URL to view the repository on GitHub.com
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # The default branch for the repository
    @jsondata:Name {value: "default_branch"}
    string defaultBranch;
    # A unique identifier of the repository
    int id;
    # The GraphQL identifier of the repository
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: orgs/list-pat-grant-requests
public type OrgsListPatGrantRequestsQueries record {
    # A list of owner usernames to use to filter the results
    @constraint:Array {maxLength: 10}
    string[] owner?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    @http:Query {name: "last_used_before"}
    string lastUsedBefore?;
    # Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    @http:Query {name: "last_used_after"}
    string lastUsedAfter?;
    # The permission to use to filter the results
    string permission?;
    # Page number of the results to fetch
    int page = 1;
    # The property by which to sort the results
    "created_at" sort = "created_at";
    # The name of the repository to use to filter the results
    string repository?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# User Search Result Item
public type UserSearchResultItemResponse record {
    # Total number of users matching the search query
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Whether the search results are incomplete due to timeout
    @jsondata:Name {value: "incomplete_results"}
    boolean incompleteResults;
    # Array of user search result items
    UserSearchResultItem[] items;
};

# Request body for creating a check suite in a repository
public type RepoCheckSuitesBody record {
    # The sha of the head commit
    @jsondata:Name {value: "head_sha"}
    string headSha;
};

# An artifact
public type ArtifactResponse record {
    # Total number of artifacts available
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of artifact objects
    Artifact[] artifacts;
};

# Array of app names for branch protection restrictions
public type ReposownerrepobranchesbranchprotectionrestrictionsappsreposownerrepobranchesbranchprotectionrestrictionsappsOneOf112 string[];

# Array of labels to add to an issue
@constraint:Array {minLength: 1}
public type ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf11234 ReposownerrepoissuesissueNumberlabelsLabels[];

# The name of the status checks
public type ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsreposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf112 string[];

# Vulnerability information for creating a repository security advisory
public type RepositoryAdvisoryCreateVulnerabilities record {|
    # The name of the package affected by the vulnerability
    RepositoryAdvisoryCreatePackage package;
    # The functions in the package that are affected
    @jsondata:Name {value: "vulnerable_functions"}
    string[]? vulnerableFunctions?;
    # The range of the package versions affected by the vulnerability
    @jsondata:Name {value: "vulnerable_version_range"}
    string? vulnerableVersionRange?;
    # The package version(s) that resolve the vulnerability
    @jsondata:Name {value: "patched_versions"}
    string? patchedVersions?;
|};

public type DependencyGraphDiffInner_vulnerabilities record {
    # The severity level of the security vulnerability
    string severity;
    # The GitHub Security Advisory (GHSA) identifier
    string advisory_ghsa_id;
    # Brief summary of the security advisory
    string advisory_summary;
    # URL to the full security advisory details
    string advisory_url;
};

# Request body for creating a pull request
public type RepoPullsBody record {
    # The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`
    string head;
    # An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified
    int issue?;
    # The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization
    @jsondata:Name {value: "head_repo"}
    string headRepo?;
    # Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more
    boolean draft?;
    # Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request
    @jsondata:Name {value: "maintainer_can_modify"}
    boolean maintainerCanModify?;
    # The title of the new pull request. Required unless `issue` is specified
    string title?;
    # The contents of the pull request
    string body?;
    # The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository
    string base;
};

# Code of Conduct Simple
public type NullableCodeOfConductSimple record {
    # URL to the code of conduct file in the repository
    @jsondata:Name {value: "html_url"}
    string? htmlUrl;
    # Display name of the code of conduct
    string name;
    # API URL for the code of conduct resource
    string url;
    # Unique identifier key for the code of conduct
    string 'key;
};

# Key/value pairs to provide settings for this webhook
public type ReposownerrepohooksConfig record {
    # Content type for webhook payload delivery
    @jsondata:Name {value: "content_type"}
    WebhookConfigContentType contentType?;
    # Whether to verify SSL certificates for webhook delivery
    @jsondata:Name {value: "insecure_ssl"}
    WebhookConfigInsecureSsl insecureSsl?;
    # Digest algorithm used for webhook payload verification
    string digest?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers)
    WebhookConfigSecret secret?;
    # The URL to which the payloads will be delivered
    WebhookConfigUrl url?;
    # Authentication token for webhook configuration
    string token?;
};

# View Traffic
public type ViewTraffic record {
    # Total number of views for the repository
    int count;
    # Number of unique visitors viewing the repository
    int uniques;
    # Array of traffic data entries with timestamps and view counts
    Traffic[] views;
};

# Represents the Queries record for the operation: dependabot/list-alerts-for-enterprise
public type DependabotListAlertsForEnterpriseQueries record {
    # A comma-separated list of severities. If specified, only alerts with these severities will be returned.
    # 
    # Can be: `low`, `medium`, `high`, `critical`
    string severity?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # A comma-separated list of package names. If specified, only alerts for these packages will be returned
    string package?;
    # A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
    # 
    # Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
    string ecosystem?;
    # **Deprecated**. The number of results per page (max 100), starting from the last matching result.
    # This parameter must not be used in combination with `first`.
    # Instead, use `per_page` in combination with `before` to fetch the last page of results
    @constraint:Int {minValue: 1, maxValue: 100}
    int last?;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor
    string before?;
    # The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned
    "development"|"runtime" scope?;
    # A comma-separated list of states. If specified, only alerts with these states will be returned.
    # 
    # Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
    string state?;
    # The property by which to sort the results.
    # `created` means when the alert was created.
    # `updated` means when the alert's state last changed
    "created"|"updated" sort = "created";
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor
    string after?;
    # **Deprecated**. The number of results per page (max 100), starting from the first matching result.
    # This parameter must not be used in combination with `last`.
    # Instead, use `per_page` in combination with `after` to fetch the first page of results
    @constraint:Int {minValue: 1, maxValue: 100}
    int first = 30;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Represents the Queries record for the operation: meta/get-octocat
public type MetaGetOctocatQueries record {
    # The words to show in Octocat's speech bubble
    string s?;
};

# A description of the machine powering a codespace
public type CodespaceMachineResponse record {
    # Total number of available codespace machines
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of available codespace machine configurations
    CodespaceMachine[] machines;
};

# Commit Comparison
public type CommitComparison record {
    # Base commit object used for comparison
    @jsondata:Name {value: "base_commit"}
    Commit baseCommit;
    # Number of commits the base is behind the head
    @jsondata:Name {value: "behind_by"}
    int behindBy;
    # URL to view the diff between compared commits
    @jsondata:Name {value: "diff_url"}
    string diffUrl;
    # Number of commits the base is ahead of the head
    @jsondata:Name {value: "ahead_by"}
    int aheadBy;
    # Common ancestor commit for the comparison
    @jsondata:Name {value: "merge_base_commit"}
    Commit mergeBaseCommit;
    # API endpoint URL for the commit comparison
    string url;
    # Total number of commits in the comparison
    @jsondata:Name {value: "total_commits"}
    int totalCommits;
    # URL to download the comparison as a patch file
    @jsondata:Name {value: "patch_url"}
    string patchUrl;
    # GitHub web interface URL for the commit comparison
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Array of commits included in the comparison
    Commit[] commits;
    # Array of files changed in the comparison
    DiffEntry[] files?;
    # Permanent URL for the commit comparison with full SHA hashes
    @jsondata:Name {value: "permalink_url"}
    string permalinkUrl;
    # Comparison status: diverged, ahead, behind, or identical
    "diverged"|"ahead"|"behind"|"identical" status;
};

# Represents the Queries record for the operation: users/list-ssh-signing-keys-for-authenticated-user
public type UsersListSshSigningKeysForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents a file or directory item within a repository directory
public type ContentDirectoryInner record {
    # File or directory path within the repository
    string path;
    # Size of the file or directory in bytes
    int size;
    # Related URLs for the content item
    ContentDirectoryInner__links _links;
    # HTML URL for viewing the content item in GitHub's web interface
    @jsondata:Name {value: "html_url"}
    string? htmlUrl;
    # Name of the file or directory
    string name;
    # Direct download URL for the file content
    @jsondata:Name {value: "download_url"}
    string? downloadUrl;
    # Type of content item: dir, file, submodule, or symlink
    "dir"|"file"|"submodule"|"symlink" 'type;
    # Git API URL for accessing the content item
    @jsondata:Name {value: "git_url"}
    string? gitUrl;
    # SHA hash identifier for the content item
    string sha;
    # Base64-encoded content of the file
    string content?;
    # API URL for accessing the content item
    string url;
};

# Details of a deployment branch or tag policy
public type DeploymentBranchPolicy record {
    # The name pattern that branches or tags must match in order to deploy to the environment
    string name?;
    # The unique identifier of the branch or tag policy
    int id?;
    # Whether this rule targets a branch or tag
    "branch"|"tag" 'type?;
    # Global node ID for the deployment branch policy
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# A team's access to a project
public type TeamProject record {
    # API URL for accessing project columns
    @jsondata:Name {value: "columns_url"}
    string columnsUrl;
    # A GitHub user
    SimpleUser creator;
    # Whether the project is private or not. Only present when owner is an organization
    boolean 'private?;
    # The organization permission for this project. Only present when owner is an organization
    @jsondata:Name {value: "organization_permission"}
    string organizationPermission?;
    # Timestamp when the team project was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Description or body text of the team project
    string? body;
    # API URL for the team project
    string url;
    # API URL for the project owner
    @jsondata:Name {value: "owner_url"}
    string ownerUrl;
    # Unique number identifier for the team project
    int number;
    # Timestamp when the team project was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Team permissions for project access (read, write, admin)
    TeamProjectPermissions permissions;
    # HTML URL of the team project
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Name of the team project
    string name;
    # Unique identifier of the team project
    int id;
    # Current state of the team project
    string state;
    # GraphQL node ID of the team project
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: repos/list-commits
public type ReposListCommitsQueries record {
    # Only commits containing this file path will be returned
    string path?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # GitHub username or email address to use to filter by commit committer
    string committer?;
    # GitHub username or email address to use to filter by commit author
    string author?;
    # Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string until?;
    # Page number of the results to fetch
    int page = 1;
    # SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`)
    string sha?;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Request body schema for updating a pull request review
public type ReviewsreviewIdBody record {
    # The body text of the pull request review
    string body;
};

# Head branch information for a simplified pull request
public type PullRequestSimpleHead record {
    # Reference name of the head branch
    string ref;
    # A repository on GitHub
    Repository repo;
    # Label of the head branch including repository owner
    string label;
    # SHA hash of the head commit
    string sha;
    # A GitHub user
    NullableSimpleUser? user;
};

# Marketplace Listing Plan
public type MarketplaceListingPlan record {
    # Whether the marketplace plan offers a free trial
    @jsondata:Name {value: "has_free_trial"}
    boolean hasFreeTrial;
    # API URL for accounts subscribed to this marketplace plan
    @jsondata:Name {value: "accounts_url"}
    string accountsUrl;
    # Description of the marketplace listing plan
    string description;
    # API URL for the marketplace listing plan
    string url;
    # Name of the pricing unit for the plan
    @jsondata:Name {value: "unit_name"}
    string? unitName;
    # Sequential number identifier for the plan
    int number;
    # Annual price of the plan in cents
    @jsondata:Name {value: "yearly_price_in_cents"}
    int yearlyPriceInCents;
    # Display name of the marketplace plan
    string name;
    # Unique identifier for the marketplace plan
    int id;
    # Monthly price of the plan in cents
    @jsondata:Name {value: "monthly_price_in_cents"}
    int monthlyPriceInCents;
    # Current publication state of the plan
    string state;
    # Pricing model type for the plan
    @jsondata:Name {value: "price_model"}
    "FREE"|"FLAT_RATE"|"PER_UNIT" priceModel;
    # List of feature highlights for the plan
    string[] bullets;
};

# Navigation links for a repository ruleset
public type RepositoryRulesetLinks record {
    # Self-referencing links for a repository ruleset
    RepositoryRulesetLinksSelf self?;
    # HTML link information for repository ruleset
    RepositoryRulesetLinksHtml html?;
};

# Represents the Queries record for the operation: activity/list-public-events
public type ActivityListPublicEventsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Credit information for repository security advisory contributors
public type RepositoryAdvisoryCredits record {
    # The username of the user credited
    string login?;
    # The type of credit the user is receiving
    SecurityAdvisoryCreditTypes 'type?;
};

# Represents the Queries record for the operation: users/list-blocked-by-authenticated-user
public type UsersListBlockedByAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Allow specific users, teams, or apps to bypass pull request requirements
public type ReposownerrepobranchesbranchprotectionRequiredPullRequestReviewsBypassPullRequestAllowances record {
    # The list of team `slug`s allowed to bypass pull request requirements
    string[] teams?;
    # The list of user `login`s allowed to bypass pull request requirements
    string[] users?;
    # The list of app `slug`s allowed to bypass pull request requirements
    string[] apps?;
};

# Represents the Queries record for the operation: repos/list-public
public type ReposListPublicQueries record {
    # A repository ID. Only return repositories with an ID greater than this ID
    int since?;
};

# Represents the Queries record for the operation: actions/list-repo-organization-secrets
public type ActionsListRepoOrganizationSecretsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Full Repository
public type FullRepository record {
    # A repository on GitHub
    Repository parent?;
    # Whether the repository allows forking
    @jsondata:Name {value: "allow_forking"}
    boolean allowForking?;
    # Whether anonymous git access is allowed
    @jsondata:Name {value: "anonymous_access_enabled"}
    boolean anonymousAccessEnabled = true;
    # API URL for repository subscription management
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl;
    # API URL template for repository branches
    @jsondata:Name {value: "branches_url"}
    string branchesUrl;
    # API URL template for repository issue comments
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl;
    # Whether rebase merging is allowed for pull requests in this repository
    @jsondata:Name {value: "allow_rebase_merge"}
    boolean allowRebaseMerge?;
    # API URL to access the repository's subscribers list
    @jsondata:Name {value: "subscribers_url"}
    string subscribersUrl;
    # Complete set of repository permission levels for a user or team
    FullRepositoryPermissions permissions?;
    # Temporary token for cloning private repositories (nullable)
    @jsondata:Name {value: "temp_clone_token"}
    string? tempCloneToken?;
    # API URL template to access repository releases
    @jsondata:Name {value: "releases_url"}
    string releasesUrl;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "squash_merge_commit_message"}
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squashMergeCommitMessage?;
    # Total number of users subscribed to repository notifications
    @jsondata:Name {value: "subscribers_count"}
    int subscribersCount;
    # Unique identifier for the repository
    int id;
    # Whether GitHub Discussions are enabled for this repository
    @jsondata:Name {value: "has_discussions"}
    boolean hasDiscussions;
    # Total number of times this repository has been forked
    int forks;
    # API URL template to access Git references in the repository
    @jsondata:Name {value: "git_refs_url"}
    string gitRefsUrl;
    # SSH URL for cloning the repository
    @jsondata:Name {value: "ssh_url"}
    string sshUrl;
    # Full name of the repository in owner/repo format
    @jsondata:Name {value: "full_name"}
    string fullName;
    # The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0
    int size;
    # Repository used as template for this repository (nullable)
    @jsondata:Name {value: "template_repository"}
    NullableRepository? templateRepository?;
    # API URL to access programming languages used in the repository
    @jsondata:Name {value: "languages_url"}
    string languagesUrl;
    # Web URL to view the repository on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # API URL template to access repository collaborators
    @jsondata:Name {value: "collaborators_url"}
    string collaboratorsUrl;
    # Git clone URL for the repository
    @jsondata:Name {value: "clone_url"}
    string cloneUrl;
    # Default branch name for the repository
    @jsondata:Name {value: "default_branch"}
    string defaultBranch;
    # API URL for repository webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # API URL template for repository git trees
    @jsondata:Name {value: "trees_url"}
    string treesUrl;
    # Whether the repository has downloads enabled
    @jsondata:Name {value: "has_downloads"}
    boolean hasDownloads?;
    # Repository creation timestamp
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Number of watchers for the repository
    int watchers;
    # API URL for repository deployments
    @jsondata:Name {value: "deployments_url"}
    string deploymentsUrl;
    # API URL template for repository deploy keys
    @jsondata:Name {value: "keys_url"}
    string keysUrl;
    # Whether the repository is archived
    boolean archived;
    # Whether the repository has wiki enabled
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki;
    # Repository last update timestamp
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Returns whether or not this repository disabled
    boolean disabled;
    # API URL template for comparing repository branches
    @jsondata:Name {value: "compare_url"}
    string compareUrl;
    # API URL template for repository git commits
    @jsondata:Name {value: "git_commits_url"}
    string gitCommitsUrl;
    # Array of topics associated with the repository
    string[] topics?;
    # Whether to allow updating pull request branches
    @jsondata:Name {value: "allow_update_branch"}
    boolean allowUpdateBranch?;
    # API URL template for accessing git tags
    @jsondata:Name {value: "git_tags_url"}
    string gitTagsUrl;
    # API URL for repository merges endpoint
    @jsondata:Name {value: "merges_url"}
    string mergesUrl;
    # API URL for the repository
    string url;
    # API URL template for repository contents
    @jsondata:Name {value: "contents_url"}
    string contentsUrl;
    # API URL template for repository issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # Whether to use PR title as default for squash commits
    @jsondata:Name {value: "use_squash_pr_title_as_default"}
    boolean useSquashPrTitleAsDefault?;
    # A GitHub user
    NullableSimpleUser? organization?;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "merge_commit_message"}
    "PR_BODY"|"PR_TITLE"|"BLANK" mergeCommitMessage?;
    # API URL template for repository assignees
    @jsondata:Name {value: "assignees_url"}
    string assigneesUrl;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)
    @jsondata:Name {value: "squash_merge_commit_title"}
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squashMergeCommitTitle?;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues"}
    int openIssues;
    # GraphQL node identifier for the repository
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Number of users who have starred the repository
    @jsondata:Name {value: "stargazers_count"}
    int stargazersCount;
    # Whether the repository is a template repository
    @jsondata:Name {value: "is_template"}
    boolean isTemplate?;
    # Timestamp of the last push to the repository
    @jsondata:Name {value: "pushed_at"}
    string pushedAt;
    # Primary programming language of the repository
    string? language;
    # A repository on GitHub
    Repository 'source?;
    # API URL template for repository labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # SVN URL for the repository
    @jsondata:Name {value: "svn_url"}
    string svnUrl;
    # Name of the repository's master branch
    @jsondata:Name {value: "master_branch"}
    string masterBranch?;
    # URL template for downloading repository archives
    @jsondata:Name {value: "archive_url"}
    string archiveUrl;
    # Whether merge commits are allowed for pull requests
    @jsondata:Name {value: "allow_merge_commit"}
    boolean allowMergeCommit?;
    # API URL for the repository's forks
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # The repository visibility: public, private, or internal
    string visibility?;
    # URL template for commit statuses API
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # Number of repositories in the network
    @jsondata:Name {value: "network_count"}
    int networkCount;
    # License Simple
    NullableLicenseSimple? license;
    # Whether auto-merge is enabled for pull requests
    @jsondata:Name {value: "allow_auto_merge"}
    boolean allowAutoMerge?;
    # Name of the repository
    string name;
    # URL template for the repository's pull requests API
    @jsondata:Name {value: "pulls_url"}
    string pullsUrl;
    # API URL for the repository's tags
    @jsondata:Name {value: "tags_url"}
    string tagsUrl;
    # Whether the repository is private
    boolean 'private;
    # API URL for the repository's contributors
    @jsondata:Name {value: "contributors_url"}
    string contributorsUrl;
    # URL template for repository notifications API
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues_count"}
    int openIssuesCount;
    # A short description of the repository
    string? description;
    # Whether the repository has projects enabled
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects;
    # The default value for a merge commit title.
    # 
    #   - `PR_TITLE` - default to the pull request's title.
    #   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)
    @jsondata:Name {value: "merge_commit_title"}
    "PR_TITLE"|"MERGE_MESSAGE" mergeCommitTitle?;
    # API URL template for accessing repository comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # API URL for accessing repository stargazers
    @jsondata:Name {value: "stargazers_url"}
    string stargazersUrl;
    # Whether branches are automatically deleted when pull requests are merged
    @jsondata:Name {value: "delete_branch_on_merge"}
    boolean deleteBranchOnMerge?;
    # Git protocol URL for cloning the repository
    @jsondata:Name {value: "git_url"}
    string gitUrl;
    # Whether the repository has GitHub Pages enabled
    @jsondata:Name {value: "has_pages"}
    boolean hasPages;
    # A GitHub user
    SimpleUser owner;
    # Whether squash merging is allowed for pull requests
    @jsondata:Name {value: "allow_squash_merge"}
    boolean allowSquashMerge?;
    # API URL template for accessing repository commits
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # API URL template for accessing repository git blobs
    @jsondata:Name {value: "blobs_url"}
    string blobsUrl;
    # API URL for accessing repository downloads
    @jsondata:Name {value: "downloads_url"}
    string downloadsUrl;
    # Whether the repository has issues enabled
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues;
    # Whether contributors are required to sign off on web-based commits
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired?;
    # The code of conduct for the repository
    @jsondata:Name {value: "code_of_conduct"}
    CodeOfConductSimple codeOfConduct?;
    # URL of the repository this is a mirror of
    @jsondata:Name {value: "mirror_url"}
    string? mirrorUrl;
    # URL template for accessing repository milestones
    @jsondata:Name {value: "milestones_url"}
    string milestonesUrl;
    # URL for accessing repository teams
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Security and analysis settings for the repository
    @jsondata:Name {value: "security_and_analysis"}
    SecurityAndAnalysis? securityAndAnalysis?;
    # Indicates whether the repository is a fork
    boolean 'fork;
    # URL for accessing repository events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # URL template for accessing repository issue events
    @jsondata:Name {value: "issue_events_url"}
    string issueEventsUrl;
    # Number of users watching the repository
    @jsondata:Name {value: "watchers_count"}
    int watchersCount;
    # Homepage URL for the repository
    string? homepage;
    # Number of forks of the repository
    @jsondata:Name {value: "forks_count"}
    int forksCount;
};

# Required status check contexts for branch protection
public type ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf11 record {
    # The name of the status checks
    string[] contexts;
};

# Required status check contexts for branch protection
public type ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf12 record {
    # The name of the status checks
    string[] contexts;
};

# Array of app names for branch protection restrictions
public type ReposownerrepobranchesbranchprotectionrestrictionsappsreposownerrepobranchesbranchprotectionrestrictionsappsOneOf122 string[];

# Hypermedia links for pull request review comment
public type PullRequestReviewCommentLinks record {
    # Link to the associated pull request
    @jsondata:Name {value: "pull_request"}
    PullRequestReviewCommentLinksPullRequest pullRequest;
    # Self-referential links for a pull request review comment
    PullRequestReviewCommentLinksSelf self;
    # HTML link information for pull request review comments
    PullRequestReviewCommentLinksHtml html;
};

# Abbreviated commit information for a branch
public type BranchShortCommit record {
    # The SHA hash of the commit
    string sha;
    # The API URL for the commit
    string url;
};

# The duration of the interaction restriction. Default: `one_day`
public type InteractionExpiry "one_day"|"three_days"|"one_week"|"one_month"|"six_months";

# Detailed repository rule combining non-fast-forward and ruleset info
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf123456789 record {
    *RepositoryRuleNonFastForward;
    *RepositoryRuleRulesetInfo;
};

# Common Weakness Enumeration identifiers
public type Cwes CwesOneOf1|CwesCwesOneOf12;

# User email address string
public type UseremailsuseremailsuseremailsOneOf1123 string;

# Whether GitHub Actions can approve pull requests. Enabling this can be a security risk
public type ActionsCanApprovePullRequestReviews boolean;

# Severity of a code scanning alert
public type CodeScanningAlertSeverity "critical"|"high"|"medium"|"low"|"warning"|"note"|"error";

# Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
public type ReposownerrepoSecurityAndAnalysisSecretScanningPushProtection record {
    # Can be `enabled` or `disabled`
    string status?;
};

# GitHub Pages event payload data
public type EventPayloadPages record {
    # Summary of the pages event
    string? summary?;
    # Name of the GitHub Pages site
    @jsondata:Name {value: "page_name"}
    string pageName?;
    # HTML URL of the GitHub Pages site
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # Action performed on the GitHub Pages site
    string action?;
    # The title of the page
    string title?;
    # The SHA hash of the page commit
    string sha?;
};

# Represents the Queries record for the operation: teams/list-discussions-in-org
public type TeamsListDiscussionsInOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Pinned discussions only filter
    string pinned?;
    # Page number of the results to fetch
    int page = 1;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Branch protection user restrictions configuration
public type ReposownerrepobranchesbranchprotectionrestrictionsusersOneOf11 record {
    # The username for users
    string[] users;
};

# Represents the Queries record for the operation: issues/list-for-repo
public type IssuesListForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The user that created the issue
    string creator?;
    # If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned
    string milestone?;
    # Indicates the state of the issues to return
    "open"|"closed"|"all" state = "open";
    # Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user
    string assignee?;
    # What to sort results by
    "created"|"updated"|"comments" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # A user that's mentioned in the issue
    string mentioned?;
    # A list of comma separated label names. Example: `bug,ui,@high`
    string labels?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Branch protection user restrictions configuration
public type ReposownerrepobranchesbranchprotectionrestrictionsusersOneOf12 record {
    # The username for users
    string[] users;
};

# Represents the Queries record for the operation: codespaces/list-in-repository-for-authenticated-user
public type CodespacesListInRepositoryForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for adding custom labels to a runner
public type RunnerIdLabelsBody1 record {
    # The names of the custom labels to add to the runner
    @constraint:Array {maxLength: 100, minLength: 1}
    string[] labels;
};

# Request body for re-running a workflow job
public type JobIdRerunBody record {
    # Whether to enable debug logging for the re-run
    @jsondata:Name {value: "enable_debug_logging"}
    boolean enableDebugLogging = false;
};

# Deployment protection rule
public type DeploymentProtectionRule record {
    # A GitHub App that is providing a custom deployment protection rule
    CustomDeploymentRuleApp app;
    # The unique identifier for the deployment protection rule
    int id;
    # Whether the deployment protection rule is enabled for the environment
    boolean enabled;
    # The node ID for the deployment protection rule
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# A diff of the dependencies between two commits
public type DependencyGraphDiff DependencyGraphDiffInner[];

# Request body for setting Actions permissions
public type ActionsPermissionsBody1 record {
    # Which Actions are allowed to run
    @jsondata:Name {value: "allowed_actions"}
    AllowedActions allowedActions?;
    # Whether GitHub Actions is enabled on the repository
    ActionsEnabled enabled;
};

# Health check results for an alternate Pages domain
public type PagesHealthCheckAltDomain record {
    # Reason for the health check result
    string? reason?;
    # Whether the domain resolves to a Cloudflare IP
    @jsondata:Name {value: "is_cloudflare_ip"}
    boolean? isCloudflareIp?;
    # Whether the domain enforces HTTPS
    @jsondata:Name {value: "enforces_https"}
    boolean enforcesHttps?;
    # Whether the domain points to GitHub Pages IP
    @jsondata:Name {value: "is_pointed_to_github_pages_ip"}
    boolean? isPointedToGithubPagesIp?;
    # Whether the domain is served by GitHub Pages
    @jsondata:Name {value: "is_served_by_pages"}
    boolean? isServedByPages?;
    # Whether the domain resolves to a Fastly IP
    @jsondata:Name {value: "is_fastly_ip"}
    boolean? isFastlyIp?;
    # Whether the domain is an apex domain
    @jsondata:Name {value: "is_apex_domain"}
    boolean isApexDomain?;
    # The hostname of the alternative domain
    string host?;
    # Whether the domain responds to HTTPS requests
    @jsondata:Name {value: "responds_to_https"}
    boolean respondsToHttps?;
    # Whether the domain has a CNAME record pointing to pages.github.com
    @jsondata:Name {value: "is_cname_to_pages_dot_github_dot_com"}
    boolean? isCnameToPagesDotGithubDotCom?;
    # Whether the domain has an A record configured
    @jsondata:Name {value: "is_a_record"}
    boolean? isaRecord?;
    # Whether the domain has a CNAME record pointing to a GitHub user domain
    @jsondata:Name {value: "is_cname_to_github_user_domain"}
    boolean? isCnameToGithubUserDomain?;
    # Whether the domain is a GitHub Pages domain
    @jsondata:Name {value: "is_pages_domain"}
    boolean isPagesDomain?;
    # Whether the domain points to an old GitHub Pages IP address
    @jsondata:Name {value: "is_old_ip_address"}
    boolean? isOldIpAddress?;
    # Whether the domain has a CNAME record
    @jsondata:Name {value: "has_cname_record"}
    boolean? hasCnameRecord?;
    # Whether the domain has a CNAME record pointing to Fastly
    @jsondata:Name {value: "is_cname_to_fastly"}
    boolean? isCnameToFastly?;
    # Whether the domain's DNS resolves successfully
    @jsondata:Name {value: "dns_resolves"}
    boolean dnsResolves?;
    # Whether the domain is eligible for HTTPS
    @jsondata:Name {value: "is_https_eligible"}
    boolean? isHttpsEligible?;
    # Error message related to Certificate Authority Authorization (CAA)
    @jsondata:Name {value: "caa_error"}
    string? caaError?;
    # Whether the domain is proxied through a CDN or proxy service
    @jsondata:Name {value: "is_proxied"}
    boolean? isProxied?;
    # Whether the domain is valid and properly formatted
    @jsondata:Name {value: "is_valid_domain"}
    boolean isValidDomain?;
    # Whether the domain has non-GitHub Pages IP addresses present
    @jsondata:Name {value: "is_non_github_pages_ip_present"}
    boolean? isNonGithubPagesIpPresent?;
    # The URI of the domain being checked
    string uri?;
    # Whether the domain should be configured as an A record
    @jsondata:Name {value: "should_be_a_record"}
    boolean? shouldBeaRecord?;
    # The nameservers configured for the domain
    string nameservers?;
    # Whether MX records are present for the domain
    @jsondata:Name {value: "has_mx_records_present"}
    boolean? hasMxRecordsPresent?;
    # Whether the domain configuration is valid
    @jsondata:Name {value: "is_valid"}
    boolean isValid?;
    # Error message if HTTPS configuration failed
    @jsondata:Name {value: "https_error"}
    string? httpsError?;
};

# Represents the Queries record for the operation: actions/list-workflow-runs-for-repo
public type ActionsListWorkflowRunsForRepoQueries record {
    # Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run
    string actor?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Returns workflow runs with the `check_suite_id` that you specify
    @http:Query {name: "check_suite_id"}
    int checkSuiteId?;
    # Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
    string created?;
    # If `true` pull requests are omitted from the response (empty array)
    @http:Query {name: "exclude_pull_requests"}
    boolean excludePullRequests = false;
    # Page number of the results to fetch
    int page = 1;
    # Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
    string event?;
    # Returns workflow runs associated with a branch. Use the name of the branch of the `push`
    string branch?;
    # Only returns workflow runs that are associated with the specified `head_sha`
    @http:Query {name: "head_sha"}
    string headSha?;
    # Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`
    "completed"|"action_required"|"cancelled"|"failure"|"neutral"|"skipped"|"stale"|"success"|"timed_out"|"in_progress"|"queued"|"requested"|"waiting"|"pending" status?;
};

# Restrictions on who can dismiss pull request reviews on protected branches
public type ProtectedBranchPullRequestReviewDismissalRestrictions record {
    # API URL for managing team dismissal restrictions
    @jsondata:Name {value: "teams_url"}
    string teamsUrl?;
    # The list of teams with review dismissal access
    Team[] teams?;
    # API URL for managing user dismissal restrictions
    @jsondata:Name {value: "users_url"}
    string usersUrl?;
    # The list of users with review dismissal access
    SimpleUser[] users?;
    # API URL for the dismissal restrictions resource
    string url?;
    # The list of apps with review dismissal access
    Integration[] apps?;
};

# Request body for managing outside collaborators
public type OutsideCollaboratorsusernameBody record {
    # When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued
    boolean async = false;
};

# The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
public type AlertDismissedAt string?;

# Represents the Queries record for the operation: repos/get-readme
public type ReposGetReadmeQueries record {
    # The name of the commit/branch/tag. Default: the repository’s default branch
    string ref?;
};

# Common Weakness Enumeration identifier as string
public type CwesOneOf1 string;

# Moved Column in Project Issue Event
public type MovedColumnInProjectIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the column move event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed the column move action
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Timestamp when the column move event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the moved column in project issue event
    int id;
    # Event type identifier for the moved column action
    string event;
    # SHA of the commit associated with the column move event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for the moved column in project issue event
    string url;
    # Project card details associated with the moved column event
    @jsondata:Name {value: "project_card"}
    AddedToProjectIssueEventProjectCard projectCard?;
    # GraphQL node identifier for the moved column event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# The public key used for setting user Codespaces' Secrets
public type CodespacesUserPublicKey record {
    # The identifier for the key
    @jsondata:Name {value: "key_id"}
    string keyId;
    # The Base64 encoded public key
    string 'key;
};

# Request body schema for adding SSH signing keys to user account
public type UserSshSigningKeysBody record {
    # A descriptive name for the new key
    string title?;
    # The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
    @constraint:String {pattern: re `^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com `}
    string 'key;
};

# Email
public type Email record {
    # Visibility setting for the email address (public/private)
    string? visibility;
    # Whether the email address has been verified
    boolean verified;
    # The email address
    string email;
    # Whether this is the primary email address
    boolean primary;
};

# Key Simple
public type KeySimple record {
    # Unique identifier for the SSH key
    int id;
    # The SSH public key content
    string 'key;
};

# Project Collaborator Permission
public type ProjectCollaboratorPermission record {
    # Permission level for the project collaborator
    string permission;
    # A GitHub user
    NullableSimpleUser? user;
};

# Request body schema for updating organization settings and configurations
public type OrgsorgBody record {
    # Whether Dependabot security updates is automatically enabled for new repositories.
    # 
    # To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    # 
    # You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request
    @jsondata:Name {value: "dependabot_security_updates_enabled_for_new_repositories"}
    boolean dependabotSecurityUpdatesEnabledForNewRepositories?;
    # Whether Dependabot alerts is automatically enabled for new repositories.
    # 
    # To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    # 
    # You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request
    @jsondata:Name {value: "dependabot_alerts_enabled_for_new_repositories"}
    boolean dependabotAlertsEnabledForNewRepositories?;
    # Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation
    @jsondata:Name {value: "members_can_create_internal_repositories"}
    boolean membersCanCreateInternalRepositories?;
    # If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret
    @jsondata:Name {value: "secret_scanning_push_protection_custom_link"}
    string secretScanningPushProtectionCustomLink?;
    # Whether repositories that belong to the organization can use repository projects
    @jsondata:Name {value: "has_repository_projects"}
    boolean hasRepositoryProjects?;
    # The Twitter username of the company
    @jsondata:Name {value: "twitter_username"}
    string twitterUsername?;
    # Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted
    @jsondata:Name {value: "members_can_create_public_pages"}
    boolean membersCanCreatePublicPages = true;
    # The description of the company
    string description?;
    # Whether GitHub Advanced Security is automatically enabled for new repositories.
    # 
    # To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    # 
    # You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request
    @jsondata:Name {value: "advanced_security_enabled_for_new_repositories"}
    boolean advancedSecurityEnabledForNewRepositories?;
    # The blog URL for the organization
    string blog?;
    # Whether dependency graph is automatically enabled for new repositories.
    # 
    # To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    # 
    # You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request
    @jsondata:Name {value: "dependency_graph_enabled_for_new_repositories"}
    boolean dependencyGraphEnabledForNewRepositories?;
    # Default permission level members have for organization repositories
    @jsondata:Name {value: "default_repository_permission"}
    "read"|"write"|"admin"|"none" defaultRepositoryPermission = "read";
    # Whether secret scanning is automatically enabled for new repositories.
    # 
    # To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    # 
    # You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request
    @jsondata:Name {value: "secret_scanning_enabled_for_new_repositories"}
    boolean secretScanningEnabledForNewRepositories?;
    # Billing email address. This address is not publicized
    @jsondata:Name {value: "billing_email"}
    string billingEmail?;
    # Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
    # **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details
    @jsondata:Name {value: "members_allowed_repository_creation_type"}
    "all"|"private"|"none" membersAllowedRepositoryCreationType?;
    # Whether organization members can fork private organization repositories
    @jsondata:Name {value: "members_can_fork_private_repositories"}
    boolean membersCanForkPrivateRepositories = false;
    # The company name
    string company?;
    # Whether secret scanning push protection is automatically enabled for new repositories.
    # 
    # To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    # 
    # You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request
    @jsondata:Name {value: "secret_scanning_push_protection_enabled_for_new_repositories"}
    boolean secretScanningPushProtectionEnabledForNewRepositories?;
    # Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted
    @jsondata:Name {value: "members_can_create_private_pages"}
    boolean membersCanCreatePrivatePages = true;
    # The publicly visible email address
    string email?;
    # Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details
    @jsondata:Name {value: "members_can_create_repositories"}
    boolean membersCanCreateRepositories = true;
    # Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation
    @jsondata:Name {value: "members_can_create_private_repositories"}
    boolean membersCanCreatePrivateRepositories?;
    # Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired = false;
    # Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation
    @jsondata:Name {value: "members_can_create_public_repositories"}
    boolean membersCanCreatePublicRepositories?;
    # Whether an organization can use organization projects
    @jsondata:Name {value: "has_organization_projects"}
    boolean hasOrganizationProjects?;
    # Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted
    @jsondata:Name {value: "members_can_create_pages"}
    boolean membersCanCreatePages = true;
    # The shorthand name of the company
    string name?;
    # The location
    string location?;
    # Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection
    @jsondata:Name {value: "secret_scanning_push_protection_custom_link_enabled"}
    boolean secretScanningPushProtectionCustomLinkEnabled?;
};

# Response object for marking notifications as read
public type NotificationRead record {
    # Status message for the notification read operation
    string message?;
    # URL related to the notification read operation
    string url?;
};

# Request body for managing organization codespace billing access
public type AccessSelectedUsersBody record {
    # The usernames of the organization members whose codespaces be billed to the organization
    @jsondata:Name {value: "selected_usernames"}
    string[] selectedUsernames;
};

# Details of a deployment that is waiting for protection rules to pass
public type PendingDeployment record {
    # Represents a deployment environment awaiting approval or review
    PendingDeploymentEnvironment environment;
    # The time that the wait timer began
    @jsondata:Name {value: "wait_timer_started_at"}
    string? waitTimerStartedAt;
    # The set duration of the wait timer
    @jsondata:Name {value: "wait_timer"}
    int waitTimer;
    # Whether the currently authenticated user can approve the deployment
    @jsondata:Name {value: "current_user_can_approve"}
    boolean currentUserCanApprove;
    # The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed
    PendingDeploymentReviewers[] reviewers;
};

# The permissions granted to the user access token
public type AppPermissions record {
    # The level of permission to grant the access token to view and manage secret scanning alerts
    @jsondata:Name {value: "secret_scanning_alerts"}
    "read"|"write" secretScanningAlerts?;
    # The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata
    "read"|"write" metadata?;
    # The level of permission to grant the access token to view and manage announcement banners for an organization
    @jsondata:Name {value: "organization_announcement_banners"}
    "read"|"write" organizationAnnouncementBanners?;
    # The level of permission to grant the access token for organization packages published to GitHub Packages
    @jsondata:Name {value: "organization_packages"}
    "read"|"write" organizationPackages?;
    # The level of permission to grant the access token for managing repository environments
    "read"|"write" environments?;
    # The level of permission to grant the access token to manage team discussions and related comments
    @jsondata:Name {value: "team_discussions"}
    "read"|"write" teamDiscussions?;
    # The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation
    "read"|"write" administration?;
    # The level of permission to grant the access token for viewing an organization's plan
    @jsondata:Name {value: "organization_plan"}
    "read" organizationPlan?;
    # The level of permission to grant the access token to manage Dependabot alerts
    @jsondata:Name {value: "vulnerability_alerts"}
    "read"|"write" vulnerabilityAlerts?;
    # The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization
    @jsondata:Name {value: "organization_personal_access_tokens"}
    "read"|"write" organizationPersonalAccessTokens?;
    # The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization
    @jsondata:Name {value: "organization_personal_access_token_requests"}
    "read"|"write" organizationPersonalAccessTokenRequests?;
    # The level of permission to grant the access token to update GitHub Actions workflow files
    "write" workflows?;
    # The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones
    "read"|"write" issues?;
    # The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges
    @jsondata:Name {value: "pull_requests"}
    "read"|"write" pullRequests?;
    # The level of permission to grant the access token to view and manage users blocked by the organization
    @jsondata:Name {value: "organization_user_blocking"}
    "read"|"write" organizationUserBlocking?;
    # The level of permission to grant the access token to manage just a single file
    @jsondata:Name {value: "single_file"}
    "read"|"write" singleFile?;
    # The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds
    "read"|"write" pages?;
    # The level of permission to grant the access token to manage repository projects, columns, and cards
    @jsondata:Name {value: "repository_projects"}
    "read"|"write"|"admin" repositoryProjects?;
    # The level of permission to grant the access token for organization teams and members
    "read"|"write" members?;
    # The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change
    @jsondata:Name {value: "organization_custom_roles"}
    "read"|"write" organizationCustomRoles?;
    # The level of permission to grant the access token to manage access to an organization
    @jsondata:Name {value: "organization_administration"}
    "read"|"write" organizationAdministration?;
    # The level of permission to grant the access token to manage organization secrets
    @jsondata:Name {value: "organization_secrets"}
    "read"|"write" organizationSecrets?;
    # The level of permission to grant the access token to manage the post-receive hooks for an organization
    @jsondata:Name {value: "organization_hooks"}
    "read"|"write" organizationHooks?;
    # The level of permission to grant the access token for packages published to GitHub Packages
    "read"|"write" packages?;
    # The level of permission to grant the access token to manage repository secrets
    "read"|"write" secrets?;
    # The level of permission to grant the access token for deployments and deployment statuses
    "read"|"write" deployments?;
    # The level of permission to grant the access token for checks on code
    "read"|"write" checks?;
    # The level of permission to grant the access token to manage organization projects and projects beta (where available)
    @jsondata:Name {value: "organization_projects"}
    "read"|"write"|"admin" organizationProjects?;
    # The level of permission to grant the access token to view and manage security events like code scanning alerts
    @jsondata:Name {value: "security_events"}
    "read"|"write" securityEvents?;
    # The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges
    "read"|"write" contents?;
    # The level of permission to grant the access token to manage the post-receive hooks for a repository
    @jsondata:Name {value: "repository_hooks"}
    "read"|"write" repositoryHooks?;
    # The level of permission to grant the access token for commit statuses
    "read"|"write" statuses?;
    # The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts
    "read"|"write" actions?;
    # The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization
    @jsondata:Name {value: "organization_self_hosted_runners"}
    "read"|"write" organizationSelfHostedRunners?;
};

# Interaction limit settings
public type InteractionLimitResponse record {
    # ISO 8601 timestamp when the interaction limit expires
    @jsondata:Name {value: "expires_at"}
    string expiresAt;
    # The origin scope where the interaction limit is applied
    string origin;
    # The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect
    InteractionGroup 'limit;
};

# Owner information for the head repository in a pull request
public type PullRequestHeadRepoOwner record {
    # API URL template for the user's gists
    @jsondata:Name {value: "gists_url"}
    string gistsUrl;
    # API URL for the user's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # API URL template for users this user is following
    @jsondata:Name {value: "following_url"}
    string followingUrl;
    # API URL template for the user's starred repositories
    @jsondata:Name {value: "starred_url"}
    string starredUrl;
    # API URL for the user's followers
    @jsondata:Name {value: "followers_url"}
    string followersUrl;
    # The user's GitHub username
    string login;
    # The type of GitHub account (User or Organization)
    string 'type;
    # API URL for the repository owner
    string url;
    # URL to access the owner's subscriptions
    @jsondata:Name {value: "subscriptions_url"}
    string subscriptionsUrl;
    # URL to access events received by the owner
    @jsondata:Name {value: "received_events_url"}
    string receivedEventsUrl;
    # URL of the owner's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # URL template for the owner's events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # GitHub profile URL of the repository owner
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Whether the owner is a GitHub site administrator
    @jsondata:Name {value: "site_admin"}
    boolean siteAdmin;
    # Unique identifier of the repository owner
    int id;
    # Gravatar ID associated with the owner's email
    @jsondata:Name {value: "gravatar_id"}
    string? gravatarId;
    # Global node ID for GraphQL API compatibility
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # URL to access the owner's organizations
    @jsondata:Name {value: "organizations_url"}
    string organizationsUrl;
};

# Represents the Queries record for the operation: migrations/get-status-for-authenticated-user
public type MigrationsGetStatusForAuthenticatedUserQueries record {
    string[] exclude?;
};

# Represents a specific instance of a code scanning alert
public type CodeScanningAlertInstance record {
    # Classifications that have been applied to the file that triggered the alert.
    # For example identifying it as documentation, or a generated file
    CodeScanningAlertClassification[] classifications?;
    # The full Git reference, formatted as `refs/heads/<branch name>`,
    # `refs/pull/<number>/merge`, or `refs/pull/<number>/head`
    CodeScanningRef ref?;
    # Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed
    CodeScanningAlertEnvironment environment?;
    # SHA of the commit that triggered the alert
    @jsondata:Name {value: "commit_sha"}
    string commitSha?;
    # GitHub URL to view the alert instance
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # Describe a region within a file for the alert
    CodeScanningAlertLocation location?;
    # State of a code scanning alert
    CodeScanningAlertState state?;
    # Unique key identifying the analysis that generated this alert
    @jsondata:Name {value: "analysis_key"}
    CodeScanningAnalysisAnalysisKey analysisKey?;
    # Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code
    CodeScanningAnalysisCategory category?;
    # Message details for a code scanning alert instance
    CodeScanningAlertInstanceMessage message?;
};

# Request body for marking notifications as read
public type NotificationsBody record {
    # Whether the notification has been read
    boolean read?;
    # Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp
    @jsondata:Name {value: "last_read_at"}
    string lastReadAt?;
};

# Request body for configuring team-based branch protection restrictions
public type RestrictionsTeamsBody ReposownerrepobranchesbranchprotectionrestrictionsteamsOneOf1|ReposownerrepobranchesbranchprotectionrestrictionsteamsreposownerrepobranchesbranchprotectionrestrictionsteamsOneOf12;

# Represents the Queries record for the operation: dependabot/list-repo-secrets
public type DependabotListRepoSecretsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Label information for issues returned in search results
public type IssueSearchResultItemLabels record {
    # Whether this is a default label
    boolean default?;
    # Hexadecimal color code of the label
    string color?;
    # Display name of the label
    string name?;
    # Optional description text for the label
    string? description?;
    # Unique identifier for the label
    int id?;
    # API URL for the label resource
    string url?;
    # GraphQL node identifier for the label
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Status Check Policy
public type StatusCheckPolicy record {
    # Array of required status checks for branch protection
    StatusCheckPolicyChecks[] checks;
    # API URL for managing status check contexts
    @jsondata:Name {value: "contexts_url"}
    string contextsUrl;
    # Array of required status check context names
    string[] contexts;
    # Whether to require branches to be up to date before merging
    boolean strict;
    # API URL for the required status checks policy
    string url;
};

# Represents the Queries record for the operation: issues/list-labels-on-issue
public type IssuesListLabelsOnIssueQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# A classification of the file. For example to identify it as generated
public type CodeScanningAlertClassification "source"|"generated"|"test"|"library"?;

# Request body for generating just-in-time runner configuration
public type RunnersGenerateJitconfigBody record {
    # The working directory to be used for job execution, relative to the runner install directory
    @jsondata:Name {value: "work_folder"}
    string workFolder = "_work";
    # The name of the new runner
    string name;
    # The ID of the runner group to register the runner to
    @jsondata:Name {value: "runner_group_id"}
    int runnerGroupId;
    # The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100
    @constraint:Array {maxLength: 100, minLength: 1}
    string[] labels;
};

# Default workflow permissions and pull request approval settings
public type ActionsGetDefaultWorkflowPermissions record {
    # Default permissions granted to GitHub Actions workflows
    @jsondata:Name {value: "default_workflow_permissions"}
    ActionsDefaultWorkflowPermissions defaultWorkflowPermissions;
    # Whether workflows can approve pull request reviews
    @jsondata:Name {value: "can_approve_pull_request_reviews"}
    ActionsCanApprovePullRequestReviews canApprovePullRequestReviews;
};

# Request body for updating team membership role
public type MembershipsusernameBody1 record {
    # The role that this user should have in the team
    "member"|"maintainer" role = "member";
};

# Request body for configuring Git LFS during repository import
public type ImportLfsBody record {
    # Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import
    @jsondata:Name {value: "use_lfs"}
    "opt_in"|"opt_out" useLfs;
};

# Represents the Queries record for the operation: packages/list-packages-for-authenticated-user
public type PackagesListPackagesForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
    # 
    # The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
    # For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    "public"|"private"|"internal" visibility?;
    # Page number of the results to fetch
    int page = 1;
    # The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry
    @http:Query {name: "package_type"}
    "npm"|"maven"|"rubygems"|"docker"|"nuget"|"container" packageType;
};

# Installation
public type InstallationResponse record {
    # Total number of installations
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of GitHub App installations
    Installation[] installations;
};

# Request body for updating a project card
public type CardscardIdBody record {
    # The project card's note
    string? note?;
    # Whether or not the card is archived
    boolean archived?;
};

# A credit given to a user for a repository security advisory
public type RepositoryAdvisoryCredit record {|
    # The state of the user's acceptance of the credit
    "accepted"|"declined"|"pending" state;
    # The type of credit the user is receiving
    SecurityAdvisoryCreditTypes 'type;
    # A GitHub user
    SimpleUser user;
|};

# A simplified representation of a commit status
public type SimpleCommitStatus record {
    # Avatar URL of the status creator
    @jsondata:Name {value: "avatar_url"}
    string? avatarUrl;
    # Timestamp when the status was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # URL linking to the status details
    @jsondata:Name {value: "target_url"}
    string? targetUrl;
    # A string label to differentiate this status from others
    string context;
    # A short description of the status
    string? description;
    # The time that the status was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the commit status
    int id;
    # The state of the status
    string state;
    # Whether this status is required to merge
    boolean? required?;
    # The URL for this commit status
    string url;
    # The GraphQL node ID of the commit status
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: actions/list-environment-variables
public type ActionsListEnvironmentVariablesQueries record {
    # The number of results per page (max 30)
    @http:Query {name: "per_page"}
    int perPage = 10;
    # Page number of the results to fetch
    int page = 1;
};

# Payload object containing event-specific data
public type EventPayload record {
    # Array of pages associated with the event
    EventPayloadPages[] pages?;
    # Issues are a great way to keep track of tasks, enhancements, and bugs for your projects
    Issue issue?;
    # The action that was performed
    string action?;
    # Comments provide a way for people to collaborate on an issue
    IssueComment comment?;
};

# Request body for personal access token operations
public type PersonalAccessTokenspatIdBody record {
    # Action to apply to the fine-grained personal access token
    "revoke" action;
};

# Request body for updating codespace configuration
public type CodespacescodespaceNameBody record {
    # A valid machine to transition this codespace to
    string machine?;
    # Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in
    @jsondata:Name {value: "recent_folders"}
    string[] recentFolders?;
    # Display name for this codespace
    @jsondata:Name {value: "display_name"}
    string displayName?;
};

# The GitHub Pages deployment status
public type PageDeployment record {
    # The URI to the deployed GitHub Pages
    @jsondata:Name {value: "page_url"}
    string pageUrl;
    # The URI to the deployed GitHub Pages preview
    @jsondata:Name {value: "preview_url"}
    string previewUrl?;
    # The URI to monitor GitHub Pages deployment status
    @jsondata:Name {value: "status_url"}
    string statusUrl;
};

# State Change Issue Event
public type StateChangeIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit that triggered the state change
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # The reason for the state change
    @jsondata:Name {value: "state_reason"}
    string? stateReason?;
    # GitHub App that performed the state change event
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Timestamp when the state change event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the state change event
    int id;
    # Type of state change event that occurred
    string event;
    # SHA of the commit that triggered the state change
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for the state change event
    string url;
    # Global node identifier for the state change event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: gists/list-for-user
public type GistsListForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Request body for specifying repository access to organization variables
public type NameRepositoriesBody record {
    # The IDs of the repositories that can access the organization variable
    @jsondata:Name {value: "selected_repository_ids"}
    int[] selectedRepositoryIds;
};

# Represents the Queries record for the operation: actions/list-repo-secrets
public type ActionsListRepoSecretsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Team slugs configuration for branch protection restrictions
public type ReposownerrepobranchesbranchprotectionrestrictionsteamsOneOf1 record {
    # The slug values for teams
    string[] teams;
};

# Represents the Queries record for the operation: repos/list-deploy-keys
public type ReposListDeployKeysQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: repos/upload-release-asset
public type ReposUploadReleaseAssetQueries record {
    string name;
    string label?;
};

# Workflow run information associated with an artifact
public type ArtifactWorkflowRun record {
    # Branch name where the workflow run was executed
    @jsondata:Name {value: "head_branch"}
    string headBranch?;
    # Unique identifier of the repository containing the workflow
    @jsondata:Name {value: "repository_id"}
    int repositoryId?;
    # Repository ID of the head branch in the workflow run
    @jsondata:Name {value: "head_repository_id"}
    int headRepositoryId?;
    # Unique identifier for the workflow run
    int id?;
    # SHA of the commit at the head of the workflow run
    @jsondata:Name {value: "head_sha"}
    string headSha?;
};

# Configuration options for importing a project from external version control
public type ImportProjectChoices record {
    # Human-readable display name for the imported project
    @jsondata:Name {value: "human_name"}
    string humanName?;
    # Team Foundation Version Control project identifier
    @jsondata:Name {value: "tfvc_project"}
    string tfvcProject?;
    # Version control system type for the project import
    string vcs?;
};

# Code of Conduct Simple
public type CodeOfConductSimple record {
    # URL to the HTML page displaying the code of conduct
    @jsondata:Name {value: "html_url"}
    string? htmlUrl;
    # Display name of the code of conduct
    string name;
    # API URL for the code of conduct resource
    string url;
    # Unique identifier key for the code of conduct
    string 'key;
};

# A GitHub Classroom classroom
public type Classroom record {
    # Whether classroom is archived
    boolean archived;
    # A GitHub organization
    SimpleClassroomOrganization organization;
    # The name of the classroom
    string name;
    # Unique identifier of the classroom
    int id;
    # The URL of the classroom on GitHub Classroom
    string url;
};

# Request body for creating a new Git blob object
public type GitBlobsBody record {
    # The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported
    string encoding = "utf-8";
    # The new blob's content
    string content;
};

# Information about a fork of a gist
public type GistSimpleForks record {
    # Timestamp when the gist fork was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # Timestamp when the gist fork was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # Unique identifier of the gist fork
    string id?;
    # Public User
    PublicUser user?;
    # API URL for the gist fork
    string url?;
};

# Represents the Queries record for the operation: issues/list-comments
public type IssuesListCommentsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Secrets for a GitHub Codespace
public type CodespacesOrgSecretResponse record {
    # Total number of codespaces secrets in the organization
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of codespaces secrets for the organization
    CodespacesOrgSecret[] secrets;
};

# Organization Invitation
public type OrganizationInvitation record {
    # Source or origin of the organization invitation
    @jsondata:Name {value: "invitation_source"}
    string invitationSource?;
    # The role assigned to the invitee in the organization
    string role;
    # Timestamp when the organization invitation was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # A GitHub user
    SimpleUser inviter;
    # Unique identifier for the organization invitation
    int id;
    # Timestamp when the invitation failed, null if not failed
    @jsondata:Name {value: "failed_at"}
    string? failedAt?;
    # GitHub username of the invitee, null if not a GitHub user
    string? login;
    # API URL to access teams associated with this invitation
    @jsondata:Name {value: "invitation_teams_url"}
    string invitationTeamsUrl;
    # Email address of the invitee, null if not provided
    string? email;
    # Reason for invitation failure, null if not failed
    @jsondata:Name {value: "failed_reason"}
    string? failedReason?;
    # Number of teams the invitee will be added to
    @jsondata:Name {value: "team_count"}
    int teamCount;
    # GraphQL node identifier for the organization invitation
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Request body for managing app restrictions on branch protection
public type RestrictionsAppsBody ReposownerrepobranchesbranchprotectionrestrictionsappsOneOf1|ReposownerrepobranchesbranchprotectionrestrictionsappsreposownerrepobranchesbranchprotectionrestrictionsappsOneOf12;

# Converted Note to Issue Issue Event
public type ConvertedNoteToIssueIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the converted note to issue event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed the note to issue conversion
    @jsondata:Name {value: "performed_via_github_app"}
    Integration performedViaGithubApp;
    # Timestamp when the note to issue conversion event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the converted note to issue event
    int id;
    # Type of event that occurred (converted_note_to_issue)
    string event;
    # SHA identifier of the commit associated with the conversion event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for the converted note to issue event
    string url;
    # Project card that was converted from a note to an issue
    @jsondata:Name {value: "project_card"}
    AddedToProjectIssueEventProjectCard projectCard?;
    # Global node identifier for the converted note to issue event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Vulnerability information for packages affected by a global security advisory
public type GlobalAdvisoryVulnerabilities record {
    # The package version that resolve the vulnerability
    @jsondata:Name {value: "first_patched_version"}
    string? firstPatchedVersion;
    # The name of the package affected by the vulnerability
    GlobalAdvisoryPackage? package;
    # The functions in the package that are affected by the vulnerability
    @jsondata:Name {value: "vulnerable_functions"}
    string[]? vulnerableFunctions;
    # The range of the package versions affected by the vulnerability
    @jsondata:Name {value: "vulnerable_version_range"}
    string? vulnerableVersionRange;
};

# Gist Simple
public type GistSimple record {
    # List of forks for this gist (deprecated)
    # 
    # # Deprecated
    @deprecated
    GistSimpleForks[]? forks?;
    # A GitHub user
    SimpleUser owner?;
    # API URL to retrieve commits for this gist
    @jsondata:Name {value: "commits_url"}
    string commitsUrl?;
    # Number of comments on this gist
    int comments?;
    # API URL to retrieve forks of this gist
    @jsondata:Name {value: "forks_url"}
    string forksUrl?;
    # Git URL for pushing changes to this gist
    @jsondata:Name {value: "git_push_url"}
    string gitPushUrl?;
    # ISO 8601 timestamp when the gist was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # Optional description of the gist
    string? description?;
    # Whether the gist content has been truncated
    boolean truncated?;
    # The original gist this was forked from, if applicable
    @jsondata:Name {value: "fork_of"}
    Gist? forkOf?;
    # Revision history of the gist (deprecated)
    # 
    # # Deprecated
    @deprecated
    GistHistory[]? history?;
    # API URL for the gist
    string url?;
    # Whether the gist is publicly visible
    boolean 'public?;
    # ISO 8601 timestamp when the gist was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # GitHub web URL for the gist
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # Git URL for cloning the gist
    @jsondata:Name {value: "git_pull_url"}
    string gitPullUrl?;
    # API URL for the gist's comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl?;
    # Files contained in the gist
    record {|GistSimpleFiles?...;|} files?;
    # Unique identifier for the gist
    string id?;
    # Username of the gist owner
    string? user?;
    # GraphQL global node identifier
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# A schema for the SPDX JSON format returned by the Dependency Graph
public type DependencyGraphSpdxSbom record {
    # SPDX Software Bill of Materials document with package dependencies
    DependencyGraphSpdxSbomSbom sbom;
};

# Represents the Queries record for the operation: issues/list-assignees
public type IssuesListAssigneesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# The total number of seat assignments created
public type CopilotSeatCreated record {
    # Number of Copilot seats created
    @jsondata:Name {value: "seats_created"}
    int seatsCreated;
};

# Collection of feed links for GitHub activity streams and notifications
public type FeedLinks record {
    # Link to repository discussions feed
    @jsondata:Name {value: "repository_discussions"}
    LinkWithType repositoryDiscussions?;
    # Link to current user's organization feed
    @jsondata:Name {value: "current_user_organization"}
    LinkWithType currentUserOrganization?;
    # Array of links to current user's organizations feeds
    @jsondata:Name {value: "current_user_organizations"}
    LinkWithType[] currentUserOrganizations?;
    # Link to current user's actor feed
    @jsondata:Name {value: "current_user_actor"}
    LinkWithType currentUserActor?;
    # Hypermedia Link with Type
    LinkWithType timeline;
    # Hypermedia Link with Type
    LinkWithType user;
    # Link to security advisories feed
    @jsondata:Name {value: "security_advisories"}
    LinkWithType securityAdvisories?;
    # Link to current user's public activity feed
    @jsondata:Name {value: "current_user_public"}
    LinkWithType currentUserPublic?;
    # Link to repository discussions category feed
    @jsondata:Name {value: "repository_discussions_category"}
    LinkWithType repositoryDiscussionsCategory?;
    # Link to current user's private activity feed
    @jsondata:Name {value: "current_user"}
    LinkWithType currentUser?;
};

# Represents the Queries record for the operation: actions/list-jobs-for-workflow-run-attempt
public type ActionsListJobsForWorkflowRunAttemptQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: security-advisories/list-global-advisories
public type SecurityAdvisoriesListGlobalAdvisoriesQueries record {
    # If specified, only advisories with these severities will be returned
    "unknown"|"low"|"medium"|"high"|"critical" severity?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # If specified, only advisories for these ecosystems will be returned
    "actions"|"composer"|"erlang"|"go"|"maven"|"npm"|"nuget"|"other"|"pip"|"pub"|"rubygems"|"rust" ecosystem?;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor
    string before?;
    # Whether to only return advisories that have been withdrawn
    @http:Query {name: "is_withdrawn"}
    boolean isWithdrawn?;
    # If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified.
    # If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.
    # 
    # Example: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1&affects[]=package2@1.0.0`
    Affects affects?;
    # If specified, only return advisories that were published on a date or date range.
    # 
    # For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
    string published?;
    # The property to sort the results by
    "updated"|"published" sort = "published";
    # If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware
    "reviewed"|"malware"|"unreviewed" 'type = "reviewed";
    # If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.
    # 
    # Example: `cwes=79,284,22` or `cwes[]=79&cwes[]=284&cwes[]=22`
    Cwes cwes?;
    # If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned
    @http:Query {name: "ghsa_id"}
    string ghsaId?;
    # If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned
    @http:Query {name: "cve_id"}
    string cveId?;
    # If specified, only show advisories that were updated or published on a date or date range.
    # 
    # For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
    string modified?;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor
    string after?;
    # If specified, only return advisories that were updated on a date or date range.
    # 
    # For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
    string updated?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# An advisory identifier
public type DependabotAlertSecurityAdvisoryIdentifiers record {|
    # The type of advisory identifier
    "CVE"|"GHSA" 'type;
    # The value of the advisory identifer
    string value;
|};

# The policy that controls the repositories in the organization that are allowed to run GitHub Actions
public type EnabledRepositories "all"|"none"|"selected";

# Request body for creating tag protection rules
public type TagsProtectionBody record {
    # An optional glob pattern to match against when enforcing tag protection
    string pattern;
};

# Integer identifier for a selected repository
public type SelectedRepositoryIdsAnyOf1 int;

# Represents the Queries record for the operation: codespaces/get-codespaces-for-user-in-org
public type CodespacesGetCodespacesForUserInOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Review Dismissed Issue Event
public type ReviewDismissedIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the dismissed review
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # Details of the dismissed review
    @jsondata:Name {value: "dismissed_review"}
    ReviewDismissedIssueEventDismissedReview dismissedReview;
    # GitHub App that performed the review dismissal action
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Timestamp when the review dismissed issue event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the review dismissed issue event
    int id;
    # Type of event that occurred
    string event;
    # SHA of the commit associated with the event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for the review dismissed issue event
    string url;
    # GraphQL node identifier for the event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Array of CWE (Common Weakness Enumeration) identifiers
public type CwesCwesOneOf12 string[];

# Represents the Queries record for the operation: gists/list-public
public type GistsListPublicQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# GitHub plan details for a public user account
public type PublicUserPlan record {
    # Number of private repositories allowed in the plan
    @jsondata:Name {value: "private_repos"}
    int privateRepos;
    # Name of the GitHub plan
    string name;
    # Number of collaborators allowed in the plan
    int collaborators;
    # Storage space allocation for the plan in bytes
    int space;
};

# License
public type License record {
    # Whether the license is featured by GitHub
    boolean featured;
    # Instructions for implementing the license in a project
    string implementation;
    # Human-readable description of the license
    string description;
    # Full text content of the license
    string body;
    # SPDX identifier for the license
    @jsondata:Name {value: "spdx_id"}
    string? spdxId;
    # API URL for the license resource
    string? url;
    # Array of permissions granted by the license
    string[] permissions;
    # Web URL for the license information page
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Display name of the license
    string name;
    # Array of conditions required by the license
    string[] conditions;
    # Unique identifier key for the license
    string 'key;
    # Global node identifier for the license
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Array of limitations imposed by this license
    string[] limitations;
};

# Repository information for the base branch of a pull request
public type PullRequestBaseRepo record {
    # Whether forking is allowed for this repository
    @jsondata:Name {value: "allow_forking"}
    boolean allowForking?;
    # Whether this repository is a template repository
    @jsondata:Name {value: "is_template"}
    boolean isTemplate?;
    # Number of users who have starred the repository
    @jsondata:Name {value: "stargazers_count"}
    int stargazersCount;
    # Timestamp when the repository was last pushed to
    @jsondata:Name {value: "pushed_at"}
    string pushedAt;
    # URL for managing repository subscription notifications
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl;
    # Primary programming language used in the repository
    string? language;
    # URL template for accessing repository branches
    @jsondata:Name {value: "branches_url"}
    string branchesUrl;
    # URL template for accessing issue comments
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl;
    # Whether rebase merging is allowed for pull requests
    @jsondata:Name {value: "allow_rebase_merge"}
    boolean allowRebaseMerge?;
    # URL template for accessing repository labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # URL for accessing repository subscribers list
    @jsondata:Name {value: "subscribers_url"}
    string subscribersUrl;
    # Complete set of repository permission levels for a user or team
    FullRepositoryPermissions permissions?;
    # Temporary token for cloning the repository
    @jsondata:Name {value: "temp_clone_token"}
    string tempCloneToken?;
    # URL template for accessing repository releases
    @jsondata:Name {value: "releases_url"}
    string releasesUrl;
    # Subversion URL for the repository
    @jsondata:Name {value: "svn_url"}
    string svnUrl;
    # Unique identifier for the repository
    int id;
    # Whether the repository has discussions enabled
    @jsondata:Name {value: "has_discussions"}
    boolean hasDiscussions;
    # Name of the repository's master branch
    @jsondata:Name {value: "master_branch"}
    string masterBranch?;
    # Number of forks of the repository
    int forks;
    # URL template for downloading repository archives
    @jsondata:Name {value: "archive_url"}
    string archiveUrl;
    # Whether merge commits are allowed for pull requests
    @jsondata:Name {value: "allow_merge_commit"}
    boolean allowMergeCommit?;
    # URL template for accessing Git references
    @jsondata:Name {value: "git_refs_url"}
    string gitRefsUrl;
    # API URL for repository forks
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # The repository visibility: public, private, or internal
    string visibility?;
    # URL template for commit status API
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # SSH clone URL for the repository
    @jsondata:Name {value: "ssh_url"}
    string sshUrl;
    # License Simple
    NullableLicenseSimple? license;
    # Full name of the repository in owner/repo format
    @jsondata:Name {value: "full_name"}
    string fullName;
    # Size of the repository in kilobytes
    int size;
    # API URL for repository programming languages
    @jsondata:Name {value: "languages_url"}
    string languagesUrl;
    # URL template for repository collaborators API
    @jsondata:Name {value: "collaborators_url"}
    string collaboratorsUrl;
    # Web URL of the repository on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # HTTPS clone URL for the repository
    @jsondata:Name {value: "clone_url"}
    string cloneUrl;
    # Name of the repository
    string name;
    # URL template for pull requests API
    @jsondata:Name {value: "pulls_url"}
    string pullsUrl;
    # The name of the default branch for the repository
    @jsondata:Name {value: "default_branch"}
    string defaultBranch;
    # URL for accessing the repository's webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # URL template for accessing the repository's git trees
    @jsondata:Name {value: "trees_url"}
    string treesUrl;
    # URL for accessing the repository's tags
    @jsondata:Name {value: "tags_url"}
    string tagsUrl;
    # URL for accessing the repository's contributors list
    @jsondata:Name {value: "contributors_url"}
    string contributorsUrl;
    # Indicates whether the repository is private
    boolean 'private;
    # Indicates whether the repository has downloads enabled
    @jsondata:Name {value: "has_downloads"}
    boolean hasDownloads;
    # URL template for accessing repository notifications
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl;
    # The number of open issues in the repository
    @jsondata:Name {value: "open_issues_count"}
    int openIssuesCount;
    # A brief description of the repository
    string? description;
    # The number of users watching the repository
    int watchers;
    # The date and time when the repository was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # URL for accessing the repository's deployments
    @jsondata:Name {value: "deployments_url"}
    string deploymentsUrl;
    # URL template for accessing the repository's deploy keys
    @jsondata:Name {value: "keys_url"}
    string keysUrl;
    # Indicates whether the repository has projects enabled
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects;
    # Indicates whether the repository is archived
    boolean archived;
    # Indicates whether the repository has a wiki enabled
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki;
    # The date and time when the repository was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # URL template for repository comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # URL to the repository's stargazers list
    @jsondata:Name {value: "stargazers_url"}
    string stargazersUrl;
    # Indicates whether the repository is disabled
    boolean disabled;
    # Git clone URL for the repository
    @jsondata:Name {value: "git_url"}
    string gitUrl;
    # Indicates whether the repository has GitHub Pages enabled
    @jsondata:Name {value: "has_pages"}
    boolean hasPages;
    # Owner information for the head repository in a pull request
    PullRequestHeadRepoOwner owner;
    # Indicates whether squash merging is allowed for pull requests
    @jsondata:Name {value: "allow_squash_merge"}
    boolean allowSquashMerge?;
    # URL template for repository commits
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # URL template for comparing commits in the repository
    @jsondata:Name {value: "compare_url"}
    string compareUrl;
    # Git API URL template for repository commits
    @jsondata:Name {value: "git_commits_url"}
    string gitCommitsUrl;
    # List of topics associated with the repository
    string[] topics?;
    # URL template for repository blobs
    @jsondata:Name {value: "blobs_url"}
    string blobsUrl;
    # Git API URL template for repository tags
    @jsondata:Name {value: "git_tags_url"}
    string gitTagsUrl;
    # API URL for merging branches in the repository
    @jsondata:Name {value: "merges_url"}
    string mergesUrl;
    # API URL for accessing repository downloads
    @jsondata:Name {value: "downloads_url"}
    string downloadsUrl;
    # Whether the repository has issues enabled
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues;
    # Whether web-based commits require signoff
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired?;
    # API URL of the repository
    string url;
    # API URL template for accessing repository contents
    @jsondata:Name {value: "contents_url"}
    string contentsUrl;
    # URL of the repository mirror, if any
    @jsondata:Name {value: "mirror_url"}
    string? mirrorUrl;
    # API URL template for repository milestones
    @jsondata:Name {value: "milestones_url"}
    string milestonesUrl;
    # API URL for teams with access to the repository
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Whether the repository is a fork
    boolean 'fork;
    # API URL template for repository issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # API URL for repository events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # API URL template for issue events
    @jsondata:Name {value: "issue_events_url"}
    string issueEventsUrl;
    # API URL template for repository assignees
    @jsondata:Name {value: "assignees_url"}
    string assigneesUrl;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues"}
    int openIssues;
    # Number of users watching the repository
    @jsondata:Name {value: "watchers_count"}
    int watchersCount;
    # Unique node identifier for the repository
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Number of times the repository has been forked
    @jsondata:Name {value: "forks_count"}
    int forksCount;
    # URL of the repository's homepage
    string? homepage;
};

# Request body for importing a repository from external VCS
public type RepoImportBody record {
    # If authentication is required, the username to provide to `vcs_url`
    @jsondata:Name {value: "vcs_username"}
    string vcsUsername?;
    # If authentication is required, the password to provide to `vcs_url`
    @jsondata:Name {value: "vcs_password"}
    string vcsPassword?;
    # The URL of the originating repository
    @jsondata:Name {value: "vcs_url"}
    string vcsUrl;
    # For a tfvc import, the name of the project that is being imported
    @jsondata:Name {value: "tfvc_project"}
    string tfvcProject?;
    # The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response
    "subversion"|"git"|"mercurial"|"tfvc" vcs?;
};

# Request body for creating organization migration with repositories and options
public type OrgMigrationsBody record {
    # Indicates whether metadata should be excluded and only git source should be included for the migration
    @jsondata:Name {value: "exclude_metadata"}
    boolean excludeMetadata = false;
    # A list of arrays indicating which repositories should be migrated
    string[] repositories;
    # Indicates whether the repository git data should be excluded from the migration
    @jsondata:Name {value: "exclude_git_data"}
    boolean excludeGitData = false;
    # Indicates whether attachments should be excluded from the migration (to reduce migration archive file size)
    @jsondata:Name {value: "exclude_attachments"}
    boolean excludeAttachments = false;
    # Indicates whether releases should be excluded from the migration (to reduce migration archive file size)
    @jsondata:Name {value: "exclude_releases"}
    boolean excludeReleases = false;
    # Indicates whether projects owned by the organization or users should be excluded. from the migration
    @jsondata:Name {value: "exclude_owner_projects"}
    boolean excludeOwnerProjects = false;
    # Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags)
    @jsondata:Name {value: "org_metadata_only"}
    boolean orgMetadataOnly = false;
    # Exclude related items from being returned in the response in order to improve performance of the request
    ("repositories")[] exclude?;
    # Indicates whether repositories should be locked (to prevent manipulation) while migrating data
    @jsondata:Name {value: "lock_repositories"}
    boolean lockRepositories = false;
};

# Represents the Queries record for the operation: activity/list-org-events-for-authenticated-user
public type ActivityListOrgEventsForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Billable job run information for Ubuntu workflow execution
public type WorkflowRunUsageBillableUBUNTUJobRuns record {
    # Duration of the job run in milliseconds
    @jsondata:Name {value: "duration_ms"}
    int durationMs;
    # Unique identifier for the workflow job
    @jsondata:Name {value: "job_id"}
    int jobId;
};

# Milestoned Issue Event
public type MilestonedIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with this event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed this milestone event
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Milestone information for milestoned issue events
    MilestonedIssueEventMilestone milestone;
    # Timestamp when the milestone event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the milestone event
    int id;
    # Type of milestone event that occurred
    string event;
    # SHA identifier of the commit associated with this event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for this milestone event
    string url;
    # Global node identifier for the milestone event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Secrets for a GitHub Codespace
public type CodespacesOrgSecret record {
    # The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The type of repositories in the organization that the secret is visible to
    "all"|"private"|"selected" visibility;
    # The name of the secret
    string name;
    # The API URL at which the list of repositories this secret is visible to can be retrieved
    @jsondata:Name {value: "selected_repositories_url"}
    string selectedRepositoriesUrl?;
    # The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ
    @jsondata:Name {value: "created_at"}
    string createdAt;
};

# Configuration schema for creating a codespace with repository ID
public type UsercodespacesOneOf1 record {
    # The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated
    "EuropeWest"|"SoutheastAsia"|"UsEast"|"UsWest" geo?;
    # Path to devcontainer.json config to use for this codespace
    @jsondata:Name {value: "devcontainer_path"}
    string devcontainerPath?;
    # Git ref (typically a branch name) for this codespace
    string ref?;
    # Whether to authorize requested permissions from devcontainer.json
    @jsondata:Name {value: "multi_repo_permissions_opt_out"}
    boolean multiRepoPermissionsOptOut?;
    # Machine type to use for this codespace
    string machine?;
    # Repository id for this codespace
    @jsondata:Name {value: "repository_id"}
    int repositoryId;
    # The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided
    string location?;
    # IP for location auto-detection when proxying a request
    @jsondata:Name {value: "client_ip"}
    string clientIp?;
    # Working directory for this codespace
    @jsondata:Name {value: "working_directory"}
    string workingDirectory?;
    # Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days)
    @jsondata:Name {value: "retention_period_minutes"}
    int retentionPeriodMinutes?;
    # Display name for this codespace
    @jsondata:Name {value: "display_name"}
    string displayName?;
    # Time in minutes before codespace stops from inactivity
    @jsondata:Name {value: "idle_timeout_minutes"}
    int idleTimeoutMinutes?;
};

# Topic Search Result Item
public type TopicSearchResultItemResponse record {
    # Total number of topics found in search results
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Whether the search results are incomplete due to timeout
    @jsondata:Name {value: "incomplete_results"}
    boolean incompleteResults;
    # Array of topic search result items
    TopicSearchResultItem[] items;
};

# Git reference object containing SHA, type, and URL information
public type GitRefObject record {
    # Type of the Git reference object
    string 'type;
    # SHA for the reference
    @constraint:String {maxLength: 40, minLength: 40}
    string sha;
    # API URL for the Git reference object
    string url;
};

# Request body for removing reviewers from a pull request
public type PullNumberRequestedReviewersBody1 record {
    # An array of team `slug`s that will be removed
    @jsondata:Name {value: "team_reviewers"}
    string[] teamReviewers?;
    # An array of user `login`s that will be removed
    string[] reviewers;
};

# An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
public type CodespaceExportDetails record {
    # Completion time of the last export operation
    @jsondata:Name {value: "completed_at"}
    string? completedAt?;
    # Web url for the exported branch
    @jsondata:Name {value: "html_url"}
    string? htmlUrl?;
    # Url for fetching export details
    @jsondata:Name {value: "export_url"}
    string exportUrl?;
    # State of the latest export
    string? state?;
    # Id for the export details
    string id?;
    # Name of the exported branch
    string? branch?;
    # Git commit SHA of the exported branch
    string? sha?;
};

# Choose which environments must be successfully deployed to before refs can be merged into a branch that matches this rule
public type RepositoryRuleRequiredDeployments record {
    # Rule type identifier for required deployments
    "required_deployments" 'type;
    # Parameters for repository rules requiring successful deployments before merging
    RepositoryRuleRequiredDeploymentsParameters parameters?;
};

# License Simple
public type NullableLicenseSimple record {
    # HTML URL for the license information page
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # Full name of the license
    string name;
    # SPDX license identifier
    @jsondata:Name {value: "spdx_id"}
    string? spdxId;
    # Unique key identifier for the license
    string 'key;
    # API URL for the license resource
    string? url;
    # Global node ID for the license
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Aggregated count of all reaction types on a GitHub item
public type ReactionRollup record {
    # Number of confused face reactions
    int confused;
    # Number of thumbs down reactions
    @jsondata:Name {value: "-1"}
    int param1;
    # Total count of all reactions
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Number of thumbs down reactions
    @jsondata:Name {value: "+1"}
    int param1;
    # Number of rocket reactions
    int rocket;
    # Number of hooray reactions
    int hooray;
    # Number of eyes reactions
    int eyes;
    # URL to the reactions endpoint
    string url;
    # Number of laugh reactions
    int laugh;
    # Number of heart reactions
    int heart;
};

# Hypermedia Link with Type
public type LinkWithType record {
    # The hyperlink reference URL
    string href;
    # Type identifier for the link resource
    string 'type;
};

# An object describing a symlink
public type ContentSymlink record {
    # File path of the symlink in the repository
    string path;
    # Size of the symlink in bytes
    int size;
    # Navigation links related to the symlink content
    @jsondata:Name {value: "_links"}
    ContentTreeLinks links;
    # HTML URL to view the symlink on GitHub
    @jsondata:Name {value: "html_url"}
    string? htmlUrl;
    # Name of the symlink file
    string name;
    # Direct download URL for the symlink target
    @jsondata:Name {value: "download_url"}
    string? downloadUrl;
    # Content type, always 'symlink' for symbolic links
    "symlink" 'type;
    # Git API URL for the symlink object
    @jsondata:Name {value: "git_url"}
    string? gitUrl;
    # SHA hash of the symlink object
    string sha;
    # API URL for the symlink resource
    string url;
    # Target path that the symlink points to
    string target;
};

# Represents the Queries record for the operation: actions/list-repo-workflows
public type ActionsListRepoWorkflowsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: actions/list-org-secrets
public type ActionsListOrgSecretsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for approving or denying organization PAT requests
public type OrgPersonalAccessTokenRequestsBody record {
    # Reason for approving or denying the requests. Max 1024 characters
    string? reason?;
    # Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values
    @jsondata:Name {value: "pat_request_ids"}
    int[] patRequestIds?;
    # Action to apply to the requests
    "approve"|"deny" action;
};

# Team restrictions configuration for branch protection
public type ReposownerrepobranchesbranchprotectionrestrictionsteamsOneOf12 record {
    # The slug values for teams
    string[] teams;
};

# The object used to create GitHub Pages deployment
public type PagesDeploymentBody record {
    # The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository
    @jsondata:Name {value: "artifact_url"}
    string artifactUrl;
    # The target environment for this GitHub Pages deployment
    string environment = "github-pages";
    # The OIDC token issued by GitHub Actions certifying the origin of the deployment
    @jsondata:Name {value: "oidc_token"}
    string oidcToken;
    # A unique string that represents the version of the build for this deployment
    @jsondata:Name {value: "pages_build_version"}
    string pagesBuildVersion = "GITHUB_SHA";
};

# A workflow referenced/reused by the initial caller workflow
public type ReferencedWorkflow record {
    # File path of the referenced workflow
    string path;
    # Git reference (branch, tag, or commit) of the referenced workflow
    string ref?;
    # SHA hash of the referenced workflow commit
    string sha;
};

# Repository access permissions for a collaborator
public type CollaboratorPermissions record {
    # Whether the collaborator has pull (read) access to the repository
    boolean pull;
    # Whether the collaborator has maintain access to the repository
    boolean maintain?;
    # Whether the collaborator has admin access to the repository
    boolean admin;
    # Whether the collaborator has triage access to the repository
    boolean triage?;
    # Whether the collaborator has push (write) access to the repository
    boolean push;
};

# Team restrictions for branch protection settings
public type ReposownerrepobranchesbranchprotectionrestrictionsteamsOneOf11 record {
    # The slug values for teams
    string[] teams;
};

# A label for a self hosted runner
public type RunnerLabel record {
    # Name of the label
    string name;
    # Unique identifier of the label
    int id?;
    # The type of label. Read-only labels are applied automatically when the runner is configured
    "read-only"|"custom" 'type?;
};

# Represents the Queries record for the operation: actions/list-artifacts-for-repo
public type ActionsListArtifactsForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The name field of an artifact. When specified, only artifacts with this name will be returned
    string name?;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: issues/list-events
public type IssuesListEventsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: teams/list-child-legacy
public type TeamsListChildLegacyQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for updating a repository ruleset configuration
public type RulesetsrulesetIdBody1 record {
    # The actors that can bypass the rules in this ruleset
    @jsondata:Name {value: "bypass_actors"}
    RepositoryRulesetBypassActor[] bypassActors?;
    # The name of the ruleset
    string name?;
    # The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise)
    RepositoryRuleEnforcement enforcement?;
    # An array of rules within the ruleset
    RepositoryRule[] rules?;
    # Parameters for a repository ruleset ref name condition
    RepositoryRulesetConditions conditions?;
    # The target of the ruleset
    "branch"|"tag" target?;
};

# Wait timer protection rule configuration
public type ProtectionRulesAnyOf1 record {
    # Unique identifier for the protection rule
    int id;
    # Wait timer configuration for the protection rule
    @jsondata:Name {value: "wait_timer"}
    WaitTimer waitTimer?;
    # Type of protection rule (wait_timer)
    string 'type;
    # Global node identifier for the protection rule
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# A self hosted runner
public type RunnerResponse record {
    # Total number of runners available
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of runner objects
    Runner[] runners;
};

# Represents the Queries record for the operation: apps/list-installations-for-authenticated-user
public type AppsListInstallationsForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for adding a reaction to a team discussion
public type DiscussionNumberReactionsBody record {
    # The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content;
};

# GitHub account for managing multiple users, teams, and repositories
public type Organization record {
    # URL to access the organization's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # Specifies if repository projects are enabled for repositories that belong to this org
    @jsondata:Name {value: "has_repository_projects"}
    boolean hasRepositoryProjects;
    # URL template to access organization members
    @jsondata:Name {value: "members_url"}
    string membersUrl;
    # Description of the organization
    string? description;
    # Timestamp when the organization was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique login name of the organization
    string login;
    # Display blog url for the organization
    string blog?;
    # Type of the organization account
    string 'type;
    # URL template to access public organization members
    @jsondata:Name {value: "public_members_url"}
    string publicMembersUrl;
    # Timestamp when the organization was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Display company name for the organization
    string company?;
    # Unique identifier for the organization
    int id;
    # Number of public repositories owned by the organization
    @jsondata:Name {value: "public_repos"}
    int publicRepos;
    # GitHub plan information for an organization
    OrganizationPlan plan?;
    # Display email for the organization
    string email?;
    # Whether the organization is verified by GitHub
    @jsondata:Name {value: "is_verified"}
    boolean isVerified?;
    # Number of public gists owned by the organization
    @jsondata:Name {value: "public_gists"}
    int publicGists;
    # URL for the organization
    string url;
    # URL template to access organization issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # Number of followers for the organization
    int followers;
    # URL of the organization's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # API URL for the organization's public events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # Specifies if organization projects are enabled for this org
    @jsondata:Name {value: "has_organization_projects"}
    boolean hasOrganizationProjects;
    # GitHub web URL for the organization's profile page
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Number of users the organization is following
    int following;
    # Display name for the organization
    string name?;
    # Display location for the organization
    string location?;
    # API URL for the organization's webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # GraphQL node identifier for the organization
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# A deployment created as the result of an Actions check run from a workflow that references an environment
public type DeploymentSimple record {
    # API URL to retrieve deployment status information
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # Human-readable description of the deployment
    string? description;
    # Timestamp when the deployment was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # API URL for the deployment resource
    string url;
    # Name for the target deployment environment
    string environment;
    # Parameter to specify a task to execute
    string task;
    # Timestamp when the deployment was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # GitHub App that performed the deployment, if applicable
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp?;
    # Specifies if the given environment is will no longer exist at some point in the future. Default: false
    @jsondata:Name {value: "transient_environment"}
    boolean transientEnvironment?;
    # Original environment name for the deployment
    @jsondata:Name {value: "original_environment"}
    string originalEnvironment?;
    # Unique identifier of the deployment
    int id;
    # API URL for the repository containing this deployment
    @jsondata:Name {value: "repository_url"}
    string repositoryUrl;
    # GraphQL node ID for the deployment
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Specifies if the given environment is one that end-users directly interact with. Default: false
    @jsondata:Name {value: "production_environment"}
    boolean productionEnvironment?;
};

# A CodeQL database
public type CodeScanningCodeqlDatabase record {
    # The MIME type of the CodeQL database file
    @jsondata:Name {value: "content_type"}
    string contentType;
    # The size of the CodeQL database file in bytes
    int size;
    # The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The commit SHA of the repository at the time the CodeQL database was created
    @jsondata:Name {value: "commit_oid"}
    string? commitOid?;
    # A GitHub user
    SimpleUser uploader;
    # The name of the CodeQL database
    string name;
    # The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The language of the CodeQL database
    string language;
    # The ID of the CodeQL database
    int id;
    # The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property
    string url;
};

# Represents the Queries record for the operation: reactions/list-for-release
public type ReactionsListForReleaseQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a release
    "+1"|"laugh"|"heart"|"hooray"|"rocket"|"eyes" content?;
};

# Repository community health files and documentation status
public type CommunityProfileFiles record {
    # Issue template file configuration
    @jsondata:Name {value: "issue_template"}
    NullableCommunityHealthFile? issueTemplate;
    # License Simple
    NullableLicenseSimple? license;
    # Code of conduct file configuration
    @jsondata:Name {value: "code_of_conduct_file"}
    NullableCommunityHealthFile? codeOfConductFile;
    # Community health file information for a repository
    NullableCommunityHealthFile? contributing;
    # Community health file information for a repository
    NullableCommunityHealthFile? readme;
    # Pull request template file configuration
    @jsondata:Name {value: "pull_request_template"}
    NullableCommunityHealthFile? pullRequestTemplate;
    # Code of conduct details and metadata
    @jsondata:Name {value: "code_of_conduct"}
    NullableCodeOfConductSimple? codeOfConduct;
};

# Unassigned Issue Event
public type UnassignedIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed the unassignment
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # A GitHub user
    SimpleUser assigner;
    # Timestamp when the unassignment event occurred
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the unassignment event
    int id;
    # A GitHub user
    SimpleUser assignee;
    # Event type identifier
    string event;
    # SHA of the commit associated with the event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for the unassignment event
    string url;
    # GraphQL node ID for the unassignment event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Webhook delivery response data including headers and payload
public type HookDeliveryResponse record {
    # The response headers received when the delivery was made
    record {}? headers;
    # The response payload received
    record {}? payload;
};

# Represents an error that occurred during a GitHub Pages build process
public type PageBuildError record {
    # The error message describing what went wrong during the Pages build
    string? message;
};

# Information of a job execution in a workflow run
public type JobResponse record {
    # Total number of jobs matching the query criteria
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of job objects returned by the search query
    Job[] jobs;
};

# GitHub Packages billing usage information including bandwidth metrics
public type PackagesBillingUsage record {
    # Free storage space (GB) for GitHub Packages
    @jsondata:Name {value: "included_gigabytes_bandwidth"}
    int includedGigabytesBandwidth;
    # Sum of the free and paid storage space (GB) for GitHuub Packages
    @jsondata:Name {value: "total_gigabytes_bandwidth_used"}
    int totalGigabytesBandwidthUsed;
    # Total paid storage space (GB) for GitHuub Packages
    @jsondata:Name {value: "total_paid_gigabytes_bandwidth_used"}
    int totalPaidGigabytesBandwidthUsed;
};

# Configuration settings for protecting a repository branch
public type BranchProtectionBody record {
    # Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`
    @jsondata:Name {value: "lock_branch"}
    boolean lockBranch = false;
    # Pull request review requirements for the protected branch
    @jsondata:Name {value: "required_pull_request_reviews"}
    ReposownerrepobranchesbranchprotectionRequiredPullRequestReviews? requiredPullRequestReviews;
    # If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`
    @jsondata:Name {value: "block_creations"}
    boolean blockCreations?;
    # Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`
    @jsondata:Name {value: "required_conversation_resolution"}
    boolean requiredConversationResolution?;
    # Status check requirements that must pass before merging
    @jsondata:Name {value: "required_status_checks"}
    ReposownerrepobranchesbranchprotectionRequiredStatusChecks? requiredStatusChecks;
    # Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`
    @jsondata:Name {value: "allow_fork_syncing"}
    boolean allowForkSyncing = false;
    # Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable
    ReposownerrepobranchesbranchprotectionRestrictions? restrictions;
    # Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation
    @jsondata:Name {value: "required_linear_history"}
    boolean requiredLinearHistory?;
    # Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable
    @jsondata:Name {value: "enforce_admins"}
    boolean? enforceAdmins;
    # Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation
    @jsondata:Name {value: "allow_deletions"}
    boolean allowDeletions?;
    # Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
    @jsondata:Name {value: "allow_force_pushes"}
    boolean? allowForcePushes?;
};

# Issue Search Result Item
public type IssueSearchResultItemResponse record {
    # Total number of issues matching the search criteria
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Whether the search results are incomplete due to timeout or other issues
    @jsondata:Name {value: "incomplete_results"}
    boolean incompleteResults;
    # Array of issue search result items
    IssueSearchResultItem[] items;
};

# Groups of organization members that gives permissions on specified repositories
public type NullableTeamSimple record {
    # API URL to access the team's repositories
    @jsondata:Name {value: "repositories_url"}
    string repositoriesUrl;
    # API URL template to access team members
    @jsondata:Name {value: "members_url"}
    string membersUrl;
    # Description of the team
    string? description;
    # The level of privacy this team should have
    string privacy?;
    # Permission that the team will have for its repositories
    string permission;
    # URL for the team
    string url;
    # The notification setting the team has set
    @jsondata:Name {value: "notification_setting"}
    string notificationSetting?;
    # Distinguished Name (DN) that team maps to within LDAP environment
    @jsondata:Name {value: "ldap_dn"}
    string ldapDn?;
    # Web URL to view the team on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Name of the team
    string name;
    # Unique identifier of the team
    int id;
    # URL-friendly identifier for the team
    string slug;
    # Global node identifier for the team
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Configuration settings for an organization webhook
public type OrgHookConfig record {
    # Content type for webhook payload delivery
    @jsondata:Name {value: "content_type"}
    string contentType?;
    # Whether to verify SSL certificates when delivering webhook payloads
    @jsondata:Name {value: "insecure_ssl"}
    string insecureSsl?;
    # Secret token used to secure webhook payloads
    string secret?;
    # The URL endpoint where the organization webhook payload will be delivered
    string url?;
};

# Represents the Queries record for the operation: checks/list-for-suite
public type ChecksListForSuiteQueries record {
    # Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs
    "latest"|"all" filter = "latest";
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Returns check runs with the specified `name`
    @http:Query {name: "check_name"}
    string checkName?;
    # Page number of the results to fetch
    int page = 1;
    # Returns check runs with the specified `status`
    "queued"|"in_progress"|"completed" status?;
};

# Represents the Queries record for the operation: actions/get-actions-cache-list
public type ActionsGetActionsCacheListQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`
    string ref?;
    # Page number of the results to fetch
    int page = 1;
    # The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes
    "created_at"|"last_accessed_at"|"size_in_bytes" sort = "last_accessed_at";
    # An explicit key or prefix for identifying the cache
    string 'key?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Represents the Queries record for the operation: users/list-gpg-keys-for-authenticated-user
public type UsersListGpgKeysForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Schema representing files within a gist
public type GistsFiles record {
    # Content of the file
    string content;
};

# Parameters to be used for the committer_email_pattern rule
public type RepositoryRuleCommitterEmailPattern record {
    # Rule type identifier for committer email pattern validation
    "committer_email_pattern" 'type;
    # Parameters for repository rule that validates commit message patterns
    RepositoryRuleCommitMessagePatternParameters parameters?;
};

# Unlabeled Issue Event
public type UnlabeledIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the unlabeled event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed the unlabeled action
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Timestamp when the unlabeled event occurred
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the unlabeled issue event
    int id;
    # Label information for labeled issue events
    LabeledIssueEventLabel label;
    # Event type name for the unlabeled action
    string event;
    # SHA identifier of the commit associated with the event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for the unlabeled issue event
    string url;
    # The global node ID of the unlabeled issue event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Pull Request Review Request
public type PullRequestReviewRequest record {
    # Array of teams requested to review the pull request
    Team[] teams;
    # Array of users requested to review the pull request
    SimpleUser[] users;
};

# Organization billing plan details including repositories, seats, and storage
public type OrganizationFullPlan record {
    # Number of private repositories allowed in the plan
    @jsondata:Name {value: "private_repos"}
    int privateRepos;
    # Number of seats currently occupied in the plan
    @jsondata:Name {value: "filled_seats"}
    int filledSeats?;
    # Name of the organization billing plan
    string name;
    # Total number of seats available in the plan
    int seats?;
    # Storage space allocation in the plan
    int space;
};

# Statistics about file changes in a commit
public type CommitStats record {
    # Total number of lines changed in the commit
    int total?;
    # Number of lines added in the commit
    int additions?;
    # Number of lines deleted in the commit
    int deletions?;
};

# State of a code scanning alert
public type CodeScanningAlertState "open"|"dismissed"|"fixed";

# Request body for adding a reaction to a team discussion comment
public type CommentNumberReactionsBody record {
    # The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content;
};

# Request body for adding social media accounts to a user profile
public type UserSocialAccountsBody record {
    # Full URLs for the social media profiles to add
    @jsondata:Name {value: "account_urls"}
    string[] accountUrls;
};

# Evaluation results for individual rules within a rule suite
public type RuleSuiteRuleEvaluations record {
    # Source information for the evaluated rule
    @jsondata:Name {value: "rule_source"}
    RuleSuiteRuleSource ruleSource?;
    # The result of the evaluation of the individual rule
    "pass"|"fail" result?;
    # The type of rule
    @jsondata:Name {value: "rule_type"}
    string ruleType?;
    # The enforcement level of this rule source
    "active"|"evaluate"|"deleted ruleset" enforcement?;
    # Any associated details with the rule evaluation
    string details?;
};

# Webhooks for repositories
public type Hook record {
    # URL for testing the webhook
    @jsondata:Name {value: "test_url"}
    string testUrl;
    # Determines whether the hook is actually triggered on pushes
    boolean active;
    # Timestamp when the webhook was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Type of the webhook
    string 'type;
    # API URL for the webhook
    string url;
    # Timestamp when the webhook was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The name of a valid service, use 'web' for a webhook
    string name;
    # Unique identifier of the webhook
    int id;
    # Response details from the last webhook delivery attempt
    @jsondata:Name {value: "last_response"}
    HookResponse lastResponse;
    # Configuration settings for webhook delivery and authentication
    HookConfig config;
    # URL for sending ping requests to the webhook
    @jsondata:Name {value: "ping_url"}
    string pingUrl;
    # Determines what events the hook is triggered for. Default: ['push']
    string[] events;
    # URL for retrieving webhook delivery history
    @jsondata:Name {value: "deliveries_url"}
    string deliveriesUrl?;
};

# Installation
public type Installation record {
    # URL for generating access tokens for the installation
    @jsondata:Name {value: "access_tokens_url"}
    string accessTokensUrl;
    # URL for accessing repositories available to the installation
    @jsondata:Name {value: "repositories_url"}
    string repositoriesUrl;
    # Type of account the app is installed on (User or Organization)
    @jsondata:Name {value: "target_type"}
    string targetType;
    # Name of single file the installation has access to
    @jsondata:Name {value: "single_file_name"}
    string? singleFileName;
    # Timestamp when the installation was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The ID of the user or organization this token is being scoped to
    @jsondata:Name {value: "target_id"}
    int targetId;
    # Contact email address for the installation
    @jsondata:Name {value: "contact_email"}
    string? contactEmail?;
    # Describe whether all repositories have been selected or there's a selection involved
    @jsondata:Name {value: "repository_selection"}
    "all"|"selected" repositorySelection;
    # URL-friendly name of the installed application
    @jsondata:Name {value: "app_slug"}
    string appSlug;
    # User who suspended the installation
    @jsondata:Name {value: "suspended_by"}
    NullableSimpleUser? suspendedBy;
    # Timestamp when the installation was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The permissions granted to the user access token
    AppPermissions permissions;
    # Web URL for the installation settings page
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Whether the installation has access to multiple single files
    @jsondata:Name {value: "has_multiple_single_files"}
    boolean hasMultipleSingleFiles?;
    # The ID of the installation
    int id;
    # Unique identifier of the installed application
    @jsondata:Name {value: "app_id"}
    int appId;
    # Array of single file paths the installation can access
    @jsondata:Name {value: "single_file_paths"}
    string[] singleFilePaths?;
    # User or organization account that owns the installation
    SimpleUser|Enterprise? account;
    # Array of webhook events the installation subscribes to
    string[] events;
    # Timestamp when the installation was suspended
    @jsondata:Name {value: "suspended_at"}
    string? suspendedAt;
};

# Runner Application
public type RunnerApplication record {
    # SHA256 hash checksum of the runner application file
    @jsondata:Name {value: "sha256_checksum"}
    string sha256Checksum?;
    # Name of the runner application file
    string filename;
    # Operating system the runner application is designed for
    string os;
    # A short lived bearer token used to download the runner, if needed
    @jsondata:Name {value: "temp_download_token"}
    string tempDownloadToken?;
    # URL to download the runner application binary
    @jsondata:Name {value: "download_url"}
    string downloadUrl;
    # System architecture the runner application supports
    string architecture;
};

# Issue Event Milestone
public type IssueEventMilestone record {
    # Title of the milestone associated with the issue event
    string title;
};

# Check suite configuration preferences for a repository
public type CheckSuitePreference record {
    # Check suite preference settings for automatic trigger configuration
    CheckSuitePreferencePreferences preferences;
    # Minimal Repository
    MinimalRepository repository;
};

# File update information for modifying gist files
public type GistsgistIdFiles record {
    # The new filename for the file
    string? filename?;
    # The new content of the file
    string content?;
};

# Represents the Queries record for the operation: search/labels
public type SearchLabelsQueries record {
    # The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query)
    string q;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The id of the repository
    @http:Query {name: "repository_id"}
    int repositoryId;
    # Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
    "created"|"updated" sort?;
    # Page number of the results to fetch
    int page = 1;
    # Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`
    "desc"|"asc" 'order = "desc";
};

# Represents the Queries record for the operation: search/repos
public type SearchReposQueries record {
    # The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers
    string q;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
    "stars"|"forks"|"help-wanted-issues"|"updated" sort?;
    # Page number of the results to fetch
    int page = 1;
    # Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`
    "desc"|"asc" 'order = "desc";
};

# Represents the Queries record for the operation: teams/list
public type TeamsListQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Basic license information for a repository
public type MinimalRepositoryLicense record {
    # Human-readable name of the license
    string name?;
    # SPDX license identifier
    @jsondata:Name {value: "spdx_id"}
    string spdxId?;
    # Unique key identifier for the license
    string 'key?;
    # URL to the license details page
    string? url?;
    # Global node ID for the license
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Represents the Queries record for the operation: actions/list-environment-secrets
public type ActionsListEnvironmentSecretsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: repos/list-tags
public type ReposListTagsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# An enterprise on GitHub
public type Enterprise record {
    # The enterprise's website URL
    @jsondata:Name {value: "website_url"}
    string? websiteUrl?;
    # Timestamp when the enterprise was last updated
    @jsondata:Name {value: "updated_at"}
    string? updatedAt;
    # URL to the enterprise's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # Web URL to the enterprise's GitHub page
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # The name of the enterprise
    string name;
    # A short description of the enterprise
    string? description?;
    # Timestamp when the enterprise was created
    @jsondata:Name {value: "created_at"}
    string? createdAt;
    # Unique identifier of the enterprise
    int id;
    # The slug url identifier for the enterprise
    string slug;
    # Global node ID for the enterprise
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing
public type ProtectedBranchAllowForkSyncing record {|
    # Whether fork syncing is allowed for this protected branch
    boolean enabled = false;
|};

# Represents the Queries record for the operation: repos/get-repo-ruleset
public type ReposGetRepoRulesetQueries record {
    # Include rulesets configured at higher levels that apply to this repository
    @http:Query {name: "includes_parents"}
    boolean includesParents = true;
};

# Key/value pairs to provide settings for this webhook
public type ReposownerrepohookshookIdConfig record {
    # Email address for webhook notifications
    string address?;
    # Content type for webhook payload delivery
    @jsondata:Name {value: "content_type"}
    WebhookConfigContentType contentType?;
    # Whether to verify SSL certificates for webhook delivery
    @jsondata:Name {value: "insecure_ssl"}
    WebhookConfigInsecureSsl insecureSsl?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers)
    WebhookConfigSecret secret?;
    # The URL to which the payloads will be delivered
    WebhookConfigUrl url;
    # Room name for webhook notifications
    string room?;
};

# Represents the Queries record for the operation: users/list-followed-by-authenticated-user
public type UsersListFollowedByAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Pending changes to a marketplace purchase plan
public type MarketplacePurchaseMarketplacePendingChange record {
    # Whether the marketplace app is installed
    @jsondata:Name {value: "is_installed"}
    boolean isInstalled?;
    # Date when the pending change becomes effective
    @jsondata:Name {value: "effective_date"}
    string effectiveDate?;
    # Unique identifier for the pending change
    int id?;
    # Marketplace Listing Plan
    MarketplaceListingPlan plan?;
    # Number of units in the pending change
    @jsondata:Name {value: "unit_count"}
    int? unitCount?;
};

# Metaproperties for Git author/committer information
public type NullableGitUser record {
    # Date and time of the Git operation
    string date?;
    # Name of the Git user
    string name?;
    # Email address of the Git user
    string email?;
};

# Request body for setting custom labels on a runner
public type RunnerIdLabelsBody record {
    # The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels
    @constraint:Array {maxLength: 100}
    string[] labels;
};

# The name of the tool used to generate the code scanning analysis
public type CodeScanningAnalysisToolName string;

# Request body for generating release notes
public type ReleasesGenerateNotesBody record {
    # The tag name for the release. This can be an existing tag or a new one
    @jsondata:Name {value: "tag_name"}
    string tagName;
    # Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists
    @jsondata:Name {value: "target_commitish"}
    string targetCommitish?;
    # The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release
    @jsondata:Name {value: "previous_tag_name"}
    string previousTagName?;
    # Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used
    @jsondata:Name {value: "configuration_file_path"}
    string configurationFilePath?;
};

# Numeric value for webhook SSL verification configuration
public type WebhookConfigInsecureSslWebhookConfigInsecureSslOneOf12 decimal;

# Request body for creating a Git commit with message, tree, and optional metadata
public type GitCommitsBody record {
    # Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details
    ReposownerrepogitcommitsCommitter committer?;
    # The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits
    string signature?;
    # Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details
    ReposownerrepogitcommitsAuthor author?;
    # The SHA of the tree object this commit points to
    string tree;
    # The commit message
    string message;
    # The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided
    string[] parents?;
};

# Represents the Queries record for the operation: orgs/list-for-authenticated-user
public type OrgsListForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: gists/list-forks
public type GistsListForksQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# object containing information about the committer
public type ReposownerrepocontentspathCommitter1 record {
    # The name of the author (or committer) of the commit
    string name?;
    # The email of the author (or committer) of the commit
    string email?;
};

# The name of the package affected by the vulnerability
public type GlobalAdvisoryPackage record {
    # The package's language or package management ecosystem
    SecurityAdvisoryEcosystems ecosystem;
    # The unique package name within its ecosystem
    string? name;
};

# Request body to set email visibility as public or private
public type EmailVisibilityBody record {
    # Denotes whether an email is publicly visible
    "public"|"private" visibility;
};

# Union type representing different affect configurations
public type Affects AffectsOneOf1|AffectsAffectsOneOf12;

# Request body for locking an issue with optional reason
public type IssueNumberLockBody record {
    # The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
    #  * `off-topic`  
    #  * `too heated`  
    #  * `resolved`  
    #  * `spam`
    @jsondata:Name {value: "lock_reason"}
    "off-topic"|"too heated"|"resolved"|"spam" lockReason?;
};

# Request body for creating organization rulesets with enforcement and rules
public type OrgRulesetsBody record {
    # The actors that can bypass the rules in this ruleset
    @jsondata:Name {value: "bypass_actors"}
    RepositoryRulesetBypassActor[] bypassActors?;
    # The name of the ruleset
    string name;
    # The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise)
    RepositoryRuleEnforcement enforcement;
    # An array of rules within the ruleset
    RepositoryRule[] rules?;
    # Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties
    OrgRulesetConditions conditions?;
    # The target of the ruleset
    "branch"|"tag" target?;
};

# The URL to which the payloads will be delivered
public type WebhookConfigUrl string;

# Represents the Queries record for the operation: actions/list-repo-variables
public type ActionsListRepoVariablesQueries record {
    # The number of results per page (max 30)
    @http:Query {name: "per_page"}
    int perPage = 10;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: issues/list-labels-for-milestone
public type IssuesListLabelsForMilestoneQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details
public type ReposownerrepogitcommitsAuthor record {
    # Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string date?;
    # The name of the author (or committer) of the commit
    string name;
    # The email of the author (or committer) of the commit
    string email;
};

# Configuration for required status checks on protected branches
public type ProtectionRequiredStatusChecksBody record {
    # The list of status checks to require in order to merge into this branch
    ReposownerrepobranchesbranchprotectionRequiredStatusChecksChecks[] checks?;
    # **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control
    # 
    # # Deprecated
    @deprecated
    string[] contexts?;
    # Require branches to be up to date before merging
    boolean strict?;
};

# Required status check
public type RepositoryRuleParamsStatusCheckConfiguration record {
    # The optional integration ID that this status check must originate from
    @jsondata:Name {value: "integration_id"}
    int integrationId?;
    # The status check context name that must be present on the commit
    string context;
};

# Union type for required status check contexts configuration
public type RequiredStatusChecksContextsBody ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf1|ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsreposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf12;

# String variant for label representation
public type LabelsOneOf13 string;

# Request body for creating a review comment reply
public type CommentIdRepliesBody record {
    # The text of the review comment
    string body;
};

# Collaborator
public type NullableCollaborator record {
    # URL template for accessing the collaborator's gists
    @jsondata:Name {value: "gists_url"}
    string gistsUrl;
    # URL for accessing the collaborator's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # API URL template to get users this collaborator is following
    @jsondata:Name {value: "following_url"}
    string followingUrl;
    # API URL template to get repositories starred by this collaborator
    @jsondata:Name {value: "starred_url"}
    string starredUrl;
    # GitHub username of the collaborator
    string login;
    # API URL to get the collaborator's followers
    @jsondata:Name {value: "followers_url"}
    string followersUrl;
    # Type of GitHub account (User, Organization, etc.)
    string 'type;
    # API URL for the collaborator's profile
    string url;
    # Repository role assigned to the collaborator
    @jsondata:Name {value: "role_name"}
    string roleName;
    # API URL to get the collaborator's repository subscriptions
    @jsondata:Name {value: "subscriptions_url"}
    string subscriptionsUrl;
    # API URL to get events received by the collaborator
    @jsondata:Name {value: "received_events_url"}
    string receivedEventsUrl;
    # URL of the collaborator's profile avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # API URL template to get the collaborator's public events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # Repository access permissions for a collaborator
    CollaboratorPermissions permissions?;
    # GitHub web URL for the collaborator's profile page
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Display name of the collaborator (can be null)
    string? name?;
    # Whether the collaborator is a GitHub site administrator
    @jsondata:Name {value: "site_admin"}
    boolean siteAdmin;
    # Unique identifier for the collaborator
    int id;
    # Gravatar ID associated with the collaborator's email address
    @jsondata:Name {value: "gravatar_id"}
    string? gravatarId;
    # Email address of the collaborator
    string? email?;
    # Global node ID for the collaborator
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # API URL to retrieve the collaborator's organizations
    @jsondata:Name {value: "organizations_url"}
    string organizationsUrl;
};

# Request body schema for creating or updating a gist
public type GistsBody record {
    # Visibility flag indicating whether the gist is public or private
    boolean|"true"|"false" 'public?;
    # Description of the gist
    string description?;
    # Names and content for the files that make up the gist
    record {|GistsFiles...;|} files;
};

# Represents the Queries record for the operation: actions/get-workflow-run-attempt
public type ActionsGetWorkflowRunAttemptQueries record {
    # If `true` pull requests are omitted from the response (empty array)
    @http:Query {name: "exclude_pull_requests"}
    boolean excludePullRequests = false;
};

# Represents the Queries record for the operation: orgs/list-pat-grant-request-repositories
public type OrgsListPatGrantRequestRepositoriesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Feed
public type Feed record {
    # URL for GitHub security advisories feed
    @jsondata:Name {value: "security_advisories_url"}
    string securityAdvisoriesUrl?;
    # Hypermedia links related to the feed
    @jsondata:Name {value: "_links"}
    FeedLinks links;
    # Private feed URL for the authenticated user
    @jsondata:Name {value: "current_user_url"}
    string currentUserUrl?;
    # Organization feed URL for the authenticated user
    @jsondata:Name {value: "current_user_organization_url"}
    string currentUserOrganizationUrl?;
    # Array of private organization feed URLs for the authenticated user
    @jsondata:Name {value: "current_user_organization_urls"}
    string[] currentUserOrganizationUrls?;
    # URL template for user feeds
    @jsondata:Name {value: "user_url"}
    string userUrl;
    # A feed of discussions for a given repository
    @jsondata:Name {value: "repository_discussions_url"}
    string repositoryDiscussionsUrl?;
    # Private actor feed URL for the authenticated user
    @jsondata:Name {value: "current_user_actor_url"}
    string currentUserActorUrl?;
    # A feed of discussions for a given repository and category
    @jsondata:Name {value: "repository_discussions_category_url"}
    string repositoryDiscussionsCategoryUrl?;
    # Public feed URL for the authenticated user
    @jsondata:Name {value: "current_user_public_url"}
    string currentUserPublicUrl?;
    # URL for GitHub's public timeline feed
    @jsondata:Name {value: "timeline_url"}
    string timelineUrl;
};

# Details about the codespace's git repository
public type CodespaceGitStatus record {
    # The number of commits the local repository is behind the remote
    int behind?;
    # The current branch (or SHA if in detached HEAD state) of the local repository
    string ref?;
    # The number of commits the local repository is ahead of the remote
    int ahead?;
    # Whether the local repository has unpushed changes
    @jsondata:Name {value: "has_unpushed_changes"}
    boolean hasUnpushedChanges?;
    # Whether the local repository has uncommitted changes
    @jsondata:Name {value: "has_uncommitted_changes"}
    boolean hasUncommittedChanges?;
};

# Represents the Queries record for the operation: orgs/list-for-user
public type OrgsListForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Dev Containers
public type DevcontainersResponse record {
    # Array of devcontainer configurations
    Devcontainers[] devcontainers;
    # Total number of devcontainers found
    @jsondata:Name {value: "total_count"}
    int totalCount;
};

# Public User
public type PublicUser record {|
    # URL template for accessing the user's gists
    @jsondata:Name {value: "gists_url"}
    string gistsUrl;
    # API URL for the user's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # URL template for users this user is following
    @jsondata:Name {value: "following_url"}
    string followingUrl;
    # User's Twitter username
    @jsondata:Name {value: "twitter_username"}
    string? twitterUsername?;
    # User's biographical information
    string? bio;
    # Timestamp when the user account was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # User's GitHub username
    string login;
    # Type of GitHub account (User, Organization, etc.)
    string 'type;
    # User's blog or website URL
    string? blog;
    # Number of private gists owned by the user
    @jsondata:Name {value: "private_gists"}
    int privateGists?;
    # Total number of private repositories owned by the user
    @jsondata:Name {value: "total_private_repos"}
    int totalPrivateRepos?;
    # API URL for the user's repository subscriptions
    @jsondata:Name {value: "subscriptions_url"}
    string subscriptionsUrl;
    # Timestamp when the user account was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Indicates whether the user is a GitHub site administrator
    @jsondata:Name {value: "site_admin"}
    boolean siteAdmin;
    # Total disk space used by the user's repositories in kilobytes
    @jsondata:Name {value: "disk_usage"}
    int diskUsage?;
    # Number of collaborators the user has across their repositories
    int collaborators?;
    # Company or organization the user is associated with
    string? company;
    # Number of private repositories owned by the user
    @jsondata:Name {value: "owned_private_repos"}
    int ownedPrivateRepos?;
    # Unique identifier for the user
    int id;
    # Number of public repositories owned by the user
    @jsondata:Name {value: "public_repos"}
    int publicRepos;
    # Gravatar ID associated with the user's profile
    @jsondata:Name {value: "gravatar_id"}
    string? gravatarId;
    # GitHub plan details for a public user account
    PublicUserPlan plan?;
    # Email address of the user
    string? email;
    # API URL to retrieve the user's organizations
    @jsondata:Name {value: "organizations_url"}
    string organizationsUrl;
    # Indicates whether the user is available for hire
    boolean? hireable;
    # API URL template to retrieve repositories starred by the user
    @jsondata:Name {value: "starred_url"}
    string starredUrl;
    # API URL to retrieve the user's followers
    @jsondata:Name {value: "followers_url"}
    string followersUrl;
    # Number of public gists created by the user
    @jsondata:Name {value: "public_gists"}
    int publicGists;
    # API URL for the user's profile
    string url;
    # URL to retrieve events received by the user
    @jsondata:Name {value: "received_events_url"}
    string receivedEventsUrl;
    # Number of followers the user has
    int followers;
    # URL to the user's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # URL template to retrieve the user's public events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # URL to the user's GitHub profile page
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Number of users this user is following
    int following;
    # Display name of the user
    string? name;
    # Geographic location of the user
    string? location;
    # GraphQL node ID for the user
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Timestamp when the user account was suspended
    @jsondata:Name {value: "suspended_at"}
    string? suspendedAt?;
|};

# String label identifier
public type LabelsOneOf12 string;

# String label identifier
public type LabelsOneOf11 string;

# Represents the Queries record for the operation: activity/list-watched-repos-for-authenticated-user
public type ActivityListWatchedReposForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Webhook delivery request containing headers and payload
public type HookDeliveryRequest record {
    # The request headers sent with the webhook delivery
    record {}? headers;
    # The webhook payload
    record {}? payload;
};

# Empty interaction limit response object
public type InteractionLimitResponseAnyAnyOf2 record {|
|};

# Represents the Queries record for the operation: codespaces/list-in-organization
public type CodespacesListInOrganizationQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Data related to a release
public type ReleaseAsset record {
    # Timestamp when the release asset was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Direct download URL for the release asset accessible via browser
    @jsondata:Name {value: "browser_download_url"}
    string browserDownloadUrl;
    # Optional display label for the release asset
    string? label;
    # API URL for accessing the release asset
    string url;
    # Number of times the release asset has been downloaded
    @jsondata:Name {value: "download_count"}
    int downloadCount;
    # MIME type of the release asset file
    @jsondata:Name {value: "content_type"}
    string contentType;
    # Size of the release asset file in bytes
    int size;
    # Timestamp when the release asset was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # A GitHub user
    NullableSimpleUser? uploader;
    # The file name of the asset
    string name;
    # Unique identifier for the release asset
    int id;
    # State of the release asset
    "uploaded"|"open" state;
    # Global node identifier for the release asset
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue
public type SecretScanningLocationIssueTitle record {
    # The API URL to get the issue where the secret was detected
    @jsondata:Name {value: "issue_title_url"}
    string issueTitleUrl;
};

# Repo Search Result Item
public type RepoSearchResultItemResponse record {
    # Total number of repositories matching the search criteria
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Indicates if search results are incomplete due to timeout
    @jsondata:Name {value: "incomplete_results"}
    boolean incompleteResults;
    # Array of repository search result items
    RepoSearchResultItem[] items;
};

# Represents the Queries record for the operation: pulls/list-comments-for-review
public type PullsListCommentsForReviewQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for approving or denying personal access token requests
public type PersonalAccessTokenRequestspatRequestIdBody record {
    # Reason for approving or denying the request. Max 1024 characters
    string? reason?;
    # Action to apply to the request
    "approve"|"deny" action;
};

# Navigation links related to a pull request review comment
public type ReviewCommentLinks record {
    # Link to the pull request containing this review comment
    @jsondata:Name {value: "pull_request"}
    Link pullRequest;
    # Hypermedia Link
    Link self;
    # Hypermedia Link
    Link html;
};

# Minimal Repository
public type NullableMinimalRepository record {
    # Whether forking is allowed for this repository
    @jsondata:Name {value: "allow_forking"}
    boolean allowForking?;
    # Number of users who have starred this repository
    @jsondata:Name {value: "stargazers_count"}
    int stargazersCount?;
    # Whether this repository is a template repository
    @jsondata:Name {value: "is_template"}
    boolean isTemplate?;
    # Timestamp when the repository was last pushed to
    @jsondata:Name {value: "pushed_at"}
    string? pushedAt?;
    # API URL for managing subscription to this repository
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl;
    # Primary programming language of the repository
    string? language?;
    # API URL template for accessing repository branches
    @jsondata:Name {value: "branches_url"}
    string branchesUrl;
    # API URL template for accessing issue comments
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl;
    # API URL template for accessing repository labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # API URL for accessing repository subscribers
    @jsondata:Name {value: "subscribers_url"}
    string subscribersUrl;
    # Permission levels for repository template access
    RepositoryTemplateRepositoryPermissions permissions?;
    # Temporary token for cloning private repositories
    @jsondata:Name {value: "temp_clone_token"}
    string tempCloneToken?;
    # API URL template for accessing repository releases
    @jsondata:Name {value: "releases_url"}
    string releasesUrl;
    # Subversion URL for the repository
    @jsondata:Name {value: "svn_url"}
    string svnUrl?;
    # Number of users subscribed to repository notifications
    @jsondata:Name {value: "subscribers_count"}
    int subscribersCount?;
    # Unique identifier for the repository
    int id;
    # Indicates whether the repository has GitHub Discussions enabled
    @jsondata:Name {value: "has_discussions"}
    boolean hasDiscussions?;
    # The number of forks of this repository
    int forks?;
    # URL template for downloading repository archives in various formats
    @jsondata:Name {value: "archive_url"}
    string archiveUrl;
    # URL template for accessing Git references in the repository
    @jsondata:Name {value: "git_refs_url"}
    string gitRefsUrl;
    # API URL for accessing the repository's forks
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # The visibility level of the repository (public, private, internal)
    string visibility?;
    # URL template for accessing commit statuses in the repository
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # The total number of repositories in the network
    @jsondata:Name {value: "network_count"}
    int networkCount?;
    # SSH URL for cloning the repository
    @jsondata:Name {value: "ssh_url"}
    string sshUrl?;
    # The user's permission level for the repository
    @jsondata:Name {value: "role_name"}
    string roleName?;
    # Basic license information for a repository (nullable)
    NullableMinimalRepositoryLicense? license?;
    # The full name of the repository in owner/name format
    @jsondata:Name {value: "full_name"}
    string fullName;
    # The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0
    int size?;
    # API URL for accessing the repository's programming languages
    @jsondata:Name {value: "languages_url"}
    string languagesUrl;
    # The web URL for viewing the repository on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # URL template for accessing repository collaborators
    @jsondata:Name {value: "collaborators_url"}
    string collaboratorsUrl;
    # HTTPS URL for cloning the repository
    @jsondata:Name {value: "clone_url"}
    string cloneUrl?;
    # The name of the repository
    string name;
    # API URL template for accessing pull requests in the repository
    @jsondata:Name {value: "pulls_url"}
    string pullsUrl;
    # The default branch name of the repository
    @jsondata:Name {value: "default_branch"}
    string defaultBranch?;
    # API URL for accessing repository webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # API URL template for accessing git trees in the repository
    @jsondata:Name {value: "trees_url"}
    string treesUrl;
    # API URL for accessing repository tags
    @jsondata:Name {value: "tags_url"}
    string tagsUrl;
    # Whether the repository is private
    boolean 'private;
    # API URL for accessing repository contributors
    @jsondata:Name {value: "contributors_url"}
    string contributorsUrl;
    # Whether the repository has downloads enabled
    @jsondata:Name {value: "has_downloads"}
    boolean hasDownloads?;
    # API URL template for accessing repository notifications
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl;
    # The number of open issues in the repository
    @jsondata:Name {value: "open_issues_count"}
    int openIssuesCount?;
    # The description of the repository
    string? description;
    # The timestamp when the repository was created
    @jsondata:Name {value: "created_at"}
    string? createdAt?;
    # The number of users watching the repository
    int watchers?;
    # API URL for accessing repository deployments
    @jsondata:Name {value: "deployments_url"}
    string deploymentsUrl;
    # URL template for accessing repository deploy keys
    @jsondata:Name {value: "keys_url"}
    string keysUrl;
    # Whether the repository has projects enabled
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects?;
    # Whether the repository is archived
    boolean archived?;
    # Whether the repository has wiki enabled
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki?;
    # Timestamp when the repository was last updated
    @jsondata:Name {value: "updated_at"}
    string? updatedAt?;
    # URL template for accessing repository comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # URL for accessing repository stargazers
    @jsondata:Name {value: "stargazers_url"}
    string stargazersUrl;
    # Whether the repository is disabled
    boolean disabled?;
    # Whether branches are automatically deleted after merge
    @jsondata:Name {value: "delete_branch_on_merge"}
    boolean deleteBranchOnMerge?;
    # Git protocol URL for cloning the repository
    @jsondata:Name {value: "git_url"}
    string gitUrl?;
    # Whether the repository has GitHub Pages enabled
    @jsondata:Name {value: "has_pages"}
    boolean hasPages?;
    # A GitHub user
    SimpleUser owner;
    # URL template for accessing repository commits
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # URL template for comparing repository commits
    @jsondata:Name {value: "compare_url"}
    string compareUrl;
    # URL template for accessing Git commits via API
    @jsondata:Name {value: "git_commits_url"}
    string gitCommitsUrl;
    # Array of topic tags associated with the repository
    string[] topics?;
    # API URL template for accessing repository blob objects by SHA
    @jsondata:Name {value: "blobs_url"}
    string blobsUrl;
    # API URL template for accessing repository Git tags by SHA
    @jsondata:Name {value: "git_tags_url"}
    string gitTagsUrl;
    # API URL for repository merge operations
    @jsondata:Name {value: "merges_url"}
    string mergesUrl;
    # API URL for repository downloads
    @jsondata:Name {value: "downloads_url"}
    string downloadsUrl;
    # Whether the repository has issues enabled
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues?;
    # The repository's code of conduct information
    @jsondata:Name {value: "code_of_conduct"}
    CodeOfConduct codeOfConduct?;
    # Whether commits must be signed off through the web interface
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired?;
    # API URL for the repository
    string url;
    # API URL template for accessing repository contents by path
    @jsondata:Name {value: "contents_url"}
    string contentsUrl;
    # URL of the repository this is mirrored from
    @jsondata:Name {value: "mirror_url"}
    string? mirrorUrl?;
    # API URL template for accessing repository milestones by number
    @jsondata:Name {value: "milestones_url"}
    string milestonesUrl;
    # API URL for repository teams
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Security and analysis settings for the repository
    @jsondata:Name {value: "security_and_analysis"}
    SecurityAndAnalysis? securityAndAnalysis?;
    # Whether the repository is a fork
    boolean 'fork;
    # API URL template for accessing repository issues by number
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # URL endpoint for accessing repository events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # URL template for accessing repository issue events
    @jsondata:Name {value: "issue_events_url"}
    string issueEventsUrl;
    # URL template for accessing repository assignees
    @jsondata:Name {value: "assignees_url"}
    string assigneesUrl;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues"}
    int openIssues?;
    # Number of users watching the repository
    @jsondata:Name {value: "watchers_count"}
    int watchersCount?;
    # Global node identifier for the repository
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Homepage URL for the repository
    string? homepage?;
    # Number of times the repository has been forked
    @jsondata:Name {value: "forks_count"}
    int forksCount?;
};

# Represents the Queries record for the operation: users/list-ssh-signing-keys-for-user
public type UsersListSshSigningKeysForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# A commit
public type SimpleCommit record {
    # Information about the Git committer
    NullableSimpleCommitCommitter? committer;
    # SHA for the commit's tree
    @jsondata:Name {value: "tree_id"}
    string treeId;
    # Information about the Git author
    NullableSimpleCommitAuthor? author;
    # SHA for the commit
    string id;
    # Message describing the purpose of the commit
    string message;
    # Timestamp of the commit
    string timestamp;
};

# A self hosted runner
public type Runner record {
    # The Operating System of the runner
    string os;
    # Whether the runner is currently executing a job
    boolean busy;
    # The name of the runner
    string name;
    # The id of the runner
    int id;
    # The id of the runner group
    @jsondata:Name {value: "runner_group_id"}
    int runnerGroupId?;
    # The status of the runner
    string status;
    # Labels associated with the runner
    RunnerLabel[] labels;
};

# Allow specific users, teams, or apps to bypass pull request requirements
public type ProtectedBranchPullRequestReviewBypassPullRequestAllowances record {
    # The list of teams allowed to bypass pull request requirements
    Team[] teams?;
    # The list of users allowed to bypass pull request requirements
    SimpleUser[] users?;
    # The list of apps allowed to bypass pull request requirements
    Integration[] apps?;
};

# The security alert number
public type AlertNumber int;

# Request body for creating or updating a repository milestone
public type RepoMilestonesBody record {
    # A description of the milestone
    string description?;
    # The state of the milestone. Either `open` or `closed`
    "open"|"closed" state = "open";
    # The title of the milestone
    string title;
    # The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    @jsondata:Name {value: "due_on"}
    string dueOn?;
};

# Parameters to be used for the commit_author_email_pattern rule
public type RepositoryRuleCommitAuthorEmailPattern record {
    # Type identifier for commit author email pattern rule
    "commit_author_email_pattern" 'type;
    # Parameters for repository rule that validates commit message patterns
    RepositoryRuleCommitMessagePatternParameters parameters?;
};

# Required status check contexts for branch protection
public type ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf1 record {
    # The name of the status checks
    string[] contexts;
};

# A Dependabot alert
public type DependabotAlertWithRepository record {|
    # Details for the vulnerable dependency
    DependabotAlertWithRepositoryDependency dependency;
    # Security advisory details for the Dependabot alert
    @jsondata:Name {value: "security_advisory"}
    DependabotAlertSecurityAdvisory securityAdvisory;
    # Security vulnerability details for the Dependabot alert
    @jsondata:Name {value: "security_vulnerability"}
    DependabotAlertSecurityVulnerability securityVulnerability;
    # The timestamp when the Dependabot alert was created
    @jsondata:Name {value: "created_at"}
    AlertCreatedAt createdAt;
    # An optional comment associated with the alert's dismissal
    @jsondata:Name {value: "dismissed_comment"}
    string? dismissedComment;
    # A GitHub repository
    SimpleRepository repository;
    # The timestamp when the Dependabot alert was automatically dismissed
    @jsondata:Name {value: "auto_dismissed_at"}
    AlertAutoDismissedAt? autoDismissedAt?;
    # The REST API URL of the alert resource
    AlertUrl url;
    # The security alert number
    AlertNumber number;
    # The timestamp when the Dependabot alert was last updated
    @jsondata:Name {value: "updated_at"}
    AlertUpdatedAt updatedAt;
    # The GitHub URL for viewing the Dependabot alert in the web interface
    @jsondata:Name {value: "html_url"}
    AlertHtmlUrl htmlUrl;
    # The timestamp when the Dependabot alert was fixed
    @jsondata:Name {value: "fixed_at"}
    AlertFixedAt? fixedAt;
    # The state of the Dependabot alert
    "auto_dismissed"|"dismissed"|"fixed"|"open" state;
    # The user who dismissed the Dependabot alert
    @jsondata:Name {value: "dismissed_by"}
    NullableSimpleUser? dismissedBy;
    # The reason that the alert was dismissed
    @jsondata:Name {value: "dismissed_reason"}
    "fix_started"|"inaccurate"|"no_bandwidth"|"not_used"|"tolerable_risk"? dismissedReason;
    # The timestamp when the Dependabot alert was dismissed
    @jsondata:Name {value: "dismissed_at"}
    AlertDismissedAt? dismissedAt;
|};

# Request body schema for updating webhook configuration and settings
public type HookshookIdBody record {
    # The name of the webhook service
    string name?;
    # Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications
    boolean active = true;
    # Key/value pairs to provide settings for this webhook
    OrgsorghookshookIdConfig config?;
    # Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for
    string[] events = ["push"];
};

# API rate limiting information including usage and reset time
public type RateLimit record {
    # Maximum number of requests allowed per hour
    int 'limit;
    # Unix timestamp when the rate limit window resets
    int reset;
    # Number of requests made in the current rate limit window
    int used;
    # Number of requests remaining in the current rate limit window
    int remaining;
};

# Thread Subscription
public type ThreadSubscription record {
    # Whether the user is subscribed to the thread
    boolean subscribed;
    # Whether the user has ignored notifications for this thread
    boolean ignored;
    # Reason for the current subscription state, null if none
    string? reason;
    # Timestamp when the subscription was created, null if not applicable
    @jsondata:Name {value: "created_at"}
    string? createdAt;
    # URL of the notification thread
    @jsondata:Name {value: "thread_url"}
    string threadUrl?;
    # URL of the repository associated with the thread subscription
    @jsondata:Name {value: "repository_url"}
    string repositoryUrl?;
    # URL of the thread subscription endpoint
    string url;
};

# Represents the Queries record for the operation: repos/list-deployment-branch-policies
public type ReposListDeploymentBranchPoliciesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Organization variable for GitHub Actions
public type OrganizationActionsVariable record {
    # The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Visibility of a variable
    "all"|"private"|"selected" visibility;
    # The name of the variable
    string name;
    # URL to access repositories selected for this organization variable
    @jsondata:Name {value: "selected_repositories_url"}
    string selectedRepositoriesUrl?;
    # The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The value of the variable
    string value;
};

# Output details and annotations for a check run
public type CheckRunOutput record {
    # Summary of the check run output
    string? summary;
    # URL to retrieve annotations for this check run
    @jsondata:Name {value: "annotations_url"}
    string annotationsUrl;
    # Detailed text output from the check run
    string? text;
    # Title of the check run output
    string? title;
    # Number of annotations associated with this check run
    @jsondata:Name {value: "annotations_count"}
    int annotationsCount;
};

# A topic aggregates entities that are related to a subject
public type Topic record {
    # Array of topic names
    string[] names;
};

# Array of user restrictions for branch protection
public type ReposownerrepobranchesbranchprotectionrestrictionsusersreposownerrepobranchesbranchprotectionrestrictionsusersOneOf122 string[];

# Represents the Queries record for the operation: repos/list-pages-builds
public type ReposListPagesBuildsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing
public type BranchProtectionAllowForkSyncing record {
    # Whether fork syncing is enabled for branch protection
    boolean enabled = false;
};

# Represents the Queries record for the operation: orgs/list-pat-grant-repositories
public type OrgsListPatGrantRepositoriesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Auto-trigger check configuration for a GitHub App
public type CheckSuitePreferencePreferencesAutoTriggerChecks record {
    # GitHub App ID for auto-trigger check configuration
    @jsondata:Name {value: "app_id"}
    int appId;
    # Boolean flag to enable or disable auto-trigger checks
    boolean setting;
};

# Commit Comment
public type CommitComment record {
    # Line number in the file where the comment is positioned
    int? line;
    # Timestamp when the commit comment was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The content text of the commit comment
    string body;
    # API URL for the commit comment resource
    string url;
    # Author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # Relative path to the file being commented on
    string? path;
    # Timestamp when the commit comment was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Web URL to view the commit comment in GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Aggregated count of all reaction types on a GitHub item
    ReactionRollup reactions?;
    # Unique identifier for the commit comment
    int id;
    # Position in the diff where the comment appears
    int? position;
    # SHA of the commit being commented on
    @jsondata:Name {value: "commit_id"}
    string commitId;
    # A GitHub user
    NullableSimpleUser? user;
    # Global node identifier for the commit comment
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories
public type ReposownerrepobranchesbranchprotectionRequiredPullRequestReviewsDismissalRestrictions record {
    # The list of team `slug`s with dismissal access
    string[] teams?;
    # The list of user `login`s with dismissal access
    string[] users?;
    # The list of app `slug`s with dismissal access
    string[] apps?;
};

# Package dependency manifest file with resolved dependencies
public type Manifest record {|
    # User-defined metadata to store domain-specific information limited to 8 keys with scalar values
    Metadata metadata?;
    # Represents a manifest file with its source location in the repository
    ManifestFile file?;
    # The name of the manifest
    string name;
    # A collection of resolved package dependencies
    record {|Dependency...;|} resolved?;
|};

# Represents the Queries record for the operation: repos/list-for-user
public type ReposListForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The property to sort the results by
    "created"|"updated"|"pushed"|"full_name" sort = "full_name";
    # Page number of the results to fetch
    int page = 1;
    # Limit results to repositories of the specified type
    "all"|"owner"|"member" 'type = "owner";
    # The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`
    "asc"|"desc" direction?;
};

# Request body for updating repository ruleset configuration
public type RulesetsrulesetIdBody record {
    # The actors that can bypass the rules in this ruleset
    @jsondata:Name {value: "bypass_actors"}
    RepositoryRulesetBypassActor[] bypassActors?;
    # The name of the ruleset
    string name?;
    # The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise)
    RepositoryRuleEnforcement enforcement?;
    # An array of rules within the ruleset
    RepositoryRule[] rules?;
    # Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties
    OrgRulesetConditions conditions?;
    # The target of the ruleset
    "branch"|"tag" target?;
};

# Protected Branch Pull Request Review
public type ProtectedBranchPullRequestReview record {
    # Restrictions on who can dismiss pull request reviews
    @jsondata:Name {value: "dismissal_restrictions"}
    ProtectedBranchPullRequestReviewDismissalRestrictions dismissalRestrictions?;
    # Number of required approving reviews (0-6)
    @jsondata:Name {value: "required_approving_review_count"}
    int requiredApprovingReviewCount?;
    # Whether code owner reviews are required
    @jsondata:Name {value: "require_code_owner_reviews"}
    boolean requireCodeOwnerReviews;
    # Whether stale reviews are dismissed on new commits
    @jsondata:Name {value: "dismiss_stale_reviews"}
    boolean dismissStaleReviews;
    # Users/teams allowed to bypass pull request requirements
    @jsondata:Name {value: "bypass_pull_request_allowances"}
    ProtectedBranchPullRequestReviewBypassPullRequestAllowances bypassPullRequestAllowances?;
    # Whether the most recent push must be approved by someone other than the person who pushed it
    @jsondata:Name {value: "require_last_push_approval"}
    boolean requireLastPushApproval = false;
    # API URL for dismissal restrictions
    string url?;
};

# Branch protections protect branches
public type ProtectedBranch record {
    # Pull request review requirements for the branch
    @jsondata:Name {value: "required_pull_request_reviews"}
    ProtectedBranchRequiredPullRequestReviews requiredPullRequestReviews?;
    # Required commit signature verification settings
    @jsondata:Name {value: "required_signatures"}
    BranchProtectionRequiredSignatures requiredSignatures?;
    # Required status checks before merging
    @jsondata:Name {value: "required_status_checks"}
    StatusCheckPolicy requiredStatusChecks?;
    # Whether fork syncing is allowed
    @jsondata:Name {value: "allow_fork_syncing"}
    ProtectedBranchAllowForkSyncing allowForkSyncing?;
    # Whether linear history is required
    @jsondata:Name {value: "required_linear_history"}
    ProtectedBranchRequiredLinearHistory requiredLinearHistory?;
    # Branch Restriction Policy
    BranchRestrictionPolicy restrictions?;
    # Whether protection rules apply to administrators
    @jsondata:Name {value: "enforce_admins"}
    ProtectedBranchEnforceAdmins enforceAdmins?;
    # API URL for the protected branch
    string url;
    # Whether force pushes are allowed
    @jsondata:Name {value: "allow_force_pushes"}
    ProtectedBranchRequiredLinearHistory allowForcePushes?;
    # Whether the branch is locked
    @jsondata:Name {value: "lock_branch"}
    ProtectedBranchLockBranch lockBranch?;
    # Requires all conversations on code to be resolved before merging
    @jsondata:Name {value: "required_conversation_resolution"}
    ProtectedBranchRequiredConversationResolution requiredConversationResolution?;
    # Blocks creation of branches and tags that match the protected branch pattern
    @jsondata:Name {value: "block_creations"}
    ProtectedBranchRequiredLinearHistory blockCreations?;
    # Allows deletion of the protected branch by users with push access
    @jsondata:Name {value: "allow_deletions"}
    ProtectedBranchRequiredLinearHistory allowDeletions?;
};

# Represents the Queries record for the operation: actions/list-self-hosted-runners-for-org
public type ActionsListSelfHostedRunnersForOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The name of a self-hosted runner
    string name?;
    # Page number of the results to fetch
    int page = 1;
};

# Identifying information for the git-user
public type GitCommitAuthor record {
    # Timestamp of the commit
    string date;
    # Name of the git user
    string name;
    # Git email address of the user
    string email;
};

# Represents the Queries record for the operation: secret-scanning/list-alerts-for-org
public type SecretScanningListAlertsForOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # A comma-separated list of secret types to return. By default all secret types are returned.
    # See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
    # for a complete list of secret types
    @http:Query {name: "secret_type"}
    string secretType?;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string
    string before?;
    # Set to `open` or `resolved` to only list secret scanning alerts in a specific state
    "open"|"resolved" state?;
    # The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved
    "created"|"updated" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string
    string after?;
    # A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`
    string resolution?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Request body for granting team permissions on a repository
public type OwnerrepoBody record {
    # The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository
    string permission = "push";
};

# A GitHub Actions workflow
public type WorkflowResponse record {
    # Total number of workflows returned in the response
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of workflow objects in the repository
    Workflow[] workflows;
};

# Detailed repository rule combining tag name pattern with ruleset information
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf1234567891011121314 record {
    *RepositoryRuleTagNamePattern;
    *RepositoryRuleRulesetInfo;
};

# Configuration parameters for pull request repository rules
public type RepositoryRulePullRequestParameters record {
    # All conversations on code must be resolved before a pull request can be merged
    @jsondata:Name {value: "required_review_thread_resolution"}
    boolean requiredReviewThreadResolution;
    # The number of approving reviews that are required before a pull request can be merged
    @jsondata:Name {value: "required_approving_review_count"}
    int requiredApprovingReviewCount;
    # Require an approving review in pull requests that modify files that have a designated code owner
    @jsondata:Name {value: "require_code_owner_review"}
    boolean requireCodeOwnerReview;
    # New, reviewable commits pushed will dismiss previous pull request review approvals
    @jsondata:Name {value: "dismiss_stale_reviews_on_push"}
    boolean dismissStaleReviewsOnPush;
    # Whether the most recent reviewable push must be approved by someone other than the person who pushed it
    @jsondata:Name {value: "require_last_push_approval"}
    boolean requireLastPushApproval;
};

# Pull request number for this codespace
public type UsercodespacesPullRequest record {
    # Pull request number
    @jsondata:Name {value: "pull_request_number"}
    int pullRequestNumber;
    # Repository id for this codespace
    @jsondata:Name {value: "repository_id"}
    int repositoryId;
};

# Array of usernames for branch protection user restrictions
public type ReposownerrepobranchesbranchprotectionrestrictionsusersreposownerrepobranchesbranchprotectionrestrictionsusersOneOf112 string[];

# The package's language or package management ecosystem
public type SecurityAdvisoryEcosystems "rubygems"|"npm"|"pip"|"maven"|"nuget"|"composer"|"go"|"rust"|"erlang"|"actions"|"pub"|"other"|"swift";

# Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository
public type SecretScanningLocationCommit record {
    # The file path in the repository
    string path;
    # The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
    @jsondata:Name {value: "start_column"}
    decimal startColumn;
    # The API URL to get the associated commit resource
    @jsondata:Name {value: "commit_url"}
    string commitUrl;
    # SHA-1 hash ID of the associated commit
    @jsondata:Name {value: "commit_sha"}
    string commitSha;
    # Line number at which the secret starts in the file
    @jsondata:Name {value: "start_line"}
    decimal startLine;
    # SHA-1 hash ID of the associated blob
    @jsondata:Name {value: "blob_sha"}
    string blobSha;
    # The API URL to get the associated blob resource
    @jsondata:Name {value: "blob_url"}
    string blobUrl;
    # Line number at which the secret ends in the file
    @jsondata:Name {value: "end_line"}
    decimal endLine;
    # The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
    @jsondata:Name {value: "end_column"}
    decimal endColumn;
};

# Prevent merge commits from being pushed to matching refs
public type RepositoryRuleRequiredLinearHistory record {
    # Repository rule type identifier for required linear history
    "required_linear_history" 'type;
};

# Label information for labeled issue events
public type LabeledIssueEventLabel record {
    # Hexadecimal color code of the label
    string color;
    # Display name of the label
    string name;
};

# Detailed repository rule combining update rule and ruleset information
public type RepositoryRuleDetailedRepositoryRuleDetailedOneOf12 record {
    *RepositoryRuleUpdate;
    *RepositoryRuleRulesetInfo;
};

# Represents the Queries record for the operation: migrations/list-for-authenticated-user
public type MigrationsListForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: orgs/list-app-installations
public type OrgsListAppInstallationsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Conditions to target repositories by name and refs by name
public type RepositoryNameAndRefName record {
    *RepositoryRulesetConditions;
    *RepositoryRulesetConditionsRepositoryNameTarget;
};

# Represents the Queries record for the operation: repos/codeowners-errors
public type ReposCodeownersErrorsQueries record {
    # A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`)
    string ref?;
};

# A repository on GitHub
public type NullableRepository record {
    # Whether to allow forking this repo
    @jsondata:Name {value: "allow_forking"}
    boolean allowForking?;
    # Whether anonymous git access is enabled for this repository
    @jsondata:Name {value: "anonymous_access_enabled"}
    boolean anonymousAccessEnabled?;
    # API URL for repository subscription management
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl;
    # API URL template for accessing repository branches
    @jsondata:Name {value: "branches_url"}
    string branchesUrl;
    # API URL template for accessing issue comments
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl;
    # Whether to allow rebase merges for pull requests
    @jsondata:Name {value: "allow_rebase_merge"}
    boolean allowRebaseMerge = true;
    # Repository access permissions for different privilege levels
    RepositoryPermissions permissions?;
    # API URL for accessing repository subscribers
    @jsondata:Name {value: "subscribers_url"}
    string subscribersUrl;
    # Temporary token for cloning the repository
    @jsondata:Name {value: "temp_clone_token"}
    string tempCloneToken?;
    # API URL template for accessing repository releases
    @jsondata:Name {value: "releases_url"}
    string releasesUrl;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "squash_merge_commit_message"}
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squashMergeCommitMessage?;
    # Number of users subscribed to repository notifications
    @jsondata:Name {value: "subscribers_count"}
    int subscribersCount?;
    # Unique identifier of the repository
    int id;
    # Whether discussions are enabled
    @jsondata:Name {value: "has_discussions"}
    boolean hasDiscussions = false;
    # Number of times the repository has been forked
    int forks;
    # API URL template for accessing Git references
    @jsondata:Name {value: "git_refs_url"}
    string gitRefsUrl;
    # SSH URL for cloning the repository
    @jsondata:Name {value: "ssh_url"}
    string sshUrl;
    # Full name of the repository in owner/name format
    @jsondata:Name {value: "full_name"}
    string fullName;
    # The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0
    int size;
    # Template repository this repository was created from
    @jsondata:Name {value: "template_repository"}
    RepositoryTemplateRepository? templateRepository?;
    # API URL for accessing repository programming languages
    @jsondata:Name {value: "languages_url"}
    string languagesUrl;
    # GitHub web URL for the repository
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # API URL template for accessing repository collaborators
    @jsondata:Name {value: "collaborators_url"}
    string collaboratorsUrl;
    # HTTPS URL for cloning the repository
    @jsondata:Name {value: "clone_url"}
    string cloneUrl;
    # The default branch of the repository
    @jsondata:Name {value: "default_branch"}
    string defaultBranch;
    # API URL for managing repository webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # API URL template for accessing repository git trees
    @jsondata:Name {value: "trees_url"}
    string treesUrl;
    # Whether downloads are enabled
    # 
    # # Deprecated
    @jsondata:Name {value: "has_downloads"}
    @deprecated
    boolean hasDownloads = true;
    # Timestamp when the repository was created
    @jsondata:Name {value: "created_at"}
    string? createdAt;
    # Number of users watching the repository
    int watchers;
    # API URL for repository deployments
    @jsondata:Name {value: "deployments_url"}
    string deploymentsUrl;
    # API URL template for repository deploy keys
    @jsondata:Name {value: "keys_url"}
    string keysUrl;
    # Whether the repository is archived
    boolean archived = false;
    # Whether the wiki is enabled
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki = true;
    # Timestamp when the repository was last updated
    @jsondata:Name {value: "updated_at"}
    string? updatedAt;
    # Returns whether or not this repository disabled
    boolean disabled;
    # API URL template for comparing commits or branches
    @jsondata:Name {value: "compare_url"}
    string compareUrl;
    # API URL template for accessing git commit objects
    @jsondata:Name {value: "git_commits_url"}
    string gitCommitsUrl;
    # Array of topic tags associated with the repository
    string[] topics?;
    # Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging
    @jsondata:Name {value: "allow_update_branch"}
    boolean allowUpdateBranch = false;
    # API URL template for accessing git tag objects
    @jsondata:Name {value: "git_tags_url"}
    string gitTagsUrl;
    # API URL for performing repository merges
    @jsondata:Name {value: "merges_url"}
    string mergesUrl;
    # Timestamp when the repository was starred by the user
    @jsondata:Name {value: "starred_at"}
    string starredAt?;
    # API URL for the repository resource
    string url;
    # API URL template for accessing repository file contents
    @jsondata:Name {value: "contents_url"}
    string contentsUrl;
    # API URL template for accessing repository issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead
    # 
    # # Deprecated
    @jsondata:Name {value: "use_squash_pr_title_as_default"}
    @deprecated
    boolean useSquashPrTitleAsDefault = false;
    # A GitHub user
    NullableSimpleUser? organization?;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "merge_commit_message"}
    "PR_BODY"|"PR_TITLE"|"BLANK" mergeCommitMessage?;
    # API URL template for accessing repository assignees
    @jsondata:Name {value: "assignees_url"}
    string assigneesUrl;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)
    @jsondata:Name {value: "squash_merge_commit_title"}
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squashMergeCommitTitle?;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues"}
    int openIssues;
    # Global node identifier for the repository
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Number of users who have starred the repository
    @jsondata:Name {value: "stargazers_count"}
    int stargazersCount;
    # Whether this repository acts as a template that can be used to generate new repositories
    @jsondata:Name {value: "is_template"}
    boolean isTemplate = false;
    # Timestamp of the last push to the repository
    @jsondata:Name {value: "pushed_at"}
    string? pushedAt;
    # Primary programming language of the repository
    string? language;
    # API URL template for accessing repository labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # Subversion URL for the repository
    @jsondata:Name {value: "svn_url"}
    string svnUrl;
    # Name of the repository's master branch
    @jsondata:Name {value: "master_branch"}
    string masterBranch?;
    # API URL template for downloading repository archives
    @jsondata:Name {value: "archive_url"}
    string archiveUrl;
    # Whether to allow merge commits for pull requests
    @jsondata:Name {value: "allow_merge_commit"}
    boolean allowMergeCommit = true;
    # API URL for accessing repository forks
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # The repository visibility: public, private, or internal
    string visibility = "public";
    # API URL template for accessing commit statuses
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # Number of repositories in the network
    @jsondata:Name {value: "network_count"}
    int networkCount?;
    # License Simple
    NullableLicenseSimple? license;
    # Whether to allow Auto-merge to be used on pull requests
    @jsondata:Name {value: "allow_auto_merge"}
    boolean allowAutoMerge = false;
    # The name of the repository
    string name;
    # API URL template for accessing pull requests
    @jsondata:Name {value: "pulls_url"}
    string pullsUrl;
    # API URL to access repository tags
    @jsondata:Name {value: "tags_url"}
    string tagsUrl;
    # Whether the repository is private or public
    boolean 'private = false;
    # API URL to access repository contributors
    @jsondata:Name {value: "contributors_url"}
    string contributorsUrl;
    # API URL template to access repository notifications
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues_count"}
    int openIssuesCount;
    # Repository description text
    string? description;
    # Whether projects are enabled
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects = true;
    # The default value for a merge commit title.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)
    @jsondata:Name {value: "merge_commit_title"}
    "PR_TITLE"|"MERGE_MESSAGE" mergeCommitTitle?;
    # API URL template to access repository comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # API URL to access repository stargazers
    @jsondata:Name {value: "stargazers_url"}
    string stargazersUrl;
    # Whether to delete head branches when pull requests are merged
    @jsondata:Name {value: "delete_branch_on_merge"}
    boolean deleteBranchOnMerge = false;
    # Git protocol URL for repository cloning
    @jsondata:Name {value: "git_url"}
    string gitUrl;
    # Whether the repository has GitHub Pages enabled
    @jsondata:Name {value: "has_pages"}
    boolean hasPages;
    # A GitHub user
    SimpleUser owner;
    # Whether to allow squash merges for pull requests
    @jsondata:Name {value: "allow_squash_merge"}
    boolean allowSquashMerge = true;
    # API URL template to access repository commits
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # API URL template to access repository blob objects
    @jsondata:Name {value: "blobs_url"}
    string blobsUrl;
    # API URL to access repository downloads
    @jsondata:Name {value: "downloads_url"}
    string downloadsUrl;
    # Whether issues are enabled
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues = true;
    # Whether to require contributors to sign off on web-based commits
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired = false;
    # URL of the repository mirror if it exists
    @jsondata:Name {value: "mirror_url"}
    string? mirrorUrl;
    # API URL template to access repository milestones
    @jsondata:Name {value: "milestones_url"}
    string milestonesUrl;
    # API URL to access repository teams
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Indicates whether the repository is a fork of another repository
    boolean 'fork;
    # API endpoint URL for repository events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # API endpoint URL template for repository issue events
    @jsondata:Name {value: "issue_events_url"}
    string issueEventsUrl;
    # Number of users watching the repository
    @jsondata:Name {value: "watchers_count"}
    int watchersCount;
    # Homepage URL for the repository project
    string? homepage;
    # Number of forks created from this repository
    @jsondata:Name {value: "forks_count"}
    int forksCount;
};

# Represents the Queries record for the operation: code-scanning/list-alert-instances
public type CodeScanningListAlertInstancesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`
    CodeScanningRef ref?;
    # Page number of the results to fetch
    int page = 1;
};

# HTML link information for pull request review comments
public type PullRequestReviewCommentLinksHtml record {
    # URL to the HTML view of the pull request review comment
    string href;
};

# Request body schema for inviting users to an organization
public type OrgInvitationsBody record {
    # The role for the new member. 
    #  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
    #  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  
    #  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization
    "admin"|"direct_member"|"billing_manager" role = "direct_member";
    # Specify IDs for the teams you want to invite new members to
    @jsondata:Name {value: "team_ids"}
    int[] teamIds?;
    # **Required unless you provide `email`**. GitHub user ID for the person you are inviting
    @jsondata:Name {value: "invitee_id"}
    int inviteeId?;
    # **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user
    string email?;
};

# Represents the Queries record for the operation: activity/list-repos-starred-by-user
public type ActivityListReposStarredByUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to
    "created"|"updated" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub
public type NullableIntegration record {
    # A GitHub user
    NullableSimpleUser? owner;
    # The number of installations associated with the GitHub app
    @jsondata:Name {value: "installations_count"}
    int installationsCount?;
    # Description of the GitHub App integration
    string? description;
    # Timestamp when the integration was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # OAuth client identifier for the integration
    @jsondata:Name {value: "client_id"}
    string clientId?;
    # External homepage URL for the integration
    @jsondata:Name {value: "external_url"}
    string externalUrl;
    # Timestamp when the integration was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The set of permissions for the GitHub app
    IntegrationPermissions permissions;
    # GitHub web URL for the integration's public page
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # The name of the GitHub app
    string name;
    # Secret token used to validate webhook payloads
    @jsondata:Name {value: "webhook_secret"}
    string? webhookSecret?;
    # PEM-encoded RSA private key for the integration
    string pem?;
    # Unique identifier of the GitHub app
    int id;
    # OAuth client secret for the GitHub integration
    @jsondata:Name {value: "client_secret"}
    string clientSecret?;
    # The slug name of the GitHub app
    string slug?;
    # The list of events for the GitHub app
    string[] events;
    # Global node identifier for the integration
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# GitHub Actions Cache Usage by repository
public type ActionsCacheUsageByRepositoryResponse record {
    # Total number of repositories with cache usage data
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of cache usage data for each repository
    @jsondata:Name {value: "repository_cache_usages"}
    ActionsCacheUsageByRepository[] repositoryCacheUsages;
};

# Actor
public type Actor record {
    # Display name or login for the user
    @jsondata:Name {value: "display_login"}
    string displayLogin?;
    # URL to the user's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # Unique identifier for the user
    int id;
    # GitHub username or login
    string login;
    # Gravatar identifier for the user's avatar
    @jsondata:Name {value: "gravatar_id"}
    string? gravatarId;
    # API URL for the user resource
    string url;
};

# Represents the Queries record for the operation: reactions/list-for-team-discussion-in-org
public type ReactionsListForTeamDiscussionInOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content?;
};

# Billable usage breakdown by operating system for workflow runs
public type WorkflowRunUsageBillable record {
    # Billable usage data for Ubuntu runners
    @jsondata:Name {value: "UBUNTU"}
    WorkflowRunUsageBillableUBUNTU uBUNTU?;
    # Billable usage data for macOS runners
    @jsondata:Name {value: "MACOS"}
    WorkflowRunUsageBillableUBUNTU mACOS?;
    # Billable usage data for Windows runners
    @jsondata:Name {value: "WINDOWS"}
    WorkflowRunUsageBillableUBUNTU wINDOWS?;
};

# Represents a secret scanning alert detected in a repository
public type SecretScanningAlert record {
    # The type of secret that secret scanning detected
    @jsondata:Name {value: "secret_type"}
    string secretType?;
    # The user who bypassed push protection for this secret
    @jsondata:Name {value: "push_protection_bypassed_by"}
    NullableSimpleUser? pushProtectionBypassedBy?;
    # The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
    @jsondata:Name {value: "push_protection_bypassed_at"}
    string? pushProtectionBypassedAt?;
    # The timestamp when the secret scanning alert was created
    @jsondata:Name {value: "created_at"}
    AlertCreatedAt createdAt?;
    # User-friendly name for the detected secret, matching the `secret_type`.
    # For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
    @jsondata:Name {value: "secret_type_display_name"}
    string secretTypeDisplayName?;
    # The secret that was detected
    string secret?;
    # **Required when the `state` is `resolved`.** The reason for resolving the alert
    SecretScanningAlertResolution? resolution?;
    # The REST API URL of the alert resource
    AlertUrl url?;
    # The security alert number
    AlertNumber number?;
    # The user who resolved this secret scanning alert
    @jsondata:Name {value: "resolved_by"}
    NullableSimpleUser? resolvedBy?;
    # The timestamp when the secret scanning alert was last updated
    @jsondata:Name {value: "updated_at"}
    NullableAlertUpdatedAt? updatedAt?;
    # The REST API URL of the code locations for this alert
    @jsondata:Name {value: "locations_url"}
    string locationsUrl?;
    # An optional comment to resolve an alert
    @jsondata:Name {value: "resolution_comment"}
    string? resolutionComment?;
    # The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
    @jsondata:Name {value: "resolved_at"}
    string? resolvedAt?;
    # The GitHub URL for viewing this secret scanning alert
    @jsondata:Name {value: "html_url"}
    AlertHtmlUrl htmlUrl?;
    # Whether push protection was bypassed for the detected secret
    @jsondata:Name {value: "push_protection_bypassed"}
    boolean? pushProtectionBypassed?;
    # Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`
    SecretScanningAlertState state?;
};

# Related topic information in search results
public type TopicSearchResultItemRelated record {
    # Relationship type between related topics in search results
    @jsondata:Name {value: "topic_relation"}
    TopicSearchResultItemTopicRelation topicRelation?;
};

# GPG key subkey information including capabilities and metadata
public type GpgKeySubkeys record {
    # The public key content in string format
    @jsondata:Name {value: "public_key"}
    string publicKey?;
    # Unique identifier for the GPG key
    @jsondata:Name {value: "key_id"}
    string keyId?;
    # Timestamp when the GPG key was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # Whether the GPG key has been revoked
    boolean revoked?;
    # Raw key data in original format, may be null
    @jsondata:Name {value: "raw_key"}
    string? rawKey?;
    # Array of email addresses associated with the GPG key
    GpgKeyEmails[] emails?;
    # Whether the key can certify other keys
    @jsondata:Name {value: "can_certify"}
    boolean canCertify?;
    # Expiration timestamp of the GPG key, may be null
    @jsondata:Name {value: "expires_at"}
    string? expiresAt?;
    # Whether the key can encrypt communications
    @jsondata:Name {value: "can_encrypt_comms"}
    boolean canEncryptComms?;
    # Whether the key can encrypt storage data
    @jsondata:Name {value: "can_encrypt_storage"}
    boolean canEncryptStorage?;
    # Whether the key can create digital signatures
    @jsondata:Name {value: "can_sign"}
    boolean canSign?;
    # Numeric identifier for the GPG key
    int id?;
    # Array of subkeys associated with this GPG key
    anydata[] subkeys?;
    # The ID of the primary GPG key associated with this subkey
    @jsondata:Name {value: "primary_key_id"}
    int primaryKeyId?;
};

# Key/value pairs to provide settings for this webhook
public type OrgsorghooksConfig record {
    # Password for webhook authentication
    string password?;
    # The content type format for webhook payloads
    @jsondata:Name {value: "content_type"}
    WebhookConfigContentType contentType?;
    # Whether to disable SSL certificate verification for webhooks
    @jsondata:Name {value: "insecure_ssl"}
    WebhookConfigInsecureSsl insecureSsl?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers)
    WebhookConfigSecret secret?;
    # The URL to which the payloads will be delivered
    WebhookConfigUrl url;
    # Username for webhook authentication
    string username?;
};

# A description of the detector used
public type SnapshotDetector record {|
    # The name of the detector used
    string name;
    # The version of the detector used
    string version;
    # The url of the detector used
    string url;
|};

# Request body parameters for creating a repository fork
public type RepoForksBody record {
    # Optional parameter to specify the organization name if forking into an organization
    string organization?;
    # When forking from an existing repository, a new name for the fork
    string name?;
    # When forking from an existing repository, fork with only the default branch
    @jsondata:Name {value: "default_branch_only"}
    boolean defaultBranchOnly?;
};

# Represents the Queries record for the operation: codespaces/list-selected-repos-for-org-secret
public type CodespacesListSelectedReposForOrgSecretQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: teams/list-pending-invitations-legacy
public type TeamsListPendingInvitationsLegacyQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# **Required when the `state` is `resolved`.** The reason for resolving the alert
public type SecretScanningAlertResolution "false_positive"|"wont_fix"|"revoked"|"used_in_tests"?;

# Request body for approving or rejecting pending deployments
public type RunIdPendingDeploymentsBody record {
    # A comment to accompany the deployment review
    string comment;
    # Whether to approve or reject deployment to the specified environments
    "approved"|"rejected" state;
    # The list of environment ids to approve or reject
    @jsondata:Name {value: "environment_ids"}
    int[] environmentIds;
};

# Branch and tag policy pattern configuration for deployments
public type DeploymentBranchPolicyNamePatternWithType record {
    # The name pattern that branches or tags must match in order to deploy to the environment.
    # 
    # Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.
    # For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch)
    string name;
    # Whether this rule targets a branch or tag
    "branch"|"tag" 'type?;
};

# Represents the Queries record for the operation: repos/list-webhook-deliveries
public type ReposListWebhookDeliveriesQueries record {
    # Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors
    string cursor?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    boolean redelivery?;
};

# HTML link information for timeline review events
public type TimelineReviewedEventLinksHtml record {
    # The HTML URL for the review event
    string href;
};

# Array response containing stargazer information
public type StargazerResponseStargazerResponseAnyOf12 Stargazer[];

# Commit Search Result Item
public type CommitSearchResultItem record {
    # Search relevance score for the commit
    decimal score;
    # Metaproperties for Git author/committer information
    NullableGitUser? committer;
    # A GitHub user
    NullableSimpleUser? author;
    # HTML URL to view the commit on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Text matching information for search results
    @jsondata:Name {value: "text_matches"}
    SearchResultTextMatches textMatches?;
    # API URL for accessing commit comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # Commit information from search results
    CommitSearchResultItemCommit 'commit;
    # Minimal Repository
    MinimalRepository repository;
    # SHA hash identifier of the commit
    string sha;
    # API URL for the commit resource
    string url;
    # Array of parent commits
    FileCommitCommitParents[] parents;
    # Global node identifier for the commit
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# A dependency with metadata, package URL, scope, and relationship info
public type Dependency record {|
    # User-defined metadata to store domain-specific information limited to 8 keys with scalar values
    Metadata metadata?;
    # Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details
    @jsondata:Name {value: "package_url"}
    string packageUrl?;
    # A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes
    "runtime"|"development" scope?;
    # A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency
    "direct"|"indirect" relationship?;
    # Array of package-url (PURLs) of direct child dependencies
    string[] dependencies?;
|};

# Health check results for GitHub Pages domain configuration
public type PagesHealthCheckDomain record {
    # Reason for domain health check status
    string? reason?;
    # Whether the domain resolves to a Cloudflare IP address
    @jsondata:Name {value: "is_cloudflare_ip"}
    boolean? isCloudflareIp?;
    # Whether the domain enforces HTTPS connections
    @jsondata:Name {value: "enforces_https"}
    boolean enforcesHttps?;
    # Whether the domain points to GitHub Pages IP addresses
    @jsondata:Name {value: "is_pointed_to_github_pages_ip"}
    boolean? isPointedToGithubPagesIp?;
    # Whether the domain is served by GitHub Pages
    @jsondata:Name {value: "is_served_by_pages"}
    boolean? isServedByPages?;
    # Whether the domain resolves to a Fastly IP address
    @jsondata:Name {value: "is_fastly_ip"}
    boolean? isFastlyIp?;
    # Whether the domain is an apex domain (root domain)
    @jsondata:Name {value: "is_apex_domain"}
    boolean isApexDomain?;
    # The hostname of the domain being checked
    string host?;
    # Whether the domain responds to HTTPS requests
    @jsondata:Name {value: "responds_to_https"}
    boolean respondsToHttps?;
    # Whether the domain has a CNAME record pointing to pages.github.com
    @jsondata:Name {value: "is_cname_to_pages_dot_github_dot_com"}
    boolean? isCnameToPagesDotGithubDotCom?;
    # Whether the domain uses an A record for DNS resolution
    @jsondata:Name {value: "is_a_record"}
    boolean? isaRecord?;
    # Whether the domain has a CNAME record pointing to a GitHub user domain
    @jsondata:Name {value: "is_cname_to_github_user_domain"}
    boolean? isCnameToGithubUserDomain?;
    # Whether the domain is a GitHub Pages domain
    @jsondata:Name {value: "is_pages_domain"}
    boolean isPagesDomain?;
    # Whether the domain points to an old GitHub Pages IP address
    @jsondata:Name {value: "is_old_ip_address"}
    boolean? isOldIpAddress?;
    # Whether the domain has a CNAME DNS record
    @jsondata:Name {value: "has_cname_record"}
    boolean? hasCnameRecord?;
    # Whether the domain has a CNAME record pointing to Fastly
    @jsondata:Name {value: "is_cname_to_fastly"}
    boolean? isCnameToFastly?;
    # Whether the domain's DNS resolves successfully
    @jsondata:Name {value: "dns_resolves"}
    boolean dnsResolves?;
    # Whether the domain is eligible for HTTPS
    @jsondata:Name {value: "is_https_eligible"}
    boolean? isHttpsEligible?;
    # CAA record validation error message, if any
    @jsondata:Name {value: "caa_error"}
    string? caaError?;
    # Whether the domain is behind a proxy service
    @jsondata:Name {value: "is_proxied"}
    boolean? isProxied?;
    # Whether the domain name is valid
    @jsondata:Name {value: "is_valid_domain"}
    boolean isValidDomain?;
    # Whether non-GitHub Pages IP addresses are present
    @jsondata:Name {value: "is_non_github_pages_ip_present"}
    boolean? isNonGithubPagesIpPresent?;
    # The URI of the domain being checked
    string uri?;
    # Whether the domain should use an A record
    @jsondata:Name {value: "should_be_a_record"}
    boolean? shouldBeaRecord?;
    # The nameservers for the domain
    string nameservers?;
    # Whether MX records are present for the domain
    @jsondata:Name {value: "has_mx_records_present"}
    boolean? hasMxRecordsPresent?;
    # Whether the domain passes all validation checks
    @jsondata:Name {value: "is_valid"}
    boolean isValid?;
    # HTTPS configuration error message, if any
    @jsondata:Name {value: "https_error"}
    string? httpsError?;
};

# Key/value pairs to provide settings for this webhook
public type OrgsorghookshookIdConfig record {
    # Content type for webhook payloads
    @jsondata:Name {value: "content_type"}
    WebhookConfigContentType contentType?;
    # Whether to skip SSL certificate verification
    @jsondata:Name {value: "insecure_ssl"}
    WebhookConfigInsecureSsl insecureSsl?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers)
    WebhookConfigSecret secret?;
    # The URL to which the payloads will be delivered
    WebhookConfigUrl url;
};

# Schema for reviewing custom deployment gates with required state and environment
public type ReviewCustomGatesStateRequired record {
    # Optional comment to include with the review
    string comment?;
    # Whether to approve or reject deployment to the specified environments
    "approved"|"rejected" state;
    # The name of the environment to approve or reject
    @jsondata:Name {value: "environment_name"}
    string environmentName;
};

# Projects are a way to organize columns and cards of work
public type Project record {
    # API URL to access the project's columns
    @jsondata:Name {value: "columns_url"}
    string columnsUrl;
    # A GitHub user
    NullableSimpleUser? creator;
    # Whether or not this project can be seen by everyone. Only present if owner is an organization
    boolean 'private?;
    # The baseline permission that all organization members have on this project. Only present if owner is an organization
    @jsondata:Name {value: "organization_permission"}
    "read"|"write"|"admin"|"none" organizationPermission?;
    # Timestamp when the project was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Body of the project
    string? body;
    # API URL of the project
    string url;
    # API URL of the project's owner
    @jsondata:Name {value: "owner_url"}
    string ownerUrl;
    # Unique number identifier for the project
    int number;
    # Timestamp when the project was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Web URL to view the project on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Name of the project
    string name;
    # Unique identifier for the project
    int id;
    # State of the project; either 'open' or 'closed'
    string state;
    # Global node identifier for the project
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Schema for issue label operations with multiple format options
public type IssueNumberLabelsBody1 ReposownerrepoissuesissueNumberlabelsOneOf11|ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf112|ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf1123|ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf11234|ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf112345;

# Conditions to target repositories by id and refs by name
public type RepositoryIdAndRefName record {
    *RepositoryRulesetConditions;
    *RepositoryRulesetConditionsRepositoryIdTarget;
};

# Request body for updating Git reference with SHA and force options
public type RefsrefBody record {
    # Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work
    boolean force = false;
    # The SHA1 value to set this reference to
    string sha;
};

# Represents the Queries record for the operation: search/code
public type SearchCodeQueries record {
    # The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers
    string q;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # **This field is deprecated.** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
    # 
    # # Deprecated
    @deprecated
    "indexed" sort?;
    # Page number of the results to fetch
    int page = 1;
    # **This field is deprecated.** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. 
    # 
    # # Deprecated
    @deprecated
    "desc"|"asc" 'order = "desc";
};

# Topic Search Result Item
public type TopicSearchResultItem record {
    # Brief description of the topic
    @jsondata:Name {value: "short_description"}
    string? shortDescription;
    # Indicates if topic is featured
    boolean featured;
    # Array of topic aliases
    TopicSearchResultItemRelated[]? aliases?;
    # URL of the topic logo image
    @jsondata:Name {value: "logo_url"}
    string? logoUrl?;
    # Detailed description of the topic
    string? description;
    # Timestamp when topic was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Human-readable display name for the topic
    @jsondata:Name {value: "display_name"}
    string? displayName;
    # Username of topic creator
    @jsondata:Name {value: "created_by"}
    string? createdBy;
    # Search relevance score for the topic
    decimal score;
    # Timestamp when topic was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Array of related topics
    TopicSearchResultItemRelated[]? related?;
    # Indicates whether the topic is curated by GitHub
    boolean curated;
    # Text matches found in the search results for this topic
    @jsondata:Name {value: "text_matches"}
    SearchResultTextMatches textMatches?;
    # The name of the topic
    string name;
    # Number of repositories associated with this topic
    @jsondata:Name {value: "repository_count"}
    int? repositoryCount?;
    # The release date of the topic
    string? released;
};

# Set secrets for GitHub Actions
public type ActionsSecretResponse record {
    # Total number of secrets available
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of GitHub Actions secrets
    ActionsSecret[] secrets;
};

# A codespace
public type Codespace record {
    # UUID identifying this codespace's environment
    @jsondata:Name {value: "environment_id"}
    string? environmentId;
    # Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it
    @jsondata:Name {value: "pending_operation"}
    boolean? pendingOperation?;
    # User who will be billed for the codespace usage
    @jsondata:Name {value: "billable_owner"}
    SimpleUser billableOwner;
    # API URL to start this codespace
    @jsondata:Name {value: "start_url"}
    string startUrl;
    # Timestamp when the codespace was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # API URL to stop this codespace
    @jsondata:Name {value: "stop_url"}
    string stopUrl;
    # Minimal Repository
    MinimalRepository repository;
    # Last known time this codespace was started
    @jsondata:Name {value: "last_used_at"}
    string lastUsedAt;
    # Whether the codespace was created from a prebuild
    boolean? prebuild;
    # Timestamp when the codespace was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
    @jsondata:Name {value: "retention_expires_at"}
    string? retentionExpiresAt?;
    # Unique identifier for the codespace
    int id;
    # State of this codespace
    "Unknown"|"Created"|"Queued"|"Provisioning"|"Available"|"Awaiting"|"Unavailable"|"Deleted"|"Moved"|"Shutdown"|"Archived"|"Starting"|"ShuttingDown"|"Failed"|"Exporting"|"Updating"|"Rebuilding" state;
    # Git status information for the codespace
    @jsondata:Name {value: "git_status"}
    CodespaceGitStatus gitStatus;
    # API URL to publish this codespace to a new repository
    @jsondata:Name {value: "publish_url"}
    string? publishUrl?;
    # API URL to access available alternate machine types for this codespace
    @jsondata:Name {value: "machines_url"}
    string machinesUrl;
    # A GitHub user
    SimpleUser owner;
    # Runtime constraints and limitations for the codespace
    @jsondata:Name {value: "runtime_constraints"}
    CodespaceRuntimeConstraints runtimeConstraints?;
    # The text to display to a user when a codespace has been stopped for a potentially actionable reason
    @jsondata:Name {value: "last_known_stop_notice"}
    string? lastKnownStopNotice?;
    # List of recently accessed folders in the codespace
    @jsondata:Name {value: "recent_folders"}
    string[] recentFolders;
    # Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days)
    @jsondata:Name {value: "retention_period_minutes"}
    int? retentionPeriodMinutes?;
    # Display name for this codespace
    @jsondata:Name {value: "display_name"}
    string? displayName?;
    # API URL for this codespace
    string url;
    # Path to devcontainer.json from repo root used to create Codespace
    @jsondata:Name {value: "devcontainer_path"}
    string? devcontainerPath?;
    # Text to show user when codespace is disabled by a pending operation
    @jsondata:Name {value: "pending_operation_disabled_reason"}
    string? pendingOperationDisabledReason?;
    # URL to access this codespace on the web
    @jsondata:Name {value: "web_url"}
    string webUrl;
    # A description of the machine powering a codespace
    NullableCodespaceMachine? machine;
    # Automatically generated name of this codespace
    string name;
    # API URL for the Pull Request associated with this codespace, if any
    @jsondata:Name {value: "pulls_url"}
    string? pullsUrl;
    # The initally assigned location of a new codespace
    "EastUs"|"SouthEastAsia"|"WestEurope"|"WestUs2" location;
    # Text to show user when codespace idle timeout minutes has been overriden by an organization policy
    @jsondata:Name {value: "idle_timeout_notice"}
    string? idleTimeoutNotice?;
    # The number of minutes of inactivity after which this codespace will be automatically stopped
    @jsondata:Name {value: "idle_timeout_minutes"}
    int? idleTimeoutMinutes;
};

# Labeled Issue Event
public type LabeledIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the label event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App integration that performed this labeled issue event
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Timestamp when the labeled issue event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the labeled issue event
    int id;
    # Label information for labeled issue events
    LabeledIssueEventLabel label;
    # Type of event that occurred on the issue
    string event;
    # SHA of the commit associated with the labeled issue event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for the labeled issue event
    string url;
    # Global node identifier for the labeled issue event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Tag protection
public type TagProtection record {
    # Timestamp when the tag protection rule was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # Pattern that defines which tags are protected by this rule
    string pattern;
    # Timestamp when the tag protection rule was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # Unique identifier for the tag protection rule
    int id?;
    # Whether the tag protection rule is currently enabled
    boolean enabled?;
};

# Subject information for a notification thread
public type NotificationThreadSubject record {
    # API URL for the latest comment on the notification subject
    @jsondata:Name {value: "latest_comment_url"}
    string latestCommentUrl;
    # Title of the notification thread subject
    string title;
    # The type of the notification thread subject
    string 'type;
    # The URL of the notification thread subject
    string url;
};

# Repository import configuration with authentication and version control settings
public type RepoImportBody1 record {
    # The username to provide to the originating repository
    @jsondata:Name {value: "vcs_username"}
    string vcsUsername?;
    # The password to provide to the originating repository
    @jsondata:Name {value: "vcs_password"}
    string vcsPassword?;
    # For a tfvc import, the name of the project that is being imported
    @jsondata:Name {value: "tfvc_project"}
    string tfvcProject?;
    # The type of version control system you are migrating from
    "subversion"|"tfvc"|"git"|"mercurial" vcs?;
};

# Traffic statistics containing count, unique visitors, and timestamp
public type Traffic record {
    # The number of unique visitors
    int uniques;
    # The total count of traffic
    int count;
    # The timestamp when traffic was recorded
    string timestamp;
};

# Represents the Queries record for the operation: activity/list-public-events-for-repo-network
public type ActivityListPublicEventsForRepoNetworkQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# GitHub Actions billing usage information with minutes breakdown
public type ActionsBillingUsage record {
    # The total paid GitHub Actions minutes used
    @jsondata:Name {value: "total_paid_minutes_used"}
    int totalPaidMinutesUsed;
    # The amount of free GitHub Actions minutes available
    @jsondata:Name {value: "included_minutes"}
    int includedMinutes;
    # The sum of the free and paid GitHub Actions minutes used
    @jsondata:Name {value: "total_minutes_used"}
    int totalMinutesUsed;
    # Detailed breakdown of GitHub Actions minutes used by platform
    @jsondata:Name {value: "minutes_used_breakdown"}
    ActionsBillingUsageMinutesUsedBreakdown minutesUsedBreakdown;
};

# Environment protection rule requiring reviewers for deployments
public type ProtectionRulesProtectionRulesAnyOf12 record {
    # Whether deployments to this environment can be approved by the user who created the deployment
    @jsondata:Name {value: "prevent_self_review"}
    boolean preventSelfReview?;
    # Unique identifier for the protection rule
    int id;
    # The type of protection rule
    string 'type;
    # The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed
    PendingDeploymentReviewers[] reviewers?;
    # GraphQL node identifier for the protection rule
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: issues/list-labels-for-repo
public type IssuesListLabelsForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: teams/list-repos-legacy
public type TeamsListReposLegacyQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Response
public type RuleSuites RuleSuitesInner[];

# Represents the Queries record for the operation: packages/restore-package-for-authenticated-user
public type PackagesRestorePackageForAuthenticatedUserQueries record {
    # package token
    string token?;
};

# Repository Collaborator Permission
public type RepositoryCollaboratorPermission record {
    # The name of the collaborator's permission role
    @jsondata:Name {value: "role_name"}
    string roleName;
    # The permission level granted to the repository collaborator
    string permission;
    # Collaborator
    NullableCollaborator? user;
};

# Request body for updating a pull request branch
public type PullNumberUpdateBranchBody record {
    # The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/commits/commits#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref
    @jsondata:Name {value: "expected_head_sha"}
    string expectedHeadSha?;
};

# Request body for creating a pull request review with comments and action
public type PullNumberReviewsBody record {
    # Use the following table to specify the location, destination, and contents of the draft review comment
    ReposownerrepopullspullNumberreviewsComments[] comments?;
    # **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review
    string body?;
    # The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready
    "APPROVE"|"REQUEST_CHANGES"|"COMMENT" event?;
    # The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value
    @jsondata:Name {value: "commit_id"}
    string commitId?;
};

# Represents the Queries record for the operation: security-advisories/list-repository-advisories
public type SecurityAdvisoriesListRepositoryAdvisoriesQueries record {
    # Number of advisories to return per page
    @http:Query {name: "per_page"}
    int perPage = 30;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor
    string before?;
    # The property to sort the results by
    "created"|"updated"|"published" sort = "created";
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor
    string after?;
    # Filter by state of the repository advisories. Only advisories of this state will be returned
    "triage"|"draft"|"published"|"closed" state?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Represents the Queries record for the operation: code-scanning/list-alerts-for-org
public type CodeScanningListAlertsForOrgQueries record {
    # The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both
    @http:Query {name: "tool_name"}
    CodeScanningAnalysisToolName toolName?;
    # If specified, only code scanning alerts with this severity will be returned
    CodeScanningAlertSeverity severity?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor
    string before?;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor
    string after?;
    # Page number of the results to fetch
    int page = 1;
    # If specified, only code scanning alerts with this state will be returned
    CodeScanningAlertStateQuery state?;
    # The property by which to sort the results
    "created"|"updated" sort = "created";
    # The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both
    @http:Query {name: "tool_guid"}
    CodeScanningAnalysisToolGuid? toolGuid?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Represents the Queries record for the operation: repos/get-readme-in-directory
public type ReposGetReadmeInDirectoryQueries record {
    # The name of the commit/branch/tag. Default: the repository’s default branch
    string ref?;
};

# File content information from a commit including metadata and URLs
public type FileCommitContent record {
    # The file path within the repository
    string path?;
    # The file size in bytes
    int size?;
    # Navigation links related to the file content
    @jsondata:Name {value: "_links"}
    FileCommitContentLinks links?;
    # The HTML URL to view the file on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # The filename
    string name?;
    # The direct download URL for the file content
    @jsondata:Name {value: "download_url"}
    string downloadUrl?;
    # The Git API URL for the file object
    @jsondata:Name {value: "git_url"}
    string gitUrl?;
    # The file type (file, dir, symlink, submodule)
    string 'type?;
    # The SHA hash of the file content
    string sha?;
    # The API URL for the file content
    string url?;
};

# Request body for dismissing a pull request review
public type ReviewIdDismissalsBody record {
    # The message for the pull request review dismissal
    string message;
    # The dismissal event type, must be 'DISMISS'
    "DISMISS" event?;
};

# Rate Limit Overview
public type RateLimitOverview record {
    # API rate limiting information including usage and reset time
    RateLimit rate;
    # Rate limit information for various GitHub API resources
    RateLimitOverviewResources resources;
};

# A repository rule
public type RepositoryRule RepositoryRuleCreation|RepositoryRuleUpdate|RepositoryRuleDeletion|RepositoryRuleRequiredLinearHistory|RepositoryRuleRequiredDeployments|RepositoryRuleRequiredSignatures|RepositoryRulePullRequest|RepositoryRuleRequiredStatusChecks|RepositoryRuleNonFastForward|RepositoryRuleCommitMessagePattern|RepositoryRuleCommitAuthorEmailPattern|RepositoryRuleCommitterEmailPattern|RepositoryRuleBranchNamePattern|RepositoryRuleTagNamePattern;

# Self-referential links for a pull request review comment
public type PullRequestReviewCommentLinksSelf record {
    # API URL for the pull request review comment
    string href;
};

# Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`
public type SecretScanningAlertState "open"|"resolved";

# Represents the Queries record for the operation: projects/list-for-user
public type ProjectsListForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Indicates the state of the projects to return
    "open"|"closed"|"all" state = "open";
    # Page number of the results to fetch
    int page = 1;
};

# Parameters to be used for the commit_message_pattern rule
public type RepositoryRuleCommitMessagePattern record {
    # Rule type identifier for commit message pattern enforcement
    "commit_message_pattern" 'type;
    # Parameters for repository rule that validates commit message patterns
    RepositoryRuleCommitMessagePatternParameters parameters?;
};

# The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days)
public type WaitTimer int;

# Required status check configuration for branch protection
public type ReposownerrepobranchesbranchprotectionRequiredStatusChecksChecks record {
    # The name of the required check
    string context;
    # The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status
    @jsondata:Name {value: "app_id"}
    int appId?;
};

# Represents the Queries record for the operation: repos/list-branches
public type ReposListBranchesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches
    boolean protected?;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: apps/list-installations
public type AppsListInstallationsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    string outdated?;
    # Page number of the results to fetch
    int page = 1;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Request body for marking repository notifications as read
public type RepoNotificationsBody record {
    # Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp
    @jsondata:Name {value: "last_read_at"}
    string lastReadAt?;
};

# Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key
public type UseremailsOneOf11 record {
    # Email addresses associated with the GitHub user account
    string[] emails;
};

# Repository information for the head branch of a pull request
public type PullRequestHeadRepo record {
    # Whether forking is allowed for the repository
    @jsondata:Name {value: "allow_forking"}
    boolean allowForking?;
    # Number of users who have starred the repository
    @jsondata:Name {value: "stargazers_count"}
    int stargazersCount;
    # Whether the repository is a template repository
    @jsondata:Name {value: "is_template"}
    boolean isTemplate?;
    # Timestamp of the last push to the repository
    @jsondata:Name {value: "pushed_at"}
    string pushedAt;
    # URL for subscribing to repository notifications
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl;
    # Primary programming language of the repository
    string? language;
    # URL template for accessing repository branches
    @jsondata:Name {value: "branches_url"}
    string branchesUrl;
    # URL template for accessing issue comments
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl;
    # Whether rebase merging is allowed for pull requests
    @jsondata:Name {value: "allow_rebase_merge"}
    boolean allowRebaseMerge?;
    # URL template for accessing repository labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # URL endpoint to access repository subscribers
    @jsondata:Name {value: "subscribers_url"}
    string subscribersUrl;
    # Complete set of repository permission levels for a user or team
    FullRepositoryPermissions permissions?;
    # Temporary token for repository cloning operations
    @jsondata:Name {value: "temp_clone_token"}
    string tempCloneToken?;
    # URL template for accessing repository releases
    @jsondata:Name {value: "releases_url"}
    string releasesUrl;
    # Subversion URL for repository access
    @jsondata:Name {value: "svn_url"}
    string svnUrl;
    # Unique identifier for the repository
    int id;
    # Indicates if repository has discussions enabled
    @jsondata:Name {value: "has_discussions"}
    boolean hasDiscussions;
    # Name of the repository's default branch
    @jsondata:Name {value: "master_branch"}
    string masterBranch?;
    # Number of repository forks
    int forks;
    # URL template for downloading repository archives
    @jsondata:Name {value: "archive_url"}
    string archiveUrl;
    # Indicates if merge commits are allowed
    @jsondata:Name {value: "allow_merge_commit"}
    boolean allowMergeCommit?;
    # URL template for accessing Git references
    @jsondata:Name {value: "git_refs_url"}
    string gitRefsUrl;
    # URL endpoint to access repository forks
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # The repository visibility: public, private, or internal
    string visibility?;
    # URL template for accessing commit statuses
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # SSH URL for repository cloning
    @jsondata:Name {value: "ssh_url"}
    string sshUrl;
    # License information for the head repository in a pull request
    PullRequestHeadRepoLicense? license;
    # Full name of repository in owner/name format
    @jsondata:Name {value: "full_name"}
    string fullName;
    # Repository size in kilobytes
    int size;
    # API endpoint URL for repository programming languages
    @jsondata:Name {value: "languages_url"}
    string languagesUrl;
    # API endpoint URL for repository collaborators
    @jsondata:Name {value: "collaborators_url"}
    string collaboratorsUrl;
    # Repository web page URL on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # HTTPS clone URL for the repository
    @jsondata:Name {value: "clone_url"}
    string cloneUrl;
    # Repository name
    string name;
    # API endpoint URL for repository pull requests
    @jsondata:Name {value: "pulls_url"}
    string pullsUrl;
    # Default branch name for the repository
    @jsondata:Name {value: "default_branch"}
    string defaultBranch;
    # API endpoint URL for repository webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # API endpoint URL for repository git trees
    @jsondata:Name {value: "trees_url"}
    string treesUrl;
    # API endpoint URL for repository tags
    @jsondata:Name {value: "tags_url"}
    string tagsUrl;
    # API endpoint URL for repository contributors
    @jsondata:Name {value: "contributors_url"}
    string contributorsUrl;
    # Whether the repository is private
    boolean 'private;
    # Whether the repository has downloads enabled
    @jsondata:Name {value: "has_downloads"}
    boolean hasDownloads;
    # API endpoint URL for repository notifications
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues_count"}
    int openIssuesCount;
    # Repository description text
    string? description;
    # Number of users watching the repository
    int watchers;
    # Repository creation timestamp
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # API URL for repository deployments
    @jsondata:Name {value: "deployments_url"}
    string deploymentsUrl;
    # API URL for repository deploy keys
    @jsondata:Name {value: "keys_url"}
    string keysUrl;
    # Whether the repository has projects enabled
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects;
    # Whether the repository is archived
    boolean archived;
    # Whether the repository has wiki enabled
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki;
    # Repository last update timestamp
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # API URL for repository comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # API URL for repository stargazers
    @jsondata:Name {value: "stargazers_url"}
    string stargazersUrl;
    # Whether the repository is disabled
    boolean disabled;
    # Git protocol URL for repository access
    @jsondata:Name {value: "git_url"}
    string gitUrl;
    # Whether the repository has GitHub Pages enabled
    @jsondata:Name {value: "has_pages"}
    boolean hasPages;
    # Owner information for the head repository in a pull request
    PullRequestHeadRepoOwner owner;
    # Whether squash merge is allowed for pull requests in this repository
    @jsondata:Name {value: "allow_squash_merge"}
    boolean allowSquashMerge?;
    # URL template for accessing commits in the repository
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # URL template for comparing branches or commits in the repository
    @jsondata:Name {value: "compare_url"}
    string compareUrl;
    # URL template for accessing Git commits via the Git API
    @jsondata:Name {value: "git_commits_url"}
    string gitCommitsUrl;
    # Array of topic tags associated with the repository
    string[] topics?;
    # URL template for accessing blob objects in the repository
    @jsondata:Name {value: "blobs_url"}
    string blobsUrl;
    # URL template for accessing Git tags via the Git API
    @jsondata:Name {value: "git_tags_url"}
    string gitTagsUrl;
    # URL for performing merge operations on the repository
    @jsondata:Name {value: "merges_url"}
    string mergesUrl;
    # URL for accessing repository downloads
    @jsondata:Name {value: "downloads_url"}
    string downloadsUrl;
    # Whether issues are enabled for this repository
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues;
    # Whether web-based commits require developer certificate of origin signoff
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired?;
    # API URL for the repository
    string url;
    # URL template for accessing repository contents
    @jsondata:Name {value: "contents_url"}
    string contentsUrl;
    # Mirror URL if this repository is a mirror, null otherwise
    @jsondata:Name {value: "mirror_url"}
    string? mirrorUrl;
    # URL template for accessing repository milestones
    @jsondata:Name {value: "milestones_url"}
    string milestonesUrl;
    # API endpoint URL for accessing repository teams
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Indicates whether the repository is a fork
    boolean 'fork;
    # API endpoint URL for repository issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # API endpoint URL for repository events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # API endpoint URL for repository issue events
    @jsondata:Name {value: "issue_events_url"}
    string issueEventsUrl;
    # API endpoint URL for repository assignees
    @jsondata:Name {value: "assignees_url"}
    string assigneesUrl;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues"}
    int openIssues;
    # Number of users watching the repository
    @jsondata:Name {value: "watchers_count"}
    int watchersCount;
    # Global node identifier for the repository
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Number of forks of the repository
    @jsondata:Name {value: "forks_count"}
    int forksCount;
    # Homepage URL for the repository project
    string? homepage;
};

# A unique encryption key
public type GpgKey record {
    # The public key portion of the GPG key in ASCII armor format
    @jsondata:Name {value: "public_key"}
    string publicKey;
    # Unique identifier for the GPG key
    @jsondata:Name {value: "key_id"}
    string keyId;
    # Timestamp when the GPG key was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Whether the GPG key has been revoked
    boolean revoked;
    # Raw key data in its original format
    @jsondata:Name {value: "raw_key"}
    string? rawKey;
    # Email addresses associated with the GPG key
    GpgKeyEmails[] emails;
    # Whether the key can be used to certify other keys
    @jsondata:Name {value: "can_certify"}
    boolean canCertify;
    # Expiration date of the GPG key, if applicable
    @jsondata:Name {value: "expires_at"}
    string? expiresAt;
    # Whether the key can encrypt communications
    @jsondata:Name {value: "can_encrypt_comms"}
    boolean canEncryptComms;
    # Human-readable name or title for the GPG key
    string? name?;
    # Whether the key can encrypt stored data
    @jsondata:Name {value: "can_encrypt_storage"}
    boolean canEncryptStorage;
    # Whether the GPG key can be used for signing
    @jsondata:Name {value: "can_sign"}
    boolean canSign;
    # Unique identifier for the GPG key
    int id;
    # Array of GPG subkeys associated with the primary key
    GpgKeySubkeys[] subkeys;
    # ID of the primary GPG key if this is a subkey
    @jsondata:Name {value: "primary_key_id"}
    int? primaryKeyId;
};

# Links object containing URLs for content tree navigation
public type ContentTreeLinks record {
    # Git API URL for the content object
    string? git;
    # Self-referencing API URL for the content object
    string self;
    # HTML web URL for viewing the content object
    string? html;
};

# Represents the Queries record for the operation: users/list-public-keys-for-user
public type UsersListPublicKeysForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for adding reviewers to a pull request
public type PullNumberRequestedReviewersBody anydata;

# Represents the Queries record for the operation: gists/list
public type GistsListQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Color-coded labels help you categorize and filter your issues (just like labels in Gmail)
public type Label record {
    # Indicates if this is a default label for the repository
    boolean default;
    # 6-character hex code, without the leading #, identifying the color
    string color;
    # The name of the label
    string name;
    # Optional description text for the label
    string? description;
    # Unique numeric identifier for the label
    int id;
    # URL for the label
    string url;
    # Global node identifier for the label in GraphQL format
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Array of starred repositories returned by the API
public type StarredRepositoryResponseAnyOf1 StarredRepository[];

# Commit information for file operations including metadata and verification
public type FileCommitCommit record {
    # Author information for a file commit including name, email, and date
    FileCommitCommitAuthor committer?;
    # Author information for a file commit including name, email, and date
    FileCommitCommitAuthor author?;
    # Web URL to view the commit on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # Git tree information for a file commit
    FileCommitCommitTree tree?;
    # Commit message describing the changes made
    string message?;
    # SHA hash uniquely identifying the commit
    string sha?;
    # API URL for the commit
    string url?;
    # Verification details for a file commit signature
    FileCommitCommitVerification verification?;
    # Global node ID for the commit
    @jsondata:Name {value: "node_id"}
    string nodeId?;
    # Array of parent commits for this commit
    FileCommitCommitParents[] parents?;
};

# Represents the Queries record for the operation: migrations/list-repos-for-org
public type MigrationsListReposForOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# License Content
public type LicenseContent record {
    # Hypermedia links related to the license content
    @jsondata:Name {value: "_links"}
    ContentTreeLinks links;
    # Content type of the license file
    string 'type;
    # Encoding format of the license content
    string encoding;
    # SHA hash of the license file
    string sha;
    # API URL for the license content
    string url;
    # Base64 encoded content of the license file
    string content;
    # File path of the license in the repository
    string path;
    # License Simple
    NullableLicenseSimple? license;
    # Size of the license file in bytes
    int size;
    # GitHub web URL for the license file
    @jsondata:Name {value: "html_url"}
    string? htmlUrl;
    # Name of the license file
    string name;
    # Direct download URL for the license file
    @jsondata:Name {value: "download_url"}
    string? downloadUrl;
    # Git URL for the license file
    @jsondata:Name {value: "git_url"}
    string? gitUrl;
};

# A label for a self hosted runner
public type RunnerLabelResponse record {
    # Total number of runner labels available
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of runner label objects
    RunnerLabel[] labels;
};

# Repository-level permissions configuration for GitHub Actions
public type ActionsRepositoryPermissions record {
    # Specifies which actions are allowed to run in the repository
    @jsondata:Name {value: "allowed_actions"}
    AllowedActions allowedActions?;
    # URL for managing selected actions when allowed_actions is 'selected'
    @jsondata:Name {value: "selected_actions_url"}
    SelectedActionsUrl selectedActionsUrl?;
    # Whether GitHub Actions is enabled on the repository
    ActionsEnabled enabled;
};

# Request body for creating a check run on a repository
public type RepoCheckRunsBody record {"completed" status;}|record {"queued"|"in_progress" status?;};

# Whether to set the branch as read-only. If this is true, users will not be able to push to the branch
public type ProtectedBranchLockBranch record {|
    # Whether branch locking is enabled for the protected branch
    boolean enabled = false;
|};

# Request body for creating a comment on a specific commit
public type CommitShaCommentsBody record {
    # Relative path of the file to comment on
    string path?;
    # **Deprecated**. Use **position** parameter instead. Line number in the file to comment on
    int line?;
    # Line index in the diff to comment on
    int position?;
    # The contents of the comment
    string body;
};

# Configuration for creating a codespace from a pull request
public type UsercodespacesusercodespacesOneOf12 record {
    # The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated
    "EuropeWest"|"SoutheastAsia"|"UsEast"|"UsWest" geo?;
    # Path to devcontainer.json config to use for this codespace
    @jsondata:Name {value: "devcontainer_path"}
    string devcontainerPath?;
    # Pull request reference for creating the codespace
    @jsondata:Name {value: "pull_request"}
    UsercodespacesPullRequest pullRequest;
    # Machine type to use for this codespace
    string machine?;
    # The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided
    string location?;
    # Working directory for this codespace
    @jsondata:Name {value: "working_directory"}
    string workingDirectory?;
    # Time in minutes before codespace stops from inactivity
    @jsondata:Name {value: "idle_timeout_minutes"}
    int idleTimeoutMinutes?;
};

# A code scanning security alert found in a repository
public type CodeScanningAlert record {
    # URL to retrieve all instances of this code scanning alert
    @jsondata:Name {value: "instances_url"}
    AlertInstancesUrl instancesUrl;
    # Timestamp when the code scanning alert was created
    @jsondata:Name {value: "created_at"}
    AlertCreatedAt createdAt;
    # Optional comment explaining why the alert was dismissed
    @jsondata:Name {value: "dismissed_comment"}
    CodeScanningAlertDismissedComment? dismissedComment?;
    # Rule information for code scanning security alerts
    CodeScanningAlertRule rule;
    # The REST API URL of the alert resource
    AlertUrl url;
    # Tool information for code scanning analysis including name, GUID, and version
    CodeScanningAnalysisTool tool;
    # The security alert number
    AlertNumber number;
    # Timestamp when the code scanning alert was last updated
    @jsondata:Name {value: "updated_at"}
    AlertUpdatedAt updatedAt?;
    # GitHub web interface URL for viewing this code scanning alert
    @jsondata:Name {value: "html_url"}
    AlertHtmlUrl htmlUrl;
    # Timestamp when the code scanning alert was fixed
    @jsondata:Name {value: "fixed_at"}
    AlertFixedAt? fixedAt?;
    # Most recent instance details of this code scanning alert
    @jsondata:Name {value: "most_recent_instance"}
    CodeScanningAlertInstance mostRecentInstance;
    # State of a code scanning alert
    CodeScanningAlertState state;
    # User who dismissed the code scanning alert
    @jsondata:Name {value: "dismissed_by"}
    NullableSimpleUser? dismissedBy;
    # Reason category for why the alert was dismissed
    @jsondata:Name {value: "dismissed_reason"}
    CodeScanningAlertDismissedReason? dismissedReason;
    # Timestamp when the code scanning alert was dismissed
    @jsondata:Name {value: "dismissed_at"}
    AlertDismissedAt? dismissedAt;
};

# A GitHub user simplified for Classroom
public type SimpleClassroomUser record {
    # URL of the classroom user's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # GitHub profile URL for the classroom user
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Unique identifier for the classroom user
    int id;
    # GitHub username of the classroom user
    string login;
};

# Set secrets for Dependabot
public type DependabotSecretResponse record {
    # Total number of Dependabot secrets in the response
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of Dependabot secrets configured for the repository
    DependabotSecret[] secrets;
};

# Interaction limit settings
public type InteractionLimitResponseAny InteractionLimitResponse|InteractionLimitResponseAnyAnyOf2;

# Links to different representations of file commit content
public type FileCommitContentLinks record {
    # Git API URL for the file commit content
    string git?;
    # Self-referencing URL for the file commit content
    string self?;
    # HTML URL for viewing the file commit content on GitHub
    string html?;
};

# Actions OIDC Subject customization
public type OidcCustomSub record {
    # Array of unique strings. Each claim key can only contain alphanumeric characters and underscores
    @jsondata:Name {value: "include_claim_keys"}
    string[] includeClaimKeys;
};

# A set of rules to apply when specified conditions are met
public type RepositoryRuleset record {
    # Hypermedia links related to the repository ruleset
    @jsondata:Name {value: "_links"}
    RepositoryRulesetLinks links?;
    # The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise)
    RepositoryRuleEnforcement enforcement;
    # Timestamp when the repository ruleset was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The type of the source of the ruleset
    @jsondata:Name {value: "source_type"}
    "Repository"|"Organization" sourceType?;
    # Array of rules defined in the repository ruleset
    RepositoryRule[] rules?;
    # The name of the source
    string 'source;
    # The target of the ruleset
    "branch"|"tag" target?;
    # The actors that can bypass the rules in this ruleset
    @jsondata:Name {value: "bypass_actors"}
    RepositoryRulesetBypassActor[] bypassActors?;
    # Timestamp when the repository ruleset was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The bypass type of the user making the API request for this ruleset. This field is only returned when
    # querying the repository-level endpoint
    @jsondata:Name {value: "current_user_can_bypass"}
    "always"|"pull_requests_only"|"never" currentUserCanBypass?;
    # The name of the ruleset
    string name;
    # The ID of the ruleset
    int id;
    # Conditions that determine when the ruleset applies
    RepositoryRulesetConditions|OrgRulesetConditions conditions?;
    # Global node ID for the repository ruleset
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# The full Git reference, formatted as `refs/heads/<branch name>`,
# `refs/pull/<number>/merge`, or `refs/pull/<number>/head`
public type CodeScanningRef string;

# Check Automated Security Fixes
public type CheckAutomatedSecurityFixes record {
    # Whether automated security fixes are paused for the repository
    boolean paused;
    # Whether automated security fixes are enabled for the repository
    boolean enabled;
};

# Labels configuration for repository issue
public type ReposownerrepoissuesissueNumberLabels LabelsOneOf11|LabelsLabelsOneOf112;

# SSH key fingerprints for different cryptographic algorithms
public type ApiOverviewSshKeyFingerprints record {
    # SHA256 fingerprint for RSA SSH key
    @jsondata:Name {value: "SHA256_RSA"}
    string sHA256RSA?;
    # SHA256 fingerprint for DSA SSH key
    @jsondata:Name {value: "SHA256_DSA"}
    string sHA256DSA?;
    # SHA256 fingerprint for ECDSA SSH key
    @jsondata:Name {value: "SHA256_ECDSA"}
    string sHA256ECDSA?;
    # SHA256 fingerprint for ED25519 SSH key
    @jsondata:Name {value: "SHA256_ED25519"}
    string sHA256ED25519?;
};

# Clone Traffic
public type CloneTraffic record {
    # Array of traffic data points for repository clones
    Traffic[] clones;
    # Total number of clones for the repository
    int count;
    # Number of unique cloners for the repository
    int uniques;
};

# Request body for revoking GitHub Copilot access from selected teams
public type BillingSelectedTeamsBody1 record {
    # The names of teams from which to revoke access to GitHub Copilot
    @jsondata:Name {value: "selected_teams"}
    string[] selectedTeams;
};

# Represents the Queries record for the operation: repos/list-invitations-for-authenticated-user
public type ReposListInvitationsForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Links object containing pull request URL for review comment
public type PullRequestReviewCommentLinksPullRequest record {
    # URL link to the associated pull request
    string href;
};

# Parent commit information with URLs and SHA
public type GitCommitParents record {
    # HTML URL for viewing the parent commit
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # SHA for the commit
    string sha;
    # URL of the parent commit
    string url;
};

# Request body for updating pull request properties
public type PullspullNumberBody record {
    # Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request
    @jsondata:Name {value: "maintainer_can_modify"}
    boolean maintainerCanModify?;
    # State of this Pull Request. Either `open` or `closed`
    "open"|"closed" state?;
    # The title of the pull request
    string title?;
    # The contents of the pull request
    string body?;
    # The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository
    string base?;
};

# Represents the Queries record for the operation: orgs/list-pending-invitations
public type OrgsListPendingInvitationsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Filter invitations by their invitation source
    @http:Query {name: "invitation_source"}
    "all"|"member"|"scim" invitationSource = "all";
    # Filter invitations by their member role
    "all"|"admin"|"direct_member"|"billing_manager"|"hiring_manager" role = "all";
    # Page number of the results to fetch
    int page = 1;
};

# Request body for merging upstream changes into a repository branch
public type RepoMergeUpstreamBody record {
    # The name of the branch which should be updated to match upstream
    string branch;
};

# Represents the Queries record for the operation: repos/list-releases
public type ReposListReleasesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for updating collaborator permissions on a repository
public type CollaboratorsusernameBody1 record {
    # The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any
    string permission = "push";
};

# Request body for creating a new repository security advisory
public type RepositoryAdvisoryCreate record {|
    # A short summary of the advisory
    @constraint:String {maxLength: 1024}
    string summary;
    # The severity of the advisory. You must choose between setting this field or `cvss_vector_string`
    "critical"|"high"|"medium"|"low"? severity?;
    # The Common Vulnerabilities and Exposures (CVE) ID
    @jsondata:Name {value: "cve_id"}
    string? cveId?;
    # A list of users receiving credit for their participation in the security advisory
    RepositoryAdvisoryCreateCredits[]? credits?;
    # The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`
    @jsondata:Name {value: "cvss_vector_string"}
    string? cvssVectorString?;
    # A detailed description of what the advisory impacts
    @constraint:String {maxLength: 65535}
    string description;
    # A product affected by the vulnerability detailed in a repository security advisory
    RepositoryAdvisoryCreateVulnerabilities[] vulnerabilities;
    # A list of Common Weakness Enumeration (CWE) IDs
    @jsondata:Name {value: "cwe_ids"}
    string[]? cweIds?;
|};

# Code Of Conduct
public type CodeOfConduct record {
    # HTML URL for viewing the code of conduct
    @jsondata:Name {value: "html_url"}
    string? htmlUrl;
    # Display name of the code of conduct
    string name;
    # Full text content of the code of conduct
    string body?;
    # Unique identifier key for the code of conduct
    string 'key;
    # API URL for the code of conduct resource
    string url;
};

# Minimal representation of an organization programmatic access grant request for enumerations
public type OrganizationProgrammaticAccessGrantRequest record {
    # A GitHub user
    SimpleUser owner;
    # Reason for requesting access
    string? reason;
    # Type of repository selection requested
    @jsondata:Name {value: "repository_selection"}
    "none"|"all"|"subset" repositorySelection;
    # URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`
    @jsondata:Name {value: "repositories_url"}
    string repositoriesUrl;
    # Date and time when the associated fine-grained personal access token expires
    @jsondata:Name {value: "token_expires_at"}
    string? tokenExpiresAt;
    # Permissions requested, categorized by type of permission
    OrganizationProgrammaticAccessGrantRequestPermissions permissions;
    # Date and time when the associated fine-grained personal access token was last used for authentication
    @jsondata:Name {value: "token_last_used_at"}
    string? tokenLastUsedAt;
    # Date and time when the request for access was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests
    int id;
    # Whether the associated fine-grained personal access token has expired
    @jsondata:Name {value: "token_expired"}
    boolean tokenExpired;
};

# Request body for adding a deploy key to a repository
public type RepoKeysBody record {
    # If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
    #   
    # Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
    @jsondata:Name {value: "read_only"}
    boolean readOnly?;
    # A name for the key
    string title?;
    # The contents of the key
    string 'key;
};

# Request body for setting default GitHub Actions workflow permissions
public type ActionsSetDefaultWorkflowPermissions record {
    # Default permissions for GitHub Actions workflows
    @jsondata:Name {value: "default_workflow_permissions"}
    ActionsDefaultWorkflowPermissions defaultWorkflowPermissions?;
    # Whether Actions can approve pull request reviews
    @jsondata:Name {value: "can_approve_pull_request_reviews"}
    ActionsCanApprovePullRequestReviews canApprovePullRequestReviews?;
};

# Request body for creating an installation access token
public type InstallationIdAccessTokensBody record {
    # List of repository IDs that the token should have access to
    @jsondata:Name {value: "repository_ids"}
    int[] repositoryIds?;
    # List of repository names that the token should have access to
    string[] repositories?;
    # The permissions granted to the user access token
    AppPermissions permissions?;
};

# Request body for updating required status check contexts
public type RequiredStatusChecksContextsBody2 ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf12|ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsreposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf122;

# Set repository secrets for GitHub Codespaces
public type RepoCodespacesSecretResponse record {
    # Total number of repository codespaces secrets
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of repository codespaces secret objects
    RepoCodespacesSecret[] secrets;
};

# Detailed repository rule with branch name pattern and ruleset info
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf12345678910111213 record {
    *RepositoryRuleBranchNamePattern;
    *RepositoryRuleRulesetInfo;
};

# Contributor
public type Contributor record {
    # URL to the contributor's public gists
    @jsondata:Name {value: "gists_url"}
    string gistsUrl?;
    # URL to the contributor's public repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl?;
    # URL template for users the contributor is following
    @jsondata:Name {value: "following_url"}
    string followingUrl?;
    # URL template for repositories the contributor has starred
    @jsondata:Name {value: "starred_url"}
    string starredUrl?;
    # GitHub username of the contributor
    string login?;
    # URL to retrieve the contributor's followers list
    @jsondata:Name {value: "followers_url"}
    string followersUrl?;
    # Type of the contributor account (User, Organization, etc.)
    string 'type;
    # API URL for the contributor's profile
    string url?;
    # URL to retrieve the contributor's repository subscriptions
    @jsondata:Name {value: "subscriptions_url"}
    string subscriptionsUrl?;
    # URL to retrieve events received by the contributor
    @jsondata:Name {value: "received_events_url"}
    string receivedEventsUrl?;
    # Number of contributions made by the contributor
    int contributions;
    # URL to the contributor's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl?;
    # URL template to retrieve the contributor's public events
    @jsondata:Name {value: "events_url"}
    string eventsUrl?;
    # Web URL to the contributor's GitHub profile page
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # Whether the contributor has site administrator privileges
    @jsondata:Name {value: "site_admin"}
    boolean siteAdmin?;
    # Display name of the contributor
    string name?;
    # Unique identifier for the contributor
    int id?;
    # Gravatar identifier for the contributor's avatar
    @jsondata:Name {value: "gravatar_id"}
    string? gravatarId?;
    # Email address of the contributor
    string email?;
    # Global node identifier for the contributor in GraphQL API
    @jsondata:Name {value: "node_id"}
    string nodeId?;
    # URL to the contributor's organizations
    @jsondata:Name {value: "organizations_url"}
    string organizationsUrl?;
};

# Results of a successful merge upstream request
public type MergedUpstream record {
    # Name of the base branch that was merged into
    @jsondata:Name {value: "base_branch"}
    string baseBranch?;
    # Type of merge performed: merge, fast-forward, or none
    @jsondata:Name {value: "merge_type"}
    "merge"|"fast-forward"|"none" mergeType?;
    # Message describing the upstream merge result
    string message?;
};

# Represents the Queries record for the operation: repos/list-pull-requests-associated-with-commit
public type ReposListPullRequestsAssociatedWithCommitQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: pulls/list-review-comments
public type PullsListReviewCommentsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The property to sort the results by
    "created"|"updated" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # The direction to sort results. Ignored without `sort` parameter
    "asc"|"desc" direction?;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Schema for updating a repository security advisory
public type RepositoryAdvisoryUpdate record {|
    # A short summary of the advisory
    @constraint:String {maxLength: 1024}
    string summary?;
    # The severity of the advisory. You must choose between setting this field or `cvss_vector_string`
    "critical"|"high"|"medium"|"low"? severity?;
    # The Common Vulnerabilities and Exposures (CVE) ID
    @jsondata:Name {value: "cve_id"}
    string? cveId?;
    # A list of users receiving credit for their participation in the security advisory
    RepositoryAdvisoryCreateCredits[]? credits?;
    # The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`
    @jsondata:Name {value: "cvss_vector_string"}
    string? cvssVectorString?;
    # A list of team slugs which have been granted write access to the advisory
    @jsondata:Name {value: "collaborating_teams"}
    string[]? collaboratingTeams?;
    # A detailed description of what the advisory impacts
    @constraint:String {maxLength: 65535}
    string description?;
    # A product affected by the vulnerability detailed in a repository security advisory
    RepositoryAdvisoryCreateVulnerabilities[] vulnerabilities?;
    # The state of the advisory
    "published"|"closed"|"draft" state?;
    # A list of usernames who have been granted write access to the advisory
    @jsondata:Name {value: "collaborating_users"}
    string[]? collaboratingUsers?;
    # A list of Common Weakness Enumeration (CWE) IDs
    @jsondata:Name {value: "cwe_ids"}
    string[]? cweIds?;
|};

# Represents the Queries record for the operation: migrations/list-repos-for-authenticated-user
public type MigrationsListReposForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for updating required status check contexts
public type RequiredStatusChecksContextsBody1 ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf11|ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsreposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf112;

# The status of auto merging a pull request
public type AutoMerge record {
    # Title for the merge commit message
    @jsondata:Name {value: "commit_title"}
    string commitTitle;
    # User who enabled auto-merge for the pull request
    @jsondata:Name {value: "enabled_by"}
    SimpleUser enabledBy;
    # Commit message for the merge commit
    @jsondata:Name {value: "commit_message"}
    string commitMessage;
    # The merge method to use
    @jsondata:Name {value: "merge_method"}
    "merge"|"squash"|"rebase" mergeMethod;
};

# Represents the Queries record for the operation: repos/list-invitations
public type ReposListInvitationsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: orgs/list-outside-collaborators
public type OrgsListOutsideCollaboratorsQueries record {
    # Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned
    "2fa_disabled"|"all" filter = "all";
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# External references in SPDX SBOM dependency graph
public type DependencyGraphSpdxSbomSbomExternalRefs record {
    # A locator for the particular external resource this reference refers to
    string referenceLocator;
    # The category of reference to an external resource this reference refers to
    string referenceType;
    # The category of reference to an external resource this reference refers to
    string referenceCategory;
};

# Project card details when an issue is added to a project
public type AddedToProjectIssueEventProjectCard record {
    # Unique identifier of the project
    @jsondata:Name {value: "project_id"}
    int projectId;
    # Name of the project column where the card was added
    @jsondata:Name {value: "column_name"}
    string columnName;
    # URL of the project
    @jsondata:Name {value: "project_url"}
    string projectUrl;
    # Unique identifier of the project card
    int id;
    # Name of the previous project column
    @jsondata:Name {value: "previous_column_name"}
    string previousColumnName?;
    # URL of the project card
    string url;
};

# Minimal repository information for pull request head
public type PullRequestMinimalHeadRepo record {
    # The name of the repository
    string name;
    # The unique identifier of the repository
    int id;
    # The API URL of the repository
    string url;
};

# Information about the Git author
public type NullableSimpleCommitAuthor record {
    # Name of the commit's author
    string name;
    # Git email address of the commit's author
    string email;
};

# Social media account
public type SocialAccount record {
    # The social media platform provider name
    string provider;
    # The URL to the social media profile or page
    string url;
};

# Represents the Queries record for the operation: orgs/list-invitation-teams
public type OrgsListInvitationTeamsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Assigned Issue Event
public type AssignedIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # The API URL of the commit associated with the event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # The GitHub App that performed the assignment action
    @jsondata:Name {value: "performed_via_github_app"}
    Integration performedViaGithubApp;
    # A GitHub user
    SimpleUser assigner;
    # The timestamp when the assignment event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The unique identifier of the assignment event
    int id;
    # A GitHub user
    SimpleUser assignee;
    # The type of event that occurred
    string event;
    # The SHA of the commit associated with the event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # The API URL of the assignment event
    string url;
    # The global node ID of the assigned issue event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Response containing either private or public user information
public type UserResponse PrivateUser|PublicUser;

# Branch With Protection
public type BranchWithProtection record {
    # Whether the branch has protection rules enabled
    boolean protected;
    # Hypermedia links related to the branch protection
    @jsondata:Name {value: "_links"}
    BranchWithProtectionLinks links;
    # Number of required approving reviews for the branch
    @jsondata:Name {value: "required_approving_review_count"}
    int requiredApprovingReviewCount?;
    # The name of the branch
    string name;
    # Commit
    Commit 'commit;
    # The pattern that branch names must match
    string pattern?;
    # Branch Protection
    BranchProtection protection;
    # API URL for the branch protection settings
    @jsondata:Name {value: "protection_url"}
    string protectionUrl;
};

# Collaborator
public type Collaborator record {
    # API URL template for the collaborator's gists
    @jsondata:Name {value: "gists_url"}
    string gistsUrl;
    # API URL for the collaborator's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # API URL template for users the collaborator follows
    @jsondata:Name {value: "following_url"}
    string followingUrl;
    # API URL template for the collaborator's starred repositories
    @jsondata:Name {value: "starred_url"}
    string starredUrl;
    # The collaborator's GitHub username
    string login;
    # API URL for the collaborator's followers
    @jsondata:Name {value: "followers_url"}
    string followersUrl;
    # The type of GitHub account (User, Organization, etc.)
    string 'type;
    # API URL for the collaborator's profile
    string url;
    # Repository role assigned to the collaborator
    @jsondata:Name {value: "role_name"}
    string roleName;
    # API URL for the collaborator's subscriptions
    @jsondata:Name {value: "subscriptions_url"}
    string subscriptionsUrl;
    # API URL for events received by the collaborator
    @jsondata:Name {value: "received_events_url"}
    string receivedEventsUrl;
    # URL of the collaborator's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # API URL template for the collaborator's events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # Repository access permissions for a collaborator
    CollaboratorPermissions permissions?;
    # GitHub web URL for the collaborator's profile
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Display name of the collaborator
    string? name?;
    # Whether the collaborator is a GitHub site administrator
    @jsondata:Name {value: "site_admin"}
    boolean siteAdmin;
    # Unique identifier for the collaborator
    int id;
    # Gravatar hash for the collaborator's profile image
    @jsondata:Name {value: "gravatar_id"}
    string? gravatarId;
    # Email address of the collaborator
    string? email?;
    # Global node identifier for GraphQL API
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # API URL for the collaborator's organizations
    @jsondata:Name {value: "organizations_url"}
    string organizationsUrl;
};

# Request body schema for updating a label's properties
public type LabelsnameBody record {
    # The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`
    string color?;
    # A short description of the label. Must be 100 characters or fewer
    string description?;
    # The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
    @jsondata:Name {value: "new_name"}
    string newName?;
};

# User-defined metadata to store domain-specific information limited to 8 keys with scalar values
public type RepositoryRuleRulesetInfo record {
    # The type of source for the ruleset that includes this rule.
    "Repository"|"Organization" ruleset_source_type?;
    # The name of the source of the ruleset that includes this rule.
    string ruleset_source?;
    # The ID of the ruleset that includes this rule.
    int ruleset_id?;
};

# Git tree information for a file commit
public type FileCommitCommitTree record {
    # SHA hash identifier of the commit tree
    string sha?;
    # URL reference to the commit tree
    string url?;
};

# Represents the Queries record for the operation: repos/get-all-environments
public type ReposGetAllEnvironmentsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for creating cards in a project column
public type ColumnIdCardsBody ProjectscolumnscolumnIdcardsOneOf1|ProjectscolumnscolumnIdcardsprojectscolumnscolumnIdcardsOneOf12;

# Label object for repository issue labeling operations
public type ReposownerrepoissuesissueNumberlabelsLabels record {
    # Name of the label to apply to the issue
    string name;
};

# Request body for creating organization webhooks
public type OrgHooksBody record {
    # Must be passed as "web"
    string name;
    # Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications
    boolean active = true;
    # Key/value pairs to provide settings for this webhook
    OrgsorghooksConfig config;
    # Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events
    string[] events = ["push"];
};

# Request body for creating pull request review comments
public type PullNumberCommentsBody record {
    # The relative path to the file that necessitates a comment
    string path;
    # In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation
    "LEFT"|"RIGHT" side?;
    # The level at which the comment is targeted
    @jsondata:Name {value: "subject_type"}
    "line"|"file" subjectType?;
    # **Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to
    int line?;
    # **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation
    @jsondata:Name {value: "start_line"}
    int startLine?;
    # **This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above
    # 
    # # Deprecated
    @deprecated
    int position?;
    # The text of the review comment
    string body;
    # The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`
    @jsondata:Name {value: "commit_id"}
    string commitId;
    # **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context
    @jsondata:Name {value: "start_side"}
    "LEFT"|"RIGHT"|"side" startSide?;
    # The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored
    @jsondata:Name {value: "in_reply_to"}
    int inReplyTo?;
};

# Issue Event Rename
public type IssueEventRename record {
    # Previous name before the issue rename event
    string 'from;
    # New name after the issue rename event
    string to;
};

# Represents the Queries record for the operation: teams/list-discussion-comments-in-org
public type TeamsListDiscussionCommentsInOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Labels associated with an issue
public type IssueLabels LabelsOneOf12|LabelsLabelsOneOf122;

# Request body for transferring repository ownership
public type RepoTransferBody record {
    # The username or organization name the repository will be transferred to
    @jsondata:Name {value: "new_owner"}
    string newOwner;
    # ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories
    @jsondata:Name {value: "team_ids"}
    int[] teamIds?;
    # The new name to be given to the repository
    @jsondata:Name {value: "new_name"}
    string newName?;
};

# Verification details for a file commit signature
public type FileCommitCommitVerification record {
    # Reason for the verification status
    string reason?;
    # The signature used for verification
    string? signature?;
    # The payload that was signed
    string? payload?;
    # Whether the signature was verified
    boolean verified?;
};

# Auto-trigger configuration for check suites
public type ReposownerrepocheckSuitespreferencesAutoTriggerChecks record {
    # The `id` of the GitHub App
    @jsondata:Name {value: "app_id"}
    int appId;
    # Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them
    boolean setting = true;
};

# Repository invitations let you manage who you collaborate with
public type RepositoryInvitation record {
    # Whether or not the invitation has expired
    boolean expired?;
    # The permission associated with the invitation
    "read"|"write"|"admin"|"triage"|"maintain" permissions;
    # HTML URL for the repository invitation
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Timestamp when the invitation was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # A GitHub user
    NullableSimpleUser? inviter;
    # Unique identifier of the repository invitation
    int id;
    # Minimal Repository
    MinimalRepository repository;
    # URL for the repository invitation
    string url;
    # A GitHub user
    NullableSimpleUser? invitee;
    # GraphQL node ID of the invitation
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Issue Event Project Card
public type IssueEventProjectCard record {
    # ID of the project containing the card
    @jsondata:Name {value: "project_id"}
    int projectId;
    # Name of the project column
    @jsondata:Name {value: "column_name"}
    string columnName;
    # API URL of the project
    @jsondata:Name {value: "project_url"}
    string projectUrl;
    # Unique identifier of the project card
    int id;
    # Name of the previous project column
    @jsondata:Name {value: "previous_column_name"}
    string previousColumnName?;
    # API URL of the project card
    string url;
};

# Represents the Queries record for the operation: checks/list-annotations
public type ChecksListAnnotationsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: search/commits
public type SearchCommitsQueries record {
    # The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers
    string q;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
    "author-date"|"committer-date" sort?;
    # Page number of the results to fetch
    int page = 1;
    # Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`
    "desc"|"asc" 'order = "desc";
};

# Request to install an integration on a target
public type IntegrationInstallationRequest record {
    # A GitHub user
    SimpleUser requester;
    # Timestamp when the integration installation request was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier of the request installation
    int id;
    # Account associated with the integration installation request
    SimpleUser|Enterprise account;
    # Global node identifier for the integration installation request
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Request body schema for creating a repository codespace
public type RepoCodespacesBody record {
    # The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated
    "EuropeWest"|"SoutheastAsia"|"UsEast"|"UsWest" geo?;
    # Path to devcontainer.json config to use for this codespace
    @jsondata:Name {value: "devcontainer_path"}
    string devcontainerPath?;
    # Git ref (typically a branch name) for this codespace
    string ref?;
    # Whether to authorize requested permissions from devcontainer.json
    @jsondata:Name {value: "multi_repo_permissions_opt_out"}
    boolean multiRepoPermissionsOptOut?;
    # Machine type to use for this codespace
    string machine?;
    # The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided
    string location?;
    # IP for location auto-detection when proxying a request
    @jsondata:Name {value: "client_ip"}
    string clientIp?;
    # Working directory for this codespace
    @jsondata:Name {value: "working_directory"}
    string workingDirectory?;
    # Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days)
    @jsondata:Name {value: "retention_period_minutes"}
    int retentionPeriodMinutes?;
    # Display name for this codespace
    @jsondata:Name {value: "display_name"}
    string displayName?;
    # Time in minutes before codespace stops from inactivity
    @jsondata:Name {value: "idle_timeout_minutes"}
    int idleTimeoutMinutes?;
};

# Metadata schema for container packages
public type ContainerMetadata record {
    # Array of tags associated with the container
    string[] tags;
};

# Demilestoned Issue Event
public type DemilestonedIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the demilestoned event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed the demilestone action
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Milestone information for milestoned issue events
    MilestonedIssueEventMilestone milestone;
    # Timestamp when the demilestoned event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the demilestoned issue event
    int id;
    # Type of event that occurred on the issue
    string event;
    # SHA identifier of the commit associated with the event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # URL for the demilestoned issue event
    string url;
    # Global node ID of the demilestoned issue event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Commit Search Result Item
public type CommitSearchResultItemResponse record {
    # Total number of commits matching the search criteria
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Indicates if search results are incomplete due to timeout or limits
    @jsondata:Name {value: "incomplete_results"}
    boolean incompleteResults;
    # Array of commit search result items
    CommitSearchResultItem[] items;
};

# User or team authorized to review deployments for an environment
public type ReposownerrepoenvironmentsenvironmentNameReviewers record {
    # The id of the user or team who can review the deployment
    int id?;
    # The type of reviewer
    DeploymentReviewerType 'type?;
};

# Represents the Queries record for the operation: packages/list-packages-for-organization
public type PackagesListPackagesForOrganizationQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
    # 
    # The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
    # For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    "public"|"private"|"internal" visibility?;
    # Page number of the results to fetch
    int page = 1;
    # The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry
    @http:Query {name: "package_type"}
    "npm"|"maven"|"rubygems"|"docker"|"nuget"|"container" packageType;
};

# Receipt containing upload details for a SARIF file submission
public type CodeScanningSarifsReceipt record {
    # An identifier for the upload
    CodeScanningAnalysisSarifId id?;
    # The REST API URL for checking the status of the upload
    string url?;
};

# The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
public type AlertFixedAt string?;

# Array of user email addresses
public type UseremailsuseremailsOneOf12 string[];

# Branch Restriction Policy
public type BranchRestrictionPolicy record {
    # API URL to manage teams in the branch restriction policy
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Teams included in the branch restriction policy
    BranchRestrictionPolicyTeams[] teams;
    # API URL to manage users in the branch restriction policy
    @jsondata:Name {value: "users_url"}
    string usersUrl;
    # API URL for the branch restriction policy
    string url;
    # API URL to manage apps in the branch restriction policy
    @jsondata:Name {value: "apps_url"}
    string appsUrl;
    # Users included in the branch restriction policy
    RepositoryTemplateRepositoryOwner[] users;
    # Apps included in the branch restriction policy
    BranchRestrictionPolicyApps[] apps;
};

# Details for the advisory pertaining to the Common Vulnerability Scoring System
public type DependabotAlertSecurityAdvisoryCvss record {|
    # The overall CVSS score of the advisory
    @constraint:Number {minValue: 0, maxValue: 10}
    decimal score;
    # The full CVSS vector string for the advisory
    @jsondata:Name {value: "vector_string"}
    string? vectorString;
|};

# License Simple
public type LicenseSimple record {
    # Web URL for the license information page
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # Human-readable name of the license
    string name;
    # SPDX identifier for the license
    @jsondata:Name {value: "spdx_id"}
    string? spdxId;
    # Unique identifier key for the license (e.g., 'mit', 'apache-2.0')
    string 'key;
    # API URL to retrieve detailed license information
    string? url;
    # Global node ID for the license in GitHub's GraphQL API
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: apps/list-installation-repos-for-authenticated-user
public type AppsListInstallationReposForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Private User
public type PrivateUser record {
    # URL template to access user's gists with optional gist ID parameter
    @jsondata:Name {value: "gists_url"}
    string gistsUrl;
    # API URL to retrieve user's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # Whether two-factor authentication is enabled for the user account
    @jsondata:Name {value: "two_factor_authentication"}
    boolean twoFactorAuthentication;
    # URL template to access users this user is following
    @jsondata:Name {value: "following_url"}
    string followingUrl;
    # User's Twitter username handle
    @jsondata:Name {value: "twitter_username"}
    string? twitterUsername?;
    # User's biography or profile description
    string? bio;
    # Timestamp when the user account was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # User's GitHub username/login handle
    string login;
    # Type of GitHub account (User, Organization, etc.)
    string 'type;
    # User's blog or website URL
    string? blog;
    # Number of private gists owned by the user
    @jsondata:Name {value: "private_gists"}
    int privateGists;
    # Total number of private repositories owned by the user
    @jsondata:Name {value: "total_private_repos"}
    int totalPrivateRepos;
    # API URL to access the user's repository subscriptions
    @jsondata:Name {value: "subscriptions_url"}
    string subscriptionsUrl;
    # Timestamp when the user account was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Whether the user is a GitHub site administrator
    @jsondata:Name {value: "site_admin"}
    boolean siteAdmin;
    # Total disk usage in kilobytes for the user's repositories
    @jsondata:Name {value: "disk_usage"}
    int diskUsage;
    # Number of collaborators across the user's repositories
    int collaborators;
    # Company name associated with the user's profile
    string? company;
    # Number of private repositories owned by the user
    @jsondata:Name {value: "owned_private_repos"}
    int ownedPrivateRepos;
    # Unique identifier for the user account
    int id;
    # Number of public repositories owned by the user
    @jsondata:Name {value: "public_repos"}
    int publicRepos;
    # Gravatar hash identifier for the user's profile image
    @jsondata:Name {value: "gravatar_id"}
    string? gravatarId;
    # GitHub plan details for a public user account
    PublicUserPlan plan?;
    # Primary email address associated with the user account
    string? email;
    # API URL to access the user's organization memberships
    @jsondata:Name {value: "organizations_url"}
    string organizationsUrl;
    # Whether the user is available for hiring opportunities
    boolean? hireable;
    # API URL template to access repositories starred by the user
    @jsondata:Name {value: "starred_url"}
    string starredUrl;
    # API URL to access the user's followers list
    @jsondata:Name {value: "followers_url"}
    string followersUrl;
    # Number of public gists created by the user
    @jsondata:Name {value: "public_gists"}
    int publicGists;
    # API URL for the user resource
    string url;
    # API URL for events received by the user
    @jsondata:Name {value: "received_events_url"}
    string receivedEventsUrl;
    # LDAP distinguished name for the user
    @jsondata:Name {value: "ldap_dn"}
    string ldapDn?;
    # Number of users following this user
    int followers;
    # URL of the user's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # URL template for the user's events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # Whether the user has GitHub Business Plus features
    @jsondata:Name {value: "business_plus"}
    boolean businessPlus?;
    # GitHub profile URL for the user
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Number of users this user is following
    int following;
    # Display name of the user
    string? name;
    # Geographic location of the user
    string? location;
    # GraphQL node ID for the user
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Date and time when the user account was suspended
    @jsondata:Name {value: "suspended_at"}
    string? suspendedAt?;
};

# GitHub Apps with push access to the protected branch
public type ReposownerrepobranchesbranchprotectionrestrictionsappsOneOf11 record {
    # The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items
    string[] apps;
};

# The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
public type CodeScanningAnalysisCreatedAt string;

# GitHub Apps with push access to protected branch (max 100 items)
public type ReposownerrepobranchesbranchprotectionrestrictionsappsOneOf12 record {
    # The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items
    string[] apps;
};

# Thread
public type NotificationThread record {
    # Reason for the notification thread
    string reason;
    # Timestamp when the notification thread was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Whether the notification thread is unread
    boolean unread;
    # Subject information for a notification thread
    NotificationThreadSubject subject;
    # API URL for the notification thread subscription
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl;
    # Unique identifier for the notification thread
    string id;
    # Minimal Repository
    MinimalRepository repository;
    # Timestamp when the notification was last read (nullable)
    @jsondata:Name {value: "last_read_at"}
    string? lastReadAt;
    # API URL for the notification thread
    string url;
};

# Context information for user hovercard with message and icon
public type HovercardContexts record {
    # Context message displayed in the hovercard
    string message;
    # Octicon name for the hovercard context
    string octicon;
};

# Represents the Queries record for the operation: classroom/list-classrooms
public type ClassroomListClassroomsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# A GitHub Classroom accepted assignment
public type ClassroomAcceptedAssignment record {
    # Count of student commits
    @jsondata:Name {value: "commit_count"}
    int commitCount;
    # Whether an accepted assignment has been submitted
    boolean submitted;
    # A GitHub Classroom assignment
    SimpleClassroomAssignment assignment;
    # Most recent grade
    string grade;
    # Array of students who accepted the classroom assignment
    SimpleClassroomUser[] students;
    # Unique identifier of the repository
    int id;
    # Whether a submission passed
    boolean passing;
    # A GitHub repository view for Classroom
    SimpleClassroomRepository repository;
};

# GitHub Actions Cache Usage by repository
public type ActionsCacheUsageByRepository record {
    # The repository owner and name for the cache usage being shown
    @jsondata:Name {value: "full_name"}
    string fullName;
    # The number of active caches in the repository
    @jsondata:Name {value: "active_caches_count"}
    int activeCachesCount;
    # The sum of the size in bytes of all the active cache items in the repository
    @jsondata:Name {value: "active_caches_size_in_bytes"}
    int activeCachesSizeInBytes;
};

# Represents the Queries record for the operation: orgs/list
public type OrgsListQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # An organization ID. Only return organizations with an ID greater than this ID
    int since?;
};

# Represents the Queries record for the operation: apps/list-installation-requests-for-authenticated-app
public type AppsListInstallationRequestsForAuthenticatedAppQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
public type ReposownerrepoSecurityAndAnalysisSecretScanning record {
    # Can be `enabled` or `disabled`
    string status?;
};

# Pull Request Simple
public type PullRequestSimple record {
    # API URL for the associated issue of this pull request
    @jsondata:Name {value: "issue_url"}
    string issueUrl;
    # Hypermedia links related to the pull request
    @jsondata:Name {value: "_links"}
    PullRequestSimpleLinks links;
    # URL to download the diff file for this pull request
    @jsondata:Name {value: "diff_url"}
    string diffUrl;
    # Timestamp when the pull request was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Users assigned to this pull request
    SimpleUser[]? assignees?;
    # Users requested to review this pull request
    @jsondata:Name {value: "requested_reviewers"}
    SimpleUser[]? requestedReviewers?;
    # Title of the pull request
    string title;
    # Description body text of the pull request
    string? body;
    # Teams requested to review this pull request
    @jsondata:Name {value: "requested_teams"}
    Team[]? requestedTeams?;
    # Head branch information for a simplified pull request
    PullRequestSimpleHead head;
    # Author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # Unique number identifying the pull request
    int number;
    # URL to download the patch file for this pull request
    @jsondata:Name {value: "patch_url"}
    string patchUrl;
    # Timestamp when the pull request was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Indicates whether or not the pull request is a draft
    boolean draft?;
    # API URL for comments on this pull request
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # SHA hash of the merge commit when the pull request is merged
    @jsondata:Name {value: "merge_commit_sha"}
    string? mergeCommitSha;
    # URL template for accessing individual review comments on the pull request
    @jsondata:Name {value: "review_comment_url"}
    string reviewCommentUrl;
    # Reason why the pull request conversation is locked, if applicable
    @jsondata:Name {value: "active_lock_reason"}
    string? activeLockReason?;
    # Unique identifier for the pull request
    int id;
    # Current state of the pull request (open, closed, merged)
    string state;
    # Whether the pull request conversation is locked
    boolean locked;
    # API URL for accessing commits associated with the pull request
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # Timestamp when the pull request was closed
    @jsondata:Name {value: "closed_at"}
    string? closedAt;
    # API URL for accessing status checks on the pull request head commit
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # Timestamp when the pull request was merged
    @jsondata:Name {value: "merged_at"}
    string? mergedAt;
    # Auto-merge configuration settings for the pull request
    @jsondata:Name {value: "auto_merge"}
    AutoMerge? autoMerge;
    # API URL for the pull request resource
    string url;
    # Array of labels applied to the pull request
    PullRequestSimpleLabels[] labels;
    # A collection of related issues and pull requests
    NullableMilestone? milestone;
    # Web URL for viewing the pull request on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # API URL for accessing all review comments on the pull request
    @jsondata:Name {value: "review_comments_url"}
    string reviewCommentsUrl;
    # A GitHub user
    NullableSimpleUser? assignee;
    # A GitHub user
    NullableSimpleUser? user;
    # Global node identifier for the pull request
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Head branch information for a simplified pull request
    PullRequestSimpleHead base;
};

# An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`
public type SecretScanningAlertResolutionComment string?;

# Billable usage data for Ubuntu workflow runs
public type WorkflowRunUsageBillableUBUNTU record {
    # Array of individual job run usage details
    @jsondata:Name {value: "job_runs"}
    WorkflowRunUsageBillableUBUNTUJobRuns[] jobRuns?;
    # Total billable time in milliseconds
    @jsondata:Name {value: "total_ms"}
    int totalMs;
    # Number of billable jobs executed
    int jobs;
};

# Head branch information for a pull request
public type PullRequestMinimalHead record {
    # Reference name of the head branch
    string ref;
    # Minimal repository information for pull request head
    PullRequestMinimalHeadRepo repo;
    # SHA of the head commit
    string sha;
};

# Submission status of a repository security advisory
public type RepositoryAdvisorySubmission record {
    # Whether a private vulnerability report was accepted by the repository's administrators
    boolean accepted;
};

# The public key used for setting Codespaces secrets
public type CodespacesPublicKey record {
    # The identifier for the key
    @jsondata:Name {value: "key_id"}
    string keyId;
    # Timestamp when the public key was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # Unique identifier for the public key
    int id?;
    # Display title for the public key
    string title?;
    # The Base64 encoded public key
    string 'key;
    # API URL for accessing the public key
    string url?;
};

# Reviewers required for deployment approval
public type PendingDeploymentReviewers record {
    # User or team assigned as deployment reviewer
    SimpleUser|Team reviewer?;
    # The type of reviewer
    DeploymentReviewerType 'type?;
};

# Represents the Queries record for the operation: search/issues-and-pull-requests
public type SearchIssuesAndPullRequestsQueries record {
    # The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers
    string q;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
    "comments"|"reactions"|"reactions-+1"|"reactions--1"|"reactions-smile"|"reactions-thinking_face"|"reactions-heart"|"reactions-tada"|"interactions"|"created"|"updated" sort?;
    # Page number of the results to fetch
    int page = 1;
    # Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`
    "desc"|"asc" 'order = "desc";
};

# Represents the Queries record for the operation: apps/list-accounts-for-plan-stubbed
public type AppsListAccountsForPlanStubbedQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The property to sort the results by
    "created"|"updated" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter
    "asc"|"desc" direction?;
};

# Request body for adding a reaction to a pull request review comment
public type CommentIdReactionsBody2 record {
    # The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content;
};

# Permissions requested, categorized by type of permission
public type OrganizationProgrammaticAccessGrantRequestPermissions record {
    # Additional permissions not covered by organization or repository scopes
    record {|string...;|} other?;
    # Organization-level permissions for the programmatic access grant request
    record {|string...;|} organization?;
    # Repository-level permissions for the programmatic access grant request
    record {|string...;|} repository?;
};

# GitHub App information for branch protection policy restrictions
public type BranchRestrictionPolicyApps record {
    # Owner information for branch restriction policies
    BranchRestrictionPolicyOwner owner?;
    # External URL of the GitHub App
    @jsondata:Name {value: "external_url"}
    string externalUrl?;
    # Timestamp when the GitHub App was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # Permission levels for teams or users in branch restriction policies
    BranchRestrictionPolicyPermissions permissions?;
    # HTML URL of the GitHub App
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # Name of the GitHub App
    string name?;
    # Description of the GitHub App
    string description?;
    # Timestamp when the GitHub App was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # Unique identifier of the GitHub App
    int id?;
    # URL-friendly identifier of the GitHub App
    string slug?;
    # List of events the GitHub App subscribes to
    string[] events?;
    # Global node identifier of the GitHub App
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Represents the Queries record for the operation: apps/list-subscriptions-for-authenticated-user-stubbed
public type AppsListSubscriptionsForAuthenticatedUserStubbedQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for triggering workflow dispatches with git reference and inputs
public type WorkflowIdDispatchesBody record {
    # The git reference for the workflow. The reference can be a branch or tag name
    string ref;
    # Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted
    record {} inputs?;
};

# Represents the Queries record for the operation: actions/list-self-hosted-runners-for-repo
public type ActionsListSelfHostedRunnersForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The name of a self-hosted runner
    string name?;
    # Page number of the results to fetch
    int page = 1;
};

# A commit
public type NullableSimpleCommit record {
    # Information about the Git committer
    NullableSimpleCommitCommitter? committer;
    # SHA for the commit's tree
    @jsondata:Name {value: "tree_id"}
    string treeId;
    # Information about the Git author
    NullableSimpleCommitAuthor? author;
    # SHA for the commit
    string id;
    # Message describing the purpose of the commit
    string message;
    # Timestamp of the commit
    string timestamp;
};

# Project card content association with content type and identifier
public type ProjectscolumnscolumnIdcardsprojectscolumnscolumnIdcardsOneOf12 record {
    # The piece of content associated with the card
    @jsondata:Name {value: "content_type"}
    string contentType;
    # The unique identifier of the content associated with the card
    @jsondata:Name {value: "content_id"}
    int contentId;
};

# Represents the Queries record for the operation: actions/delete-actions-cache-by-key
public type ActionsDeleteActionsCacheByKeyQueries record {
    # The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`
    string ref?;
    # A key for identifying the cache
    string 'key;
};

# Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`
public type CodeScanningAlertSetState "open"|"dismissed";

# Code scanning analysis results with metadata, rules, and findings count
public type CodeScanningAnalysis record {
    # Indicates whether the analysis can be deleted
    boolean deletable;
    # Timestamp when the analysis was created
    @jsondata:Name {value: "created_at"}
    CodeScanningAnalysisCreatedAt createdAt;
    # The total number of rules used in the analysis
    @jsondata:Name {value: "rules_count"}
    int rulesCount;
    # Unique key identifying the analysis
    @jsondata:Name {value: "analysis_key"}
    CodeScanningAnalysisAnalysisKey analysisKey;
    # Error message encountered during analysis processing
    string 'error;
    # The REST API URL of the analysis resource
    CodeScanningAnalysisUrl url;
    # Tool information for code scanning analysis including name, GUID, and version
    CodeScanningAnalysisTool tool;
    # The full Git reference, formatted as `refs/heads/<branch name>`,
    # `refs/pull/<number>/merge`, or `refs/pull/<number>/head`
    CodeScanningRef ref;
    # Git commit SHA hash that was analyzed
    @jsondata:Name {value: "commit_sha"}
    CodeScanningAnalysisCommitSha commitSha;
    # Identifies the variable values associated with the environment in which this analysis was performed
    CodeScanningAnalysisEnvironment environment;
    # The total number of results in the analysis
    @jsondata:Name {value: "results_count"}
    int resultsCount;
    # Warning generated when processing the analysis
    string warning;
    # SARIF file identifier for the analysis results
    @jsondata:Name {value: "sarif_id"}
    CodeScanningAnalysisSarifId sarifId;
    # Unique identifier for this analysis
    int id;
    # Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code
    CodeScanningAnalysisCategory category?;
};

# Template repository owner information with profile and API URLs
public type RepositoryTemplateRepositoryOwner record {
    # API URL for the owner's gists
    @jsondata:Name {value: "gists_url"}
    string gistsUrl?;
    # API URL for the owner's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl?;
    # API URL for users the owner is following
    @jsondata:Name {value: "following_url"}
    string followingUrl?;
    # API URL for repositories starred by the owner
    @jsondata:Name {value: "starred_url"}
    string starredUrl?;
    # Username of the repository owner
    string login?;
    # API URL to retrieve the owner's followers list
    @jsondata:Name {value: "followers_url"}
    string followersUrl?;
    # The type of the repository template owner (User or Organization)
    string 'type?;
    # API URL for the repository template owner
    string url?;
    # API URL to retrieve the owner's subscriptions
    @jsondata:Name {value: "subscriptions_url"}
    string subscriptionsUrl?;
    # API URL to retrieve events received by the owner
    @jsondata:Name {value: "received_events_url"}
    string receivedEventsUrl?;
    # URL of the owner's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl?;
    # API URL template to retrieve the owner's events
    @jsondata:Name {value: "events_url"}
    string eventsUrl?;
    # GitHub web URL for the repository template owner's profile
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # Whether the owner has site administrator privileges
    @jsondata:Name {value: "site_admin"}
    boolean siteAdmin?;
    # Unique identifier for the repository template owner
    int id?;
    # Gravatar ID associated with the owner's email address
    @jsondata:Name {value: "gravatar_id"}
    string gravatarId?;
    # Global node identifier for GraphQL API compatibility
    @jsondata:Name {value: "node_id"}
    string nodeId?;
    # API URL to retrieve the owner's organizations
    @jsondata:Name {value: "organizations_url"}
    string organizationsUrl?;
};

# Represents the Queries record for the operation: secret-scanning/list-alerts-for-enterprise
public type SecretScanningListAlertsForEnterpriseQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # A comma-separated list of secret types to return. By default all secret types are returned.
    # See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
    # for a complete list of secret types
    @http:Query {name: "secret_type"}
    string secretType?;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor
    string before?;
    # Set to `open` or `resolved` to only list secret scanning alerts in a specific state
    "open"|"resolved" state?;
    # The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved
    "created"|"updated" sort = "created";
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor
    string after?;
    # A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`
    string resolution?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# A codespace
public type CodespaceResponse record {
    # The total number of codespaces in the response
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of codespace objects returned in the response
    Codespace[] codespaces;
};

# Secrets for GitHub Dependabot for an organization
public type OrganizationDependabotSecret record {
    # Timestamp when the Dependabot secret was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Visibility of a secret
    "all"|"private"|"selected" visibility;
    # The name of the secret
    string name;
    # API URL to manage repositories with access to this secret
    @jsondata:Name {value: "selected_repositories_url"}
    string selectedRepositoriesUrl?;
    # The timestamp when the organization Dependabot secret was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
};

# An object with information about the individual creating the tag
public type ReposownerrepogittagsTagger record {
    # When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string date?;
    # The name of the author of the tag
    string name;
    # The email of the author of the tag
    string email;
};

# Represents a job step in a workflow run with status and timing info
public type JobSteps record {
    # The outcome of the job
    string? conclusion;
    # The sequential number of the job step
    int number;
    # The time that the job finished, in ISO 8601 format
    @jsondata:Name {value: "completed_at"}
    string? completedAt?;
    # The name of the job
    string name;
    # The time that the step started, in ISO 8601 format
    @jsondata:Name {value: "started_at"}
    string? startedAt?;
    # The phase of the lifecycle that the job is currently in
    "queued"|"in_progress"|"completed" status;
};

# Contains verification details for signed commits or tags
public type Verification record {
    # The reason for the verification status
    string reason;
    # The payload that was signed for verification
    string? payload;
    # The signature used for verification
    string? signature;
    # Whether the signature was successfully verified
    boolean verified;
};

# Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable
public type ReposownerrepobranchesbranchprotectionRestrictions record {
    # The list of team `slug`s with push access
    string[] teams;
    # The list of user `login`s with push access
    string[] users;
    # The list of app `slug`s with push access
    string[] apps?;
};

# Review Request Removed Issue Event
public type ReviewRequestRemovedIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the review request removal event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # The team that was removed from the review request
    @jsondata:Name {value: "requested_team"}
    Team requestedTeam?;
    # The GitHub App that performed the review request removal
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # The user who originally requested the review
    @jsondata:Name {value: "review_requester"}
    SimpleUser reviewRequester;
    # The timestamp when the review request removal event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # User whose review request was removed from the pull request
    @jsondata:Name {value: "requested_reviewer"}
    SimpleUser requestedReviewer?;
    # Unique identifier for the review request removed event
    int id;
    # Event type indicating a review request was removed
    string event;
    # SHA of the commit associated with the review request removal
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for the review request removed event
    string url;
    # Global node identifier for the review request removed event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# An artifact
public type Artifact record {
    # URL to download the artifact's zip archive
    @jsondata:Name {value: "archive_download_url"}
    string archiveDownloadUrl;
    # Whether or not the artifact has expired
    boolean expired;
    # Timestamp when the artifact expires and will be deleted
    @jsondata:Name {value: "expires_at"}
    string? expiresAt;
    # Workflow run that generated this artifact
    @jsondata:Name {value: "workflow_run"}
    ArtifactWorkflowRun? workflowRun?;
    # Timestamp when the artifact was last updated
    @jsondata:Name {value: "updated_at"}
    string? updatedAt;
    # The name of the artifact
    string name;
    # The size in bytes of the artifact
    @jsondata:Name {value: "size_in_bytes"}
    int sizeInBytes;
    # Timestamp when the artifact was created
    @jsondata:Name {value: "created_at"}
    string? createdAt;
    # Unique identifier for the artifact
    int id;
    # API URL for the artifact resource
    string url;
    # Global node identifier for the artifact
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# String value representing one possible affects option
public type AffectsOneOf1 string;

# Authentication token for a GitHub App installed on a user or org
public type InstallationToken record {
    # Scope of repository access: 'all' or 'selected' repositories
    @jsondata:Name {value: "repository_selection"}
    "all"|"selected" repositorySelection?;
    # Name of the single file the installation can access
    @jsondata:Name {value: "single_file"}
    string singleFile?;
    # Token expiration timestamp
    @jsondata:Name {value: "expires_at"}
    string expiresAt;
    # Array of repositories accessible by this installation token
    Repository[] repositories?;
    # The permissions granted to the user access token
    AppPermissions permissions?;
    # Whether the installation has access to multiple single files
    @jsondata:Name {value: "has_multiple_single_files"}
    boolean hasMultipleSingleFiles?;
    # Array of file paths the installation can access
    @jsondata:Name {value: "single_file_paths"}
    string[] singleFilePaths?;
    # The installation access token
    string token;
};

# The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`
public type SelectedActionsUrl string;

# Repository ruleset condition targeting specific repository IDs
public type RepositoryRulesetConditionsRepositoryIdTargetRepositoryId record {
    # The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass
    @jsondata:Name {value: "repository_ids"}
    int[] repositoryIds?;
};

# Describe a region within a file for the alert
public type CodeScanningAlertLocation record {
    # File path where the code scanning alert was found
    string path?;
    # Starting column number of the alert location
    @jsondata:Name {value: "start_column"}
    int startColumn?;
    # Starting line number of the alert location
    @jsondata:Name {value: "start_line"}
    int startLine?;
    # Ending line number of the alert location
    @jsondata:Name {value: "end_line"}
    int endLine?;
    # Ending column number of the alert location
    @jsondata:Name {value: "end_column"}
    int endColumn?;
};

# Request body for uploading SARIF code scanning analysis
public type CodeScanningSarifsBody record {
    # The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`
    @jsondata:Name {value: "tool_name"}
    string toolName?;
    # SHA of the commit associated with the analysis
    @jsondata:Name {value: "commit_sha"}
    CodeScanningAnalysisCommitSha commitSha;
    # The full Git reference, formatted as `refs/heads/<branch name>`,
    # `refs/pull/<number>/merge`, or `refs/pull/<number>/head`
    CodeScanningRef ref;
    # A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
    CodeScanningAnalysisSarifFile sarif;
    # The base directory used in the analysis, as it appears in the SARIF file.
    # This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository
    @jsondata:Name {value: "checkout_uri"}
    string checkoutUri?;
    # The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    @jsondata:Name {value: "started_at"}
    string startedAt?;
    # Whether the SARIF file will be validated according to the code scanning specifications.
    # This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning
    boolean validate?;
};

# Represents the Queries record for the operation: repos/get-commit
public type ReposGetCommitQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for creating deployment status with state and environment details
public type DeploymentIdStatusesBody record {
    # Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used
    string environment?;
    # Sets the URL for accessing your environment. Default: `""`
    @jsondata:Name {value: "environment_url"}
    string environmentUrl = "";
    # The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`
    @jsondata:Name {value: "target_url"}
    string targetUrl = "";
    # The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
    @jsondata:Name {value: "log_url"}
    string logUrl = "";
    # Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
    @jsondata:Name {value: "auto_inactive"}
    boolean autoInactive?;
    # A short description of the status. The maximum description length is 140 characters
    string description = "";
    # The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub
    "error"|"failure"|"inactive"|"in_progress"|"queued"|"pending"|"success" state;
};

# Request body for adding a reaction to an issue comment
public type CommentIdReactionsBody1 record {
    # The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content;
};

# Request body containing OAuth or GitHub application access token
public type ClientIdTokenBody record {
    # The access_token of the OAuth or GitHub application
    @jsondata:Name {value: "access_token"}
    string accessToken;
};

# Check suite preference settings for automatic trigger configuration
public type CheckSuitePreferencePreferences record {
    @jsondata:Name {value: "auto_trigger_checks"}
    CheckSuitePreferencePreferencesAutoTriggerChecks[] autoTriggerChecks?;
};

# Represents the Queries record for the operation: users/list-following-for-user
public type UsersListFollowingForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed
public type CodeScanningAlertEnvironment string;

# Request body for performing actions on organization personal access tokens
public type OrgPersonalAccessTokensBody record {
    # The IDs of the fine-grained personal access tokens
    @jsondata:Name {value: "pat_ids"}
    int[] patIds;
    # Action to apply to the fine-grained personal access token
    "revoke" action;
};

# Complete set of repository permission levels for a user or team
public type FullRepositoryPermissions record {
    # Permission to pull and clone repository content
    boolean pull;
    # Permission to maintain repository settings and manage issues
    boolean maintain?;
    # Full administrative access to repository and settings
    boolean admin;
    # Permission to manage issues and pull requests without write access
    boolean triage?;
    # Whether push access is granted to the repository
    boolean push;
};

# Response object containing webhook delivery status information
public type HookResponse record {
    # HTTP response code from webhook delivery
    int? code;
    # Response message from webhook delivery
    string? message;
    # Status description of webhook delivery
    string? status;
};

# Delivery made by a webhook, without request and response information
public type HookDeliveryItem record {
    # Time spent delivering
    decimal duration;
    # Status code received when delivery was made
    @jsondata:Name {value: "status_code"}
    int statusCode;
    # Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event)
    string guid;
    # The type of activity for the event that triggered the delivery
    string? action;
    # The id of the GitHub App installation associated with this event
    @jsondata:Name {value: "installation_id"}
    int? installationId;
    # The id of the repository associated with this event
    @jsondata:Name {value: "repository_id"}
    int? repositoryId;
    # Unique identifier of the webhook delivery
    int id;
    # The event that triggered the delivery
    string event;
    # Time when the webhook delivery occurred
    @jsondata:Name {value: "delivered_at"}
    string deliveredAt;
    # Whether the webhook delivery is a redelivery
    boolean redelivery;
    # Describes the response returned after attempting the delivery
    string status;
};

# Represents the Queries record for the operation: teams/list-pending-invitations-in-org
public type TeamsListPendingInvitationsInOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for creating or updating GitHub Actions variables
public type ActionsVariablesBody1 record {
    # The name of the variable
    string name;
    # The value of the variable
    string value;
};

# Represents the Queries record for the operation: activity/list-notifications-for-authenticated-user
public type ActivityListNotificationsForAuthenticatedUserQueries record {
    # If `true`, show notifications marked as read
    boolean all = false;
    # The number of results per page (max 50)
    @http:Query {name: "per_page"}
    int perPage = 50;
    # Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string before?;
    # If `true`, only shows notifications in which the user is directly participating or mentioned
    boolean participating = false;
    # Page number of the results to fetch
    int page = 1;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Represents the Queries record for the operation: reactions/list-for-team-discussion-comment-in-org
public type ReactionsListForTeamDiscussionCommentInOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content?;
};

# Represents the Queries record for the operation: repos/get-branch-rules
public type ReposGetBranchRulesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body to revoke GitHub Copilot access for selected users
public type BillingSelectedUsersBody1 record {
    # The usernames of the organization members for which to revoke access to GitHub Copilot
    @jsondata:Name {value: "selected_usernames"}
    string[] selectedUsernames;
};

# The permissions policy that controls the actions and reusable workflows that are allowed to run
public type AllowedActions "all"|"local_only"|"selected";

# Configuration for enforcing branch protection rules on administrators
public type ProtectedBranchEnforceAdmins record {|
    # API URL for the enforce admins protection rule
    string url;
    # Whether admin enforcement is enabled for branch protection
    boolean enabled;
|};

# Represents the Queries record for the operation: users/list-emails-for-authenticated-user
public type UsersListEmailsForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Information of a job execution in a workflow run
public type Job record {
    # The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
    @jsondata:Name {value: "runner_id"}
    int? runnerId;
    # The id of the associated workflow run
    @jsondata:Name {value: "run_id"}
    int runId;
    # The name of the workflow
    @jsondata:Name {value: "workflow_name"}
    string? workflowName;
    # The name of the current branch
    @jsondata:Name {value: "head_branch"}
    string? headBranch;
    # The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
    @jsondata:Name {value: "runner_name"}
    string? runnerName;
    # The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
    @jsondata:Name {value: "runner_group_name"}
    string? runnerGroupName;
    # The time that the job created, in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Steps in this job
    JobSteps[] steps?;
    # The SHA of the commit that is being run
    @jsondata:Name {value: "head_sha"}
    string headSha;
    # API URL for the workflow job
    string url;
    # API URL for the associated check run
    @jsondata:Name {value: "check_run_url"}
    string checkRunUrl;
    # Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file
    string[] labels;
    # The outcome of the job
    "success"|"failure"|"neutral"|"cancelled"|"skipped"|"timed_out"|"action_required"? conclusion;
    # The time that the job finished, in ISO 8601 format
    @jsondata:Name {value: "completed_at"}
    string? completedAt;
    # API URL for the parent workflow run
    @jsondata:Name {value: "run_url"}
    string runUrl;
    # GitHub web URL for viewing the job details
    @jsondata:Name {value: "html_url"}
    string? htmlUrl;
    # The name of the job
    string name;
    # Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run
    @jsondata:Name {value: "run_attempt"}
    int runAttempt?;
    # The time that the job started, in ISO 8601 format
    @jsondata:Name {value: "started_at"}
    string startedAt;
    # The id of the job
    int id;
    # The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
    @jsondata:Name {value: "runner_group_id"}
    int? runnerGroupId;
    # Global node identifier for the job
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # The phase of the lifecycle that the job is currently in
    "queued"|"in_progress"|"completed" status;
};

# Branch Protection
public type BranchProtection record {
    # Pull request review requirements for the protected branch
    @jsondata:Name {value: "required_pull_request_reviews"}
    ProtectedBranchPullRequestReview requiredPullRequestReviews?;
    # Commit signature requirements for the protected branch
    @jsondata:Name {value: "required_signatures"}
    BranchProtectionRequiredSignatures requiredSignatures?;
    # Status check requirements for the protected branch
    @jsondata:Name {value: "required_status_checks"}
    ProtectedBranchRequiredStatusCheck requiredStatusChecks?;
    # Fork syncing permissions for the protected branch
    @jsondata:Name {value: "allow_fork_syncing"}
    BranchProtectionAllowForkSyncing allowForkSyncing?;
    # Branch Restriction Policy
    BranchRestrictionPolicy restrictions?;
    # Whether the branch requires a linear commit history
    @jsondata:Name {value: "required_linear_history"}
    BranchProtectionRequiredLinearHistory requiredLinearHistory?;
    # Whether administrators are included in branch protection rules
    @jsondata:Name {value: "enforce_admins"}
    ProtectedBranchAdminEnforced enforceAdmins?;
    # The API URL for the branch protection
    string url?;
    # Whether branch protection is enabled
    boolean enabled?;
    # Whether force pushes are allowed on the protected branch
    @jsondata:Name {value: "allow_force_pushes"}
    BranchProtectionRequiredLinearHistory allowForcePushes?;
    # Whether the branch is locked from modifications
    @jsondata:Name {value: "lock_branch"}
    BranchProtectionLockBranch lockBranch?;
    # Whether creation of matching branches is blocked
    @jsondata:Name {value: "block_creations"}
    BranchProtectionRequiredLinearHistory blockCreations?;
    # Whether conversations must be resolved before merging
    @jsondata:Name {value: "required_conversation_resolution"}
    BranchProtectionRequiredLinearHistory requiredConversationResolution?;
    # The name of the protected branch
    string name?;
    # Whether the protected branch can be deleted
    @jsondata:Name {value: "allow_deletions"}
    BranchProtectionRequiredLinearHistory allowDeletions?;
    # The API URL for the branch protection settings
    @jsondata:Name {value: "protection_url"}
    string protectionUrl?;
};

# Represents the Queries record for the operation: search/topics
public type SearchTopicsQueries record {
    # The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query)
    string q;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# File information within a gist
public type GistSimpleFiles record {
    # The name of the file
    string filename?;
    # The size of the file in bytes
    int size?;
    # Whether the file content is truncated
    boolean truncated?;
    # Programming language of the gist file
    string language?;
    # MIME type of the gist file
    string 'type?;
    # URL to access the raw content of the gist file
    @jsondata:Name {value: "raw_url"}
    string rawUrl?;
    # Text content of the gist file
    string content?;
};

# Git tree object associated with a commit
public type GitCommitTree record {
    # SHA for the commit
    string sha;
    # API URL for the git tree object
    string url;
};

# The person that committed the file. Default: the authenticated user
public type ReposownerrepocontentspathCommitter record {
    # Timestamp when the commit was made by the committer
    string date?;
    # The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted
    string name;
    # The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted
    string email;
};

# Commit Activity
public type CommitActivity record {
    # Total number of commits for the week
    int total;
    # Unix timestamp representing the start of the week
    int week;
    # Array of commit counts for each day of the week (Sunday to Saturday)
    int[] days;
};

# Blob
public type Blob record {
    # Size of the blob content in bytes
    int? size;
    # Encoding format of the blob content (base64 or utf-8)
    string encoding;
    # SHA hash identifier for the blob object
    string sha;
    # Syntax-highlighted version of the blob content
    @jsondata:Name {value: "highlighted_content"}
    string highlightedContent?;
    # Raw content of the blob
    string content;
    # API URL to access the blob resource
    string url;
    # Global node ID for the blob object
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Timeline Unassigned Issue Event
public type TimelineUnassignedIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit that triggered the unassignment event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed the unassignment action
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # The timestamp when the unassignment event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The unique identifier for the timeline unassignment event
    int id;
    # A GitHub user
    SimpleUser assignee;
    # The type of timeline event that occurred
    string event;
    # The commit ID associated with the unassignment event, if applicable
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # The API URL for the timeline unassignment event
    string url;
    # The global node ID for the timeline unassignment event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents a deployment environment awaiting approval or review
public type PendingDeploymentEnvironment record {
    # The web URL for the deployment environment's activity log
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # The name of the environment
    string name?;
    # The id of the environment
    int id?;
    # The API URL for the deployment environment
    string url?;
    # The global node ID for the deployment environment
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Set repository secrets for GitHub Codespaces
public type RepoCodespacesSecret record {
    # The timestamp when the codespaces secret was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The name of the secret
    string name;
    # The timestamp when the codespaces secret was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
};

# Detailed pull request repository rule with associated ruleset information
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf1234567 record {
    *RepositoryRulePullRequest;
    *RepositoryRuleRulesetInfo;
};

# Secrets for a GitHub Codespace
public type CodespacesSecretResponse record {
    # Total number of codespaces secrets
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of codespaces secret objects
    CodespacesSecret[] secrets;
};

# Request body schema for deleting a file in a repository
public type ContentspathBody1 record {
    # object containing information about the committer
    ReposownerrepocontentspathCommitter1 committer?;
    # object containing information about the author
    ReposownerrepocontentspathAuthor1 author?;
    # The commit message
    string message;
    # The blob SHA of the file being deleted
    string sha;
    # The branch name. Default: the repository’s default branch
    string branch?;
};

# Request body schema for creating a repository webhook
public type RepoHooksBody record {|
    # Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`
    string name?;
    # Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications
    boolean active = true;
    # Key/value pairs to provide settings for this webhook
    ReposownerrepohooksConfig config?;
    # Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for
    string[] events = ["push"];
|};

# Represents the Queries record for the operation: repos/get-all-topics
public type ReposGetAllTopicsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# A GitHub App that is providing a custom deployment protection rule
public type CustomDeploymentRuleAppResponse record {
    # Available custom deployment protection rule app integrations
    @jsondata:Name {value: "available_custom_deployment_protection_rule_integrations"}
    CustomDeploymentRuleApp[] availableCustomDeploymentProtectionRuleIntegrations?;
    # The total number of custom deployment protection rule integrations available for this environment
    @jsondata:Name {value: "total_count"}
    int totalCount?;
};

# Request body schema for managing branch protection user restrictions
public type RestrictionsUsersBody2 ReposownerrepobranchesbranchprotectionrestrictionsusersOneOf12|ReposownerrepobranchesbranchprotectionrestrictionsusersreposownerrepobranchesbranchprotectionrestrictionsusersOneOf122;

# Request body schema for branch protection user restrictions
public type RestrictionsUsersBody1 ReposownerrepobranchesbranchprotectionrestrictionsusersOneOf11|ReposownerrepobranchesbranchprotectionrestrictionsusersreposownerrepobranchesbranchprotectionrestrictionsusersOneOf112;

# The set of permissions for the GitHub app
public type IntegrationPermissions record {|
    # Permission level for accessing repository issues
    string issues?;
    # Permission level for GitHub checks (read, write, admin, or none)
    string checks?;
    # Permission level for repository metadata access
    string metadata?;
    # Permission level for repository contents (read, write, admin, or none)
    string contents?;
    # Permission level for repository deployments
    string deployments?;
    string...;
|};

# Represents the Queries record for the operation: issues/list-comments-for-repo
public type IssuesListCommentsForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The property to sort the results by
    "created"|"updated" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # Either `asc` or `desc`. Ignored without the `sort` parameter
    "asc"|"desc" direction?;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Repository rule combining commit message pattern and ruleset information
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf12345678910 record {
    *RepositoryRuleCommitMessagePattern;
    *RepositoryRuleRulesetInfo;
};

# The public key used for setting Actions Secrets
public type ActionsPublicKey record {
    # The identifier for the key
    @jsondata:Name {value: "key_id"}
    string keyId;
    # Timestamp when the public key was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # Unique identifier for the public key
    int id?;
    # Display title or label for the public key
    string title?;
    # The Base64 encoded public key
    string 'key;
    # API URL for accessing the public key resource
    string url?;
};

# GitHub Apps with push access to protected branch restrictions
public type ReposownerrepobranchesbranchprotectionrestrictionsappsOneOf1 record {
    # The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items
    string[] apps;
};

# Represents the Queries record for the operation: reactions/list-for-pull-request-review-comment
public type ReactionsListForPullRequestReviewCommentQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a pull request review comment
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content?;
};

# Org Membership
public type OrgMembership record {
    # API URL of the organization
    @jsondata:Name {value: "organization_url"}
    string organizationUrl;
    # The user's membership type in the organization
    "admin"|"member"|"billing_manager" role;
    # Organization membership permissions and capabilities
    OrgMembershipPermissions permissions?;
    # A GitHub organization
    OrganizationSimple organization;
    # The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation
    "active"|"pending" state;
    # A GitHub user
    NullableSimpleUser? user;
    # API URL of the organization membership resource
    string url;
};

# Request body for updating organization membership state to active
public type OrgsorgBody1 record {
    # The state that the membership should be in. Only `"active"` will be accepted
    "active" state;
};

# Request body schema for creating team discussions
public type TeamSlugDiscussionsBody record {
    # Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post
    boolean 'private = false;
    # The discussion post's title
    string title;
    # The discussion post's body text
    string body;
};

# Workflow Run Usage
public type WorkflowRunUsage record {
    # Duration of the workflow run in milliseconds
    @jsondata:Name {value: "run_duration_ms"}
    int runDurationMs?;
    # Billable usage breakdown by operating system for workflow runs
    WorkflowRunUsageBillable billable;
};

# Represents the Queries record for the operation: users/list-social-accounts-for-authenticated-user
public type UsersListSocialAccountsForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: pulls/list-reviews
public type PullsListReviewsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Details for the vulnerable dependency
public type DependabotAlertWithRepositoryDependency record {
    # Details for the vulnerable package
    DependabotAlertPackage package?;
    # The full path to the dependency manifest file, relative to the root of the repository
    @jsondata:Name {value: "manifest_path"}
    string manifestPath?;
    # The execution scope of the vulnerable dependency
    "development"|"runtime"? scope?;
};

# Breakdown of GitHub Actions billing usage minutes by runner type
public type ActionsBillingUsageMinutesUsedBreakdown record {
    # Total minutes used on Windows 4 core runner machines
    @jsondata:Name {value: "windows_4_core"}
    int windows4Core?;
    # Total minutes used on Ubuntu 64 core runner machines
    @jsondata:Name {value: "ubuntu_64_core"}
    int ubuntu64Core?;
    # Total minutes used on macOS runner machines
    @jsondata:Name {value: "MACOS"}
    int mACOS?;
    # Total minutes used on macOS 12 core runner machines
    @jsondata:Name {value: "macos_12_core"}
    int macos12Core?;
    # Total minutes used on Ubuntu runner machines
    @jsondata:Name {value: "UBUNTU"}
    int uBUNTU?;
    # Total minutes used on Ubuntu 8 core runner machines
    @jsondata:Name {value: "ubuntu_8_core"}
    int ubuntu8Core?;
    # Total minutes used on all runner machines
    int total?;
    # Total minutes used on Windows 64 core runner machines
    @jsondata:Name {value: "windows_64_core"}
    int windows64Core?;
    # Total minutes used on Ubuntu 32 core runner machines
    @jsondata:Name {value: "ubuntu_32_core"}
    int ubuntu32Core?;
    # Total minutes used on Windows runner machines
    @jsondata:Name {value: "WINDOWS"}
    int wINDOWS?;
    # Total minutes used on Ubuntu 16 core runner machines
    @jsondata:Name {value: "ubuntu_16_core"}
    int ubuntu16Core?;
    # Total minutes used on Windows 32 core runner machines
    @jsondata:Name {value: "windows_32_core"}
    int windows32Core?;
    # Total minutes used on Ubuntu 4 core runner machines
    @jsondata:Name {value: "ubuntu_4_core"}
    int ubuntu4Core?;
    # Total minutes used on Windows 8 core runner machines
    @jsondata:Name {value: "windows_8_core"}
    int windows8Core?;
    # Total minutes used on Windows 16 core runner machines
    @jsondata:Name {value: "windows_16_core"}
    int windows16Core?;
};

# The name of the status checks
public type ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsreposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf122 string[];

# The version of the tool used to generate the code scanning analysis
public type CodeScanningAnalysisToolVersion string?;

# Dependency change information in a dependency graph diff
public type DependencyGraphDiffInner record {
    # The license identifier for the dependency package
    string? license;
    # The package ecosystem (e.g., npm, pip, maven)
    string ecosystem;
    # The Package URL (PURL) identifier for the dependency
    @jsondata:Name {value: "package_url"}
    string? packageUrl;
    # Path to the manifest file containing the dependency
    string manifest;
    # Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment
    "unknown"|"runtime"|"development" scope;
    # The name of the dependency package
    string name;
    # List of known security vulnerabilities for this dependency
    DependencyGraphDiffInner_vulnerabilities[] vulnerabilities;
    # Whether the dependency was added or removed
    @jsondata:Name {value: "change_type"}
    "added"|"removed" changeType;
    # URL of the dependency's source code repository
    @jsondata:Name {value: "source_repository_url"}
    string? sourceRepositoryUrl;
    # The version number of the dependency
    string version;
};

# Request body schema for updating user profile information
public type UserBody record {
    # The new hiring availability of the user
    boolean hireable?;
    # The new name of the user
    string name?;
    # The new Twitter username of the user
    @jsondata:Name {value: "twitter_username"}
    string? twitterUsername?;
    # The new short biography of the user
    string bio?;
    # The new company of the user
    string company?;
    # The new location of the user
    string location?;
    # The new blog URL of the user
    string blog?;
    # The publicly visible email address of the user
    string email?;
};

# A release
public type Release record {
    # HTML-formatted release notes and description
    @jsondata:Name {value: "body_html"}
    string bodyHtml?;
    # Plain text content of the release description
    @jsondata:Name {value: "body_text"}
    string bodyText?;
    # The name of the tag
    @jsondata:Name {value: "tag_name"}
    string tagName;
    # A GitHub user
    SimpleUser author;
    # ISO 8601 timestamp when the release was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Number of user mentions in the release description
    @jsondata:Name {value: "mentions_count"}
    int mentionsCount?;
    # Markdown content of the release description
    string? body?;
    # API URL for the release resource
    string url;
    # API URL to fetch release assets
    @jsondata:Name {value: "assets_url"}
    string assetsUrl;
    # Array of downloadable assets attached to the release
    ReleaseAsset[] assets;
    # Whether to identify the release as a prerelease or a full release
    boolean prerelease;
    # GitHub web URL for viewing the release
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Download URL for the release source code as ZIP archive
    @jsondata:Name {value: "zipball_url"}
    string? zipballUrl;
    # Specifies the commitish value that determines where the Git tag is created from
    @jsondata:Name {value: "target_commitish"}
    string targetCommitish;
    # true to create a draft (unpublished) release, false to create a published one
    boolean draft;
    # Display name or title of the release
    string? name;
    # Template URL for uploading assets to the release
    @jsondata:Name {value: "upload_url"}
    string uploadUrl;
    # Aggregated count of all reaction types on a GitHub item
    ReactionRollup reactions?;
    # Unique numeric identifier for the release
    int id;
    # Download URL for the release source code as TAR archive
    @jsondata:Name {value: "tarball_url"}
    string? tarballUrl;
    # ISO 8601 timestamp when the release was published
    @jsondata:Name {value: "published_at"}
    string? publishedAt;
    # Global GraphQL node identifier for the release
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # The URL of the release discussion
    @jsondata:Name {value: "discussion_url"}
    string discussionUrl?;
};

# The hierarchy between files in a Git repository
public type GitTree record {
    # Objects specifying a tree structure
    GitTreeTree[] tree;
    # Indicates if the tree listing was truncated due to size limits
    boolean truncated;
    # SHA-1 hash identifier of the Git tree object
    string sha;
    # API URL to retrieve the Git tree object
    string url;
};

# Project card with a note field for creating text-based cards
public type ProjectscolumnscolumnIdcardsOneOf1 record {
    # The project card's note
    string? note;
};

# Request body for creating a commit status with state and metadata
public type StatusesshaBody record {
    # The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
    # For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
    # `http://ci.example.com/user/repo/build/sha`
    @jsondata:Name {value: "target_url"}
    string? targetUrl?;
    # A string label to differentiate this status from the status of other systems. This field is case-insensitive
    string context = "default";
    # A short description of the status
    string? description?;
    # The state of the status
    "error"|"failure"|"pending"|"success" state;
};

# Repository rule requiring commit signatures with ruleset metadata
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf123456 record {
    *RepositoryRuleRequiredSignatures;
    *RepositoryRuleRulesetInfo;
};

# Author information for a file commit including name, email, and date
public type FileCommitCommitAuthor record {
    # Date when the commit was authored
    string date?;
    # Name of the commit author
    string name?;
    # Email address of the commit author
    string email?;
};

# The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise)
public type RepositoryRuleEnforcement "disabled"|"active"|"evaluate";

# Represents the Queries record for the operation: codespaces/list-repo-secrets
public type CodespacesListRepoSecretsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: reactions/list-for-issue-comment
public type ReactionsListForIssueCommentQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue comment
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content?;
};

# Represents the Queries record for the operation: repos/get-combined-status-for-ref
public type ReposGetCombinedStatusForRefQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# An autolink reference
public type Autolink record {
    # The prefix of a key that is linkified
    @jsondata:Name {value: "key_prefix"}
    string keyPrefix;
    # A template for the target URL that is generated if a key was found
    @jsondata:Name {value: "url_template"}
    string urlTemplate;
    # Unique identifier for the autolink reference
    int id;
    # Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters
    @jsondata:Name {value: "is_alphanumeric"}
    boolean isAlphanumeric;
};

# Issue Event Label
public type IssueEventLabel record {
    # Hex color code of the issue label
    string? color;
    # Display name of the issue label
    string? name;
};

# Request body for creating a Git tree with optional base tree and file entries
public type GitTreesBody record {
    # The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
    # If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit
    @jsondata:Name {value: "base_tree"}
    string baseTree?;
    # Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure
    ReposownerrepogittreesTree[] tree;
};

# Tool information for code scanning analysis including name, GUID, and version
public type CodeScanningAnalysisTool record {
    # The name of the tool used to generate the code scanning analysis
    CodeScanningAnalysisToolName name?;
    # The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data
    CodeScanningAnalysisToolGuid? guid?;
    # The version of the tool used to generate the code scanning analysis
    CodeScanningAnalysisToolVersion? version?;
};

# A check performed on the code of a given code change
public type CheckRun record {
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub
    NullableIntegration? app;
    # External identifier for the check run from third-party systems
    @jsondata:Name {value: "external_id"}
    string? externalId;
    # URL for detailed information about the check run
    @jsondata:Name {value: "details_url"}
    string? detailsUrl;
    # The SHA of the commit that is being checked
    @jsondata:Name {value: "head_sha"}
    string headSha;
    # API URL for the check run resource
    string url;
    # Final conclusion of the check run (success, failure, neutral, etc.)
    "success"|"failure"|"neutral"|"cancelled"|"skipped"|"timed_out"|"action_required"? conclusion;
    # Output details and annotations for a check run
    CheckRunOutput output;
    # Timestamp when the check run was completed
    @jsondata:Name {value: "completed_at"}
    string? completedAt;
    # Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check
    @jsondata:Name {value: "pull_requests"}
    PullRequestMinimal[] pullRequests;
    # Web URL for viewing the check run on GitHub
    @jsondata:Name {value: "html_url"}
    string? htmlUrl;
    # The name of the check
    string name;
    # Timestamp when the check run was started
    @jsondata:Name {value: "started_at"}
    string? startedAt;
    # The id of the check
    int id;
    # Check suite that contains this check run
    @jsondata:Name {value: "check_suite"}
    CheckRunCheckSuite? checkSuite;
    # Global node identifier for the check run
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # The phase of the lifecycle that the check is currently in
    "queued"|"in_progress"|"completed" status;
    # A deployment created as the result of an Actions check run from a workflow that references an environment
    DeploymentSimple deployment?;
};

# Porter Large File
public type PorterLargeFile record {
    # Reference name for the large file in the repository
    @jsondata:Name {value: "ref_name"}
    string refName;
    # File path of the large file in the repository
    string path;
    # Size of the large file in bytes
    int size;
    # Object identifier for the large file
    string oid;
};

# Represents the Queries record for the operation: teams/list-discussion-comments-legacy
public type TeamsListDiscussionCommentsLegacyQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Represents the Queries record for the operation: activity/list-public-org-events
public type ActivityListPublicOrgEventsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Location information for a detected secret in GitHub resources
public type SecretScanningLocation record {
    # Specific location details based on the resource type where secret was found
    SecretScanningLocationCommit|SecretScanningLocationIssueTitle|SecretScanningLocationIssueBody|SecretScanningLocationIssueComment details;
    # The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found
    "commit"|"issue_title"|"issue_body"|"issue_comment" 'type;
};

# Represents the Queries record for the operation: dependency-graph/diff-range
public type DependencyGraphDiffRangeQueries record {
    # The full path, relative to the repository root, of the dependency manifest file
    string name?;
};

# Code scanning alert item with metadata, state, and detection details
public type CodeScanningAlertItems record {
    # URL to retrieve all instances of this code scanning alert
    @jsondata:Name {value: "instances_url"}
    AlertInstancesUrl instancesUrl;
    # Timestamp when the code scanning alert was created
    @jsondata:Name {value: "created_at"}
    AlertCreatedAt createdAt;
    # Optional comment explaining why the alert was dismissed
    @jsondata:Name {value: "dismissed_comment"}
    CodeScanningAlertDismissedComment? dismissedComment?;
    # Summary information about a code scanning rule that triggered an alert
    CodeScanningAlertRuleSummary rule;
    # The REST API URL of the alert resource
    AlertUrl url;
    # Tool information for code scanning analysis including name, GUID, and version
    CodeScanningAnalysisTool tool;
    # The security alert number
    AlertNumber number;
    # Timestamp when the code scanning alert was last updated
    @jsondata:Name {value: "updated_at"}
    AlertUpdatedAt updatedAt?;
    # GitHub web URL for viewing the code scanning alert
    @jsondata:Name {value: "html_url"}
    AlertHtmlUrl htmlUrl;
    # Timestamp when the code scanning alert was resolved
    @jsondata:Name {value: "fixed_at"}
    AlertFixedAt? fixedAt?;
    # Most recent occurrence instance of this code scanning alert
    @jsondata:Name {value: "most_recent_instance"}
    CodeScanningAlertInstance mostRecentInstance;
    # State of a code scanning alert
    CodeScanningAlertState state;
    # User who dismissed the code scanning alert
    @jsondata:Name {value: "dismissed_by"}
    NullableSimpleUser? dismissedBy;
    # Reason code for why the alert was dismissed
    @jsondata:Name {value: "dismissed_reason"}
    CodeScanningAlertDismissedReason? dismissedReason;
    # Timestamp when the code scanning alert was dismissed
    @jsondata:Name {value: "dismissed_at"}
    AlertDismissedAt? dismissedAt;
};

# GitHub repository label with metadata and styling properties
public type LabelsLabelsOneOf122 record {
    # Whether this is a default label provided by GitHub
    boolean default?;
    # The hexadecimal color code of the label
    string? color?;
    # The name of the label
    string name?;
    # A short description of the label
    string? description?;
    # The unique identifier of the label
    int id?;
    # The API URL for the label
    string url?;
    # The GraphQL node ID of the label
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Configuration for code scanning default setup
public type CodeScanningDefaultSetupUpdate record {
    # CodeQL query suite to be used
    @jsondata:Name {value: "query_suite"}
    "default"|"extended" querySuite?;
    # CodeQL languages to be analyzed
    ("c-cpp"|"csharp"|"go"|"java-kotlin"|"javascript-typescript"|"python"|"ruby"|"swift")[] languages?;
    # Whether code scanning default setup has been configured or not
    "configured"|"not-configured" state;
};

# Project columns contain cards of work
public type ProjectColumn record {
    # The timestamp when the project column was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The API URL for cards in this project column
    @jsondata:Name {value: "cards_url"}
    string cardsUrl;
    # Name of the project column
    string name;
    # The API URL for the project containing this column
    @jsondata:Name {value: "project_url"}
    string projectUrl;
    # The timestamp when the project column was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The unique identifier of the project column
    int id;
    # The API URL for the project column
    string url;
    # The GraphQL node ID of the project column
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Community health file information for a repository
public type NullableCommunityHealthFile record {
    # The HTML URL to view the community health file
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # The API URL for the community health file
    string url;
};

# Represents the Queries record for the operation: repos/list-for-org
public type ReposListForOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The property to sort the results by
    "created"|"updated"|"pushed"|"full_name" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # Specifies the types of repositories you want returned
    "all"|"public"|"private"|"forks"|"sources"|"member" 'type = "all";
    # The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`
    "asc"|"desc" direction?;
};

# Request body schema for updating a GitHub repository release
public type ReleasesreleaseIdBody record {
    # If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
    @jsondata:Name {value: "discussion_category_name"}
    string discussionCategoryName?;
    # Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version
    @jsondata:Name {value: "make_latest"}
    "true"|"false"|"legacy" makeLatest = "true";
    # The name of the tag
    @jsondata:Name {value: "tag_name"}
    string tagName?;
    # `true` to identify the release as a prerelease, `false` to identify the release as a full release
    boolean prerelease?;
    # Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch
    @jsondata:Name {value: "target_commitish"}
    string targetCommitish?;
    # `true` makes the release a draft, and `false` publishes the release
    boolean draft?;
    # The name of the release
    string name?;
    # Text describing the contents of the tag
    string body?;
};

# Metadata schema for GitHub package versions with type and container info
public type PackageVersionMetadata record {
    # Metadata schema for container packages
    ContainerMetadata container?;
    # Package type identifier (npm, maven, rubygems, docker, nuget, container)
    @jsondata:Name {value: "package_type"}
    "npm"|"maven"|"rubygems"|"docker"|"nuget"|"container" packageType;
    # Docker package metadata containing tag information
    DockerMetadata docker?;
};

# Request body schema for creating a new GitHub repository release
public type RepoReleasesBody record {
    # If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
    @jsondata:Name {value: "discussion_category_name"}
    string discussionCategoryName?;
    # Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version
    @jsondata:Name {value: "make_latest"}
    "true"|"false"|"legacy" makeLatest = "true";
    # The name of the tag
    @jsondata:Name {value: "tag_name"}
    string tagName;
    # `true` to identify the release as a prerelease. `false` to identify the release as a full release
    boolean prerelease = false;
    # Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch
    @jsondata:Name {value: "target_commitish"}
    string targetCommitish?;
    # `true` to create a draft (unpublished) release, `false` to create a published one
    boolean draft = false;
    # The name of the release
    string name?;
    # Text describing the contents of the tag
    string body?;
    # Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes
    @jsondata:Name {value: "generate_release_notes"}
    boolean generateReleaseNotes = false;
};

# Request body schema for configuring GitHub Pages settings
public type RepoPagesBody anydata;

# Status information for uploaded SARIF code scanning files
public type CodeScanningSarifsStatus record {
    # `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed
    @jsondata:Name {value: "processing_status"}
    "pending"|"complete"|"failed" processingStatus?;
    # The REST API URL for getting the analyses associated with the upload
    @jsondata:Name {value: "analyses_url"}
    string? analysesUrl?;
    # Any errors that ocurred during processing of the delivery
    string[]? errors?;
};

# Schema for issue labels collection with minimum one label required
public type ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf1123 record {
    # Array of issue labels with minimum one item required
    @constraint:Array {minLength: 1}
    ReposownerrepoissuesissueNumberlabelsLabels[] labels?;
};

# A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
public type CodeScanningAnalysisSarifFile string;

# Detailed repository rule combining required deployments and ruleset info
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf12345 record {
    *RepositoryRuleRequiredDeployments;
    *RepositoryRuleRulesetInfo;
};

# An actor that can bypass rules in a ruleset
public type RepositoryRulesetBypassActor record {
    # The type of actor that can bypass a ruleset
    @jsondata:Name {value: "actor_type"}
    "RepositoryRole"|"Team"|"Integration"|"OrganizationAdmin" actorType;
    # When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests
    @jsondata:Name {value: "bypass_mode"}
    "always"|"pull_request" bypassMode;
    # The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`
    @jsondata:Name {value: "actor_id"}
    int actorId;
};

# Error details for CODEOWNERS file validation issues
public type CodeownersErrorsErrors record {
    # The path of the file where the error occured
    string path;
    # The line number where this errors occurs
    int line;
    # The type of error
    string kind;
    # Suggested action to fix the error. This will usually be `null`, but is provided for some common errors
    string? suggestion?;
    # The column number where this errors occurs
    int column;
    # The contents of the line where the error occurs
    string 'source?;
    # A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting)
    string message;
};

# Set secrets for GitHub Actions
public type ActionsSecret record {
    # Timestamp when the secret was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The name of the secret
    string name;
    # Timestamp when the secret was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
};

# Diff Entry
public type DiffEntry record {
    # Git patch content showing the changes made to the file
    string patch?;
    # Name of the file that was changed
    string filename;
    # Number of lines added to the file
    int additions;
    # Number of lines deleted from the file
    int deletions;
    # Total number of lines changed in the file
    int changes;
    # Original filename before rename operation
    @jsondata:Name {value: "previous_filename"}
    string previousFilename?;
    # SHA hash of the file blob
    string sha;
    # URL to view the file blob on GitHub
    @jsondata:Name {value: "blob_url"}
    string blobUrl;
    # URL to access the raw file content
    @jsondata:Name {value: "raw_url"}
    string rawUrl;
    # Type of change made to the file
    "added"|"removed"|"modified"|"renamed"|"copied"|"changed"|"unchanged" status;
    # API URL to retrieve the contents of the file at a specific commit
    @jsondata:Name {value: "contents_url"}
    string contentsUrl;
};

# GitHub repository label with properties like name, color, and description
public type LabelsLabelsOneOf132 record {
    # Indicates if this is the default label for the repository
    boolean default?;
    # Hexadecimal color code for the label display
    string? color?;
    # Display name of the label
    string name?;
    # Optional description text for the label
    string? description?;
    # Unique numeric identifier for the label
    int id?;
    # API URL for accessing this label resource
    string url?;
    # GraphQL global node identifier for the label
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Timeline Cross Referenced Event
public type TimelineCrossReferencedEvent record {
    # A GitHub user
    SimpleUser actor?;
    # Timestamp when the cross-reference event was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Timestamp when the cross-reference event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Source information for cross-referenced timeline events
    TimelineCrossReferencedEventSource 'source;
    # Type of timeline event that occurred
    string event;
};

# Configuration for check suite preferences on a repository
public type CheckSuitesPreferencesBody record {
    # Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default
    @jsondata:Name {value: "auto_trigger_checks"}
    ReposownerrepocheckSuitespreferencesAutoTriggerChecks[] autoTriggerChecks?;
};

# Text match information for a search result item
public type SearchResultTextMatchesInner record {
    # Text fragment containing the matched content
    string fragment?;
    # URL of the object containing the match
    @jsondata:Name {value: "object_url"}
    string objectUrl?;
    # Type of object containing the match
    @jsondata:Name {value: "object_type"}
    string? objectType?;
    # Property name where the match was found
    string property?;
    # Array of specific text matches with positions
    SearchResultTextMatchesInner_matches[] matches?;
};

# Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**
public type WebhookConfigInsecureSslOneOf1 string;

# Response containing Actions variables and total count
public type ActionsVariableResponse record {
    # Array of Actions variables
    ActionsVariable[] variables;
    # Total number of variables available
    @jsondata:Name {value: "total_count"}
    int totalCount;
};

# Dev Containers
public type Devcontainers record {
    # File path to the devcontainer configuration
    string path;
    # Name of the devcontainer
    string name?;
    # Human-readable display name of the devcontainer
    @jsondata:Name {value: "display_name"}
    string displayName?;
};

# Represents the Queries record for the operation: projects/list-collaborators
public type ProjectsListCollaboratorsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see
    "outside"|"direct"|"all" affiliation = "all";
    # Page number of the results to fetch
    int page = 1;
};

# Parameters to be used for the branch_name_pattern rule
public type RepositoryRuleBranchNamePattern record {
    # Rule type identifier for branch name pattern restrictions
    "branch_name_pattern" 'type;
    # Parameters for repository rule that validates commit message patterns
    RepositoryRuleCommitMessagePatternParameters parameters?;
};

# Represents the Queries record for the operation: secret-scanning/list-alerts-for-repo
public type SecretScanningListAlertsForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # A comma-separated list of secret types to return. By default all secret types are returned.
    # See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
    # for a complete list of secret types
    @http:Query {name: "secret_type"}
    string secretType?;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string
    string before?;
    # Set to `open` or `resolved` to only list secret scanning alerts in a specific state
    "open"|"resolved" state?;
    # The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved
    "created"|"updated" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string
    string after?;
    # A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`
    string resolution?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue
public type SecretScanningLocationIssueComment record {
    # The API URL to get the issue comment where the secret was detected
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl;
};

# Represents the Queries record for the operation: classroom/list-accepted-assigments-for-an-assignment
public type ClassroomListAcceptedAssigmentsForAnAssignmentQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for user email operations with multiple format options
public type UserEmailsBody UseremailsOneOf1|UseremailsuseremailsOneOf12|UseremailsuseremailsuseremailsOneOf123;

# Email address associated with a GPG key and verification status
public type GpgKeyEmails record {
    # Whether the GPG key email address has been verified
    boolean verified?;
    # Email address associated with the GPG key
    string email?;
};

# Email request format with emails array for adding multiple addresses
public type UseremailsOneOf1 record {
    # Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key
    string[] emails;
};

# Hypermedia Link
public type Link record {
    # URL reference for the link
    string href;
};

# Request body for configuring organization codespaces access permissions
public type CodespacesAccessBody record {
    # Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization
    "disabled"|"selected_members"|"all_members"|"all_members_and_outside_collaborators" visibility;
    # The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value
    @jsondata:Name {value: "selected_usernames"}
    string[] selectedUsernames?;
};

# Summary information about a code scanning rule that triggered an alert
public type CodeScanningAlertRuleSummary record {
    # The severity of the alert
    "none"|"note"|"warning"|"error"? severity?;
    # The name of the rule used to detect the alert
    string name?;
    # A short description of the rule used to detect the alert
    string description?;
    # A unique identifier for the rule used to detect the alert
    string? id?;
    # A set of tags applicable for the rule
    string[]? tags?;
};

# The type of reviewer
public type DeploymentReviewerType "User"|"Team";

# Request body for creating or updating repository file content
public type ContentspathBody record {
    # The person that committed the file. Default: the authenticated user
    ReposownerrepocontentspathCommitter committer?;
    # The author of the file. Default: The `committer` or the authenticated user if you omit `committer`
    ReposownerrepocontentspathAuthor author?;
    # The commit message
    string message;
    # **Required if you are updating a file**. The blob SHA of the file being replaced
    string sha?;
    # The branch name. Default: the repository’s default branch
    string branch?;
    # The new file content, using Base64 encoding
    string content;
};

# Branch Short
public type BranchShort record {
    # Whether the branch has protection rules enabled
    boolean protected;
    # Name of the repository branch
    string name;
    # Abbreviated commit information for a branch
    BranchShortCommit 'commit;
};

# A version of a software package
public type PackageVersion record {
    # License identifier for the package version
    string license?;
    # Metadata schema for GitHub package versions with type and container info
    PackageVersionMetadata metadata?;
    # Timestamp when the package version was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Web URL to view the package version in GitHub's interface
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # The name of the package version
    string name;
    # Human-readable description of the package version
    string description?;
    # Timestamp when the package version was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier of the package version
    int id;
    # Timestamp when the package version was deleted, if applicable
    @jsondata:Name {value: "deleted_at"}
    string deletedAt?;
    # API URL to access this specific package version
    string url;
    # Web URL to view the parent package in GitHub's interface
    @jsondata:Name {value: "package_html_url"}
    string packageHtmlUrl;
};

# Repo Search Result Item
public type RepoSearchResultItem record {
    # Whether forking is allowed for this repository
    @jsondata:Name {value: "allow_forking"}
    boolean allowForking?;
    # Number of users who have starred this repository
    @jsondata:Name {value: "stargazers_count"}
    int stargazersCount;
    # Whether this repository is marked as a template
    @jsondata:Name {value: "is_template"}
    boolean isTemplate?;
    # The date and time when the repository was last pushed to
    @jsondata:Name {value: "pushed_at"}
    string pushedAt;
    # The primary programming language of the repository
    string? language;
    # URL for subscribing to repository notifications
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl;
    # URL template for accessing repository branches
    @jsondata:Name {value: "branches_url"}
    string branchesUrl;
    # URL template for accessing issue comments in the repository
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl;
    # Whether rebase merging is allowed for pull requests
    @jsondata:Name {value: "allow_rebase_merge"}
    boolean allowRebaseMerge?;
    # URL template for accessing repository labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # Search relevance score for the repository result
    decimal score;
    # URL for accessing repository subscribers list
    @jsondata:Name {value: "subscribers_url"}
    string subscribersUrl;
    # Complete set of repository permission levels for a user or team
    FullRepositoryPermissions permissions?;
    # Temporary token for cloning private repositories
    @jsondata:Name {value: "temp_clone_token"}
    string tempCloneToken?;
    # URL template for accessing repository releases
    @jsondata:Name {value: "releases_url"}
    string releasesUrl;
    # Subversion URL for the repository
    @jsondata:Name {value: "svn_url"}
    string svnUrl;
    # Unique identifier for the repository
    int id;
    # The name of the default branch for the repository
    @jsondata:Name {value: "master_branch"}
    string masterBranch?;
    # Whether the repository has discussions feature enabled
    @jsondata:Name {value: "has_discussions"}
    boolean hasDiscussions?;
    # Number of forks for this repository
    int forks;
    # URL template for downloading repository archives
    @jsondata:Name {value: "archive_url"}
    string archiveUrl;
    # Whether merge commits are allowed for this repository
    @jsondata:Name {value: "allow_merge_commit"}
    boolean allowMergeCommit?;
    # URL template for accessing Git references
    @jsondata:Name {value: "git_refs_url"}
    string gitRefsUrl;
    # API URL for accessing repository forks
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # The repository visibility: public, private, or internal
    string visibility?;
    # URL template for accessing commit statuses
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # SSH URL for cloning the repository
    @jsondata:Name {value: "ssh_url"}
    string sshUrl;
    # License Simple
    NullableLicenseSimple? license;
    # Full name of the repository in owner/repo format
    @jsondata:Name {value: "full_name"}
    string fullName;
    # Size of the repository in kilobytes
    int size;
    # Whether auto-merge is allowed for pull requests
    @jsondata:Name {value: "allow_auto_merge"}
    boolean allowAutoMerge?;
    # API URL for accessing repository programming languages
    @jsondata:Name {value: "languages_url"}
    string languagesUrl;
    # GitHub web URL for the repository
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # URL template for accessing repository collaborators
    @jsondata:Name {value: "collaborators_url"}
    string collaboratorsUrl;
    # HTTPS URL for cloning the repository
    @jsondata:Name {value: "clone_url"}
    string cloneUrl;
    # Name of the repository
    string name;
    # URL template for accessing pull requests in the repository
    @jsondata:Name {value: "pulls_url"}
    string pullsUrl;
    # Name of the repository's default branch
    @jsondata:Name {value: "default_branch"}
    string defaultBranch;
    # API URL for accessing repository webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # URL template for accessing git trees in the repository
    @jsondata:Name {value: "trees_url"}
    string treesUrl;
    # API URL for accessing repository tags
    @jsondata:Name {value: "tags_url"}
    string tagsUrl;
    # Whether the repository is private or public
    boolean 'private;
    # API URL for accessing repository contributors
    @jsondata:Name {value: "contributors_url"}
    string contributorsUrl;
    # Whether the repository has downloads enabled
    @jsondata:Name {value: "has_downloads"}
    boolean hasDownloads;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues_count"}
    int openIssuesCount;
    # URL template for accessing repository notifications
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl;
    # Repository description text
    string? description;
    # ISO 8601 timestamp when the repository was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Number of users watching the repository
    int watchers;
    # URL template for accessing repository deploy keys
    @jsondata:Name {value: "keys_url"}
    string keysUrl;
    # API URL for accessing repository deployments
    @jsondata:Name {value: "deployments_url"}
    string deploymentsUrl;
    # Indicates whether the repository has projects enabled
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects;
    # Indicates whether the repository is archived
    boolean archived;
    # Indicates whether the repository has wiki enabled
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki;
    # The timestamp when the repository was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # URL for accessing repository comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # URL for accessing repository stargazers
    @jsondata:Name {value: "stargazers_url"}
    string stargazersUrl;
    # Returns whether or not this repository disabled
    boolean disabled;
    # Whether branches are automatically deleted after merge
    @jsondata:Name {value: "delete_branch_on_merge"}
    boolean deleteBranchOnMerge?;
    # Git URL for cloning the repository
    @jsondata:Name {value: "git_url"}
    string gitUrl;
    # Indicates whether the repository has GitHub Pages enabled
    @jsondata:Name {value: "has_pages"}
    boolean hasPages;
    # A GitHub user
    NullableSimpleUser? owner;
    # Whether squash merging is allowed for pull requests
    @jsondata:Name {value: "allow_squash_merge"}
    boolean allowSquashMerge?;
    # URL template for accessing repository commits
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # URL template for comparing commits in the repository
    @jsondata:Name {value: "compare_url"}
    string compareUrl;
    # Git commits URL template for the repository
    @jsondata:Name {value: "git_commits_url"}
    string gitCommitsUrl;
    # Array of topics associated with the repository
    string[] topics?;
    # URL template for accessing repository blobs
    @jsondata:Name {value: "blobs_url"}
    string blobsUrl;
    # URL template for accessing the repository's git tags
    @jsondata:Name {value: "git_tags_url"}
    string gitTagsUrl;
    # URL for accessing repository merge operations
    @jsondata:Name {value: "merges_url"}
    string mergesUrl;
    # URL for accessing repository downloads
    @jsondata:Name {value: "downloads_url"}
    string downloadsUrl;
    # Indicates whether the repository has issues enabled
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues;
    # Indicates if web-based commits require signoff
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired?;
    # API URL for the repository
    string url;
    # URL template for accessing repository contents
    @jsondata:Name {value: "contents_url"}
    string contentsUrl;
    # URL of the repository mirror, if applicable
    @jsondata:Name {value: "mirror_url"}
    string? mirrorUrl;
    # URL template for accessing repository milestones
    @jsondata:Name {value: "milestones_url"}
    string milestonesUrl;
    # URL for accessing teams with access to the repository
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Indicates whether the repository is a fork
    boolean 'fork;
    # URL template for accessing repository issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # URL for accessing repository events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # URL template for accessing issue events
    @jsondata:Name {value: "issue_events_url"}
    string issueEventsUrl;
    # Text match details for search query highlighting
    @jsondata:Name {value: "text_matches"}
    SearchResultTextMatches textMatches?;
    # URL template for accessing repository assignees
    @jsondata:Name {value: "assignees_url"}
    string assigneesUrl;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues"}
    int openIssues;
    # Number of users watching the repository
    @jsondata:Name {value: "watchers_count"}
    int watchersCount;
    # Global node identifier for the repository
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # URL of the repository's homepage or website
    string? homepage;
    # Number of times the repository has been forked
    @jsondata:Name {value: "forks_count"}
    int forksCount;
};

# Configuration for GitHub Actions permissions at organization level
public type ActionsOrganizationPermissions record {
    # Which repositories are allowed to run GitHub Actions
    @jsondata:Name {value: "enabled_repositories"}
    EnabledRepositories enabledRepositories;
    # Which actions and reusable workflows are allowed to run
    @jsondata:Name {value: "allowed_actions"}
    AllowedActions allowedActions?;
    # The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`
    @jsondata:Name {value: "selected_repositories_url"}
    string selectedRepositoriesUrl?;
    # API URL for managing selected allowed actions
    @jsondata:Name {value: "selected_actions_url"}
    SelectedActionsUrl selectedActionsUrl?;
};

# Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
public type ReposownerrepoSecurityAndAnalysisAdvancedSecurity record {
    # Can be `enabled` or `disabled`
    string status?;
};

# Represents the Queries record for the operation: codespaces/check-permissions-for-devcontainer
public type CodespacesCheckPermissionsForDevcontainerQueries record {
    # Path to the devcontainer.json configuration to use for the permission check
    @http:Query {name: "devcontainer_path"}
    string devcontainerPath;
    # The git reference that points to the location of the devcontainer configuration to use for the permission check. The value of `ref` will typically be a branch name (`heads/BRANCH_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation
    string ref;
};

# URLs related to a timeline review event
public type TimelineReviewedEventLinks record {
    # Link to the pull request associated with the review event
    @jsondata:Name {value: "pull_request"}
    TimelineReviewedEventLinksHtml pullRequest;
    # HTML link information for timeline review events
    TimelineReviewedEventLinksHtml html;
};

# The slug values for teams
public type ReposownerrepobranchesbranchprotectionrestrictionsteamsreposownerrepobranchesbranchprotectionrestrictionsteamsOneOf122 string[];

# Repository information in event payloads
public type EventRepo record {
    # Name of the repository
    string name;
    # Unique identifier of the repository
    int id;
    # The URL of the repository associated with the event
    string url;
};

# Represents the Queries record for the operation: repos/list-webhooks
public type ReposListWebhooksQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Message details for a code scanning alert instance
public type CodeScanningAlertInstanceMessage record {
    # The text content of the code scanning alert message
    string text?;
};

# Specify which security and analysis features to enable or disable for the repository.
# 
# To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
# 
# For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
# `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
# 
# You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request
public type ReposownerrepoSecurityAndAnalysis record {
    # Configuration for secret scanning push protection feature
    @jsondata:Name {value: "secret_scanning_push_protection"}
    ReposownerrepoSecurityAndAnalysisSecretScanningPushProtection secretScanningPushProtection?;
    # Configuration for secret scanning security feature
    @jsondata:Name {value: "secret_scanning"}
    ReposownerrepoSecurityAndAnalysisSecretScanning secretScanning?;
    # Configuration for GitHub Advanced Security features
    @jsondata:Name {value: "advanced_security"}
    ReposownerrepoSecurityAndAnalysisAdvancedSecurity advancedSecurity?;
};

# Label object containing identification and display properties
public type LabelsLabelsOneOf112 record {
    # The hexadecimal color code for the label
    string? color?;
    # The display name of the label
    string name?;
    # Optional description text for the label
    string? description?;
    # Unique identifier for the label
    int id?;
};

# Detailed repository rule combining creation and ruleset information
public type RepositoryRuleDetailedOneOf1 record {
    *RepositoryRuleCreation;
    *RepositoryRuleRulesetInfo;
};

# Configuration for allowed GitHub Actions in a repository
public type SelectedActions record {
    # Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
    # 
    # **Note**: The `patterns_allowed` setting only applies to public repositories
    @jsondata:Name {value: "patterns_allowed"}
    string[] patternsAllowed?;
    # Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators
    @jsondata:Name {value: "verified_allowed"}
    boolean verifiedAllowed?;
    # Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization
    @jsondata:Name {value: "github_owned_allowed"}
    boolean githubOwnedAllowed?;
};

# Labels schema for repository issue labels
public type ReposownerrepoissuesLabels LabelsOneOf1|LabelsLabelsOneOf12;

# Request body for moving a project card to a new position
public type CardIdMovesBody record {
    # The unique identifier of the column the card should be moved to
    @jsondata:Name {value: "column_id"}
    int columnId?;
    # The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card
    @constraint:String {pattern: re `^(?:top|bottom|after:\d+)$`}
    string position;
};

# Represents the Queries record for the operation: pulls/list-commits
public type PullsListCommitsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Milestone information for milestoned issue events
public type MilestonedIssueEventMilestone record {
    # Title of the milestone
    string title;
};

# Base Gist
public type BaseGist record {
    # A GitHub user
    SimpleUser owner?;
    # Array of gist forks
    anydata[] forks?;
    # URL to access gist commits
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # Number of comments on the gist
    int comments;
    # API URL to retrieve forks of this gist
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # Git URL for pushing changes to this gist
    @jsondata:Name {value: "git_push_url"}
    string gitPushUrl;
    # Timestamp when the gist was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Optional description of the gist
    string? description;
    # Whether the gist content has been truncated
    boolean truncated?;
    # Array of revision history entries for this gist
    anydata[] history?;
    # API URL for this gist
    string url;
    # Whether the gist is publicly visible
    boolean 'public;
    # Timestamp when the gist was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Web URL to view this gist on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Git URL for pulling/cloning this gist
    @jsondata:Name {value: "git_pull_url"}
    string gitPullUrl;
    # API URL to retrieve comments for this gist
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # Object containing the files in this gist
    record {|BaseGistFiles...;|} files;
    # Unique identifier for the gist
    string id;
    # A GitHub user
    NullableSimpleUser? user;
    # Global node identifier for GraphQL API
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Parameters for repository rules requiring successful deployments before merging
public type RepositoryRuleRequiredDeploymentsParameters record {
    # The environments that must be successfully deployed to before branches can be merged
    @jsondata:Name {value: "required_deployment_environments"}
    string[] requiredDeploymentEnvironments;
};

# Issue Search Result Item
public type IssueSearchResultItem record {
    # HTML-formatted content of the issue body
    @jsondata:Name {value: "body_html"}
    string bodyHtml?;
    # Plain text content of the issue body
    @jsondata:Name {value: "body_text"}
    string bodyText?;
    # Array of users assigned to the issue
    SimpleUser[]? assignees?;
    # ISO 8601 timestamp when the issue was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Title of the issue
    string title;
    # Markdown content of the issue body
    string body?;
    # A repository on GitHub
    Repository repository?;
    # API URL for the issue's labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # Author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # Unique number identifying the issue
    int number;
    # Search relevance score for the issue
    decimal score;
    # ISO 8601 timestamp when the issue was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # GitHub App that performed the action, if applicable
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp?;
    # Whether the pull request is in draft state
    boolean draft?;
    # API URL for the issue's comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # Reason why the issue is locked, if applicable
    @jsondata:Name {value: "active_lock_reason"}
    string? activeLockReason?;
    # API URL of the repository containing this issue
    @jsondata:Name {value: "repository_url"}
    string repositoryUrl;
    # Unique identifier for the issue
    int id;
    # Current state of the issue (open or closed)
    string state;
    # Whether the issue is locked for further discussion
    boolean locked;
    # API URL for the issue's timeline events
    @jsondata:Name {value: "timeline_url"}
    string timelineUrl?;
    # Reason for the current state (completed, not_planned, reopened)
    @jsondata:Name {value: "state_reason"}
    string? stateReason?;
    # Pull request information if this issue is associated with a PR
    @jsondata:Name {value: "pull_request"}
    IssuePullRequest pullRequest?;
    # Number of comments on the issue
    int comments;
    # Timestamp when the issue was closed, null if open
    @jsondata:Name {value: "closed_at"}
    string? closedAt;
    # API URL for the issue
    string url;
    # Array of labels applied to the issue
    IssueSearchResultItemLabels[] labels;
    # A collection of related issues and pull requests
    NullableMilestone? milestone;
    # API URL for the issue's events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # GitHub web URL for the issue
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Text match information from search highlighting
    @jsondata:Name {value: "text_matches"}
    SearchResultTextMatches textMatches?;
    # Aggregated count of all reaction types on a GitHub item
    ReactionRollup reactions?;
    # A GitHub user
    NullableSimpleUser? assignee;
    # A GitHub user
    NullableSimpleUser? user;
    # Global node identifier for GraphQL API compatibility
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents a manifest file with its source location in the repository
public type ManifestFile record {|
    # The path of the manifest file relative to the root of the Git repository
    @jsondata:Name {value: "source_location"}
    string sourceLocation?;
|};

# Request body for creating user projects with name and optional description
public type UserProjectsBody record {
    # Name of the project
    string name;
    # Body of the project
    string? body?;
};

# A repository on GitHub
public type Repository record {
    # Whether to allow forking this repo
    @jsondata:Name {value: "allow_forking"}
    boolean allowForking?;
    # Whether anonymous git access is enabled for this repository
    @jsondata:Name {value: "anonymous_access_enabled"}
    boolean anonymousAccessEnabled?;
    # API URL for managing repository subscriptions
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl;
    # API URL template for accessing repository branches
    @jsondata:Name {value: "branches_url"}
    string branchesUrl;
    # API URL template for accessing issue comments
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl;
    # Whether to allow rebase merges for pull requests
    @jsondata:Name {value: "allow_rebase_merge"}
    boolean allowRebaseMerge = true;
    # Repository access permissions for different privilege levels
    RepositoryPermissions permissions?;
    # API URL for accessing repository subscribers
    @jsondata:Name {value: "subscribers_url"}
    string subscribersUrl;
    # Temporary token for cloning the repository
    @jsondata:Name {value: "temp_clone_token"}
    string tempCloneToken?;
    # API URL template for accessing repository releases
    @jsondata:Name {value: "releases_url"}
    string releasesUrl;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "squash_merge_commit_message"}
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squashMergeCommitMessage?;
    # Number of users subscribed to repository notifications
    @jsondata:Name {value: "subscribers_count"}
    int subscribersCount?;
    # Unique identifier of the repository
    int id;
    # Whether discussions are enabled
    @jsondata:Name {value: "has_discussions"}
    boolean hasDiscussions = false;
    # Total number of repository forks
    int forks;
    # API URL template for accessing Git references
    @jsondata:Name {value: "git_refs_url"}
    string gitRefsUrl;
    # SSH URL for cloning the repository
    @jsondata:Name {value: "ssh_url"}
    string sshUrl;
    # Full repository name including owner (owner/repo format)
    @jsondata:Name {value: "full_name"}
    string fullName;
    # The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0
    int size;
    # Template repository that this repository was created from
    @jsondata:Name {value: "template_repository"}
    RepositoryTemplateRepository? templateRepository?;
    # API URL to retrieve programming languages used in the repository
    @jsondata:Name {value: "languages_url"}
    string languagesUrl;
    # Web URL to view the repository on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # API URL template to access repository collaborators
    @jsondata:Name {value: "collaborators_url"}
    string collaboratorsUrl;
    # HTTPS URL for cloning the repository
    @jsondata:Name {value: "clone_url"}
    string cloneUrl;
    # The default branch of the repository
    @jsondata:Name {value: "default_branch"}
    string defaultBranch;
    # API URL to access repository webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # API URL template to access Git tree objects
    @jsondata:Name {value: "trees_url"}
    string treesUrl;
    # Whether downloads are enabled
    # 
    # # Deprecated
    @jsondata:Name {value: "has_downloads"}
    @deprecated
    boolean hasDownloads = true;
    # Timestamp when the repository was created
    @jsondata:Name {value: "created_at"}
    string? createdAt;
    # Number of users watching the repository
    int watchers;
    # API URL to access repository deployments
    @jsondata:Name {value: "deployments_url"}
    string deploymentsUrl;
    # API URL template to access repository deploy keys
    @jsondata:Name {value: "keys_url"}
    string keysUrl;
    # Whether the repository is archived
    boolean archived = false;
    # Whether the wiki is enabled
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki = true;
    # Timestamp when the repository was last updated
    @jsondata:Name {value: "updated_at"}
    string? updatedAt;
    # Returns whether or not this repository disabled
    boolean disabled;
    # API URL template to compare commits between branches or tags
    @jsondata:Name {value: "compare_url"}
    string compareUrl;
    # API URL template to access Git commit objects
    @jsondata:Name {value: "git_commits_url"}
    string gitCommitsUrl;
    # Array of topic tags associated with the repository
    string[] topics?;
    # Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging
    @jsondata:Name {value: "allow_update_branch"}
    boolean allowUpdateBranch = false;
    # API URL template to access Git tag objects
    @jsondata:Name {value: "git_tags_url"}
    string gitTagsUrl;
    # API URL template for repository merge operations
    @jsondata:Name {value: "merges_url"}
    string mergesUrl;
    # Timestamp when the repository was starred by the authenticated user
    @jsondata:Name {value: "starred_at"}
    string starredAt?;
    # API URL for the repository resource
    string url;
    # API URL template for repository contents and file operations
    @jsondata:Name {value: "contents_url"}
    string contentsUrl;
    # API URL template for repository issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead
    # 
    # # Deprecated
    @jsondata:Name {value: "use_squash_pr_title_as_default"}
    @deprecated
    boolean useSquashPrTitleAsDefault = false;
    # A GitHub user
    NullableSimpleUser? organization?;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "merge_commit_message"}
    "PR_BODY"|"PR_TITLE"|"BLANK" mergeCommitMessage?;
    # API URL template for repository issue assignees
    @jsondata:Name {value: "assignees_url"}
    string assigneesUrl;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)
    @jsondata:Name {value: "squash_merge_commit_title"}
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squashMergeCommitTitle?;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues"}
    int openIssues;
    # Global node identifier for the repository
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Number of users who have starred the repository
    @jsondata:Name {value: "stargazers_count"}
    int stargazersCount;
    # Whether this repository acts as a template that can be used to generate new repositories
    @jsondata:Name {value: "is_template"}
    boolean isTemplate = false;
    # Timestamp of the most recent push to the repository
    @jsondata:Name {value: "pushed_at"}
    string? pushedAt;
    # Primary programming language used in the repository
    string? language;
    # API URL template for repository issue labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # Subversion URL for the repository
    @jsondata:Name {value: "svn_url"}
    string svnUrl;
    # Name of the repository's default branch
    @jsondata:Name {value: "master_branch"}
    string masterBranch?;
    # API URL template for downloading repository archives
    @jsondata:Name {value: "archive_url"}
    string archiveUrl;
    # Whether to allow merge commits for pull requests
    @jsondata:Name {value: "allow_merge_commit"}
    boolean allowMergeCommit = true;
    # API URL to access the repository's forks
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # The repository visibility: public, private, or internal
    string visibility = "public";
    # API URL template to access commit statuses for the repository
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # Number of repositories in the network
    @jsondata:Name {value: "network_count"}
    int networkCount?;
    # License Simple
    NullableLicenseSimple? license;
    # Whether to allow Auto-merge to be used on pull requests
    @jsondata:Name {value: "allow_auto_merge"}
    boolean allowAutoMerge = false;
    # The name of the repository
    string name;
    # API URL template to access pull requests for the repository
    @jsondata:Name {value: "pulls_url"}
    string pullsUrl;
    # API URL to access the repository's tags
    @jsondata:Name {value: "tags_url"}
    string tagsUrl;
    # Whether the repository is private or public
    boolean 'private = false;
    # API URL to access the repository's contributors
    @jsondata:Name {value: "contributors_url"}
    string contributorsUrl;
    # API URL template to access notifications for the repository
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues_count"}
    int openIssuesCount;
    # Brief description of the repository
    string? description;
    # Whether projects are enabled
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects = true;
    # The default value for a merge commit title.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)
    @jsondata:Name {value: "merge_commit_title"}
    "PR_TITLE"|"MERGE_MESSAGE" mergeCommitTitle?;
    # API URL template to access comments for the repository
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # API URL to access users who starred the repository
    @jsondata:Name {value: "stargazers_url"}
    string stargazersUrl;
    # Whether to delete head branches when pull requests are merged
    @jsondata:Name {value: "delete_branch_on_merge"}
    boolean deleteBranchOnMerge = false;
    # Git protocol URL for cloning the repository
    @jsondata:Name {value: "git_url"}
    string gitUrl;
    # Whether the repository has GitHub Pages enabled
    @jsondata:Name {value: "has_pages"}
    boolean hasPages;
    # A GitHub user
    SimpleUser owner;
    # Whether to allow squash merges for pull requests
    @jsondata:Name {value: "allow_squash_merge"}
    boolean allowSquashMerge = true;
    # API URL template to access commits for the repository
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # API URL template to access blob objects in the repository
    @jsondata:Name {value: "blobs_url"}
    string blobsUrl;
    # API URL for accessing repository downloads
    @jsondata:Name {value: "downloads_url"}
    string downloadsUrl;
    # Whether issues are enabled
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues = true;
    # Whether to require contributors to sign off on web-based commits
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired = false;
    # Git URL of the repository mirror, if applicable
    @jsondata:Name {value: "mirror_url"}
    string? mirrorUrl;
    # API URL template for accessing repository milestones
    @jsondata:Name {value: "milestones_url"}
    string milestonesUrl;
    # API URL for accessing teams with repository access
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Indicates whether this repository is a fork
    boolean 'fork;
    # API URL for accessing repository events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # API URL template for accessing issue events
    @jsondata:Name {value: "issue_events_url"}
    string issueEventsUrl;
    # Number of users watching the repository
    @jsondata:Name {value: "watchers_count"}
    int watchersCount;
    # URL of the repository's homepage or website
    string? homepage;
    # Number of times the repository has been forked
    @jsondata:Name {value: "forks_count"}
    int forksCount;
};

# Minimal Repository
public type MinimalRepository record {
    # Whether forking is allowed for this repository
    @jsondata:Name {value: "allow_forking"}
    boolean allowForking?;
    # The number of users who have starred this repository
    @jsondata:Name {value: "stargazers_count"}
    int stargazersCount?;
    # Whether this repository is a template repository
    @jsondata:Name {value: "is_template"}
    boolean isTemplate?;
    # The timestamp when the repository was last pushed to
    @jsondata:Name {value: "pushed_at"}
    string? pushedAt?;
    # The API URL for managing repository subscription
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl;
    # The primary programming language of the repository
    string? language?;
    # The API URL template for accessing repository branches
    @jsondata:Name {value: "branches_url"}
    string branchesUrl;
    # The API URL template for accessing issue comments
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl;
    # The API URL template for accessing repository labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # The API URL for accessing repository subscribers
    @jsondata:Name {value: "subscribers_url"}
    string subscribersUrl;
    # Permission levels for repository template access
    RepositoryTemplateRepositoryPermissions permissions?;
    # Temporary token for cloning private repositories
    @jsondata:Name {value: "temp_clone_token"}
    string tempCloneToken?;
    # The API URL template for accessing repository releases
    @jsondata:Name {value: "releases_url"}
    string releasesUrl;
    # SVN URL for accessing the repository via Subversion protocol
    @jsondata:Name {value: "svn_url"}
    string svnUrl?;
    # Number of users watching/subscribing to the repository
    @jsondata:Name {value: "subscribers_count"}
    int subscribersCount?;
    # Unique identifier for the repository
    int id;
    # Whether GitHub Discussions are enabled for the repository
    @jsondata:Name {value: "has_discussions"}
    boolean hasDiscussions?;
    # Number of times the repository has been forked
    int forks?;
    # URL template for downloading repository archives in various formats
    @jsondata:Name {value: "archive_url"}
    string archiveUrl;
    # URL template for accessing Git references (branches, tags)
    @jsondata:Name {value: "git_refs_url"}
    string gitRefsUrl;
    # API URL for retrieving repository forks
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # Repository visibility setting (public, private, or internal)
    string visibility?;
    # URL template for accessing commit status information
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # Number of repositories in the network (forks and parent)
    @jsondata:Name {value: "network_count"}
    int networkCount?;
    # SSH URL for cloning the repository
    @jsondata:Name {value: "ssh_url"}
    string sshUrl?;
    # User's permission level or role for the repository
    @jsondata:Name {value: "role_name"}
    string roleName?;
    # Basic license information for a repository
    MinimalRepositoryLicense? license?;
    # Full repository name in owner/repository format
    @jsondata:Name {value: "full_name"}
    string fullName;
    # The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0
    int size?;
    # API URL for retrieving programming languages used in the repository
    @jsondata:Name {value: "languages_url"}
    string languagesUrl;
    # The repository's HTML URL on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # API URL template for repository collaborators
    @jsondata:Name {value: "collaborators_url"}
    string collaboratorsUrl;
    # The repository's clone URL
    @jsondata:Name {value: "clone_url"}
    string cloneUrl?;
    # The repository name
    string name;
    # API URL template for repository pull requests
    @jsondata:Name {value: "pulls_url"}
    string pullsUrl;
    # The repository's default branch name
    @jsondata:Name {value: "default_branch"}
    string defaultBranch?;
    # API URL for repository webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # API URL template for repository git trees
    @jsondata:Name {value: "trees_url"}
    string treesUrl;
    # API URL for repository tags
    @jsondata:Name {value: "tags_url"}
    string tagsUrl;
    # Whether the repository is private
    boolean 'private;
    # API URL for repository contributors
    @jsondata:Name {value: "contributors_url"}
    string contributorsUrl;
    # Whether the repository has downloads enabled
    @jsondata:Name {value: "has_downloads"}
    boolean hasDownloads?;
    # API URL template for repository notifications
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl;
    # The number of open issues in the repository
    @jsondata:Name {value: "open_issues_count"}
    int openIssuesCount?;
    # The repository description
    string? description;
    # The timestamp when the repository was created
    @jsondata:Name {value: "created_at"}
    string? createdAt?;
    # The number of users watching the repository
    int watchers?;
    # API URL for accessing repository deployments
    @jsondata:Name {value: "deployments_url"}
    string deploymentsUrl;
    # API URL template for accessing repository deploy keys
    @jsondata:Name {value: "keys_url"}
    string keysUrl;
    # Whether the repository has projects enabled
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects?;
    # Whether the repository is archived
    boolean archived?;
    # Whether the repository has wiki enabled
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki?;
    # The timestamp when the repository was last updated
    @jsondata:Name {value: "updated_at"}
    string? updatedAt?;
    # API URL template for accessing repository commit comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # API URL for accessing repository stargazers
    @jsondata:Name {value: "stargazers_url"}
    string stargazersUrl;
    # Whether the repository is disabled
    boolean disabled?;
    # Whether to delete head branches when pull requests are merged
    @jsondata:Name {value: "delete_branch_on_merge"}
    boolean deleteBranchOnMerge?;
    # The Git URL for cloning the repository
    @jsondata:Name {value: "git_url"}
    string gitUrl?;
    # Whether the repository has GitHub Pages enabled
    @jsondata:Name {value: "has_pages"}
    boolean hasPages?;
    # A GitHub user
    SimpleUser owner;
    # API URL template for accessing repository commits
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # URL template for comparing commits between branches or commits
    @jsondata:Name {value: "compare_url"}
    string compareUrl;
    # URL template for accessing git commits in the repository
    @jsondata:Name {value: "git_commits_url"}
    string gitCommitsUrl;
    # Array of topic tags associated with the repository
    string[] topics?;
    # URL template for accessing git blob objects in the repository
    @jsondata:Name {value: "blobs_url"}
    string blobsUrl;
    # URL template for accessing git tags in the repository
    @jsondata:Name {value: "git_tags_url"}
    string gitTagsUrl;
    # URL for performing merge operations on the repository
    @jsondata:Name {value: "merges_url"}
    string mergesUrl;
    # URL for accessing repository downloads
    @jsondata:Name {value: "downloads_url"}
    string downloadsUrl;
    # Whether issues are enabled for this repository
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues?;
    # Code of conduct information for the repository
    @jsondata:Name {value: "code_of_conduct"}
    CodeOfConduct codeOfConduct?;
    # Whether web-based commits require signoff for this repository
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired?;
    # API URL for the repository
    string url;
    # URL template for accessing repository file contents
    @jsondata:Name {value: "contents_url"}
    string contentsUrl;
    # URL of the repository mirror, if applicable
    @jsondata:Name {value: "mirror_url"}
    string? mirrorUrl?;
    # URL template for accessing repository milestones
    @jsondata:Name {value: "milestones_url"}
    string milestonesUrl;
    # URL for accessing teams with access to the repository
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Security and analysis settings for the repository
    @jsondata:Name {value: "security_and_analysis"}
    SecurityAndAnalysis? securityAndAnalysis?;
    # Whether the repository is a fork
    boolean 'fork;
    # URL template for accessing repository issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # URL for accessing repository events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # URL template for accessing issue events
    @jsondata:Name {value: "issue_events_url"}
    string issueEventsUrl;
    # URL template for accessing repository assignees
    @jsondata:Name {value: "assignees_url"}
    string assigneesUrl;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues"}
    int openIssues?;
    # Number of users watching the repository
    @jsondata:Name {value: "watchers_count"}
    int watchersCount?;
    # GraphQL node ID of the repository
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Homepage URL of the repository
    string? homepage?;
    # Number of forks of the repository
    @jsondata:Name {value: "forks_count"}
    int forksCount?;
};

# Timeline Assigned Issue Event
public type TimelineAssignedIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the assignment event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed the assignment action
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Timestamp when the assignment event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the assignment event
    int id;
    # A GitHub user
    SimpleUser assignee;
    # Type of timeline event that occurred
    string event;
    # The commit SHA associated with the assignment event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # The API URL for the assignment event
    string url;
    # The global node ID for the assignment event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Request body for user codespaces operations
public type UserCodespacesBody UsercodespacesOneOf1|UsercodespacesusercodespacesOneOf12;

# Represents the Queries record for the operation: issues/list-for-org
public type IssuesListForOrgQueries record {
    # Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation
    "assigned"|"created"|"mentioned"|"subscribed"|"repos"|"all" filter = "assigned";
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Indicates the state of the issues to return
    "open"|"closed"|"all" state = "open";
    # What to sort results by
    "created"|"updated"|"comments" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # A list of comma separated label names. Example: `bug,ui,@high`
    string labels?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Starred Repository
public type StarredRepository record {
    # A repository on GitHub
    Repository repo;
    # Timestamp when the repository was starred
    @jsondata:Name {value: "starred_at"}
    string starredAt;
};

# The slug values for teams
public type ReposownerrepobranchesbranchprotectionrestrictionsteamsreposownerrepobranchesbranchprotectionrestrictionsteamsOneOf112 string[];

# The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
public type AlertUpdatedAt string;

# Represents the head branch of a pull request with reference details
public type PullRequestHead record {
    # The git reference name of the head branch
    string ref;
    # Repository information for the head branch of a pull request
    PullRequestHeadRepo? repo;
    # The label identifying the head branch in owner:branch format
    string label;
    # The SHA hash of the head commit
    string sha;
    # Owner information for the head repository in a pull request
    PullRequestHeadRepoOwner user;
};

# Starred Repository
public type StarredRepositoryResponse StarredRepositoryResponseAnyOf1|StarredRepositoryResponseStarredRepositoryResponseAnyOf12;

# Represents the Queries record for the operation: projects/list-for-repo
public type ProjectsListForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Indicates the state of the projects to return
    "open"|"closed"|"all" state = "open";
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: repos/compare-commits
public type ReposCompareCommitsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Issues are a great way to keep track of tasks, enhancements, and bugs for your projects
public type Issue record {
    # The issue body content rendered as HTML
    @jsondata:Name {value: "body_html"}
    string bodyHtml?;
    # The issue body content as plain text
    @jsondata:Name {value: "body_text"}
    string bodyText?;
    # Array of users assigned to the issue
    SimpleUser[]? assignees?;
    # The timestamp when the issue was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Title of the issue
    string title;
    # Contents of the issue
    string? body?;
    # A repository on GitHub
    Repository repository?;
    # The user who closed the issue
    @jsondata:Name {value: "closed_by"}
    NullableSimpleUser? closedBy?;
    # URL for accessing the issue's labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # The author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # Number uniquely identifying the issue within its repository
    int number;
    # The timestamp when the issue was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The GitHub App that performed the action on the issue
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp?;
    # Indicates whether the issue is a draft
    boolean draft?;
    # URL to retrieve comments for this issue
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # Reason why the issue is currently locked, if applicable
    @jsondata:Name {value: "active_lock_reason"}
    string? activeLockReason?;
    # Unique identifier for the issue
    int id;
    # URL of the repository containing this issue
    @jsondata:Name {value: "repository_url"}
    string repositoryUrl;
    # State of the issue; either 'open' or 'closed'
    string state;
    # Indicates whether the issue is locked for comments
    boolean locked;
    # URL to retrieve the issue's timeline events
    @jsondata:Name {value: "timeline_url"}
    string timelineUrl?;
    # The reason for the current state
    @jsondata:Name {value: "state_reason"}
    "completed"|"reopened"|"not_planned"? stateReason?;
    # Pull request information if this issue is associated with one
    @jsondata:Name {value: "pull_request"}
    IssuePullRequest pullRequest?;
    # Number of comments on this issue
    int comments;
    # Date and time when the issue was closed
    @jsondata:Name {value: "closed_at"}
    string? closedAt;
    # URL for the issue
    string url;
    # Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
    IssueLabels[] labels;
    # A collection of related issues and pull requests
    NullableMilestone? milestone;
    # URL to retrieve events for this issue
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # URL to view the issue in GitHub's web interface
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Aggregated count of all reaction types on a GitHub item
    ReactionRollup reactions?;
    # A GitHub user
    NullableSimpleUser? assignee;
    # A GitHub user
    NullableSimpleUser? user;
    # Global node identifier for the issue
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Minimal representation of an organization programmatic access grant for enumerations
public type OrganizationProgrammaticAccessGrant record {
    # A GitHub user
    SimpleUser owner;
    # Type of repository selection requested
    @jsondata:Name {value: "repository_selection"}
    "none"|"all"|"subset" repositorySelection;
    # URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`
    @jsondata:Name {value: "repositories_url"}
    string repositoriesUrl;
    # Date and time when the associated fine-grained personal access token expires
    @jsondata:Name {value: "token_expires_at"}
    string? tokenExpiresAt;
    # Permissions requested, categorized by type of permission
    OrganizationProgrammaticAccessGrantRequestPermissions permissions;
    # Date and time when the associated fine-grained personal access token was last used for authentication
    @jsondata:Name {value: "token_last_used_at"}
    string? tokenLastUsedAt;
    # Unique identifier of the fine-grained personal access token. The `pat_id` used to get details about an approved fine-grained personal access token
    int id;
    # Whether the associated fine-grained personal access token has expired
    @jsondata:Name {value: "token_expired"}
    boolean tokenExpired;
    # Date and time when the fine-grained personal access token was approved to access the organization
    @jsondata:Name {value: "access_granted_at"}
    string accessGrantedAt;
};

# Request body for adding a reaction to a comment
public type CommentIdReactionsBody record {
    # The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content;
};

# Repository invitations let you manage who you collaborate with
public type RepositorySubscription record {
    # Determines if notifications should be received from this repository
    boolean subscribed;
    # Determines if all notifications should be blocked from this repository
    boolean ignored;
    # Reason for the repository subscription status
    string? reason;
    # ISO 8601 timestamp when the repository subscription was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # API URL of the subscribed repository
    @jsondata:Name {value: "repository_url"}
    string repositoryUrl;
    # API URL of the repository subscription
    string url;
};

# Common Weakness Enumeration (CWE) information for security advisories
public type GlobalAdvisoryCwes record {
    # The Common Weakness Enumeration (CWE) identifier
    @jsondata:Name {value: "cwe_id"}
    string cweId;
    # The name of the CWE
    string name;
};

# A request for a specific ref(branch,sha,tag) to be deployed
public type Deployment record {
    # A GitHub user
    NullableSimpleUser? creator;
    # API URL for deployment statuses
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # Human-readable description of the deployment
    string? description;
    # ISO 8601 timestamp when the deployment was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Git SHA hash of the commit being deployed
    string sha;
    # API URL of the deployment
    string url;
    # The ref to deploy. This can be a branch, tag, or sha
    string ref;
    # Name for the target deployment environment
    string environment;
    # Parameter to specify a task to execute
    string task;
    # ISO 8601 timestamp when the deployment was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # GitHub App that performed the deployment, if applicable
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp?;
    # Custom deployment data as object or JSON string
    record {}|string payload;
    # Specifies if the given environment is will no longer exist at some point in the future. Default: false
    @jsondata:Name {value: "transient_environment"}
    boolean transientEnvironment?;
    # Original environment name specified for the deployment
    @jsondata:Name {value: "original_environment"}
    string originalEnvironment?;
    # Unique identifier of the deployment
    int id;
    # API URL of the repository containing the deployment
    @jsondata:Name {value: "repository_url"}
    string repositoryUrl;
    # Global node identifier for the deployment
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Specifies if the given environment is one that end-users directly interact with. Default: false
    @jsondata:Name {value: "production_environment"}
    boolean productionEnvironment?;
};

# Whether to set the branch as read-only. If this is true, users will not be able to push to the branch
public type BranchProtectionLockBranch record {
    # Whether branch locking is enabled (defaults to false)
    boolean enabled = false;
};

# Request body schema for team restrictions with multiple format options
public type RestrictionsTeamsBody1 ReposownerrepobranchesbranchprotectionrestrictionsteamsOneOf11|ReposownerrepobranchesbranchprotectionrestrictionsteamsreposownerrepobranchesbranchprotectionrestrictionsteamsOneOf112;

# Alternative request body schema for team restrictions
public type RestrictionsTeamsBody2 ReposownerrepobranchesbranchprotectionrestrictionsteamsOneOf12|ReposownerrepobranchesbranchprotectionrestrictionsteamsreposownerrepobranchesbranchprotectionrestrictionsteamsOneOf122;

# Represents the Queries record for the operation: issues/list-events-for-repo
public type IssuesListEventsForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Short Blob
public type ShortBlob record {
    # SHA hash identifier of the blob object
    string sha;
    # API URL to access the blob object
    string url;
};

# The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect
public type InteractionGroup "existing_users"|"contributors_only"|"collaborators_only";

# Configuration for code scanning default setup
public type CodeScanningDefaultSetup record {
    # The frequency of the periodic analysis
    "weekly"? schedule?;
    # CodeQL query suite to be used
    @jsondata:Name {value: "query_suite"}
    "default"|"extended" querySuite?;
    # Languages to be analyzed
    ("c-cpp"|"csharp"|"go"|"java-kotlin"|"javascript-typescript"|"javascript"|"python"|"ruby"|"typescript"|"swift")[] languages?;
    # Timestamp of latest configuration update
    @jsondata:Name {value: "updated_at"}
    string? updatedAt?;
    # Code scanning default setup has been configured or not
    "configured"|"not-configured" state?;
};

# Basic license information for a repository (nullable)
public type NullableMinimalRepositoryLicense record {
    # Human-readable name of the license
    string name?;
    # SPDX license identifier
    @jsondata:Name {value: "spdx_id"}
    string spdxId?;
    # Unique key identifier for the license
    string 'key?;
    # URL to the license details
    string url?;
    # Global node ID of the license
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Author information for a commit in search results
public type CommitSearchResultItemCommitAuthor record {
    # Date and time when the commit was authored
    string date;
    # Name of the commit author
    string name;
    # Email address of the commit author
    string email;
};

# Repository participation statistics showing commit activity
public type ParticipationStats record {
    # Array of commit counts for all contributors by week
    int[] all;
    # Array of commit counts for repository owner by week
    int[] owner;
};

# Request body for moving a project column to a new position
public type ColumnIdMovesBody record {
    # The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column
    @constraint:String {pattern: re `^(?:first|last|after:\d+)$`}
    string position;
};

# Represents the Queries record for the operation: projects/list-cards
public type ProjectsListCardsQueries record {
    # Filters the project cards that are returned by the card's state
    @http:Query {name: "archived_state"}
    "all"|"archived"|"not_archived" archivedState = "not_archived";
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: activity/list-events-for-authenticated-user
public type ActivityListEventsForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# A list of directory items
public type ContentDirectory ContentDirectoryInner[];

# Git references within a repository
public type GitRef record {
    # Git reference name (e.g., refs/heads/main)
    string ref;
    # API URL for the Git reference
    string url;
    # Global node identifier for the Git reference
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Git reference object containing SHA, type, and URL information
    GitRefObject 'object;
};

# User Search Result Item
public type UserSearchResultItem record {
    # API URL to retrieve user's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # API URL template to retrieve user's gists
    @jsondata:Name {value: "gists_url"}
    string gistsUrl;
    # API URL template to retrieve users this user is following
    @jsondata:Name {value: "following_url"}
    string followingUrl;
    # The date and time when the user account was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The user's public biography
    string? bio?;
    # The user's GitHub username
    string login;
    # The type of GitHub account (User or Organization)
    string 'type;
    # The user's blog or website URL
    string? blog?;
    # API URL for the user's subscriptions
    @jsondata:Name {value: "subscriptions_url"}
    string subscriptionsUrl;
    # The search relevance score for this user result
    decimal score;
    # The date and time when the user account was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # Whether the user is a GitHub site administrator
    @jsondata:Name {value: "site_admin"}
    boolean siteAdmin;
    # The user's company or organization name
    string? company?;
    # The unique identifier for the user
    int id;
    # The number of public repositories owned by the user
    @jsondata:Name {value: "public_repos"}
    int publicRepos?;
    # The user's Gravatar ID for profile image
    @jsondata:Name {value: "gravatar_id"}
    string? gravatarId;
    # The user's public email address
    string? email?;
    # API URL for the user's organizations
    @jsondata:Name {value: "organizations_url"}
    string organizationsUrl;
    # Indicates whether the user is available for hire
    boolean? hireable?;
    # URL template for accessing the user's starred repositories
    @jsondata:Name {value: "starred_url"}
    string starredUrl;
    # API URL to retrieve the user's followers list
    @jsondata:Name {value: "followers_url"}
    string followersUrl;
    # Number of public gists created by the user
    @jsondata:Name {value: "public_gists"}
    int publicGists?;
    # API URL for the user resource
    string url;
    # API URL for events received by the user
    @jsondata:Name {value: "received_events_url"}
    string receivedEventsUrl;
    # Number of followers the user has
    int followers?;
    # URL of the user's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # URL template for accessing the user's public events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # GitHub web URL for the user's profile page
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Number of users this user is following
    int following?;
    # Search result text matches with highlighting information
    @jsondata:Name {value: "text_matches"}
    SearchResultTextMatches textMatches?;
    # Display name of the user
    string? name?;
    # Geographic location of the user
    string? location?;
    # Global node identifier for the user in GitHub's GraphQL API
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Date and time when the user account was suspended
    @jsondata:Name {value: "suspended_at"}
    string? suspendedAt?;
};

# Request body for publishing a codespace as a repository
public type CodespaceNamePublishBody record {
    # Whether the new repository should be private
    boolean 'private = false;
    # A name for the new repository
    string name?;
};

# Request body for configuring GitHub Actions permissions
public type ActionsPermissionsBody record {
    # Which repositories are allowed to run GitHub Actions
    @jsondata:Name {value: "enabled_repositories"}
    EnabledRepositories enabledRepositories;
    # Which actions and reusable workflows are allowed to run
    @jsondata:Name {value: "allowed_actions"}
    AllowedActions allowedActions?;
};

# Credits and acknowledgments for a global security advisory
public type GlobalAdvisoryCredits record {
    # The type of credit the user is receiving
    SecurityAdvisoryCreditTypes 'type;
    # A GitHub user
    SimpleUser user;
};

# Timeline Reviewed Event
public type TimelineReviewedEvent record {
    # HTML-formatted body content of the review
    @jsondata:Name {value: "body_html"}
    string bodyHtml?;
    # Hypermedia links related to the review event
    @jsondata:Name {value: "_links"}
    TimelineReviewedEventLinks links;
    # Date and time when the review was submitted
    @jsondata:Name {value: "submitted_at"}
    string submittedAt?;
    # Plain text body content of the review
    @jsondata:Name {value: "body_text"}
    string bodyText?;
    # API URL of the pull request being reviewed
    @jsondata:Name {value: "pull_request_url"}
    string pullRequestUrl;
    # The text of the review
    string? body;
    # Author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # Web URL of the review on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Unique identifier of the review
    int id;
    # Current state of the review
    string state;
    # Type of timeline event
    string event;
    # A GitHub user
    SimpleUser user;
    # A commit SHA for the review
    @jsondata:Name {value: "commit_id"}
    string commitId;
    # Global node identifier for the review
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Self-referencing links for a repository ruleset
public type RepositoryRulesetLinksSelf record {
    # The URL of the ruleset
    string href?;
};

# The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
public type AlertCreatedAt string;

# Owner information for branch restriction policies
public type BranchRestrictionPolicyOwner record {
    # API URL for the owner's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl?;
    # API URL template for the owner's gists
    @jsondata:Name {value: "gists_url"}
    string gistsUrl?;
    # API URL for the owner's organization members
    @jsondata:Name {value: "members_url"}
    string membersUrl?;
    # API URL template for users the owner is following
    @jsondata:Name {value: "following_url"}
    string followingUrl?;
    # Description of the owner
    string description?;
    # API URL template for the owner's starred repositories
    @jsondata:Name {value: "starred_url"}
    string starredUrl?;
    # Login username of the owner
    string login?;
    # API URL for the owner's followers
    @jsondata:Name {value: "followers_url"}
    string followersUrl?;
    # Type of the owner (User or Organization)
    string 'type?;
    # API URL for the owner
    string url?;
    # API URL for the owner's public organization members
    @jsondata:Name {value: "public_members_url"}
    string publicMembersUrl?;
    # API URL for the owner's subscriptions
    @jsondata:Name {value: "subscriptions_url"}
    string subscriptionsUrl?;
    # API URL for the owner's issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl?;
    # API URL for the owner's received events
    @jsondata:Name {value: "received_events_url"}
    string receivedEventsUrl?;
    # URL of the owner's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl?;
    # API URL for the owner's events
    @jsondata:Name {value: "events_url"}
    string eventsUrl?;
    # GitHub web URL for the owner's profile
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # Whether the owner is a GitHub site administrator
    @jsondata:Name {value: "site_admin"}
    boolean siteAdmin?;
    # Unique identifier for the owner
    int id?;
    # API URL for the owner's hooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl?;
    # Gravatar ID for the owner's avatar
    @jsondata:Name {value: "gravatar_id"}
    string gravatarId?;
    # Global node identifier for the owner
    @jsondata:Name {value: "node_id"}
    string nodeId?;
    # API URL for the owner's organizations
    @jsondata:Name {value: "organizations_url"}
    string organizationsUrl?;
};

# Request body for selecting teams for GitHub Copilot billing access
public type BillingSelectedTeamsBody record {
    # List of team names within the organization to which to grant access to GitHub Copilot
    @jsondata:Name {value: "selected_teams"}
    string[] selectedTeams;
};

# Represents the Queries record for the operation: apps/list-plans
public type AppsListPlansQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Parameters for a repository name condition
public type RepositoryRulesetConditionsRepositoryNameTarget record {
    # Repository name condition for ruleset targeting
    @jsondata:Name {value: "repository_name"}
    RepositoryRulesetConditionsRepositoryNameTargetRepositoryName repositoryName;
};

# Request body for managing repository access to organization secrets
public type SecretNameRepositoriesBody record {
    # An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints
    @jsondata:Name {value: "selected_repository_ids"}
    int[] selectedRepositoryIds;
};

# Deployment protection rule
public type DeploymentProtectionRuleResponse record {
    # The number of enabled custom deployment protection rules for this environment
    @jsondata:Name {value: "total_count"}
    int totalCount?;
    # Array of custom deployment protection rules for the environment
    @jsondata:Name {value: "custom_deployment_protection_rules"}
    DeploymentProtectionRule[] customDeploymentProtectionRules?;
};

# Request body for creating/updating a Codespaces repository secret
public type SecretssecretNameBody4 record {
    # ID of the key you used to encrypt the secret
    @jsondata:Name {value: "key_id"}
    string keyId?;
    # Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint
    @jsondata:Name {value: "encrypted_value"}
    string encryptedValue?;
};

# Request body for creating/updating a Dependabot repository secret
public type SecretssecretNameBody5 record {
    # ID of the key you used to encrypt the secret
    @jsondata:Name {value: "key_id"}
    string keyId?;
    # Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint
    @jsondata:Name {value: "encrypted_value"}
    string encryptedValue?;
};

# Request body for updating Git author information
public type AuthorsauthorIdBody record {|
    # The new Git author name
    string name?;
    # The new Git author email
    string email?;
|};

# Request body for creating/updating an environment secret
public type SecretssecretNameBody6 record {
    # ID of the key you used to encrypt the secret
    @jsondata:Name {value: "key_id"}
    string keyId;
    # Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint
    @jsondata:Name {value: "encrypted_value"}
    string encryptedValue;
};

# Request body for creating/updating a user Codespaces secret
public type SecretssecretNameBody7 record {
    # An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints
    @jsondata:Name {value: "selected_repository_ids"}
    UsercodespacessecretssecretNameSelectedRepositoryIds[] selectedRepositoryIds?;
    # ID of the key you used to encrypt the secret
    @jsondata:Name {value: "key_id"}
    string keyId;
    # Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint
    @jsondata:Name {value: "encrypted_value"}
    string encryptedValue?;
};

# Low-level Git commit operations within a repository
public type GitCommit record {
    # Identifying information for the git-user
    GitCommitAuthor committer;
    # Identifying information for the git-user
    GitCommitAuthor author;
    # HTML URL for viewing the Git commit on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Git tree object associated with a commit
    GitCommitTree tree;
    # Message describing the purpose of the commit
    string message;
    # SHA for the commit
    string sha;
    # API URL for the Git commit resource
    string url;
    # Git commit signature verification details
    GitCommitVerification verification;
    # Global node ID for the Git commit
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Array of parent commits for this Git commit
    GitCommitParents[] parents;
};

# Request body for creating/updating an organization Codespaces secret
public type SecretssecretNameBody1 record {
    # An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints
    @jsondata:Name {value: "selected_repository_ids"}
    int[] selectedRepositoryIds?;
    # Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret
    "all"|"private"|"selected" visibility;
    # The ID of the key you used to encrypt the secret
    @jsondata:Name {value: "key_id"}
    string keyId?;
    # The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint
    @jsondata:Name {value: "encrypted_value"}
    string encryptedValue?;
};

# Request body for creating/updating an organization Dependabot secret
public type SecretssecretNameBody2 record {
    # An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints
    @jsondata:Name {value: "selected_repository_ids"}
    string[] selectedRepositoryIds?;
    # Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret
    "all"|"private"|"selected" visibility;
    # ID of the key you used to encrypt the secret
    @jsondata:Name {value: "key_id"}
    string keyId?;
    # Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint
    @jsondata:Name {value: "encrypted_value"}
    string encryptedValue?;
};

# Request body for creating/updating an Actions repository secret
public type SecretssecretNameBody3 record {
    # ID of the key you used to encrypt the secret
    @jsondata:Name {value: "key_id"}
    string keyId?;
    # Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint
    @jsondata:Name {value: "encrypted_value"}
    string encryptedValue?;
};

# Request body for creating a Git tag object
public type GitTagsBody record {
    # An object with information about the individual creating the tag
    ReposownerrepogittagsTagger tagger?;
    # The tag's name. This is typically a version (e.g., "v0.0.1")
    string tag;
    # The tag message
    string message;
    # The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`
    "commit"|"tree"|"blob" 'type;
    # The SHA of the git object this is tagging
    string 'object;
};

# Represents the Queries record for the operation: actions/list-selected-repositories-enabled-github-actions-organization
public type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# A suite of checks performed on the code of a given code change
public type CheckSuiteResponse record {
    # Total number of check suites in the response
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of check suite objects
    @jsondata:Name {value: "check_suites"}
    CheckSuite[] checkSuites;
};

# Represents the Queries record for the operation: pulls/list
public type PullsListQueries record {
    # Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`
    string head?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Either `open`, `closed`, or `all` to filter by state
    "open"|"closed"|"all" state = "open";
    # What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month
    "created"|"updated"|"popularity"|"long-running" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # Filter pulls by base branch name. Example: `gh-pages`
    string base?;
    # The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`
    "asc"|"desc" direction?;
};

# A reply to a discussion within a team
public type TeamDiscussionComment record {
    # HTML-rendered content of the team discussion comment
    @jsondata:Name {value: "body_html"}
    string bodyHtml;
    # The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server
    @jsondata:Name {value: "body_version"}
    string bodyVersion;
    # A GitHub user
    NullableSimpleUser? author;
    # Timestamp when the team discussion comment was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The main text of the comment
    string body;
    # API URL for the team discussion comment
    string url;
    # The unique sequence number of a team discussion comment
    int number;
    # Timestamp when the team discussion comment was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Web URL for viewing the team discussion comment on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Timestamp when the team discussion comment was last edited
    @jsondata:Name {value: "last_edited_at"}
    string? lastEditedAt;
    # Aggregated count of all reaction types on a GitHub item
    ReactionRollup reactions?;
    # API URL for the parent team discussion
    @jsondata:Name {value: "discussion_url"}
    string discussionUrl;
    # Global node identifier for the team discussion comment
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Request body for deployment protection rule review
public type RunIdDeploymentProtectionRuleBody ReviewCustomGatesCommentRequired|ReviewCustomGatesStateRequired;

# Gitignore Template
public type GitignoreTemplate record {
    # Name of the gitignore template
    string name;
    # Content of the gitignore template
    string 'source;
};

# Represents the Queries record for the operation: repos/get-org-rulesets
public type ReposGetOrgRulesetsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: gists/list-starred
public type GistsListStarredQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# An entry in the reviews log for environment deployments
public type EnvironmentApprovals record {
    # The list of environments that were approved or rejected
    EnvironmentApprovalsEnvironments[] environments;
    # The comment submitted with the deployment review
    string comment;
    # Whether deployment to the environment(s) was approved or rejected or pending (with comments)
    "approved"|"rejected"|"pending" state;
    # A GitHub user
    SimpleUser user;
};

# Language
public type Language record {|
    int...;
|};

# An object without any properties
public type EmptyObject record {|
|};

# Combined Commit Status
public type CombinedCommitStatus record {
    # API URL for the commit associated with this status
    @jsondata:Name {value: "commit_url"}
    string commitUrl;
    # Total number of status checks for the commit
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of individual status checks for the commit
    SimpleCommitStatus[] statuses;
    # Combined state of all status checks (success, pending, failure)
    string state;
    # Minimal Repository
    MinimalRepository repository;
    # SHA hash of the commit for which status is reported
    string sha;
    # URL endpoint for the combined commit status
    string url;
};

# Delivery made by a webhook
public type HookDelivery record {
    # Webhook delivery request containing headers and payload
    HookDeliveryRequest request;
    # Status code received when delivery was made
    @jsondata:Name {value: "status_code"}
    int statusCode;
    # The id of the GitHub App installation associated with this event
    @jsondata:Name {value: "installation_id"}
    int? installationId;
    # Whether the delivery is a redelivery
    boolean redelivery;
    # The URL target of the delivery
    string url?;
    # Time spent delivering
    decimal duration;
    # Webhook delivery response data including headers and payload
    HookDeliveryResponse response;
    # Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event)
    string guid;
    # The type of activity for the event that triggered the delivery
    string? action;
    # The id of the repository associated with this event
    @jsondata:Name {value: "repository_id"}
    int? repositoryId;
    # Unique identifier of the delivery
    int id;
    # The event that triggered the delivery
    string event;
    # Time when the delivery was delivered
    @jsondata:Name {value: "delivered_at"}
    string deliveredAt;
    # Description of the status of the attempted delivery
    string status;
};

# Locked Issue Event
public type LockedIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the lock event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed the lock action
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Reason for locking the issue (e.g., off-topic, spam)
    @jsondata:Name {value: "lock_reason"}
    string? lockReason;
    # Timestamp when the lock event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the locked issue event
    int id;
    # Type of event (locked/unlocked)
    string event;
    # SHA identifier of the associated commit
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for the locked issue event
    string url;
    # GraphQL node identifier for the event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Billable workflow usage breakdown by operating system
public type WorkflowUsageBillable record {
    # Billable usage statistics for Ubuntu runners
    @jsondata:Name {value: "UBUNTU"}
    WorkflowUsageBillableUBUNTU uBUNTU?;
    # Billable usage statistics for macOS runners
    @jsondata:Name {value: "MACOS"}
    WorkflowUsageBillableUBUNTU mACOS?;
    # Billable usage statistics for Windows runners
    @jsondata:Name {value: "WINDOWS"}
    WorkflowUsageBillableUBUNTU wINDOWS?;
};

# Organization membership permissions and capabilities
public type OrgMembershipPermissions record {
    # Whether the member can create repositories in the organization
    @jsondata:Name {value: "can_create_repository"}
    boolean canCreateRepository;
};

# Hovercard
public type Hovercard record {
    # Array of contextual information displayed in the hovercard
    HovercardContexts[] contexts;
};

# Actions OIDC subject customization for a repository
public type ActionsOIDCSubjectCustomizationForARepository record {
    # Array of unique strings. Each claim key can only contain alphanumeric characters and underscores
    @jsondata:Name {value: "include_claim_keys"}
    string[] includeClaimKeys?;
    # Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored
    @jsondata:Name {value: "use_default"}
    boolean useDefault;
};

# Legacy Review Comment
public type ReviewComment record {
    # HTML-rendered content of the review comment
    @jsondata:Name {value: "body_html"}
    string bodyHtml?;
    # SHA of the original commit the comment was made on
    @jsondata:Name {value: "original_commit_id"}
    string originalCommitId;
    # Hypermedia links related to the review comment
    @jsondata:Name {value: "_links"}
    ReviewCommentLinks links;
    # Plain text content of the review comment
    @jsondata:Name {value: "body_text"}
    string bodyText?;
    # ID of the comment this is replying to
    @jsondata:Name {value: "in_reply_to_id"}
    int inReplyToId?;
    # The line of the blob to which the comment applies. The last line of the range for a multi-line comment
    int line?;
    # Diff hunk showing the context where the comment was made
    @jsondata:Name {value: "diff_hunk"}
    string diffHunk;
    # Timestamp when the review comment was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The first line of the range for a multi-line comment
    @jsondata:Name {value: "start_line"}
    int? startLine?;
    # Content of the review comment
    string body;
    # Author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # File path where the comment was made
    string path;
    # Line position in the original diff where comment was made
    @jsondata:Name {value: "original_position"}
    int originalPosition;
    # Timestamp when the review comment was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # ID of the pull request review containing this comment
    @jsondata:Name {value: "pull_request_review_id"}
    int? pullRequestReviewId;
    # Unique identifier for the review comment
    int id;
    # The side of the first line of the range for a multi-line comment
    "LEFT"|"RIGHT" side = "RIGHT";
    # API URL of the pull request this comment belongs to
    @jsondata:Name {value: "pull_request_url"}
    string pullRequestUrl;
    # API URL of the review comment
    string url;
    # The side of the first line of the range for a multi-line comment
    @jsondata:Name {value: "start_side"}
    "LEFT"|"RIGHT"? startSide = "RIGHT";
    # The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
    @jsondata:Name {value: "original_line"}
    int originalLine?;
    # The original first line of the range for a multi-line comment
    @jsondata:Name {value: "original_start_line"}
    int? originalStartLine?;
    # GitHub web URL of the review comment
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Aggregated count of all reaction types on a GitHub item
    ReactionRollup reactions?;
    # Line position in the diff where the comment was made
    int? position;
    # SHA of the commit the comment was made on
    @jsondata:Name {value: "commit_id"}
    string commitId;
    # A GitHub user
    NullableSimpleUser? user;
    # Global node ID for the review comment
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# A team's access to a repository
public type TeamRepository record {
    # Whether to allow forking this repo
    @jsondata:Name {value: "allow_forking"}
    boolean allowForking = false;
    # Number of users who have starred the repository
    @jsondata:Name {value: "stargazers_count"}
    int stargazersCount;
    # Whether this repository acts as a template that can be used to generate new repositories
    @jsondata:Name {value: "is_template"}
    boolean isTemplate = false;
    # Timestamp of the last push to the repository
    @jsondata:Name {value: "pushed_at"}
    string? pushedAt;
    # API URL to manage repository subscription
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl;
    # Primary programming language of the repository
    string? language;
    # API URL template for repository branches
    @jsondata:Name {value: "branches_url"}
    string branchesUrl;
    # API URL template for issue comments
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl;
    # Whether to allow rebase merges for pull requests
    @jsondata:Name {value: "allow_rebase_merge"}
    boolean allowRebaseMerge = true;
    # API URL template for repository labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # Repository access permissions for different privilege levels
    RepositoryPermissions permissions?;
    # API URL for repository subscribers
    @jsondata:Name {value: "subscribers_url"}
    string subscribersUrl;
    # Temporary token for cloning the repository
    @jsondata:Name {value: "temp_clone_token"}
    string tempCloneToken?;
    # URL template for accessing repository releases
    @jsondata:Name {value: "releases_url"}
    string releasesUrl;
    # Subversion URL for the repository
    @jsondata:Name {value: "svn_url"}
    string svnUrl;
    # Number of users subscribed to repository notifications
    @jsondata:Name {value: "subscribers_count"}
    int subscribersCount?;
    # Unique identifier of the repository
    int id;
    # Name of the repository's default branch
    @jsondata:Name {value: "master_branch"}
    string masterBranch?;
    # Number of times the repository has been forked
    int forks;
    # URL template for downloading repository archives
    @jsondata:Name {value: "archive_url"}
    string archiveUrl;
    # Whether to allow merge commits for pull requests
    @jsondata:Name {value: "allow_merge_commit"}
    boolean allowMergeCommit = true;
    # URL template for accessing Git references
    @jsondata:Name {value: "git_refs_url"}
    string gitRefsUrl;
    # URL for accessing repository forks
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # The repository visibility: public, private, or internal
    string visibility = "public";
    # URL template for accessing commit statuses
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # Number of repositories in the network
    @jsondata:Name {value: "network_count"}
    int networkCount?;
    # SSH URL for cloning the repository
    @jsondata:Name {value: "ssh_url"}
    string sshUrl;
    # Team's permission level for the repository
    @jsondata:Name {value: "role_name"}
    string roleName?;
    # License Simple
    NullableLicenseSimple? license;
    # Full name of the repository including owner
    @jsondata:Name {value: "full_name"}
    string fullName;
    # Size of the repository in kilobytes
    int size;
    # Template repository used to create this repository
    @jsondata:Name {value: "template_repository"}
    NullableRepository? templateRepository?;
    # Whether to allow Auto-merge to be used on pull requests
    @jsondata:Name {value: "allow_auto_merge"}
    boolean allowAutoMerge = false;
    # API URL to retrieve programming languages used in the repository
    @jsondata:Name {value: "languages_url"}
    string languagesUrl;
    # GitHub web URL for viewing the repository in browser
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # API URL template to access repository collaborators
    @jsondata:Name {value: "collaborators_url"}
    string collaboratorsUrl;
    # HTTPS URL for cloning the repository with Git
    @jsondata:Name {value: "clone_url"}
    string cloneUrl;
    # The name of the repository
    string name;
    # API URL template to access repository pull requests
    @jsondata:Name {value: "pulls_url"}
    string pullsUrl;
    # The default branch of the repository
    @jsondata:Name {value: "default_branch"}
    string defaultBranch;
    # API URL to manage repository webhooks and hooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # API URL template to access Git tree objects by SHA
    @jsondata:Name {value: "trees_url"}
    string treesUrl;
    # API URL to retrieve repository tags and releases
    @jsondata:Name {value: "tags_url"}
    string tagsUrl;
    # Whether the repository is private or public
    boolean 'private = false;
    # API URL to retrieve repository contributors list
    @jsondata:Name {value: "contributors_url"}
    string contributorsUrl;
    # Whether downloads are enabled
    @jsondata:Name {value: "has_downloads"}
    boolean hasDownloads = true;
    # API URL template to access repository notification settings
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues_count"}
    int openIssuesCount;
    # Brief description of the repository purpose and contents
    string? description;
    # Timestamp when the repository was created
    @jsondata:Name {value: "created_at"}
    string? createdAt;
    # Number of users watching the repository
    int watchers;
    # API URL for accessing repository deployments
    @jsondata:Name {value: "deployments_url"}
    string deploymentsUrl;
    # API URL template for accessing repository deploy keys
    @jsondata:Name {value: "keys_url"}
    string keysUrl;
    # Whether projects are enabled
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects = true;
    # Whether the repository is archived
    boolean archived = false;
    # Whether the wiki is enabled
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki = true;
    # Timestamp when the repository was last updated
    @jsondata:Name {value: "updated_at"}
    string? updatedAt;
    # API URL template for accessing repository comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # API URL for accessing repository stargazers
    @jsondata:Name {value: "stargazers_url"}
    string stargazersUrl;
    # Returns whether or not this repository disabled
    boolean disabled;
    # Whether to delete head branches when pull requests are merged
    @jsondata:Name {value: "delete_branch_on_merge"}
    boolean deleteBranchOnMerge = false;
    # Git protocol URL for cloning the repository
    @jsondata:Name {value: "git_url"}
    string gitUrl;
    # Whether GitHub Pages is enabled for this repository
    @jsondata:Name {value: "has_pages"}
    boolean hasPages;
    # A GitHub user
    NullableSimpleUser? owner;
    # Whether to allow squash merges for pull requests
    @jsondata:Name {value: "allow_squash_merge"}
    boolean allowSquashMerge = true;
    # API URL template for accessing repository commits
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # API URL template for comparing commits or branches
    @jsondata:Name {value: "compare_url"}
    string compareUrl;
    # API URL template for accessing Git commit objects
    @jsondata:Name {value: "git_commits_url"}
    string gitCommitsUrl;
    # Array of topic tags associated with the repository
    string[] topics?;
    # API URL template for accessing Git blob objects
    @jsondata:Name {value: "blobs_url"}
    string blobsUrl;
    # API URL template for accessing Git tag objects
    @jsondata:Name {value: "git_tags_url"}
    string gitTagsUrl;
    # API URL for performing repository merges
    @jsondata:Name {value: "merges_url"}
    string mergesUrl;
    # API URL for accessing repository downloads
    @jsondata:Name {value: "downloads_url"}
    string downloadsUrl;
    # Whether issues are enabled
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues = true;
    # Whether to require contributors to sign off on web-based commits
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired = false;
    # API URL for the repository
    string url;
    # API URL template for repository contents
    @jsondata:Name {value: "contents_url"}
    string contentsUrl;
    # Git URL if this repository is a mirror
    @jsondata:Name {value: "mirror_url"}
    string? mirrorUrl;
    # API URL template for repository milestones
    @jsondata:Name {value: "milestones_url"}
    string milestonesUrl;
    # API URL for repository teams
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Indicates if this repository is a fork
    boolean 'fork;
    # API URL template for repository issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # API URL for repository events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # API URL template for issue events
    @jsondata:Name {value: "issue_events_url"}
    string issueEventsUrl;
    # API URL template for repository assignees
    @jsondata:Name {value: "assignees_url"}
    string assigneesUrl;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues"}
    int openIssues;
    # Number of users watching the repository
    @jsondata:Name {value: "watchers_count"}
    int watchersCount;
    # GraphQL node identifier for the repository
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Repository homepage URL
    string? homepage;
    # Number of times the repository has been forked
    @jsondata:Name {value: "forks_count"}
    int forksCount;
};

# Represents the Queries record for the operation: packages/get-all-package-versions-for-package-owned-by-org
public type PackagesGetAllPackageVersionsForPackageOwnedByOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # The state of the package, either active or deleted
    "active"|"deleted" state = "active";
};

# Represents the Queries record for the operation: users/list-followers-for-user
public type UsersListFollowersForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Details of a deployment branch or tag policy
public type DeploymentBranchPolicyResponse record {
    # The number of deployment branch policies for the environment
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of branch policies associated with the deployment environment
    @jsondata:Name {value: "branch_policies"}
    DeploymentBranchPolicy[] branchPolicies;
};

# A GitHub repository
public type SimpleRepository record {
    # The API URL to get information about tags on the repository
    @jsondata:Name {value: "tags_url"}
    string tagsUrl;
    # Whether the repository is private
    boolean 'private;
    # A template for the API URL to list the contributors to the repository
    @jsondata:Name {value: "contributors_url"}
    string contributorsUrl;
    # A template for the API URL to get information about notifications on the repository
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl;
    # The repository description
    string? description;
    # The API URL to subscribe to notifications for this repository
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl;
    # A template for the API URL to get information about branches in the repository
    @jsondata:Name {value: "branches_url"}
    string branchesUrl;
    # The API URL to list the deployments of the repository
    @jsondata:Name {value: "deployments_url"}
    string deploymentsUrl;
    # A template for the API URL to get information about deploy keys on the repository
    @jsondata:Name {value: "keys_url"}
    string keysUrl;
    # A template for the API URL to get information about issue comments on the repository
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl;
    # A template for the API URL to get information about labels of the repository
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # The API URL to list the subscribers on the repository
    @jsondata:Name {value: "subscribers_url"}
    string subscribersUrl;
    # A template for the API URL to get information about releases on the repository
    @jsondata:Name {value: "releases_url"}
    string releasesUrl;
    # A template for the API URL to get information about comments on the repository
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # The API URL to list the stargazers on the repository
    @jsondata:Name {value: "stargazers_url"}
    string stargazersUrl;
    # A unique identifier of the repository
    int id;
    # A GitHub user
    SimpleUser owner;
    # A template for the API URL to download the repository as an archive
    @jsondata:Name {value: "archive_url"}
    string archiveUrl;
    # A template for the API URL to get information about commits on the repository
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # A template for the API URL to get information about Git refs of the repository
    @jsondata:Name {value: "git_refs_url"}
    string gitRefsUrl;
    # A template for the API URL to compare two commits or refs
    @jsondata:Name {value: "compare_url"}
    string compareUrl;
    # The API URL to list the forks of the repository
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # A template for the API URL to get information about statuses of a commit
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # A template for the API URL to get information about Git commits of the repository
    @jsondata:Name {value: "git_commits_url"}
    string gitCommitsUrl;
    # A template for the API URL to create or retrieve a raw Git blob in the repository
    @jsondata:Name {value: "blobs_url"}
    string blobsUrl;
    # A template for the API URL to get information about Git tags of the repository
    @jsondata:Name {value: "git_tags_url"}
    string gitTagsUrl;
    # The API URL to merge branches in the repository
    @jsondata:Name {value: "merges_url"}
    string mergesUrl;
    # The API URL to list the downloads on the repository
    @jsondata:Name {value: "downloads_url"}
    string downloadsUrl;
    # The URL to get more information about the repository from the GitHub API
    string url;
    # A template for the API URL to get the contents of the repository
    @jsondata:Name {value: "contents_url"}
    string contentsUrl;
    # A template for the API URL to get information about milestones of the repository
    @jsondata:Name {value: "milestones_url"}
    string milestonesUrl;
    # The API URL to list the teams on the repository
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Whether the repository is a fork
    boolean 'fork;
    # A template for the API URL to get information about issues on the repository
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # The full, globally unique, name of the repository
    @jsondata:Name {value: "full_name"}
    string fullName;
    # The API URL to list the events of the repository
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # A template for the API URL to get information about issue events on the repository
    @jsondata:Name {value: "issue_events_url"}
    string issueEventsUrl;
    # The API URL to get information about the languages of the repository
    @jsondata:Name {value: "languages_url"}
    string languagesUrl;
    # The URL to view the repository on GitHub.com
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # A template for the API URL to get information about collaborators of the repository
    @jsondata:Name {value: "collaborators_url"}
    string collaboratorsUrl;
    # The name of the repository
    string name;
    # A template for the API URL to get information about pull requests on the repository
    @jsondata:Name {value: "pulls_url"}
    string pullsUrl;
    # The API URL to list the hooks on the repository
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # A template for the API URL to list the available assignees for issues in the repository
    @jsondata:Name {value: "assignees_url"}
    string assigneesUrl;
    # A template for the API URL to create or retrieve a raw Git tree of the repository
    @jsondata:Name {value: "trees_url"}
    string treesUrl;
    # The GraphQL identifier of the repository
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Require status checks to pass before merging. Set to `null` to disable
public type ReposownerrepobranchesbranchprotectionRequiredStatusChecks record {
    # The list of status checks to require in order to merge into this branch
    ReposownerrepobranchesbranchprotectionRequiredStatusChecksChecks[] checks?;
    # **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control
    # 
    # # Deprecated
    @deprecated
    string[] contexts;
    # Require branches to be up to date before merging
    boolean strict;
};

# Represents the Queries record for the operation: apps/list-webhook-deliveries
public type AppsListWebhookDeliveriesQueries record {
    # Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors
    string cursor?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    boolean redelivery?;
};

# Request body for adding/removing app restrictions on branch protection
public type RestrictionsAppsBody1 ReposownerrepobranchesbranchprotectionrestrictionsappsOneOf11|ReposownerrepobranchesbranchprotectionrestrictionsappsreposownerrepobranchesbranchprotectionrestrictionsappsOneOf112;

# Alternative request body schema for app restrictions on branch protection
public type RestrictionsAppsBody2 ReposownerrepobranchesbranchprotectionrestrictionsappsOneOf12|ReposownerrepobranchesbranchprotectionrestrictionsappsreposownerrepobranchesbranchprotectionrestrictionsappsOneOf122;

# Request body for creating a reaction to an issue
public type IssueNumberReactionsBody record {
    # The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content;
};

# A GitHub user
public type NullableSimpleUser record {
    # URL template for accessing the user's gists
    @jsondata:Name {value: "gists_url"}
    string gistsUrl;
    # URL for accessing the user's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # URL template for accessing users this user is following
    @jsondata:Name {value: "following_url"}
    string followingUrl;
    # URL template for accessing repositories starred by the user
    @jsondata:Name {value: "starred_url"}
    string starredUrl;
    # The user's GitHub username
    string login;
    # URL for accessing the user's followers
    @jsondata:Name {value: "followers_url"}
    string followersUrl;
    # The type of GitHub account (User, Organization, etc.)
    string 'type;
    # Timestamp when the user starred the repository
    @jsondata:Name {value: "starred_at"}
    string starredAt?;
    # API URL for the user
    string url;
    # API URL for the user's subscriptions
    @jsondata:Name {value: "subscriptions_url"}
    string subscriptionsUrl;
    # API URL for events received by the user
    @jsondata:Name {value: "received_events_url"}
    string receivedEventsUrl;
    # URL of the user's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # API URL template for the user's events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # GitHub profile URL for the user
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Display name of the user
    string? name?;
    # Whether the user is a GitHub site administrator
    @jsondata:Name {value: "site_admin"}
    boolean siteAdmin;
    # Unique identifier for the user
    int id;
    # Gravatar ID associated with the user's email
    @jsondata:Name {value: "gravatar_id"}
    string? gravatarId;
    # Email address of the user
    string? email?;
    # GraphQL node identifier for the user
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # API URL for the user's organizations
    @jsondata:Name {value: "organizations_url"}
    string organizationsUrl;
};

# Request body for creating a repository deployment
public type RepoDeploymentsBody record {
    # The ref to deploy. This can be a branch, tag, or SHA
    string ref;
    # Name for the target deployment environment (e.g., `production`, `staging`, `qa`)
    string environment = "production";
    # Specifies a task to execute (e.g., `deploy` or `deploy:migrations`)
    string task = "deploy";
    # The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts
    @jsondata:Name {value: "required_contexts"}
    string[] requiredContexts?;
    # JSON payload with extra deployment information as object or string
    record {}|string payload?;
    # Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
    @jsondata:Name {value: "transient_environment"}
    boolean transientEnvironment = false;
    # Short description of the deployment
    string? description = "";
    # Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch
    @jsondata:Name {value: "auto_merge"}
    boolean autoMerge = true;
    # Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise
    @jsondata:Name {value: "production_environment"}
    boolean productionEnvironment?;
};

# Successful deletion of a code scanning analysis
public type CodeScanningAnalysisDeletion record {
    # Next deletable analysis in chain, without last analysis deletion confirmation
    @jsondata:Name {value: "next_analysis_url"}
    string? nextAnalysisUrl;
    # Next deletable analysis in chain, with last analysis deletion confirmation
    @jsondata:Name {value: "confirm_delete_url"}
    string? confirmDeleteUrl;
};

# Branch name pattern configuration for deployment environment access
public type DeploymentBranchPolicyNamePattern record {
    # The name pattern that branches must match in order to deploy to the environment.
    # 
    # Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.
    # For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch)
    string name;
};

# Represents the Queries record for the operation: activity/list-repos-starred-by-authenticated-user
public type ActivityListReposStarredByAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to
    "created"|"updated" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Request body parameters for merging a pull request
public type PullNumberMergeBody record {
    # Title for the automatic commit message
    @jsondata:Name {value: "commit_title"}
    string commitTitle?;
    # Extra detail to append to automatic commit message
    @jsondata:Name {value: "commit_message"}
    string commitMessage?;
    # SHA that pull request head must match to allow merge
    string sha?;
    # The merge method to use
    @jsondata:Name {value: "merge_method"}
    "merge"|"squash"|"rebase" mergeMethod?;
};

# Details pertaining to the package version that patches this vulnerability
public type DependabotAlertSecurityVulnerabilityFirstPatchedVersion record {|
    # The package version that patches this vulnerability
    string identifier;
|};

# Commits pushed to matching refs must have verified signatures
public type RepositoryRuleRequiredSignatures record {
    # Rule type identifier for required signatures enforcement
    "required_signatures" 'type;
};

# Gist History
public type GistHistory record {
    # Timestamp when the gist version was committed
    @jsondata:Name {value: "committed_at"}
    string committedAt?;
    # Status information about changes in this gist version
    @jsondata:Name {value: "change_status"}
    GistHistoryChangeStatus changeStatus?;
    # A GitHub user
    NullableSimpleUser? user?;
    # Version identifier for the gist history entry
    string version?;
    # URL to access this specific gist version
    string url?;
};

# Represents the Queries record for the operation: dependabot/list-alerts-for-org
public type DependabotListAlertsForOrgQueries record {
    # A comma-separated list of severities. If specified, only alerts with these severities will be returned.
    # 
    # Can be: `low`, `medium`, `high`, `critical`
    string severity?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # A comma-separated list of package names. If specified, only alerts for these packages will be returned
    string package?;
    # A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
    # 
    # Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
    string ecosystem?;
    # **Deprecated**. The number of results per page (max 100), starting from the last matching result.
    # This parameter must not be used in combination with `first`.
    # Instead, use `per_page` in combination with `before` to fetch the last page of results
    @constraint:Int {minValue: 1, maxValue: 100}
    int last?;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor
    string before?;
    # The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned
    "development"|"runtime" scope?;
    # A comma-separated list of states. If specified, only alerts with these states will be returned.
    # 
    # Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
    string state?;
    # The property by which to sort the results.
    # `created` means when the alert was created.
    # `updated` means when the alert's state last changed
    "created"|"updated" sort = "created";
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor
    string after?;
    # **Deprecated**. The number of results per page (max 100), starting from the first matching result.
    # This parameter must not be used in combination with `last`.
    # Instead, use `per_page` in combination with `after` to fetch the first page of results
    @constraint:Int {minValue: 1, maxValue: 100}
    int first = 30;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Secret scanning alert details for organization-level security monitoring
public type OrganizationSecretScanningAlert record {
    # The type of secret that secret scanning detected
    @jsondata:Name {value: "secret_type"}
    string secretType?;
    # User who bypassed push protection for this secret
    @jsondata:Name {value: "push_protection_bypassed_by"}
    NullableSimpleUser? pushProtectionBypassedBy?;
    # The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
    @jsondata:Name {value: "push_protection_bypassed_at"}
    string? pushProtectionBypassedAt?;
    # Timestamp when the secret scanning alert was created
    @jsondata:Name {value: "created_at"}
    AlertCreatedAt createdAt?;
    # User-friendly name for the detected secret, matching the `secret_type`.
    # For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
    @jsondata:Name {value: "secret_type_display_name"}
    string secretTypeDisplayName?;
    # The secret that was detected
    string secret?;
    # A GitHub repository
    SimpleRepository repository?;
    # **Required when the `state` is `resolved`.** The reason for resolving the alert
    SecretScanningAlertResolution? resolution?;
    # The REST API URL of the alert resource
    AlertUrl url?;
    # The security alert number
    AlertNumber number?;
    # User who resolved the secret scanning alert
    @jsondata:Name {value: "resolved_by"}
    NullableSimpleUser? resolvedBy?;
    # Timestamp when the alert was last updated
    @jsondata:Name {value: "updated_at"}
    NullableAlertUpdatedAt? updatedAt?;
    # The REST API URL of the code locations for this alert
    @jsondata:Name {value: "locations_url"}
    string locationsUrl?;
    # The comment that was optionally added when this alert was closed
    @jsondata:Name {value: "resolution_comment"}
    string? resolutionComment?;
    # The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
    @jsondata:Name {value: "resolved_at"}
    string? resolvedAt?;
    # HTML URL for viewing the alert in GitHub
    @jsondata:Name {value: "html_url"}
    AlertHtmlUrl htmlUrl?;
    # Whether push protection was bypassed for the detected secret
    @jsondata:Name {value: "push_protection_bypassed"}
    boolean? pushProtectionBypassed?;
    # Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`
    SecretScanningAlertState state?;
};

# A repository import from an external source
public type Import record {
    # Step where the import process failed
    @jsondata:Name {value: "failed_step"}
    string? failedStep?;
    # Error message if the import failed
    @jsondata:Name {value: "error_message"}
    string? errorMessage?;
    # Percentage of push operation completed
    @jsondata:Name {value: "push_percent"}
    int? pushPercent?;
    # Number of large files detected during import
    @jsondata:Name {value: "large_files_count"}
    int largeFilesCount?;
    # The URL of the originating repository
    @jsondata:Name {value: "vcs_url"}
    string vcsUrl;
    # Version control system type of the source repository
    string? vcs;
    # Root URL of the source version control service
    @jsondata:Name {value: "svc_root"}
    string svcRoot?;
    # URL to retrieve author mapping information
    @jsondata:Name {value: "authors_url"}
    string authorsUrl;
    # Status message describing the current import state
    string message?;
    # Available project options for the import
    @jsondata:Name {value: "project_choices"}
    ImportProjectChoices[] projectChoices?;
    # API URL for the import resource
    string url;
    # Total number of commits to be imported
    @jsondata:Name {value: "commit_count"}
    int? commitCount?;
    # Whether to use Git LFS for large files
    @jsondata:Name {value: "use_lfs"}
    boolean useLfs?;
    # Team Foundation Version Control project name for the import
    @jsondata:Name {value: "tfvc_project"}
    string tfvcProject?;
    # Number of authors detected in the import source
    @jsondata:Name {value: "authors_count"}
    int? authorsCount?;
    # Web URL for viewing the import status and details
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Completion percentage of the import process (0-100)
    @jsondata:Name {value: "import_percent"}
    int? importPercent?;
    # Whether the import contains files exceeding size limits
    @jsondata:Name {value: "has_large_files"}
    boolean hasLargeFiles?;
    # Human-readable description of the current import status
    @jsondata:Name {value: "status_text"}
    string? statusText?;
    # API URL of the target GitHub repository for the import
    @jsondata:Name {value: "repository_url"}
    string repositoryUrl;
    # Root directory path for Subversion repository imports
    @jsondata:Name {value: "svn_root"}
    string svnRoot?;
    # Total size in bytes of files exceeding the size limit
    @jsondata:Name {value: "large_files_size"}
    int largeFilesSize?;
    # Current status of the repository import operation
    "auth"|"error"|"none"|"detecting"|"choose"|"auth_failed"|"importing"|"mapping"|"waiting_to_push"|"pushing"|"complete"|"setup"|"unknown"|"detection_found_multiple"|"detection_found_nothing"|"detection_needs_auth" status;
};

# Marketplace Purchase
public type MarketplacePurchase record {
    # Pending changes to the marketplace purchase plan
    @jsondata:Name {value: "marketplace_pending_change"}
    MarketplacePurchaseMarketplacePendingChange? marketplacePendingChange?;
    # Billing email address for the organization's marketplace purchase
    @jsondata:Name {value: "organization_billing_email"}
    string organizationBillingEmail?;
    # Unique identifier for the marketplace purchase
    int id;
    # Details of the current marketplace purchase plan
    @jsondata:Name {value: "marketplace_purchase"}
    MarketplacePurchaseMarketplacePurchase marketplacePurchase;
    # Type of marketplace purchase (e.g., organization, user)
    string 'type;
    # GitHub username associated with the marketplace purchase
    string login;
    # API URL for the marketplace purchase
    string url;
    # Email address associated with the marketplace purchase
    string? email?;
};

# Codespace default attributes
public type CodespaceDefault record {
    # Path to the devcontainer configuration file
    @jsondata:Name {value: "devcontainer_path"}
    string? devcontainerPath;
    # Geographic location where the codespace will be created
    string location;
};

# Request body for managing notification thread subscriptions
public type ThreadIdSubscriptionBody record {
    # Whether to block all notifications from a thread
    boolean ignored = false;
};

# Details about a dismissed pull request review event
public type IssueEventDismissedReview record {
    # Unique identifier of the dismissed review
    @jsondata:Name {value: "review_id"}
    int reviewId;
    # Current state of the dismissed review
    string state;
    # SHA of the commit when the review was dismissed
    @jsondata:Name {value: "dismissal_commit_id"}
    string? dismissalCommitId?;
    # Message explaining why the review was dismissed
    @jsondata:Name {value: "dismissal_message"}
    string? dismissalMessage;
};

# Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary
public type PullRequest record {
    # API URL for the associated issue of this pull request
    @jsondata:Name {value: "issue_url"}
    string issueUrl;
    # Whether the pull request can be rebased
    boolean? rebaseable?;
    # Hypermedia links related to the pull request
    @jsondata:Name {value: "_links"}
    PullRequestSimpleLinks links;
    # Number of lines deleted in the pull request
    int deletions;
    # URL to download the pull request diff file
    @jsondata:Name {value: "diff_url"}
    string diffUrl;
    # Timestamp when the pull request was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Array of users assigned to the pull request
    SimpleUser[]? assignees?;
    # Array of users requested to review the pull request
    @jsondata:Name {value: "requested_reviewers"}
    SimpleUser[]? requestedReviewers?;
    # User who merged the pull request
    @jsondata:Name {value: "merged_by"}
    NullableSimpleUser? mergedBy;
    # The title of the pull request
    string title;
    # Description text of the pull request
    string? body;
    # Array of teams requested to review the pull request
    @jsondata:Name {value: "requested_teams"}
    TeamSimple[]? requestedTeams?;
    # Represents the head branch of a pull request with reference details
    PullRequestHead head;
    # Author's relationship to the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # Number uniquely identifying the pull request within its repository
    int number;
    # Whether the pull request can be merged
    boolean? mergeable;
    # URL to download the pull request patch file
    @jsondata:Name {value: "patch_url"}
    string patchUrl;
    # Timestamp when the pull request was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Indicates whether or not the pull request is a draft
    boolean draft?;
    # API URL for pull request comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # SHA of the merge commit
    @jsondata:Name {value: "merge_commit_sha"}
    string? mergeCommitSha;
    # API URL template for review comments
    @jsondata:Name {value: "review_comment_url"}
    string reviewCommentUrl;
    # Reason for locking the pull request conversation
    @jsondata:Name {value: "active_lock_reason"}
    string? activeLockReason?;
    # Unique identifier for the pull request
    int id;
    # State of this Pull Request. Either `open` or `closed`
    "open"|"closed" state;
    # Whether the pull request is locked from further discussion
    boolean locked;
    # Current state of the pull request's mergeability
    @jsondata:Name {value: "mergeable_state"}
    string mergeableState;
    # API URL to retrieve commits for this pull request
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # Timestamp when the pull request was closed
    @jsondata:Name {value: "closed_at"}
    string? closedAt;
    # Number of comments on the pull request
    int comments;
    # Number of lines added in the pull request
    int additions;
    # API URL to retrieve status checks for the pull request
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl;
    # Timestamp when the pull request was merged
    @jsondata:Name {value: "merged_at"}
    string? mergedAt;
    # Whether the pull request has been merged
    boolean merged;
    # Number of review comments on the pull request
    @jsondata:Name {value: "review_comments"}
    int reviewComments;
    # Auto-merge configuration for the pull request
    @jsondata:Name {value: "auto_merge"}
    AutoMerge? autoMerge;
    # Number of files changed in the pull request
    @jsondata:Name {value: "changed_files"}
    int changedFiles;
    # API URL for the pull request
    string url;
    # Array of labels applied to the pull request
    PullRequestSimpleLabels[] labels;
    # A collection of related issues and pull requests
    NullableMilestone? milestone;
    # GitHub web URL for viewing the pull request
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # API URL for accessing pull request review comments
    @jsondata:Name {value: "review_comments_url"}
    string reviewCommentsUrl;
    # Indicates whether maintainers can modify the pull request
    @jsondata:Name {value: "maintainer_can_modify"}
    boolean maintainerCanModify;
    # Number of commits in the pull request
    int commits;
    # A GitHub user
    NullableSimpleUser? assignee;
    # A GitHub user
    SimpleUser user;
    # Global node identifier for GraphQL API compatibility
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Base branch information for a pull request
    PullRequestBase base;
};

# Represents the Queries record for the operation: repos/get-repo-rule-suites
public type ReposGetRepoRuleSuitesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The name of the ref. Cannot contain wildcard characters. When specified, only rule evaluations triggered for this ref will be returned
    string ref?;
    # The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned
    @http:Query {name: "actor_name"}
    string actorName?;
    # Page number of the results to fetch
    int page = 1;
    # The time period to filter by.
    # 
    # For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for insights that occurred in the past 7 days (168 hours)
    @http:Query {name: "time_period"}
    "hour"|"day"|"week"|"month" timePeriod = "day";
    # The rule results to filter on. When specified, only suites with this result will be returned
    @http:Query {name: "rule_suite_result"}
    "pass"|"fail"|"bypass"|"all" ruleSuiteResult = "all";
};

# Represents the Queries record for the operation: orgs/list-webhook-deliveries
public type OrgsListWebhookDeliveriesQueries record {
    # Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors
    string cursor?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    boolean redelivery?;
};

# Request body for updating issue labels with multiple format options
public type IssueNumberLabelsBody ReposownerrepoissuesissueNumberlabelsOneOf1|ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf12|ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf123|ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf1234|ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf12345;

# HTML link information for repository ruleset
public type RepositoryRulesetLinksHtml record {
    # The html URL of the ruleset
    string href?;
};

# SPDX SBOM package information with license and dependency details
public type DependencyGraphSpdxSbomSbomPackages record {
    # Whether the package's file content has been subjected to
    # analysis during the creation of the SPDX document
    boolean filesAnalyzed?;
    # The license of the package as determined while creating the SPDX document
    string licenseConcluded?;
    # A unique SPDX identifier for the package
    @jsondata:Name {value: "SPDXID"}
    string sPDXID?;
    # The distribution source of this package, or NOASSERTION if this was not determined
    string supplier?;
    # The name of the package
    string name?;
    # External references for the SPDX SBOM package
    DependencyGraphSpdxSbomSbomExternalRefs[] externalRefs?;
    # The location where the package can be downloaded,
    # or NOASSERTION if this has not been determined
    string downloadLocation?;
    # The license of the package as declared by its author, or NOASSERTION if this information
    # was not available when the SPDX document was created
    string licenseDeclared?;
    # The version of the package. If the package does not have an exact version specified,
    # a version range is given
    string versionInfo?;
};

# Issue labels request format with array of label objects
public type ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf123 record {
    # Array of labels to apply to the issue (minimum 1 required)
    @constraint:Array {minLength: 1}
    ReposownerrepoissuesissueNumberlabelsLabels[] labels?;
};

# Represents the Queries record for the operation: orgs/list-failed-invitations
public type OrgsListFailedInvitationsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: secret-scanning/list-locations-for-alert
public type SecretScanningListLocationsForAlertQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Pull request information associated with an issue
public type IssuePullRequest record {
    # URL to download the pull request patch file
    @jsondata:Name {value: "patch_url"}
    string? patchUrl;
    # Timestamp when the pull request was merged
    @jsondata:Name {value: "merged_at"}
    string? mergedAt?;
    # URL to view the pull request in the web interface
    @jsondata:Name {value: "html_url"}
    string? htmlUrl;
    # URL to view the pull request diff
    @jsondata:Name {value: "diff_url"}
    string? diffUrl;
    # API URL for the pull request resource
    string? url;
};

# A public SSH key used to sign Git commits
public type SshSigningKey record {
    # Timestamp when the SSH signing key was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the SSH signing key
    int id;
    # Human-readable title for the SSH signing key
    string title;
    # The SSH public key content
    string 'key;
};

# GitHub API root endpoint URLs and resource discovery
public type Root record {
    # URL template for searching labels
    @jsondata:Name {value: "label_search_url"}
    string labelSearchUrl;
    # URL template for organization repositories
    @jsondata:Name {value: "organization_repositories_url"}
    string organizationRepositoriesUrl;
    # URL template for user repositories
    @jsondata:Name {value: "user_repositories_url"}
    string userRepositoriesUrl;
    # URL template for accessing gists
    @jsondata:Name {value: "gists_url"}
    string gistsUrl;
    # URL template for accessing user notifications
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl;
    # URL template for accessing users followed by a user
    @jsondata:Name {value: "following_url"}
    string followingUrl;
    # URL template for accessing user's public keys
    @jsondata:Name {value: "keys_url"}
    string keysUrl;
    # URL template for searching users
    @jsondata:Name {value: "user_search_url"}
    string userSearchUrl;
    # URL template for accessing timeline feeds
    @jsondata:Name {value: "feeds_url"}
    string feedsUrl;
    # URL template for searching repository topics
    @jsondata:Name {value: "topic_search_url"}
    string topicSearchUrl?;
    # URL template for accessing starred gists
    @jsondata:Name {value: "starred_gists_url"}
    string starredGistsUrl;
    # URL template for accessing user profiles
    @jsondata:Name {value: "user_url"}
    string userUrl;
    # URL template for accessing repositories
    @jsondata:Name {value: "repository_url"}
    string repositoryUrl;
    # URL template for accessing user's organizations
    @jsondata:Name {value: "user_organizations_url"}
    string userOrganizationsUrl;
    # URL template for current user's authorization settings page
    @jsondata:Name {value: "current_user_authorizations_html_url"}
    string currentUserAuthorizationsHtmlUrl;
    # URL template for accessing available emojis
    @jsondata:Name {value: "emojis_url"}
    string emojisUrl;
    # URL template for accessing organization profiles
    @jsondata:Name {value: "organization_url"}
    string organizationUrl;
    # URL template for accessing GitHub Hub resources
    @jsondata:Name {value: "hub_url"}
    string hubUrl;
    # URL template for accessing starred repositories
    @jsondata:Name {value: "starred_url"}
    string starredUrl;
    # URI template for accessing user followers endpoint
    @jsondata:Name {value: "followers_url"}
    string followersUrl;
    # URI template for accessing user emails endpoint
    @jsondata:Name {value: "emails_url"}
    string emailsUrl;
    # URI template for accessing rate limit status endpoint
    @jsondata:Name {value: "rate_limit_url"}
    string rateLimitUrl;
    # URI template for searching commits across repositories
    @jsondata:Name {value: "commit_search_url"}
    string commitSearchUrl;
    # URI template for accessing issues endpoint
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # URI template for accessing organization teams endpoint
    @jsondata:Name {value: "organization_teams_url"}
    string organizationTeamsUrl;
    # URI template for accessing public gists endpoint
    @jsondata:Name {value: "public_gists_url"}
    string publicGistsUrl;
    # URI template for accessing user authorizations endpoint
    @jsondata:Name {value: "authorizations_url"}
    string authorizationsUrl;
    # URI template for accessing events endpoint
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # URI template for accessing current authenticated user endpoint
    @jsondata:Name {value: "current_user_url"}
    string currentUserUrl;
    # URI template for accessing current user's repositories endpoint
    @jsondata:Name {value: "current_user_repositories_url"}
    string currentUserRepositoriesUrl;
    # URI template for searching issues across repositories
    @jsondata:Name {value: "issue_search_url"}
    string issueSearchUrl;
    # URI template for searching code across repositories
    @jsondata:Name {value: "code_search_url"}
    string codeSearchUrl;
    # URI template for searching repositories
    @jsondata:Name {value: "repository_search_url"}
    string repositorySearchUrl;
};

# Request body for updating organization membership with role assignment
public type MembershipsusernameBody record {
    # The role to give the user in the organization. Can be one of:  
    #  * `admin` - The user will become an owner of the organization.  
    #  * `member` - The user will become a non-owner member of the organization
    "admin"|"member" role = "member";
};

# Represents a Git tree object containing file and directory information
public type GitTreeTree record {
    # File mode permissions (e.g., 040000 for directories, 100644 for files)
    string mode?;
    # Relative path to the file or directory within the repository
    string path?;
    # Size of the file in bytes (null for directories)
    int size?;
    # Object type: 'blob' for files, 'tree' for directories
    string 'type?;
    # SHA-1 hash identifier of the Git object
    string sha?;
    # API URL to access the Git object details
    string url?;
};

# Defines ref name patterns for repository ruleset conditions
public type RepositoryRulesetConditionsRefName record {
    # Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches
    string[] include?;
    # Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match
    string[] exclude?;
};

# If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers)
public type WebhookConfigSecret string;

# A CWE weakness assigned to the advisory
public type DependabotAlertSecurityAdvisoryCwes record {|
    # The unique CWE ID
    @jsondata:Name {value: "cwe_id"}
    string cweId;
    # The short, plain text name of the CWE
    string name;
|};

# Represents the Queries record for the operation: checks/list-for-ref
public type ChecksListForRefQueries record {
    # Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs
    "latest"|"all" filter = "latest";
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Returns check runs with the specified `name`
    @http:Query {name: "check_name"}
    string checkName?;
    # Page number of the results to fetch
    int page = 1;
    @http:Query {name: "app_id"}
    int appId?;
    # Returns check runs with the specified `status`
    "queued"|"in_progress"|"completed" status?;
};

# Create a new snapshot of a repository's dependencies
public type Snapshot record {|
    # The repository branch that triggered this snapshot
    @constraint:String {pattern: re `^refs/`}
    string ref;
    # User-defined metadata to store domain-specific information limited to 8 keys with scalar values
    Metadata metadata?;
    # The time at which the snapshot was scanned
    string scanned;
    # A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies
    record {|Manifest...;|} manifests?;
    # Represents a dependency snapshot job with correlation and identification data
    SnapshotJob job;
    # The version of the repository snapshot submission
    int version;
    # The commit SHA associated with this dependency snapshot. Maximum length: 40 characters
    @constraint:String {maxLength: 40, minLength: 40}
    string sha;
    # A description of the detector used
    SnapshotDetector detector;
|};

# Label Search Result Item
public type LabelSearchResultItem record {
    # Search relevance score for the label result
    decimal score;
    # Whether this is a default repository label
    boolean default;
    # Hexadecimal color code for the label
    string color;
    # Text fragments that matched the search query
    @jsondata:Name {value: "text_matches"}
    SearchResultTextMatches textMatches?;
    # Name of the label
    string name;
    # Optional description of the label
    string? description;
    # Unique identifier for the label
    int id;
    # API URL for the label resource
    string url;
    # Global node identifier for the label
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Request body for replying to a review comment
public type CommentscommentIdBody2 record {
    # The text of the reply to the review comment
    string body;
};

# Represents the Queries record for the operation: reactions/list-for-team-discussion-comment-legacy
public type ReactionsListForTeamDiscussionCommentLegacyQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content?;
};

# Actions OIDC subject customization for a repository
public type OidcCustomSubRepo record {
    # Array of unique strings. Each claim key can only contain alphanumeric characters and underscores
    @jsondata:Name {value: "include_claim_keys"}
    string[] includeClaimKeys?;
    # Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored
    @jsondata:Name {value: "use_default"}
    boolean useDefault;
};

# Represents the Queries record for the operation: codespaces/list-for-authenticated-user
public type CodespacesListForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # ID of the Repository to filter on
    @http:Query {name: "repository_id"}
    int repositoryId?;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for updating a comment
public type CommentscommentIdBody1 record {
    # The contents of the comment
    string body;
};

# Request body for creating a pull request review comment
public type ReposownerrepopullspullNumberreviewsComments record {
    # The relative path to the file that necessitates a review comment
    string path;
    # Side of the diff for the comment (LEFT or RIGHT)
    string side?;
    # Line number in the file for the comment
    int line?;
    # Starting line number for multi-line comments
    @jsondata:Name {value: "start_line"}
    int startLine?;
    # The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below
    int position?;
    # Text of the review comment
    string body;
    # Starting side of the diff for multi-line comments
    @jsondata:Name {value: "start_side"}
    string startSide?;
};

# Code scanning alert item in organization-level results
public type CodeScanningOrganizationAlertItems record {
    # URL to fetch alert instances
    @jsondata:Name {value: "instances_url"}
    AlertInstancesUrl instancesUrl;
    # Timestamp when the alert was created
    @jsondata:Name {value: "created_at"}
    AlertCreatedAt createdAt;
    # Comment provided when dismissing the alert
    @jsondata:Name {value: "dismissed_comment"}
    CodeScanningAlertDismissedComment? dismissedComment?;
    # Rule information for code scanning security alerts
    CodeScanningAlertRule rule;
    # A GitHub repository
    SimpleRepository repository;
    # The REST API URL of the alert resource
    AlertUrl url;
    # Tool information for code scanning analysis including name, GUID, and version
    CodeScanningAnalysisTool tool;
    # The security alert number
    AlertNumber number;
    # Timestamp when the alert was last updated
    @jsondata:Name {value: "updated_at"}
    AlertUpdatedAt updatedAt?;
    # The GitHub URL where the code scanning alert can be viewed
    @jsondata:Name {value: "html_url"}
    AlertHtmlUrl htmlUrl;
    # The time when the code scanning alert was fixed
    @jsondata:Name {value: "fixed_at"}
    AlertFixedAt? fixedAt?;
    # The most recent instance of this code scanning alert
    @jsondata:Name {value: "most_recent_instance"}
    CodeScanningAlertInstance mostRecentInstance;
    # State of a code scanning alert
    CodeScanningAlertState state;
    # The user who dismissed the code scanning alert
    @jsondata:Name {value: "dismissed_by"}
    NullableSimpleUser? dismissedBy;
    # The reason for dismissing the code scanning alert
    @jsondata:Name {value: "dismissed_reason"}
    CodeScanningAlertDismissedReason? dismissedReason;
    # The time when the code scanning alert was dismissed
    @jsondata:Name {value: "dismissed_at"}
    AlertDismissedAt? dismissedAt;
};

# Merged branch response message
public type MergedBranchResponse record {
    # Response message for branch merge operation
    string message?;
};

# Request body for generating a new repository from a template
public type TemplateRepoGenerateBody record {
    # The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization
    string owner?;
    # Either `true` to create a new private repository or `false` to create a new public one
    boolean 'private = false;
    # Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`
    @jsondata:Name {value: "include_all_branches"}
    boolean includeAllBranches = false;
    # The name of the new repository
    string name;
    # A short description of the new repository
    string description?;
};

# Represents the Queries record for the operation: actions/list-selected-repos-for-org-secret
public type ActionsListSelectedReposForOrgSecretQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Detailed repository rule with committer email pattern and ruleset info
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf123456789101112 record {
    *RepositoryRuleCommitterEmailPattern;
    *RepositoryRuleRulesetInfo;
};

# Request body for managing user restrictions on branch protection
public type RestrictionsUsersBody ReposownerrepobranchesbranchprotectionrestrictionsusersOneOf1|ReposownerrepobranchesbranchprotectionrestrictionsusersreposownerrepobranchesbranchprotectionrestrictionsusersOneOf12;

# Content File
public type ContentFile record {
    # Navigation links for the content file
    @jsondata:Name {value: "_links"}
    ContentTreeLinks links;
    # Git URL of the submodule if the content is a submodule
    @jsondata:Name {value: "submodule_git_url"}
    string submoduleGitUrl?;
    # The type of content, always 'file' for file content
    "file" 'type;
    # The encoding format of the file content
    string encoding;
    # The SHA hash of the file content
    string sha;
    # Base64-encoded content of the file
    string content;
    # API URL to retrieve the file content
    string url;
    # Target path for symbolic links
    string target?;
    # Full path to the file in the repository
    string path;
    # Size of the file in bytes
    int size;
    # GitHub web URL to view the file
    @jsondata:Name {value: "html_url"}
    string? htmlUrl;
    # Name of the file
    string name;
    # Direct download URL for the file
    @jsondata:Name {value: "download_url"}
    string? downloadUrl;
    # Git blob URL for the file
    @jsondata:Name {value: "git_url"}
    string? gitUrl;
};

# Rule information for code scanning security alerts
public type CodeScanningAlertRule record {
    # The severity of the alert
    "none"|"note"|"warning"|"error"? severity?;
    # Detailed documentation for the rule as GitHub Flavored Markdown
    string? help?;
    # The security severity of the alert
    @jsondata:Name {value: "security_severity_level"}
    "low"|"medium"|"high"|"critical"? securitySeverityLevel?;
    # description of the rule used to detect the alert
    @jsondata:Name {value: "full_description"}
    string fullDescription?;
    # The name of the rule used to detect the alert
    string name?;
    # A short description of the rule used to detect the alert
    string description?;
    # A unique identifier for the rule used to detect the alert
    string? id?;
    # A link to the documentation for the rule used to detect the alert
    @jsondata:Name {value: "help_uri"}
    string? helpUri?;
    # A set of tags applicable for the rule
    string[]? tags?;
};

# The type of credit the user is receiving
public type SecurityAdvisoryCreditTypes "analyst"|"finder"|"reporter"|"coordinator"|"remediation_developer"|"remediation_reviewer"|"remediation_verifier"|"tool"|"sponsor"|"other";

# Represents the Queries record for the operation: projects/list-for-org
public type ProjectsListForOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Indicates the state of the projects to return
    "open"|"closed"|"all" state = "open";
    # Page number of the results to fetch
    int page = 1;
};

# Required status check configuration for protected branches
public type ProtectedBranchRequiredStatusCheckChecks record {
    # Name of the required status check
    string context;
    # The ID of the GitHub App that provides the status check
    @jsondata:Name {value: "app_id"}
    int? appId;
};

# The slug values for teams
public type ReposownerrepobranchesbranchprotectionrestrictionsteamsreposownerrepobranchesbranchprotectionrestrictionsteamsOneOf12 string[];

# Represents the Queries record for the operation: teams/list-members-in-org
public type TeamsListMembersInOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Filters members returned by their role in the team
    "member"|"maintainer"|"all" role = "all";
    # Page number of the results to fetch
    int page = 1;
};

# Branch protection rule with basic identification properties
public type ProtectionRulesProtectionRulesProtectionRulesAnyOf123 record {
    # Unique identifier for the protection rule
    int id;
    # Type of protection rule (e.g., branch_policy)
    string 'type;
    # GraphQL node ID for the protection rule
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# The authorization for an OAuth app, GitHub App, or a Personal Access Token
public type Authorization record {
    # OAuth application information for authorization
    AuthorizationApp app;
    # Optional note describing the authorization
    string? note;
    # URL associated with the authorization note
    @jsondata:Name {value: "note_url"}
    string? noteUrl;
    # Timestamp when the authorization was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # API URL for the authorization resource
    string url;
    # The authorization token string
    string token;
    # Hashed version of the authorization token
    @jsondata:Name {value: "hashed_token"}
    string? hashedToken;
    # Timestamp when the authorization expires
    @jsondata:Name {value: "expires_at"}
    string? expiresAt;
    # Timestamp when the authorization was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # GitHub app installation scoped to specific repositories or account
    NullableScopedInstallation? installation?;
    # Last eight characters of the authorization token
    @jsondata:Name {value: "token_last_eight"}
    string? tokenLastEight;
    # Unique fingerprint identifying the authorization
    string? fingerprint;
    # Unique identifier for the authorization
    int id;
    # A list of scopes that this authorization is in
    string[]? scopes;
    # A GitHub user
    NullableSimpleUser? user?;
};

# A description of the machine powering a codespace
public type NullableCodespaceMachine record {
    # How many cores are available to the codespace
    int cpus;
    # The name of the machine
    string name;
    # Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status
    @jsondata:Name {value: "prebuild_availability"}
    "none"|"ready"|"in_progress"? prebuildAvailability;
    # The operating system of the machine
    @jsondata:Name {value: "operating_system"}
    string operatingSystem;
    # The display name of the machine includes cores, memory, and storage
    @jsondata:Name {value: "display_name"}
    string displayName;
    # How much memory is available to the codespace
    @jsondata:Name {value: "memory_in_bytes"}
    int memoryInBytes;
    # How much storage is available to the codespace
    @jsondata:Name {value: "storage_in_bytes"}
    int storageInBytes;
};

# Whether GitHub Actions is enabled on the repository
public type ActionsEnabled boolean;

# Represents the Queries record for the operation: repos/list-release-assets
public type ReposListReleaseAssetsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Branch protection restrictions configuration with user list
public type ReposownerrepobranchesbranchprotectionrestrictionsusersOneOf1 record {
    # The username for users
    string[] users;
};

# Represents the Queries record for the operation: repos/list-comments-for-commit
public type ReposListCommentsForCommitQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Require at least one approving review on a pull request, before merging. Set to `null` to disable
public type ReposownerrepobranchesbranchprotectionRequiredPullRequestReviews record {
    # Restrictions for dismissing pull request reviews
    @jsondata:Name {value: "dismissal_restrictions"}
    ReposownerrepobranchesbranchprotectionRequiredPullRequestReviewsDismissalRestrictions dismissalRestrictions?;
    # Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers
    @jsondata:Name {value: "required_approving_review_count"}
    int requiredApprovingReviewCount?;
    # Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them
    @jsondata:Name {value: "require_code_owner_reviews"}
    boolean requireCodeOwnerReviews?;
    # Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit
    @jsondata:Name {value: "dismiss_stale_reviews"}
    boolean dismissStaleReviews?;
    # Allowances for bypassing pull request requirements
    @jsondata:Name {value: "bypass_pull_request_allowances"}
    ReposownerrepobranchesbranchprotectionRequiredPullRequestReviewsBypassPullRequestAllowances bypassPullRequestAllowances?;
    # Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
    @jsondata:Name {value: "require_last_push_approval"}
    boolean requireLastPushApproval = false;
};

# Represents the Queries record for the operation: dependabot/list-alerts-for-repo
public type DependabotListAlertsForRepoQueries record {
    # A comma-separated list of severities. If specified, only alerts with these severities will be returned.
    # 
    # Can be: `low`, `medium`, `high`, `critical`
    string severity?;
    # The number of results per page (max 100)
    # 
    # # Deprecated
    @http:Query {name: "per_page"}
    @deprecated
    int perPage = 30;
    # A comma-separated list of package names. If specified, only alerts for these packages will be returned
    string package?;
    # A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
    # 
    # Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
    string ecosystem?;
    # **Deprecated**. The number of results per page (max 100), starting from the last matching result.
    # This parameter must not be used in combination with `first`.
    # Instead, use `per_page` in combination with `before` to fetch the last page of results
    @constraint:Int {minValue: 1, maxValue: 100}
    int last?;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor
    string before?;
    # A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned
    string manifest?;
    # The property by which to sort the results.
    # `created` means when the alert was created.
    # `updated` means when the alert's state last changed
    "created"|"updated" sort = "created";
    # The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned
    "development"|"runtime" scope?;
    # A comma-separated list of states. If specified, only alerts with these states will be returned.
    # 
    # Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
    string state?;
    # **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead
    # 
    # # Deprecated
    @deprecated
    int page = 1;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor
    string after?;
    # **Deprecated**. The number of results per page (max 100), starting from the first matching result.
    # This parameter must not be used in combination with `last`.
    # Instead, use `per_page` in combination with `after` to fetch the first page of results
    @constraint:Int {minValue: 1, maxValue: 100}
    int first = 30;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# A GitHub Classroom classroom
public type SimpleClassroom record {
    # Returns whether classroom is archived or not
    boolean archived;
    # The name of the classroom
    string name;
    # Unique identifier of the classroom
    int id;
    # The url of the classroom on GitHub Classroom
    string url;
};

# Represents the Queries record for the operation: activity/list-public-events-for-user
public type ActivityListPublicEventsForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Org Hook
public type OrgHook record {
    # Timestamp when the organization webhook was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Name of the organization webhook
    string name;
    # Whether the organization webhook is active
    boolean active;
    # Timestamp when the organization webhook was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the organization webhook
    int id;
    # Type of the organization webhook
    string 'type;
    # URL to ping the organization webhook
    @jsondata:Name {value: "ping_url"}
    string pingUrl;
    # Configuration settings for an organization webhook
    OrgHookConfig config;
    # API URL for the organization webhook
    string url;
    # URL for webhook delivery information
    @jsondata:Name {value: "deliveries_url"}
    string deliveriesUrl?;
    # List of events that trigger the webhook
    string[] events;
};

# The name of the status checks
public type ReposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsreposownerrepobranchesbranchprotectionrequiredStatusCheckscontextsOneOf12 string[];

# Represents the Queries record for the operation: activity/list-received-public-events-for-user
public type ActivityListReceivedPublicEventsForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: apps/list-repos-accessible-to-installation
public type AppsListReposAccessibleToInstallationQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for updating a project column
public type ColumnscolumnIdBody record {
    # Name of the project column
    string name;
};

# Statistics about changes made to a gist in its history
public type GistHistoryChangeStatus record {
    # Total number of changes made to the gist
    int total?;
    # Number of lines added to the gist
    int additions?;
    # Number of lines deleted from the gist
    int deletions?;
};

# Request body schema for enabling security products with CodeQL configuration
public type SecurityProductenablementBody record {
    # CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
    # If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.
    "default"|"extended" query_suite?;
};

# An object describing a submodule
public type ContentSubmodule record {
    # The file path of the submodule within the repository
    string path;
    # The size of the submodule content in bytes
    int size;
    # The Git URL of the submodule repository
    @jsondata:Name {value: "submodule_git_url"}
    string submoduleGitUrl;
    # Hypermedia links for the submodule content
    @jsondata:Name {value: "_links"}
    ContentTreeLinks links;
    # The HTML URL to view the submodule on GitHub
    @jsondata:Name {value: "html_url"}
    string? htmlUrl;
    # The name of the submodule file or directory
    string name;
    # The download URL for the submodule content
    @jsondata:Name {value: "download_url"}
    string? downloadUrl;
    # The content type, always 'submodule' for submodule objects
    "submodule" 'type;
    # The Git API URL for the submodule
    @jsondata:Name {value: "git_url"}
    string? gitUrl;
    # The SHA hash of the submodule commit
    string sha;
    # The API URL for the submodule content
    string url;
};

# Represents the Queries record for the operation: licenses/get-all-commonly-used
public type LicensesGetAllCommonlyUsedQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    boolean featured?;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: repos/get-content
public type ReposGetContentQueries record {
    # The name of the commit/branch/tag. Default: the repository’s default branch
    string ref?;
};

# Request body schema for assigning users to an issue
public type IssueNumberAssigneesBody record {
    # Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
    string[] assignees?;
};

# Require all commits be made to a non-target branch and submitted via a pull request before they can be merged
public type RepositoryRulePullRequest record {
    # Rule type identifier for pull request repository rules
    "pull_request" 'type;
    # Configuration parameters for pull request repository rules
    RepositoryRulePullRequestParameters parameters?;
};

# Represents the Queries record for the operation: activity/list-stargazers-for-repo
public type ActivityListStargazersForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body schema with multiple email configuration options
public type UserEmailsBody1 UseremailsOneOf11|UseremailsuseremailsOneOf112|UseremailsuseremailsuseremailsOneOf1123;

# Configuration for required status checks in branch protection policies
public type StatusCheckPolicyChecks record {
    # The name of the status check context
    string context;
    # The ID of the GitHub App that provides this status check
    @jsondata:Name {value: "app_id"}
    int? appId;
};

# The status of a deployment
public type DeploymentStatus record {
    # A GitHub user
    NullableSimpleUser? creator;
    # Deprecated: the URL to associate with this status
    @jsondata:Name {value: "target_url"}
    string targetUrl = "";
    # API URL for the associated deployment
    @jsondata:Name {value: "deployment_url"}
    string deploymentUrl;
    # A short description of the status
    @constraint:String {maxLength: 140}
    string description = "";
    # Timestamp when the deployment status was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # API URL for this deployment status
    string url;
    # The environment of the deployment that the status is for
    string environment = "";
    # The URL for accessing your environment
    @jsondata:Name {value: "environment_url"}
    string environmentUrl = "";
    # Timestamp when the deployment status was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # GitHub App that performed the deployment status action
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp?;
    # The URL to associate with this status
    @jsondata:Name {value: "log_url"}
    string logUrl = "";
    # Unique identifier for the deployment status
    int id;
    # The state of the status
    "error"|"failure"|"inactive"|"pending"|"success"|"queued"|"in_progress" state;
    # API URL for the repository containing the deployment
    @jsondata:Name {value: "repository_url"}
    string repositoryUrl;
    # Global node identifier for the deployment status
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Secrets for GitHub Actions for an organization
public type OrganizationActionsSecret record {
    # The timestamp when the secret was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Visibility of a secret
    "all"|"private"|"selected" visibility;
    # The name of the secret
    string name;
    # API URL for managing repositories that can access this secret
    @jsondata:Name {value: "selected_repositories_url"}
    string selectedRepositoriesUrl?;
    # The timestamp when the secret was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
};

# Timeline Committed Event
public type TimelineCommittedEvent record {
    # Identifying information for the git-user
    GitCommitAuthor committer;
    # Identifying information for the git-user
    GitCommitAuthor author;
    # The web URL for viewing the commit
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Git tree object associated with a commit
    GitCommitTree tree;
    # The type of timeline event
    string event?;
    # Message describing the purpose of the commit
    string message;
    # SHA for the commit
    string sha;
    # The API URL for the commit
    string url;
    # Git commit signature verification details
    GitCommitVerification verification;
    # The global node ID of the commit
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Array of parent commits for this commit
    GitCommitParents[] parents;
};

# Represents the Queries record for the operation: projects/list-columns
public type ProjectsListColumnsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data
public type CodeScanningAnalysisToolGuid string?;

# Request body for adding or updating a repository collaborator
public type CollaboratorsusernameBody record {
    # The permission to grant the collaborator
    "read"|"write"|"admin" permission = "write";
};

# Request body for updating a milestone
public type MilestonesmilestoneNumberBody record {
    # A description of the milestone
    string description?;
    # The state of the milestone. Either `open` or `closed`
    "open"|"closed" state = "open";
    # The title of the milestone
    string title?;
    # The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    @jsondata:Name {value: "due_on"}
    string dueOn?;
};

# Secrets for GitHub Dependabot for an organization
public type OrganizationDependabotSecretResponse record {
    # The total number of Dependabot secrets in the organization
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of organization Dependabot secrets
    OrganizationDependabotSecret[] secrets;
};

# Generated name and body describing a release
public type ReleaseNotesContent record {
    # The generated name of the release
    string name;
    # The generated body describing the contents of the release supporting markdown formatting
    string body;
};

# **Required when the state is dismissed.** The reason for dismissing or closing the alert
public type CodeScanningAlertDismissedReason "false positive"|"won't fix"|"used in tests"?;

# Information about the Git committer
public type NullableSimpleCommitCommitter record {
    # Name of the commit's committer
    string name;
    # Git email address of the commit's committer
    string email;
};

# Represents the Queries record for the operation: actions/list-repo-organization-variables
public type ActionsListRepoOrganizationVariablesQueries record {
    # The number of results per page (max 30)
    @http:Query {name: "per_page"}
    int perPage = 10;
    # Page number of the results to fetch
    int page = 1;
};

# Permission check result for a given devcontainer config
public type CodespacesPermissionsCheckForDevcontainer record {
    # Whether the user has accepted the permissions defined by the devcontainer config
    boolean accepted;
};

# Pages Health Check Status
public type PagesHealthCheck record {
    # Alternative domain configuration for GitHub Pages health check
    @jsondata:Name {value: "alt_domain"}
    PagesHealthCheckAltDomain? altDomain?;
    # Health check results for GitHub Pages domain configuration
    PagesHealthCheckDomain domain?;
};

# Request body for adding reactions to a release
public type ReleaseIdReactionsBody record {
    # The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release
    "+1"|"laugh"|"heart"|"hooray"|"rocket"|"eyes" content;
};

# A GitHub Classroom assignment
public type SimpleClassroomAssignment record {
    # The selected editor for the assignment
    string editor;
    # Whether feedback pull request will be created on assignment acceptance
    @jsondata:Name {value: "feedback_pull_requests_enabled"}
    boolean feedbackPullRequestsEnabled;
    # Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment
    @jsondata:Name {value: "invitations_enabled"}
    boolean invitationsEnabled;
    # Whether students are admins on created repository on accepted assignment
    @jsondata:Name {value: "students_are_repo_admins"}
    boolean studentsAreRepoAdmins;
    # The number of students that have accepted the assignment
    int accepted;
    # The programming language used in the assignment
    string language;
    # A GitHub Classroom classroom
    SimpleClassroom classroom;
    # Assignment title
    string title;
    # Whether it's a Group Assignment or Individual Assignment
    "individual"|"group" 'type;
    # The link that a student can use to accept the assignment
    @jsondata:Name {value: "invite_link"}
    string inviteLink;
    # The number of students that have submitted the assignment
    int submitted;
    # The maximum allowable teams for the assignment
    @jsondata:Name {value: "max_teams"}
    int? maxTeams?;
    # Whether an accepted assignment creates a public repository
    @jsondata:Name {value: "public_repo"}
    boolean publicRepo;
    # The maximum allowable members per team
    @jsondata:Name {value: "max_members"}
    int? maxMembers?;
    # Unique identifier of the repository
    int id;
    # The number of students that have passed the assignment
    int passing;
    # The time at which the assignment is due
    string? deadline;
    # Sluggified name of the assignment
    string slug;
};

# Check Annotation
public type CheckAnnotation record {
    # File path where the annotation applies
    string path;
    # Starting column number for the annotation
    @jsondata:Name {value: "start_column"}
    int? startColumn;
    # Severity level of the annotation (notice, warning, failure)
    @jsondata:Name {value: "annotation_level"}
    string? annotationLevel;
    # URL to the blob file containing the annotation
    @jsondata:Name {value: "blob_href"}
    string blobHref;
    # Raw details or suggestion text for the annotation
    @jsondata:Name {value: "raw_details"}
    string? rawDetails;
    # Starting line number for the annotation
    @jsondata:Name {value: "start_line"}
    int startLine;
    # Title or name of the annotation
    string? title;
    # Descriptive message explaining the annotation
    string? message;
    # Ending line number for the annotation
    @jsondata:Name {value: "end_line"}
    int endLine;
    # Ending column number for the annotation
    @jsondata:Name {value: "end_column"}
    int? endColumn;
};

# Represents the Queries record for the operation: actions/list-selected-repos-for-org-variable
public type ActionsListSelectedReposForOrgVariableQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the source of a rule in a rule suite evaluation
public type RuleSuiteRuleSource record {
    # The name of the rule source
    string? name?;
    # The ID of the rule source
    int? id?;
    # The type of rule source
    string 'type?;
};

# A team discussion is a persistent record of a free-form conversation within a team
public type TeamDiscussion record {
    # HTML-rendered content of the team discussion
    @jsondata:Name {value: "body_html"}
    string bodyHtml;
    # Whether or not this discussion should be pinned for easy retrieval
    boolean pinned;
    # Whether or not this discussion should be restricted to team members and organization administrators
    boolean 'private;
    # The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server
    @jsondata:Name {value: "body_version"}
    string bodyVersion;
    # A GitHub user
    NullableSimpleUser? author;
    # Timestamp when the team discussion was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The main text of the discussion
    string body;
    # The title of the discussion
    string title;
    # API URL for the team discussion
    string url;
    # The unique sequence number of a team discussion
    int number;
    # Timestamp when the team discussion was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Total number of comments on the team discussion
    @jsondata:Name {value: "comments_count"}
    int commentsCount;
    # Web URL for viewing the team discussion on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # API URL for accessing comments on the team discussion
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # Timestamp when the team discussion was last edited
    @jsondata:Name {value: "last_edited_at"}
    string? lastEditedAt;
    # Aggregated count of all reaction types on a GitHub item
    ReactionRollup reactions?;
    # API URL for the team that owns this discussion
    @jsondata:Name {value: "team_url"}
    string teamUrl;
    # Global node identifier for the team discussion
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents a GitHub Actions cache entry with metadata
public type ActionsCacheListActionsCaches record {
    # Git reference associated with the cache entry
    string ref?;
    # Size of the cache entry in bytes
    @jsondata:Name {value: "size_in_bytes"}
    int sizeInBytes?;
    # Timestamp when the cache entry was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # Unique identifier for the Actions cache entry
    int id?;
    # Timestamp when the cache was last accessed in ISO 8601 format
    @jsondata:Name {value: "last_accessed_at"}
    string lastAccessedAt?;
    # Version hash of the cached content
    string version?;
    # Cache key used to identify and retrieve the cached data
    string 'key?;
};

# The source branch and directory used to publish your Pages site
public type RepoPagesBody1 anydata?;

# Information about a Copilot for Business seat assignment for a user, team, or organization
public type CopilotSeatDetails record {|
    # Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # Last editor that was used by the user for a GitHub Copilot completion
    @jsondata:Name {value: "last_activity_editor"}
    string? lastActivityEditor?;
    # Timestamp of user's last GitHub Copilot activity, in ISO 8601 format
    @jsondata:Name {value: "last_activity_at"}
    string? lastActivityAt?;
    # The team that granted access to GitHub Copilot to the assignee. This will be null if the user was assigned a seat individually
    @jsondata:Name {value: "assigning_team"}
    Team? assigningTeam?;
    # Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle
    @jsondata:Name {value: "pending_cancellation_date"}
    string? pendingCancellationDate?;
    # The assignee that has been granted access to GitHub Copilot
    SimpleUser|Team|Organization assignee;
|};

# Array of usernames for branch protection user restrictions
public type ReposownerrepobranchesbranchprotectionrestrictionsusersreposownerrepobranchesbranchprotectionrestrictionsusersOneOf12 string[];

# Represents the Queries record for the operation: users/list-public-emails-for-authenticated-user
public type UsersListPublicEmailsForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Git tree information associated with a commit
public type CommitCommitTree record {
    # SHA hash of the Git tree object
    string sha;
    # API URL to access the Git tree object
    string url;
};

# Request body for updating organization variable configuration
public type VariablesnameBody record {
    # An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`
    @jsondata:Name {value: "selected_repository_ids"}
    int[] selectedRepositoryIds?;
    # The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable
    "all"|"private"|"selected" visibility?;
    # The name of the variable
    string name?;
    # The value of the variable
    string value?;
};

# Represents the Queries record for the operation: repos/list-activities
public type ReposListActivitiesQueries record {
    # The GitHub username to use to filter by the actor who performed the activity
    string actor?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The Git reference for the activities you want to list.
    # 
    # The `ref` for a branch can be formatted either as `refs/heads/BRANCH_NAME` or `BRANCH_NAME`, where `BRANCH_NAME` is the name of your branch
    string ref?;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor
    string before?;
    # The activity type to filter by.
    # 
    # For example, you can choose to filter by "force_push", to see all force pushes to the repository
    @http:Query {name: "activity_type"}
    "push"|"force_push"|"branch_creation"|"branch_deletion"|"pr_merge"|"merge_queue_merge" activityType?;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor
    string after?;
    # The time period to filter by.
    # 
    # For example, `day` will filter for activity that occurred in the past 24 hours, and `week` will filter for activity that occurred in the past 7 days (168 hours)
    @http:Query {name: "time_period"}
    "day"|"week"|"month"|"quarter"|"year" timePeriod?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Metadata for a Git tag
public type GitTag record {
    # Information about the person who tagged the Git object
    GitTagTagger tagger;
    # Name of the tag
    string tag;
    # Message describing the purpose of the tag
    string message;
    # SHA hash of the Git tag object
    string sha;
    # URL for the tag
    string url;
    # Contains verification details for signed commits or tags
    Verification verification?;
    # Global node identifier for the Git tag
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Git tag object containing SHA, type, and URL information
    GitTagObject 'object;
};

# Grade for a student or groups GitHub Classroom assignment
public type ClassroomAssignmentGrade record {
    # URL of the assignment
    @jsondata:Name {value: "assignment_url"}
    string assignmentUrl;
    # Timestamp of the student's assignment submission
    @jsondata:Name {value: "submission_timestamp"}
    string submissionTimestamp;
    # Roster identifier of the student
    @jsondata:Name {value: "roster_identifier"}
    string rosterIdentifier;
    # If a group assignment, name of the group the student is in
    @jsondata:Name {value: "group_name"}
    string groupName?;
    # URL of the student's assignment repository
    @jsondata:Name {value: "student_repository_url"}
    string studentRepositoryUrl;
    # Number of points awarded to the student
    @jsondata:Name {value: "points_awarded"}
    int pointsAwarded;
    # GitHub username of the student
    @jsondata:Name {value: "github_username"}
    string githubUsername;
    # Name of the assignment
    @jsondata:Name {value: "assignment_name"}
    string assignmentName;
    # Number of points available for the assignment
    @jsondata:Name {value: "points_available"}
    int pointsAvailable;
    # URL of the starter code for the assignment
    @jsondata:Name {value: "starter_code_url"}
    string starterCodeUrl;
    # Name of the student's assignment repository
    @jsondata:Name {value: "student_repository_name"}
    string studentRepositoryName;
};

# Label information for pull requests
public type PullRequestSimpleLabels record {
    # Indicates if this is a default repository label
    boolean default;
    # Hexadecimal color code for the label
    string color;
    # Display name of the label
    string name;
    # Optional description text for the label
    string? description;
    # Unique identifier for the label
    int id;
    # API URL for the label resource
    string url;
    # Global node identifier for GraphQL API
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Repository deletion rule with detailed ruleset information
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf123 record {
    *RepositoryRuleDeletion;
    *RepositoryRuleRulesetInfo;
};

# Repository linear history rule with detailed ruleset information
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf1234 record {
    *RepositoryRuleRequiredLinearHistory;
    *RepositoryRuleRulesetInfo;
};

# A suite of checks performed on the code of a given code change
public type CheckSuite record {
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub
    NullableIntegration? app;
    # Commit object at the head of the check suite
    @jsondata:Name {value: "head_commit"}
    SimpleCommit headCommit;
    # Name of the branch where the check suite was run
    @jsondata:Name {value: "head_branch"}
    string? headBranch;
    # SHA of the commit before the check suite
    string? before;
    # The timestamp when the check suite was created
    @jsondata:Name {value: "created_at"}
    string? createdAt;
    # Minimal Repository
    MinimalRepository repository;
    # The SHA of the head commit that is being checked
    @jsondata:Name {value: "head_sha"}
    string headSha;
    # The API URL for the check suite
    string? url;
    # The final conclusion of the check suite
    "success"|"failure"|"neutral"|"cancelled"|"skipped"|"timed_out"|"action_required"|"startup_failure"|"stale"? conclusion;
    # Array of pull requests associated with the check suite
    @jsondata:Name {value: "pull_requests"}
    PullRequestMinimal[]? pullRequests;
    # The timestamp when the check suite was last updated
    @jsondata:Name {value: "updated_at"}
    string? updatedAt;
    # The count of the latest check runs in the suite
    @jsondata:Name {value: "latest_check_runs_count"}
    int latestCheckRunsCount;
    # Whether the check suite can be re-requested
    boolean rerequestable?;
    # Whether the check runs in the suite can be re-requested
    @jsondata:Name {value: "runs_rerequestable"}
    boolean runsRerequestable?;
    # The unique identifier of the check suite
    int id;
    # The SHA of the commit after which the check suite was created
    string? after;
    # The API URL for the check runs in this suite
    @jsondata:Name {value: "check_runs_url"}
    string checkRunsUrl;
    # The GraphQL node ID of the check suite
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # The current status of the check suite
    "queued"|"in_progress"|"completed"? status;
};

# Represents the Queries record for the operation: orgs/list-members
public type OrgsListMembersQueries record {
    # Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners
    "2fa_disabled"|"all" filter = "all";
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Filter members returned by their role
    "all"|"admin"|"member" role = "all";
    # Page number of the results to fetch
    int page = 1;
};

# Response containing repository content as directory, file, symlink, or submodule
public type RepositoryContentResponse ContentDirectory|ContentFile|ContentSymlink|ContentSubmodule;

# The name of the package affected by the vulnerability
public type RepositoryAdvisoryCreatePackage record {
    # The package's language or package management ecosystem
    SecurityAdvisoryEcosystems ecosystem;
    # The unique package name within its ecosystem
    string? name?;
};

# Links related to a simple pull request representation
public type PullRequestSimpleLinks record {
    # Hypermedia Link
    Link comments;
    # Hypermedia Link
    Link issue;
    # Hypermedia Link
    Link commits;
    # Hypermedia Link
    Link statuses;
    # Link to the pull request's review comments
    @jsondata:Name {value: "review_comments"}
    Link reviewComments;
    # Hypermedia Link
    Link self;
    # Hypermedia Link
    Link html;
    # Link to review comments for the pull request
    @jsondata:Name {value: "review_comment"}
    Link reviewComment;
};

# Details for the GitHub Security Advisory
public type DependabotAlertSecurityAdvisory record {|
    # A short, plain text summary of the advisory
    @constraint:String {maxLength: 1024}
    string summary;
    # The severity of the advisory
    "low"|"medium"|"high"|"critical" severity;
    # Links to additional advisory information
    DependabotAlertSecurityAdvisoryReferences[] references;
    # Values that identify this advisory among security information sources
    DependabotAlertSecurityAdvisoryIdentifiers[] identifiers;
    # A long-form Markdown-supported description of the advisory
    string description;
    # Details for the advisory pertaining to Common Weakness Enumeration
    DependabotAlertSecurityAdvisoryCwes[] cwes;
    # The unique GitHub Security Advisory ID assigned to the advisory
    @jsondata:Name {value: "ghsa_id"}
    string ghsaId;
    # The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The unique CVE ID assigned to the advisory
    @jsondata:Name {value: "cve_id"}
    string? cveId;
    # Vulnerable version range information for the advisory
    DependabotAlertSecurityVulnerability[] vulnerabilities;
    # The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
    @jsondata:Name {value: "withdrawn_at"}
    string? withdrawnAt;
    # The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
    @jsondata:Name {value: "published_at"}
    string publishedAt;
    # Details for the advisory pertaining to the Common Vulnerability Scoring System
    DependabotAlertSecurityAdvisoryCvss cvss;
|};

# Details of a deployment environment
public type EnvironmentResponse record {
    # Array of environment objects
    Environment[] environments?;
    # The number of environments in this repository
    @jsondata:Name {value: "total_count"}
    int totalCount?;
};

# The total number of seat assignments cancelled
public type CopilotSeatCancelled record {
    # Number of Copilot seats that were cancelled
    @jsondata:Name {value: "seats_cancelled"}
    int seatsCancelled;
};

# Referrer Traffic
public type ReferrerTraffic record {
    # The referring site name
    string referrer;
    # Total number of views from this referrer
    int count;
    # Number of unique visitors from this referrer
    int uniques;
};

# Represents a rule suite evaluation with results and metadata
public type RuleSuitesInner record {
    # The result of the rule evaluations for rules with the `active` enforcement status
    "pass"|"fail"|"bypass" result?;
    # The first commit sha before the push evaluation
    @jsondata:Name {value: "before_sha"}
    string beforeSha?;
    # The ref name that the evaluation ran on
    string ref?;
    # The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`
    @jsondata:Name {value: "evaluation_result"}
    "pass"|"fail" evaluationResult?;
    # Timestamp when the push occurred
    @jsondata:Name {value: "pushed_at"}
    string pushedAt?;
    # The handle for the GitHub user account
    @jsondata:Name {value: "actor_name"}
    string actorName?;
    # The ID of the repository associated with the rule evaluation
    @jsondata:Name {value: "repository_id"}
    int repositoryId?;
    # The unique identifier of the rule insight
    int id?;
    # The number that identifies the user
    @jsondata:Name {value: "actor_id"}
    int actorId?;
    # The last commit sha in the push evaluation
    @jsondata:Name {value: "after_sha"}
    string afterSha?;
    # The name of the repository without the `.git` extension
    @jsondata:Name {value: "repository_name"}
    string repositoryName?;
};

# A GitHub user
public type SimpleUser record {
    # API URL template for the user's gists
    @jsondata:Name {value: "gists_url"}
    string gistsUrl;
    # API URL for the user's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # API URL template for users this user is following
    @jsondata:Name {value: "following_url"}
    string followingUrl;
    # API URL template for the user's starred repositories
    @jsondata:Name {value: "starred_url"}
    string starredUrl;
    # The user's GitHub username
    string login;
    # API URL for the user's followers
    @jsondata:Name {value: "followers_url"}
    string followersUrl;
    # The type of GitHub account
    string 'type;
    # Timestamp when the user starred a repository
    @jsondata:Name {value: "starred_at"}
    string starredAt?;
    # API URL for the user
    string url;
    # API URL for the user's repository subscriptions
    @jsondata:Name {value: "subscriptions_url"}
    string subscriptionsUrl;
    # API URL for events received by the user
    @jsondata:Name {value: "received_events_url"}
    string receivedEventsUrl;
    # URL of the user's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # API URL template for the user's events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # GitHub profile URL for the user
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Display name of the user
    string? name?;
    # Whether the user is a GitHub site administrator
    @jsondata:Name {value: "site_admin"}
    boolean siteAdmin;
    # Unique identifier for the user
    int id;
    # Gravatar ID associated with the user's email
    @jsondata:Name {value: "gravatar_id"}
    string? gravatarId;
    # Email address of the user
    string? email?;
    # GraphQL node ID for the user
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # API URL for the user's organizations
    @jsondata:Name {value: "organizations_url"}
    string organizationsUrl;
};

# Request body for updating a gist's description and files
public type GistsgistIdBody record {
    # The description of the gist
    string description?;
    # The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
    # (including extension) of the targeted gist file. For example: `hello.py`.
    # 
    # To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be
    # deleted if the specified object does not contain at least one of `content` or `filename`
    record {|GistsgistIdFiles?...;|} files?;
};

# Configuration object for GitHub Advanced Security feature settings
public type SecurityAndAnalysisAdvancedSecurity record {
    # Current status of Advanced Security feature (enabled or disabled)
    "enabled"|"disabled" status?;
};

# Billable workflow usage statistics for Ubuntu runners
public type WorkflowUsageBillableUBUNTU record {
    # Total billable milliseconds consumed by Ubuntu runners
    @jsondata:Name {value: "total_ms"}
    int totalMs?;
};

# Team information for branch protection restriction policies
public type BranchRestrictionPolicyTeams record {
    # Parent team identifier, null if no parent team exists
    string? parent?;
    # API URL to access team's repositories
    @jsondata:Name {value: "repositories_url"}
    string repositoriesUrl?;
    # API URL to access team members
    @jsondata:Name {value: "members_url"}
    string membersUrl?;
    # Team description text, null if no description provided
    string? description?;
    # Team privacy setting (public, closed, or secret)
    string privacy?;
    # Team permission level (pull, push, admin, maintain, or triage)
    string permission?;
    # API URL for the team resource
    string url?;
    # Team notification setting configuration
    @jsondata:Name {value: "notification_setting"}
    string notificationSetting?;
    # Web URL to view the team on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # Display name of the team
    string name?;
    # Unique identifier for the team in branch restriction policy
    int id?;
    # URL-friendly name of the team in branch restriction policy
    string slug?;
    # Global node identifier for the team in GraphQL format
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Represents the Queries record for the operation: repos/list-autolinks
public type ReposListAutolinksQueries record {
    # Page number of the results to fetch
    int page = 1;
};

# Configuration for requiring linear history on protected branches
public type ProtectedBranchRequiredLinearHistory record {|
    # Whether linear history requirement is enabled for the protected branch
    boolean enabled;
|};

# Represents the Queries record for the operation: repos/list-deployments
public type ReposListDeploymentsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The name of the ref. This can be a branch, tag, or SHA
    string ref = "none";
    # The name of the environment that was deployed to (e.g., `staging` or `production`)
    string? environment = "none";
    # The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`)
    string task = "none";
    # Page number of the results to fetch
    int page = 1;
    # The SHA recorded at creation time
    string sha = "none";
};

# object containing information about the author
public type ReposownerrepocontentspathAuthor1 record {
    # The name of the author (or committer) of the commit
    string name?;
    # The email of the author (or committer) of the commit
    string email?;
};

# Represents the Queries record for the operation: packages/restore-package-for-user
public type PackagesRestorePackageForUserQueries record {
    # package token
    string token?;
};

# Represents the Queries record for the operation: users/list-social-accounts-for-user
public type UsersListSocialAccountsForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Configuration for SSL verification settings in webhook requests
public type WebhookConfigInsecureSsl WebhookConfigInsecureSslOneOf1|WebhookConfigInsecureSslWebhookConfigInsecureSslOneOf12;

# Parameters for repository rule that validates commit message patterns
public type RepositoryRuleCommitMessagePatternParameters record {
    # If true, the rule will fail if the pattern matches
    boolean negate?;
    # How this rule will appear to users
    string name?;
    # The pattern to match with
    string pattern;
    # The operator to use for matching
    "starts_with"|"ends_with"|"contains"|"regex" operator;
};

# Permission levels for teams or users in branch restriction policies
public type BranchRestrictionPolicyPermissions record {
    # Metadata permission level for branch restriction policy
    string metadata?;
    # Single file permission level for branch restriction policy
    @jsondata:Name {value: "single_file"}
    string singleFile?;
    # Contents permission level for branch restriction policy
    string contents?;
    # Issues permission level for branch restriction policy
    string issues?;
};

# Represents the Queries record for the operation: actions/list-workflow-run-artifacts
public type ActionsListWorkflowRunArtifactsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The name field of an artifact. When specified, only artifacts with this name will be returned
    string name?;
    # Page number of the results to fetch
    int page = 1;
};

# Request body schema for creating a new repository issue
public type RepoIssuesBody record {
    # Milestone number or string to associate with the issue
    string|int? milestone?;
    # Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
    string[] assignees?;
    # Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
    string? assignee?;
    # The title of the issue
    string|int title;
    # The contents of the issue
    string body?;
    # Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
    ReposownerrepoissuesLabels[] labels?;
};

# Pull Request Merge Result
public type PullRequestMergeResult record {
    # Indicates whether the pull request was successfully merged
    boolean merged;
    # Message describing the merge result or error details
    string message;
    # SHA hash of the merge commit created
    string sha;
};

# The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
public type AlertAutoDismissedAt string?;

# Represents the Queries record for the operation: issues/list
public type IssuesListQueries record {
    # Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation
    "assigned"|"created"|"mentioned"|"subscribed"|"repos"|"all" filter = "assigned";
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    boolean collab?;
    boolean owned?;
    # Indicates the state of the issues to return
    "open"|"closed"|"all" state = "open";
    # What to sort results by
    "created"|"updated"|"comments" sort = "created";
    boolean orgs?;
    # Page number of the results to fetch
    int page = 1;
    # A list of comma separated label names. Example: `bug,ui,@high`
    string labels?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
    boolean pulls?;
};

# Label Search Result Item
public type LabelSearchResultItemResponse record {
    # Total number of labels matching the search criteria
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Indicates if search results are incomplete due to timeout
    @jsondata:Name {value: "incomplete_results"}
    boolean incompleteResults;
    # Array of label search result items
    LabelSearchResultItem[] items;
};

# Nullable schema for issue labels with multiple format options
public type NullableIssueLabels LabelsOneOf13|LabelsLabelsOneOf132;

# GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub
public type Integration record {
    # A GitHub user
    NullableSimpleUser? owner;
    # The number of installations associated with the GitHub app
    @jsondata:Name {value: "installations_count"}
    int installationsCount?;
    # A brief description of the GitHub app integration
    string? description;
    # Timestamp when the integration was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # OAuth client identifier for the GitHub app
    @jsondata:Name {value: "client_id"}
    string clientId?;
    # External homepage URL for the GitHub app
    @jsondata:Name {value: "external_url"}
    string externalUrl;
    # Timestamp when the integration was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The set of permissions for the GitHub app
    IntegrationPermissions permissions;
    # GitHub web URL for the app's public page
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # The name of the GitHub app
    string name;
    # Secret token used to validate webhook payloads
    @jsondata:Name {value: "webhook_secret"}
    string? webhookSecret?;
    # PEM-encoded RSA private key for GitHub app authentication
    string pem?;
    # Unique identifier of the GitHub app
    int id;
    # OAuth client secret for the GitHub app
    @jsondata:Name {value: "client_secret"}
    string clientSecret?;
    # The slug name of the GitHub app
    string slug?;
    # The list of events for the GitHub app
    string[] events;
    # Global node identifier for the integration
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: code-scanning/delete-analysis
public type CodeScanningDeleteAnalysisQueries record {
    # Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
    @http:Query {name: "confirm_delete"}
    string? confirmDelete?;
};

# A description of the machine powering a codespace
public type CodespaceMachine record {
    # How many cores are available to the codespace
    int cpus;
    # The name of the machine
    string name;
    # Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status
    @jsondata:Name {value: "prebuild_availability"}
    "none"|"ready"|"in_progress"? prebuildAvailability;
    # The operating system of the machine
    @jsondata:Name {value: "operating_system"}
    string operatingSystem;
    # The display name of the machine includes cores, memory, and storage
    @jsondata:Name {value: "display_name"}
    string displayName;
    # How much memory is available to the codespace
    @jsondata:Name {value: "memory_in_bytes"}
    int memoryInBytes;
    # How much storage is available to the codespace
    @jsondata:Name {value: "storage_in_bytes"}
    int storageInBytes;
};

# Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a ref that matches this rule after status checks have passed
public type RepositoryRuleRequiredStatusChecks record {
    # Rule type identifier for required status checks
    "required_status_checks" 'type;
    # Parameters for required status checks repository rule
    RepositoryRuleRequiredStatusChecksParameters parameters?;
};

# Represents the Queries record for the operation: repos/list-teams
public type ReposListTeamsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: orgs/list-pat-grants
public type OrgsListPatGrantsQueries record {
    # A list of owner usernames to use to filter the results
    @constraint:Array {maxLength: 10}
    string[] owner?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    @http:Query {name: "last_used_before"}
    string lastUsedBefore?;
    # Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    @http:Query {name: "last_used_after"}
    string lastUsedAfter?;
    # The permission to use to filter the results
    string permission?;
    # Page number of the results to fetch
    int page = 1;
    # The property by which to sort the results
    "created_at" sort = "created_at";
    # The name of the repository to use to filter the results
    string repository?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# GitHub app installation scoped to specific repositories or account
public type NullableScopedInstallation record {
    # Describe whether all repositories have been selected or there's a selection involved
    @jsondata:Name {value: "repository_selection"}
    "all"|"selected" repositorySelection;
    # API URL to access repositories for this installation
    @jsondata:Name {value: "repositories_url"}
    string repositoriesUrl;
    # The permissions granted to the user access token
    AppPermissions permissions;
    # Name of single file the app has access to, if applicable
    @jsondata:Name {value: "single_file_name"}
    string? singleFileName;
    # Indicates if the installation has multiple single file permissions
    @jsondata:Name {value: "has_multiple_single_files"}
    boolean hasMultipleSingleFiles?;
    # Array of file paths that the installation has access to
    @jsondata:Name {value: "single_file_paths"}
    string[] singleFilePaths?;
    # A GitHub user
    SimpleUser account;
};

# GitHub Actions variable with name, value, and timestamps
public type ActionsVariable record {
    # The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The name of the variable
    string name;
    # The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The value of the variable
    string value;
};

# Commit
public type Commit record {
    # A GitHub user
    NullableSimpleUser? committer;
    # Statistics about file changes in a commit
    CommitStats stats?;
    # A GitHub user
    NullableSimpleUser? author;
    # GitHub web URL for viewing the commit
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # API URL for accessing commit comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # Git commit information including author, message, and metadata
    CommitCommit 'commit;
    # Array of files changed in the commit
    DiffEntry[] files?;
    # SHA hash identifier of the commit
    string sha;
    # API URL for the commit resource
    string url;
    # Global node ID for the commit
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Array of parent commits
    CommitParents[] parents;
};

# Restrictions on who can dismiss pull request reviews on protected branches
public type ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions record {
    # API URL for teams with dismissal permissions
    @jsondata:Name {value: "teams_url"}
    string teamsUrl;
    # Teams allowed to dismiss pull request reviews
    Team[] teams;
    # API URL for users with dismissal permissions
    @jsondata:Name {value: "users_url"}
    string usersUrl;
    # API URL for the dismissal restrictions resource
    string url;
    # Users allowed to dismiss pull request reviews
    SimpleUser[] users;
    # Apps allowed to dismiss pull request reviews
    Integration[] apps?;
};

# Details pertaining to one vulnerable version range for the advisory
public type DependabotAlertSecurityVulnerability record {|
    # The severity of the vulnerability
    "low"|"medium"|"high"|"critical" severity;
    # First version that patches this vulnerability
    @jsondata:Name {value: "first_patched_version"}
    DependabotAlertSecurityVulnerabilityFirstPatchedVersion? firstPatchedVersion;
    # Details for the vulnerable package
    DependabotAlertPackage package;
    # Conditions that identify vulnerable versions of this vulnerability's package
    @jsondata:Name {value: "vulnerable_version_range"}
    string vulnerableVersionRange;
|};

# Parameters for a repository ruleset ref name condition
public type RepositoryRulesetConditions record {
    # Reference name conditions for repository ruleset
    @jsondata:Name {value: "ref_name"}
    RepositoryRulesetConditionsRefName refName?;
};

# You can use `run_url` to track the status of the run. This includes a property status and conclusion.
# You should not rely on this always being an actions workflow run object
public type CodeScanningDefaultSetupUpdateResponse record {
    # ID of the corresponding run
    @jsondata:Name {value: "run_id"}
    int runId?;
    # URL of the corresponding run
    @jsondata:Name {value: "run_url"}
    string runUrl?;
};

# Timeline Commit Commented Event
public type TimelineCommitCommentedEvent record {
    # Comments associated with the commit event
    CommitComment[] comments?;
    # Event type identifier
    string event?;
    # SHA identifier of the commented commit
    @jsondata:Name {value: "commit_id"}
    string commitId?;
    # GraphQL node identifier for the event
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Represents the Queries record for the operation: repos/list-for-authenticated-user
public type ReposListForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Limit results to repositories with the specified visibility
    "all"|"public"|"private" visibility = "all";
    # Comma-separated list of values. Can include:  
    #  * `owner`: Repositories that are owned by the authenticated user.  
    #  * `collaborator`: Repositories that the user has been added to as a collaborator.  
    #  * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on
    string affiliation = "owner,collaborator,organization_member";
    # Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string before?;
    # The property to sort the results by
    "created"|"updated"|"pushed"|"full_name" sort = "full_name";
    # Page number of the results to fetch
    int page = 1;
    # Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**
    "all"|"owner"|"public"|"private"|"member" 'type = "all";
    # The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`
    "asc"|"desc" direction?;
    # Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Represents the Queries record for the operation: pulls/list-review-comments-for-repo
public type PullsListReviewCommentsForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    "created"|"updated"|"created_at" sort?;
    # Page number of the results to fetch
    int page = 1;
    # The direction to sort results. Ignored without `sort` parameter
    "asc"|"desc" direction?;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Represents the Queries record for the operation: users/list-public-ssh-keys-for-authenticated-user
public type UsersListPublicSshKeysForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# GitHub API service domains for various features and services
public type ApiOverviewDomains record {
    # List of domains used for GitHub website services
    string[] website?;
    # List of domains used for GitHub Copilot services
    string[] copilot?;
    # List of domains used for GitHub Codespaces services
    string[] codespaces?;
    # List of domains used for GitHub Packages services
    string[] packages?;
};

# A Dependabot alert
public type DependabotAlert record {|
    # Details for the vulnerable dependency
    DependabotAlertWithRepositoryDependency dependency;
    # Security advisory information for the alert
    @jsondata:Name {value: "security_advisory"}
    DependabotAlertSecurityAdvisory securityAdvisory;
    # Vulnerability details for the alert
    @jsondata:Name {value: "security_vulnerability"}
    DependabotAlertSecurityVulnerability securityVulnerability;
    # Timestamp when the alert was created
    @jsondata:Name {value: "created_at"}
    AlertCreatedAt createdAt;
    # An optional comment associated with the alert's dismissal
    @jsondata:Name {value: "dismissed_comment"}
    string? dismissedComment;
    # Timestamp when the alert was automatically dismissed
    @jsondata:Name {value: "auto_dismissed_at"}
    AlertAutoDismissedAt? autoDismissedAt?;
    # The REST API URL of the alert resource
    AlertUrl url;
    # The security alert number
    AlertNumber number;
    # Timestamp when the alert was last updated
    @jsondata:Name {value: "updated_at"}
    AlertUpdatedAt updatedAt;
    # Web URL to view the alert
    @jsondata:Name {value: "html_url"}
    AlertHtmlUrl htmlUrl;
    # The timestamp when the Dependabot alert was fixed
    @jsondata:Name {value: "fixed_at"}
    AlertFixedAt? fixedAt;
    # The state of the Dependabot alert
    "auto_dismissed"|"dismissed"|"fixed"|"open" state;
    # The user who dismissed the Dependabot alert
    @jsondata:Name {value: "dismissed_by"}
    NullableSimpleUser? dismissedBy;
    # The reason that the alert was dismissed
    @jsondata:Name {value: "dismissed_reason"}
    "fix_started"|"inaccurate"|"no_bandwidth"|"not_used"|"tolerable_risk"? dismissedReason;
    # The timestamp when the Dependabot alert was dismissed
    @jsondata:Name {value: "dismissed_at"}
    AlertDismissedAt? dismissedAt;
|};

# Team Organization
public type TeamOrganization record {
    # API URL to access the organization's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # Whether organization members can create internal repositories
    @jsondata:Name {value: "members_can_create_internal_repositories"}
    boolean membersCanCreateInternalRepositories?;
    # Whether organization members can create public GitHub Pages
    @jsondata:Name {value: "members_can_create_public_pages"}
    boolean membersCanCreatePublicPages?;
    # URL of the organization's blog or website
    string blog?;
    # The type of the GitHub entity, typically 'Organization'
    string 'type;
    # API URL template to access the organization's public members
    @jsondata:Name {value: "public_members_url"}
    string publicMembersUrl;
    # Number of private gists owned by the organization
    @jsondata:Name {value: "private_gists"}
    int? privateGists?;
    # Default permission level for organization repositories
    @jsondata:Name {value: "default_repository_permission"}
    string? defaultRepositoryPermission?;
    # Email address used for billing notifications
    @jsondata:Name {value: "billing_email"}
    string? billingEmail?;
    # Total disk space used by the organization in bytes
    @jsondata:Name {value: "disk_usage"}
    int? diskUsage?;
    # Number of collaborators in the organization
    int? collaborators?;
    # Unique identifier for the organization
    int id;
    # Organization billing plan details including repositories, seats, and storage
    OrganizationFullPlan plan?;
    # Whether members can create private GitHub Pages
    @jsondata:Name {value: "members_can_create_private_pages"}
    boolean membersCanCreatePrivatePages?;
    # Whether members can create repositories
    @jsondata:Name {value: "members_can_create_repositories"}
    boolean? membersCanCreateRepositories?;
    # Whether members can create private repositories
    @jsondata:Name {value: "members_can_create_private_repositories"}
    boolean membersCanCreatePrivateRepositories?;
    # Number of public gists owned by the organization
    @jsondata:Name {value: "public_gists"}
    int publicGists;
    # Number of users following the organization
    int followers;
    # Whether the organization has projects enabled
    @jsondata:Name {value: "has_organization_projects"}
    boolean hasOrganizationProjects;
    # Number of users the organization is following
    int following;
    # Public web URL of the organization profile
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Display name of the organization
    string name?;
    # API URL for managing organization webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # Whether the organization has repository projects enabled
    @jsondata:Name {value: "has_repository_projects"}
    boolean hasRepositoryProjects;
    # URL template for accessing organization members
    @jsondata:Name {value: "members_url"}
    string membersUrl;
    # Twitter username associated with the organization
    @jsondata:Name {value: "twitter_username"}
    string? twitterUsername?;
    # Description of the organization
    string? description;
    # Timestamp when the organization was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Login name of the organization
    string login;
    # Total number of private repositories in the organization
    @jsondata:Name {value: "total_private_repos"}
    int totalPrivateRepos?;
    # Timestamp when the organization was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Repository creation permissions for organization members
    @jsondata:Name {value: "members_allowed_repository_creation_type"}
    string membersAllowedRepositoryCreationType?;
    # Whether members can fork private repositories
    @jsondata:Name {value: "members_can_fork_private_repositories"}
    boolean? membersCanForkPrivateRepositories?;
    # Company name associated with the organization
    string company?;
    # Number of private repositories owned by the organization
    @jsondata:Name {value: "owned_private_repos"}
    int ownedPrivateRepos?;
    # Number of public repositories owned by the organization
    @jsondata:Name {value: "public_repos"}
    int publicRepos;
    # Email address associated with the organization
    string email?;
    # Whether two-factor authentication is required for members
    @jsondata:Name {value: "two_factor_requirement_enabled"}
    boolean? twoFactorRequirementEnabled?;
    # Timestamp when the team organization was archived
    @jsondata:Name {value: "archived_at"}
    string? archivedAt;
    # Whether the organization is verified by GitHub
    @jsondata:Name {value: "is_verified"}
    boolean isVerified?;
    # Whether web-based commits require signoff for the organization
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired?;
    # API URL for the team organization
    string url;
    # Whether organization members can create public repositories
    @jsondata:Name {value: "members_can_create_public_repositories"}
    boolean membersCanCreatePublicRepositories?;
    # API URL for the organization's issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # URL of the organization's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # API URL for the organization's public events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # Whether organization members can create GitHub Pages sites
    @jsondata:Name {value: "members_can_create_pages"}
    boolean membersCanCreatePages?;
    # Geographic location of the organization
    string location?;
    # Global node identifier for the organization
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: repos/list-custom-deployment-rule-integrations
public type ReposListCustomDeploymentRuleIntegrationsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: issues/list-for-authenticated-user
public type IssuesListForAuthenticatedUserQueries record {
    # Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation
    "assigned"|"created"|"mentioned"|"subscribed"|"repos"|"all" filter = "assigned";
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Indicates the state of the issues to return
    "open"|"closed"|"all" state = "open";
    # What to sort results by
    "created"|"updated"|"comments" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # A list of comma separated label names. Example: `bug,ui,@high`
    string labels?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Request body for updating project settings and permissions
public type ProjectsprojectIdBody1 record {
    # Whether or not this project can be seen by everyone
    boolean 'private?;
    # The baseline permission that all organization members have on this project
    @jsondata:Name {value: "organization_permission"}
    "read"|"write"|"admin"|"none" organizationPermission?;
    # Name of the project
    string name?;
    # State of the project; either 'open' or 'closed'
    string state?;
    # Body of the project
    string? body?;
};

# Activity
public type Activity record {
    # A GitHub user
    NullableSimpleUser? actor;
    # The full Git reference, formatted as `refs/heads/<branch name>`
    string ref;
    # The SHA of the commit before the activity
    string before;
    # The type of the activity that was performed
    @jsondata:Name {value: "activity_type"}
    "push"|"force_push"|"branch_deletion"|"branch_creation"|"pr_merge"|"merge_queue_merge" activityType;
    # The unique identifier of the activity
    int id;
    # The SHA of the commit after the activity
    string after;
    # The global node ID of the activity
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # The time when the activity occurred
    string timestamp;
};

# Request body for setting team permissions on a project
public type ProjectsprojectIdBody2 record {
    # The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
    "read"|"write"|"admin" permission?;
};

# Permission levels for repository template access
public type RepositoryTemplateRepositoryPermissions record {
    # Whether the user has pull access to the repository template
    boolean pull?;
    # Whether the user has maintain access to the repository template
    boolean maintain?;
    # Whether the user has admin access to the repository template
    boolean admin?;
    # Whether the user has triage access to the repository template
    boolean triage?;
    # Whether the user has push access to the repository template
    boolean push?;
};

# Git commit information including author, message, and metadata
public type CommitCommit record {
    # Number of comments on the commit
    @jsondata:Name {value: "comment_count"}
    int commentCount;
    # Metaproperties for Git author/committer information
    NullableGitUser? committer;
    # Metaproperties for Git author/committer information
    NullableGitUser? author;
    # Git tree information associated with a commit
    CommitCommitTree tree;
    # The commit message
    string message;
    # API URL for the commit
    string url;
    # Contains verification details for signed commits or tags
    Verification verification?;
};

# File information contained within a gist
public type BaseGistFiles record {
    # The name of the file
    string filename?;
    # The size of the file in bytes
    int size?;
    # The programming language of the file
    string language?;
    # The MIME type of the file
    string 'type?;
    # The URL to the raw file content
    @jsondata:Name {value: "raw_url"}
    string rawUrl?;
};

# Configuration settings for a webhook
public type HookIdConfigBody record {|
    # The media type used to serialize the payloads
    @jsondata:Name {value: "content_type"}
    WebhookConfigContentType contentType?;
    # Determines whether SSL certificate verification is enforced
    @jsondata:Name {value: "insecure_ssl"}
    WebhookConfigInsecureSsl insecureSsl?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers)
    WebhookConfigSecret secret?;
    # The URL to which the payloads will be delivered
    WebhookConfigUrl url?;
|};

# Issue Event
public type IssueEvent record {
    # Team that was requested for review
    @jsondata:Name {value: "requested_team"}
    Team requestedTeam?;
    # Details of the dismissed review
    @jsondata:Name {value: "dismissed_review"}
    IssueEventDismissedReview dismissedReview?;
    # Issues are a great way to keep track of tasks, enhancements, and bugs for your projects
    NullableIssue? issue?;
    # Reason the issue was locked
    @jsondata:Name {value: "lock_reason"}
    string? lockReason?;
    # A GitHub user
    NullableSimpleUser? assigner?;
    # Timestamp when the event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # User that was requested as reviewer
    @jsondata:Name {value: "requested_reviewer"}
    NullableSimpleUser? requestedReviewer?;
    # Issue Event Label
    IssueEventLabel label?;
    # API URL for the issue event
    string url;
    # Project card associated with the event
    @jsondata:Name {value: "project_card"}
    IssueEventProjectCard projectCard?;
    # A GitHub user
    NullableSimpleUser? actor;
    # Author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation?;
    # API URL for the associated commit
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # User who requested the review
    @jsondata:Name {value: "review_requester"}
    NullableSimpleUser? reviewRequester?;
    # Issue Event Milestone
    IssueEventMilestone milestone?;
    # GitHub App that performed the event
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp?;
    # Issue Event Rename
    IssueEventRename rename?;
    # Unique identifier for the issue event
    int id;
    # A GitHub user
    NullableSimpleUser? assignee?;
    # The type of event that occurred on the issue
    string event;
    # The SHA of the commit that referenced this issue
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # The global node ID of the issue event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Timeline Comment Event
public type TimelineCommentEvent record {
    # The URL of the issue associated with this comment
    @jsondata:Name {value: "issue_url"}
    string issueUrl;
    # The HTML-rendered comment body
    @jsondata:Name {value: "body_html"}
    string bodyHtml?;
    # The plain text version of the comment body
    @jsondata:Name {value: "body_text"}
    string bodyText?;
    # ISO 8601 timestamp when the comment was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Contents of the issue comment
    string body?;
    # URL for the issue comment
    string url;
    # A GitHub user
    SimpleUser actor;
    # Author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # ISO 8601 timestamp when the comment was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # GitHub App that performed this action, if applicable
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp?;
    # URL to view the comment in GitHub's web interface
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Aggregated count of all reaction types on a GitHub item
    ReactionRollup reactions?;
    # Unique identifier of the issue comment
    int id;
    # Type of timeline event
    string event;
    # A GitHub user
    SimpleUser user;
    # Global node identifier for GraphQL API
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Timeline Line Commented Event
public type TimelineLineCommentedEvent record {
    # Array of pull request review comments
    PullRequestReviewComment[] comments?;
    # Type of timeline event
    string event?;
    # Global node identifier for GraphQL API
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Parameters for required status checks repository rule
public type RepositoryRuleRequiredStatusChecksParameters record {
    # Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled
    @jsondata:Name {value: "strict_required_status_checks_policy"}
    boolean strictRequiredStatusChecksPolicy;
    # Status checks that are required
    @jsondata:Name {value: "required_status_checks"}
    RepositoryRuleParamsStatusCheckConfiguration[] requiredStatusChecks;
};

# Represents the Queries record for the operation: actions/list-org-variables
public type ActionsListOrgVariablesQueries record {
    # The number of results per page (max 30)
    @http:Query {name: "per_page"}
    int perPage = 10;
    # Page number of the results to fetch
    int page = 1;
};

# Configuration for requiring conversation resolution on protected branches
public type ProtectedBranchRequiredConversationResolution record {|
    # Whether conversation resolution is required
    boolean enabled?;
|};

# Request body for renaming a branch
public type BranchRenameBody record {
    # The new name of the branch
    @jsondata:Name {value: "new_name"}
    string newName;
};

# A GitHub Security Advisory
public type GlobalAdvisory record {|
    # A short summary of the advisory
    @constraint:String {maxLength: 1024}
    string summary;
    # The severity of the advisory
    "critical"|"high"|"medium"|"low"|"unknown" severity;
    # The URL of the advisory's source code
    @jsondata:Name {value: "source_code_location"}
    string? sourceCodeLocation;
    # URLs with additional information about the security advisory
    string[]? references;
    # The API URL for the repository advisory
    @jsondata:Name {value: "repository_advisory_url"}
    string? repositoryAdvisoryUrl;
    # Array of external identifiers for the security advisory
    GlobalAdvisoryIdentifiers[]? identifiers;
    # A detailed description of what the advisory entails
    string? description;
    # The type of advisory
    "reviewed"|"unreviewed"|"malware" 'type;
    # Array of Common Weakness Enumeration (CWE) identifiers
    GlobalAdvisoryCwes[]? cwes;
    # The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.
    # This field is only populated when the advisory is imported from the National Vulnerability Database
    @jsondata:Name {value: "nvd_published_at"}
    string? nvdPublishedAt;
    # The API URL for the advisory
    string url;
    # The GitHub Security Advisory ID
    @jsondata:Name {value: "ghsa_id"}
    string ghsaId;
    # The date and time of when the advisory was last updated, in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The Common Vulnerabilities and Exposures (CVE) ID
    @jsondata:Name {value: "cve_id"}
    string? cveId;
    # The users who contributed to the advisory
    GlobalAdvisoryCredits[]? credits;
    # The URL for the advisory
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format
    @jsondata:Name {value: "github_reviewed_at"}
    string? githubReviewedAt;
    # The date and time of when the advisory was withdrawn, in ISO 8601 format
    @jsondata:Name {value: "withdrawn_at"}
    string? withdrawnAt;
    # The products and respective version ranges affected by the advisory
    GlobalAdvisoryVulnerabilities[]? vulnerabilities;
    # The date and time of when the advisory was published, in ISO 8601 format
    @jsondata:Name {value: "published_at"}
    string publishedAt;
    # CVSS vulnerability scoring information with score and vector string
    GlobalAdvisoryCvss? cvss;
|};

# Team permissions for project access (read, write, admin)
public type TeamProjectPermissions record {
    # Whether the team has read access to the project
    boolean read;
    # Whether the team has admin access to the project
    boolean admin;
    # Whether the team has write access to the project
    boolean write;
};

# Represents the Queries record for the operation: teams/list-for-authenticated-user
public type TeamsListForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# The GitHub URL of the alert resource
public type AlertHtmlUrl string;

# Workflow Usage
public type WorkflowUsage record {
    # Billable workflow usage breakdown by operating system
    WorkflowUsageBillable billable;
};

# Git tree object representing files and directories in a repository
public type ReposownerrepogittreesTree record {
    # The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink
    "100644"|"100755"|"040000"|"160000"|"120000" mode?;
    # The file referenced in the tree
    string path?;
    # Either `blob`, `tree`, or `commit`
    "blob"|"tree"|"commit" 'type?;
    # The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  
    #   
    # **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error
    string? sha?;
    # The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  
    #   
    # **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error
    string content?;
};

# Request body for updating a code scanning alert state
public type AlertsalertNumberBody record {
    # Optional comment explaining why the alert was dismissed
    @jsondata:Name {value: "dismissed_comment"}
    CodeScanningAlertDismissedComment? dismissedComment?;
    # Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`
    CodeScanningAlertSetState state;
    # Reason for dismissing the code scanning alert
    @jsondata:Name {value: "dismissed_reason"}
    CodeScanningAlertDismissedReason? dismissedReason?;
};

# A GitHub Actions workflow
public type Workflow record {
    # URL to the workflow's status badge image
    @jsondata:Name {value: "badge_url"}
    string badgeUrl;
    # File path of the workflow in the repository
    string path;
    # Timestamp when the workflow was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # URL to view the workflow file on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Display name of the workflow
    string name;
    # The timestamp when the workflow was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The unique identifier of the workflow
    int id;
    # The current state of the workflow
    "active"|"deleted"|"disabled_fork"|"disabled_inactivity"|"disabled_manually" state;
    # The timestamp when the workflow was deleted
    @jsondata:Name {value: "deleted_at"}
    string deletedAt?;
    # The API URL for the workflow
    string url;
    # The GraphQL node ID of the workflow
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Branch protection rule requiring linear commit history
public type BranchProtectionRequiredLinearHistory record {
    # Whether linear history requirement is enabled
    boolean enabled?;
};

# The SHA of the commit to which the analysis you are uploading relates
@constraint:String {maxLength: 40, minLength: 40, pattern: re `^[0-9a-fA-F]+$`}
public type CodeScanningAnalysisCommitSha string;

# Represents the Queries record for the operation: dependabot/list-selected-repos-for-org-secret
public type DependabotListSelectedReposForOrgSecretQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details
public type ReposownerrepogitcommitsCommitter record {
    # Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string date?;
    # The name of the author (or committer) of the commit
    string name?;
    # The email of the author (or committer) of the commit
    string email?;
};

# Represents the Queries record for the operation: reactions/list-for-commit-comment
public type ReactionsListForCommitCommentQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a commit comment
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content?;
};

# Organization Full
public type OrganizationFull record {
    # API URL to retrieve repositories for the organization
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # Whether organization members can create internal repositories
    @jsondata:Name {value: "members_can_create_internal_repositories"}
    boolean membersCanCreateInternalRepositories?;
    # An optional URL string to display to contributors who are blocked from pushing a secret
    @jsondata:Name {value: "secret_scanning_push_protection_custom_link"}
    string? secretScanningPushProtectionCustomLink?;
    # Whether organization members can create public GitHub Pages sites
    @jsondata:Name {value: "members_can_create_public_pages"}
    boolean membersCanCreatePublicPages?;
    # URL of the organization's blog or website
    string blog?;
    # Type of GitHub account, typically 'Organization'
    string 'type;
    # API URL template to retrieve public members of the organization
    @jsondata:Name {value: "public_members_url"}
    string publicMembersUrl;
    # Number of private gists owned by the organization
    @jsondata:Name {value: "private_gists"}
    int? privateGists?;
    # Default permission level for organization repositories
    @jsondata:Name {value: "default_repository_permission"}
    string? defaultRepositoryPermission?;
    # Email address used for billing and administrative purposes
    @jsondata:Name {value: "billing_email"}
    string? billingEmail?;
    # Total disk space usage in kilobytes for the organization
    @jsondata:Name {value: "disk_usage"}
    int? diskUsage?;
    # Number of collaborators across all organization repositories
    int? collaborators?;
    # Unique identifier for the organization
    int id;
    # Whether secret scanning push protection is automatically enabled for new repositories and repositories
    # transferred to this organization.
    # 
    # This field is only visible to organization owners or members of a team with the security manager role
    @jsondata:Name {value: "secret_scanning_push_protection_enabled_for_new_repositories"}
    boolean secretScanningPushProtectionEnabledForNewRepositories?;
    # Organization billing plan details including repositories, seats, and storage
    OrganizationFullPlan plan?;
    # Whether organization members can create private GitHub Pages sites
    @jsondata:Name {value: "members_can_create_private_pages"}
    boolean membersCanCreatePrivatePages?;
    # Whether organization members can create repositories
    @jsondata:Name {value: "members_can_create_repositories"}
    boolean? membersCanCreateRepositories?;
    # Whether organization members can create private repositories
    @jsondata:Name {value: "members_can_create_private_repositories"}
    boolean membersCanCreatePrivateRepositories?;
    # Number of public gists created by the organization
    @jsondata:Name {value: "public_gists"}
    int publicGists;
    # Number of users following the organization
    int followers;
    # Whether the organization has organization projects enabled
    @jsondata:Name {value: "has_organization_projects"}
    boolean hasOrganizationProjects;
    # Number of users the organization is following
    int following;
    # Public web URL of the organization's GitHub page
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Display name of the organization
    string name?;
    # API URL for managing the organization's webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
    # to this organization.
    # 
    # This field is only visible to organization owners or members of a team with the security manager role
    @jsondata:Name {value: "dependabot_security_updates_enabled_for_new_repositories"}
    boolean dependabotSecurityUpdatesEnabledForNewRepositories?;
    # Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
    # this organization.
    # 
    # This field is only visible to organization owners or members of a team with the security manager role
    @jsondata:Name {value: "dependabot_alerts_enabled_for_new_repositories"}
    boolean dependabotAlertsEnabledForNewRepositories?;
    # Whether the organization has repository projects enabled
    @jsondata:Name {value: "has_repository_projects"}
    boolean hasRepositoryProjects;
    # API URL template for accessing organization members
    @jsondata:Name {value: "members_url"}
    string membersUrl;
    # Twitter username associated with the organization
    @jsondata:Name {value: "twitter_username"}
    string? twitterUsername?;
    # Public description of the organization
    string? description;
    # Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
    # 
    # This field is only visible to organization owners or members of a team with the security manager role
    @jsondata:Name {value: "advanced_security_enabled_for_new_repositories"}
    boolean advancedSecurityEnabledForNewRepositories?;
    # Timestamp when the organization was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique username/login identifier for the organization
    string login;
    # Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
    # organization.
    # 
    # This field is only visible to organization owners or members of a team with the security manager role
    @jsondata:Name {value: "dependency_graph_enabled_for_new_repositories"}
    boolean dependencyGraphEnabledForNewRepositories?;
    # Total number of private repositories owned by the organization
    @jsondata:Name {value: "total_private_repos"}
    int totalPrivateRepos?;
    # Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
    # organization.
    # 
    # This field is only visible to organization owners or members of a team with the security manager role
    @jsondata:Name {value: "secret_scanning_enabled_for_new_repositories"}
    boolean secretScanningEnabledForNewRepositories?;
    # Timestamp when the organization was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Type of repositories organization members are allowed to create
    @jsondata:Name {value: "members_allowed_repository_creation_type"}
    string membersAllowedRepositoryCreationType?;
    # Whether organization members can fork private repositories
    @jsondata:Name {value: "members_can_fork_private_repositories"}
    boolean? membersCanForkPrivateRepositories?;
    # Company name associated with the organization
    string? company?;
    # Number of private repositories owned by the organization
    @jsondata:Name {value: "owned_private_repos"}
    int ownedPrivateRepos?;
    # Number of public repositories owned by the organization
    @jsondata:Name {value: "public_repos"}
    int publicRepos;
    # Public email address of the organization
    string? email?;
    # Whether two-factor authentication is required for organization members
    @jsondata:Name {value: "two_factor_requirement_enabled"}
    boolean? twoFactorRequirementEnabled?;
    # Timestamp when the organization was archived
    @jsondata:Name {value: "archived_at"}
    string? archivedAt;
    # Whether the organization is verified by GitHub
    @jsondata:Name {value: "is_verified"}
    boolean isVerified?;
    # Whether web-based commits require signoff for the organization
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired?;
    # API URL for the organization
    string url;
    # Whether organization members can create public repositories
    @jsondata:Name {value: "members_can_create_public_repositories"}
    boolean membersCanCreatePublicRepositories?;
    # API URL for the organization's issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # URL of the organization's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # API URL for the organization's public events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # Whether organization members can create GitHub Pages sites
    @jsondata:Name {value: "members_can_create_pages"}
    boolean membersCanCreatePages?;
    # Geographic location of the organization
    string location?;
    # Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection
    @jsondata:Name {value: "secret_scanning_push_protection_custom_link_enabled"}
    boolean secretScanningPushProtectionCustomLinkEnabled?;
    # GraphQL global node identifier for the organization
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# GitHub Pages source configuration with branch and path information
public type PagesSourceHash record {
    # Directory path for GitHub Pages source files
    string path;
    # Git branch name containing GitHub Pages source files
    string branch;
};

# Request body for rendering Markdown text to HTML
public type MarkdownBody record {
    # The rendering mode
    "markdown"|"gfm" mode = "markdown";
    # The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository
    string context?;
    # The Markdown text to render in HTML
    string text;
};

# Represents the Queries record for the operation: migrations/list-for-org
public type MigrationsListForOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Exclude attributes from the API response to improve performance
    ("repositories")[] exclude?;
    # Page number of the results to fetch
    int page = 1;
};

# Key
public type Key record {
    # Whether the key has read-only access permissions
    @jsondata:Name {value: "read_only"}
    boolean readOnly;
    # Whether the key has been verified by GitHub
    boolean verified;
    # Timestamp when the key was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the key
    int id;
    # Human-readable title or label for the key
    string title;
    # The public key content
    string 'key;
    # API URL for accessing the key resource
    string url;
};

# The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`
public type DeploymentBranchPolicySettings record {
    # Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`
    @jsondata:Name {value: "custom_branch_policies"}
    boolean customBranchPolicies;
    # Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`
    @jsondata:Name {value: "protected_branches"}
    boolean protectedBranches;
};

# Represents the Queries record for the operation: activity/list-repo-events
public type ActivityListRepoEventsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Only allow users with bypass permission to create matching refs
public type RepositoryRuleCreation record {
    # Rule type identifier for repository creation restrictions
    "creation" 'type;
};

# Request body for granting team permissions on a project
public type ProjectsprojectIdBody record {
    # The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
    "read"|"write"|"admin" permission?;
};

# User-defined metadata to store domain-specific information limited to 8 keys with scalar values
public type Metadata record {
};

# Short Branch
public type ShortBranch record {
    # Indicates whether the branch is protected
    boolean protected;
    # The name of the branch
    string name;
    # Basic commit information for a branch
    ShortBranchCommit 'commit;
    # Branch Protection
    BranchProtection protection?;
    # URL for accessing branch protection settings
    @jsondata:Name {value: "protection_url"}
    string protectionUrl?;
};

# Represents the Queries record for the operation: dependabot/list-org-secrets
public type DependabotListOrgSecretsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: actions/list-jobs-for-workflow-run
public type ActionsListJobsForWorkflowRunQueries record {
    # Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run
    "latest"|"all" filter = "latest";
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# A list of errors found in a repo's CODEOWNERS file
public type CodeownersErrors record {
    # Array of CODEOWNERS validation errors
    CodeownersErrorsErrors[] errors;
};

# Basic commit information for a branch
public type ShortBranchCommit record {
    # The SHA hash of the commit
    string sha;
    # API URL for the commit
    string url;
};

# Issue Event for Issue
public type IssueEventForIssue LabeledIssueEvent|UnlabeledIssueEvent|AssignedIssueEvent|UnassignedIssueEvent|MilestonedIssueEvent|DemilestonedIssueEvent|RenamedIssueEvent|ReviewRequestedIssueEvent|ReviewRequestRemovedIssueEvent|ReviewDismissedIssueEvent|LockedIssueEvent|AddedToProjectIssueEvent|MovedColumnInProjectIssueEvent|RemovedFromProjectIssueEvent|ConvertedNoteToIssueIssueEvent;

# Request body for updating a release asset
public type AssetsassetIdBody record {
    # The file name of the asset
    string name?;
    # An alternate short description of the asset. Used in place of the filename
    string label?;
    # The current state of the asset
    string state?;
};

# Represents the Queries record for the operation: activity/list-repos-watched-by-user
public type ActivityListReposWatchedByUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for creating a repository label
public type RepoLabelsBody record {
    # The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`
    string color?;
    # The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
    string name;
    # A short description of the label. Must be 100 characters or fewer
    string description?;
};

# Configuration object of the webhook
public type WebhookConfig record {
    # The media type used to serialize webhook payloads
    @jsondata:Name {value: "content_type"}
    WebhookConfigContentType contentType?;
    # Whether to verify SSL certificates when delivering payloads
    @jsondata:Name {value: "insecure_ssl"}
    WebhookConfigInsecureSsl insecureSsl?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers)
    WebhookConfigSecret secret?;
    # The URL to which the payloads will be delivered
    WebhookConfigUrl url?;
};

# Represents the Queries record for the operation: repos/get-views
public type ReposGetViewsQueries record {
    # The time frame to display results for
    "day"|"week" per = "day";
};

# Represents the Queries record for the operation: users/list
public type UsersListQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # A user ID. Only return users with an ID greater than this ID
    int since?;
};

# State of a code scanning alert
public type CodeScanningAlertStateQuery "open"|"closed"|"dismissed"|"fixed";

# Runtime constraints and settings for a codespace
public type CodespaceRuntimeConstraints record {
    # The privacy settings a user can select from when forwarding a port
    @jsondata:Name {value: "allowed_port_privacy_settings"}
    string[]? allowedPortPrivacySettings?;
};

# Request body for updating organization secret configuration
public type SecretssecretNameBody record {
    # An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints
    @jsondata:Name {value: "selected_repository_ids"}
    int[] selectedRepositoryIds?;
    # Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret
    "all"|"private"|"selected" visibility;
    # ID of the key you used to encrypt the secret
    @jsondata:Name {value: "key_id"}
    string keyId?;
    # Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint
    @jsondata:Name {value: "encrypted_value"}
    string encryptedValue?;
};

# Groups of organization members that gives permissions on specified repositories
public type Team record {
    # Groups of organization members that gives permissions on specified repositories
    NullableTeamSimple? parent;
    # URL to access the team's repositories
    @jsondata:Name {value: "repositories_url"}
    string repositoriesUrl;
    # URL endpoint to retrieve team members
    @jsondata:Name {value: "members_url"}
    string membersUrl;
    # Team description text
    string? description;
    # Team privacy level (public or private)
    string privacy?;
    # Team permission level
    string permission;
    # Team API URL
    string url;
    # Team notification configuration setting
    @jsondata:Name {value: "notification_setting"}
    string notificationSetting?;
    # Team permission levels for repository access and management
    TeamPermissions permissions?;
    # Team web page URL
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Team display name
    string name;
    # Unique team identifier
    int id;
    # Team URL-friendly name
    string slug;
    # GraphQL node identifier for the team
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# A GitHub organization
public type SimpleClassroomOrganization record {
    # Organization avatar image URL
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # Organization profile page URL
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Organization display name
    string? name;
    # Unique identifier for the classroom organization
    int id;
    # Login name of the classroom organization
    string login;
    # Global node identifier for the classroom organization
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: actions/get-workflow-run
public type ActionsGetWorkflowRunQueries record {
    # If `true` pull requests are omitted from the response (empty array)
    @http:Query {name: "exclude_pull_requests"}
    boolean excludePullRequests = false;
};

# Represents a dependency snapshot job with correlation and identification data
public type SnapshotJob record {|
    # Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation
    string correlator;
    # The url for the job
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # The external ID of the job
    string id;
|};

# Request body for updating team settings including name, privacy, and permissions
public type TeamsteamIdBody record {
    # The ID of a team to set as the parent team
    @jsondata:Name {value: "parent_team_id"}
    int? parentTeamId?;
    # The name of the team
    string name;
    # The description of the team
    string description?;
    # The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
    # **For a non-nested team:**  
    #  * `secret` - only visible to organization owners and members of this team.  
    #  * `closed` - visible to all members of this organization.  
    # **For a parent or child team:**  
    #  * `closed` - visible to all members of this organization
    "secret"|"closed" privacy?;
    # **Deprecated**. The permission that new repositories will be added to the team with when none is specified
    "pull"|"push"|"admin" permission = "pull";
    # The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
    #  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
    #  * `notifications_disabled` - no one receives notifications
    @jsondata:Name {value: "notification_setting"}
    "notifications_enabled"|"notifications_disabled" notificationSetting?;
};

# Represents the Queries record for the operation: codespaces/list-secrets-for-authenticated-user
public type CodespacesListSecretsForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Only allow users with bypass permissions to delete matching refs
public type RepositoryRuleDeletion record {
    # Type identifier for repository deletion rule
    "deletion" 'type;
};

# Represents the Queries record for the operation: actions/list-workflow-runs
public type ActionsListWorkflowRunsQueries record {
    # Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run
    string actor?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Returns workflow runs with the `check_suite_id` that you specify
    @http:Query {name: "check_suite_id"}
    int checkSuiteId?;
    # Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
    string created?;
    # If `true` pull requests are omitted from the response (empty array)
    @http:Query {name: "exclude_pull_requests"}
    boolean excludePullRequests = false;
    # Page number of the results to fetch
    int page = 1;
    # Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
    string event?;
    # Returns workflow runs associated with a branch. Use the name of the branch of the `push`
    string branch?;
    # Only returns workflow runs that are associated with the specified `head_sha`
    @http:Query {name: "head_sha"}
    string headSha?;
    # Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`
    "completed"|"action_required"|"cancelled"|"failure"|"neutral"|"skipped"|"stale"|"success"|"timed_out"|"in_progress"|"queued"|"requested"|"waiting"|"pending" status?;
};

# Porter Author
public type PorterAuthor record {
    # Name of the author in the remote system
    @jsondata:Name {value: "remote_name"}
    string remoteName;
    # Unique identifier of the author in the remote system
    @jsondata:Name {value: "remote_id"}
    string remoteId;
    # URL used for importing the author's data
    @jsondata:Name {value: "import_url"}
    string importUrl;
    # Display name of the porter author
    string name;
    # Unique identifier for the porter author
    int id;
    # Email address of the porter author
    string email;
    # Profile URL of the porter author
    string url;
};

# Request body containing social media profile URLs to delete from user account
public type UserSocialAccountsBody1 record {
    # Full URLs for the social media profiles to delete
    @jsondata:Name {value: "account_urls"}
    string[] accountUrls;
};

# Reactions to conversations provide a way to help people express their feelings more simply and effectively
public type Reaction record {
    # Timestamp when the reaction was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the reaction
    int id;
    # A GitHub user
    NullableSimpleUser? user;
    # The reaction to use
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content;
    # Global node identifier for the reaction
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# A collection of related issues and pull requests
public type NullableMilestone record {
    # A GitHub user
    NullableSimpleUser? creator;
    # Timestamp when the milestone was closed
    @jsondata:Name {value: "closed_at"}
    string? closedAt;
    # Description of the milestone
    string? description;
    # Timestamp when the milestone was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The title of the milestone
    string title;
    # Number of closed issues associated with the milestone
    @jsondata:Name {value: "closed_issues"}
    int closedIssues;
    # API URL for the milestone
    string url;
    # Due date for the milestone
    @jsondata:Name {value: "due_on"}
    string? dueOn;
    # API URL for labels associated with the milestone
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # The number of the milestone
    int number;
    # Timestamp when the milestone was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Web URL for the milestone
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Unique identifier for the milestone
    int id;
    # The state of the milestone
    "open"|"closed" state = "open";
    # Number of open issues associated with the milestone
    @jsondata:Name {value: "open_issues"}
    int openIssues;
    # Global node identifier for the milestone
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Pull Request Review Comments are comments on a portion of the Pull Request's diff
public type PullRequestReviewComment record {
    # HTML-formatted body of the pull request review comment
    @jsondata:Name {value: "body_html"}
    string bodyHtml?;
    # The SHA of the original commit to which the comment applies
    @jsondata:Name {value: "original_commit_id"}
    string originalCommitId;
    # Hypermedia links related to the pull request review comment
    @jsondata:Name {value: "_links"}
    PullRequestReviewCommentLinks links;
    # The text content of the pull request review comment
    @jsondata:Name {value: "body_text"}
    string bodyText?;
    # The comment ID to reply to
    @jsondata:Name {value: "in_reply_to_id"}
    int inReplyToId?;
    # The line of the blob to which the comment applies. The last line of the range for a multi-line comment
    int line?;
    # The diff of the line that the comment refers to
    @jsondata:Name {value: "diff_hunk"}
    string diffHunk;
    # The timestamp when the pull request review comment was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The first line of the range for a multi-line comment
    @jsondata:Name {value: "start_line"}
    int? startLine?;
    # The text of the comment
    string body;
    # The association of the comment author with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # The relative path of the file to which the comment applies
    string path;
    # The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead
    @jsondata:Name {value: "original_position"}
    int originalPosition?;
    # The timestamp when the pull request review comment was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The ID of the pull request review to which the comment belongs
    @jsondata:Name {value: "pull_request_review_id"}
    int? pullRequestReviewId;
    # The ID of the pull request review comment
    int id;
    # The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
    "LEFT"|"RIGHT" side = "RIGHT";
    # The level at which the comment is targeted, can be a diff line or a file
    @jsondata:Name {value: "subject_type"}
    "line"|"file" subjectType?;
    # URL for the pull request that the review comment belongs to
    @jsondata:Name {value: "pull_request_url"}
    string pullRequestUrl;
    # URL for the pull request review comment
    string url;
    # The side of the first line of the range for a multi-line comment
    @jsondata:Name {value: "start_side"}
    "LEFT"|"RIGHT"? startSide = "RIGHT";
    # The line of the blob to which the comment applies. The last line of the range for a multi-line comment
    @jsondata:Name {value: "original_line"}
    int originalLine?;
    # The first line of the range for a multi-line comment
    @jsondata:Name {value: "original_start_line"}
    int? originalStartLine?;
    # HTML URL for the pull request review comment
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Aggregated count of all reaction types on a GitHub item
    ReactionRollup reactions?;
    # The line index in the diff to which the comment applies. This field is deprecated; use `line` instead
    int position?;
    # The SHA of the commit to which the comment applies
    @jsondata:Name {value: "commit_id"}
    string commitId;
    # A GitHub user
    SimpleUser user;
    # The node ID of the pull request review comment
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`
public type NullableAlertUpdatedAt string?;

# Allowances for bypassing pull request review requirements on protected branches
public type ProtectedBranchRequiredPullRequestReviewsBypassPullRequestAllowances record {
    # Teams allowed to bypass pull request review requirements
    Team[] teams;
    # Users allowed to bypass pull request review requirements
    SimpleUser[] users;
    # Apps allowed to bypass pull request review requirements
    Integration[] apps?;
};

# Gist Commit
public type GistCommit record {
    # The timestamp when the gist commit was made
    @jsondata:Name {value: "committed_at"}
    string committedAt;
    # The change status information for the gist commit
    @jsondata:Name {value: "change_status"}
    GistHistoryChangeStatus changeStatus;
    # The unique version identifier of the gist commit
    string version;
    # A GitHub user
    NullableSimpleUser? user;
    # The API URL for the specific gist commit version
    string url;
};

# Only allow users with bypass permission to update matching refs
public type RepositoryRuleUpdate record {
    # The type of repository rule, always 'update'
    "update" 'type;
    # Parameters for updating repository rule settings
    RepositoryRuleUpdateParameters parameters?;
};

# Page Build
public type PageBuild record {
    # The duration of the GitHub Pages build process in milliseconds
    int duration;
    # A GitHub user
    NullableSimpleUser? pusher;
    # Timestamp when the page build was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # SHA of the commit that triggered the page build
    string 'commit;
    # Timestamp when the page build was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Represents an error that occurred during a GitHub Pages build process
    PageBuildError 'error;
    # URL of the page build resource
    string url;
    # Current status of the page build
    string status;
};

# Event
public type Event record {
    # Actor
    Actor actor;
    # Whether the event is publicly visible
    boolean 'public;
    # Actor
    Actor org?;
    # Payload object containing event-specific data
    EventPayload payload;
    # Repository information in event payloads
    EventRepo repo;
    # Timestamp when the event was created
    @jsondata:Name {value: "created_at"}
    string? createdAt;
    # Unique identifier for the event
    string id;
    # Type of the event
    string? 'type;
};

# Represents the Queries record for the operation: issues/list-events-for-timeline
public type IssuesListEventsForTimelineQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: migrations/get-commit-authors
public type MigrationsGetCommitAuthorsQueries record {
    # A user ID. Only return users with an ID greater than this ID
    int since?;
};

# An invocation of a workflow
public type WorkflowRunResponse record {
    # Total number of workflow runs
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of workflow run objects
    @jsondata:Name {value: "workflow_runs"}
    WorkflowRun[] workflowRuns;
};

# Request body for setting repository permissions with selected repository IDs
public type PermissionsRepositoriesBody record {
    # List of repository IDs to enable for GitHub Actions
    @jsondata:Name {value: "selected_repository_ids"}
    int[] selectedRepositoryIds;
};

# A repository security advisory
public type RepositoryAdvisory record {|
    # Detailed credit information for the advisory contributors
    @jsondata:Name {value: "credits_detailed"}
    RepositoryAdvisoryCredit[]? creditsDetailed;
    # A detailed description of what the advisory entails
    string? description;
    # The date and time of when the advisory was created, in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string? createdAt;
    # Common Weakness Enumeration identifiers for the advisory
    GlobalAdvisoryCwes[]? cwes;
    # The date and time of when the advisory was last updated, in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string? updatedAt;
    # Credits for contributors to the security advisory
    RepositoryAdvisoryCredits[]? credits;
    # The date and time of when the advisory was withdrawn, in ISO 8601 format
    @jsondata:Name {value: "withdrawn_at"}
    string? withdrawnAt;
    # The state of the advisory
    "published"|"closed"|"withdrawn"|"draft"|"triage" state;
    # The date and time of when the advisory was published, in ISO 8601 format
    @jsondata:Name {value: "published_at"}
    string? publishedAt;
    # A list of users that collaborate on the advisory
    @jsondata:Name {value: "collaborating_users"}
    SimpleUser[]? collaboratingUsers;
    # A temporary private fork of the advisory's repository for collaborating on a fix
    @jsondata:Name {value: "private_fork"}
    SimpleRepository? privateFork;
    # A short summary of the advisory
    @constraint:String {maxLength: 1024}
    string summary;
    # The severity of the advisory
    "critical"|"high"|"medium"|"low"? severity;
    # The date and time of when the advisory was closed, in ISO 8601 format
    @jsondata:Name {value: "closed_at"}
    string? closedAt;
    # The author of the advisory
    SimpleUser? author;
    # External identifiers for the security advisory
    GlobalAdvisoryIdentifiers[] identifiers;
    # The API URL for the advisory
    string url;
    # The GitHub Security Advisory ID
    @jsondata:Name {value: "ghsa_id"}
    string ghsaId;
    # The Common Vulnerabilities and Exposures (CVE) ID
    @jsondata:Name {value: "cve_id"}
    string? cveId;
    # A list of teams that collaborate on the advisory
    @jsondata:Name {value: "collaborating_teams"}
    Team[]? collaboratingTeams;
    # The URL for the advisory
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # The publisher of the advisory
    SimpleUser? publisher;
    # Array of vulnerability details associated with the repository advisory
    RepositoryAdvisoryVulnerability[]? vulnerabilities;
    # Submission status of a repository security advisory
    RepositoryAdvisorySubmission? submission;
    # CVSS vulnerability scoring information with score and vector string
    GlobalAdvisoryCvss? cvss;
    # A list of only the CWE IDs
    @jsondata:Name {value: "cwe_ids"}
    string[]? cweIds;
|};

# Configuration settings for webhook including URL, content type, and security
public type HookConfigBody record {
    # Content type format for webhook payload delivery
    @jsondata:Name {value: "content_type"}
    WebhookConfigContentType contentType?;
    # SSL verification setting for webhook delivery
    @jsondata:Name {value: "insecure_ssl"}
    WebhookConfigInsecureSsl insecureSsl?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers)
    WebhookConfigSecret secret?;
    # The URL to which the payloads will be delivered
    WebhookConfigUrl url?;
};

# Request body for user migration with repositories and exclusion options
public type UserMigrationsBody record {
    # Indicates whether metadata should be excluded and only git source should be included for the migration
    @jsondata:Name {value: "exclude_metadata"}
    boolean excludeMetadata?;
    # Array of repository paths to include in the migration
    string[] repositories;
    # Indicates whether the repository git data should be excluded from the migration
    @jsondata:Name {value: "exclude_git_data"}
    boolean excludeGitData?;
    # Do not include attachments in the migration
    @jsondata:Name {value: "exclude_attachments"}
    boolean excludeAttachments?;
    # Do not include releases in the migration
    @jsondata:Name {value: "exclude_releases"}
    boolean excludeReleases?;
    # Indicates whether projects owned by the organization or users should be excluded
    @jsondata:Name {value: "exclude_owner_projects"}
    boolean excludeOwnerProjects?;
    # Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags)
    @jsondata:Name {value: "org_metadata_only"}
    boolean orgMetadataOnly = false;
    # Exclude attributes from the API response to improve performance
    ("repositories")[] exclude?;
    # Lock the repositories being migrated at the start of the migration
    @jsondata:Name {value: "lock_repositories"}
    boolean lockRepositories?;
};

# Represents the Queries record for the operation: repos/list-forks
public type ReposListForksQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The sort order. `stargazers` will sort by star count
    "newest"|"oldest"|"stargazers"|"watchers" sort = "newest";
    # Page number of the results to fetch
    int page = 1;
};

# Organization variable for GitHub Actions
public type OrganizationActionsVariableResponse record {
    # Array of organization-level GitHub Actions variables
    OrganizationActionsVariable[] variables;
    # Total number of organization Actions variables
    @jsondata:Name {value: "total_count"}
    int totalCount;
};

# Request body for creating repository autolink references
public type RepoAutolinksBody record {
    # This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit
    @jsondata:Name {value: "key_prefix"}
    string keyPrefix;
    # The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`
    @jsondata:Name {value: "url_template"}
    string urlTemplate;
    # Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters
    @jsondata:Name {value: "is_alphanumeric"}
    boolean isAlphanumeric = true;
};

# An SSH key granting access to a single repository
public type DeployKey record {
    # Whether the deploy key has read-only access
    @jsondata:Name {value: "read_only"}
    boolean readOnly;
    # User who added the deploy key
    @jsondata:Name {value: "added_by"}
    string? addedBy?;
    # Timestamp when the deploy key was last used
    @jsondata:Name {value: "last_used"}
    string? lastUsed?;
    # Whether the deploy key has been verified
    boolean verified;
    # Timestamp when the deploy key was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the deploy key
    int id;
    # A descriptive name for the deploy key
    string title;
    # The public SSH key content
    string 'key;
    # API URL for the deploy key resource
    string url;
};

# Parameters for a repository ID condition
public type RepositoryRulesetConditionsRepositoryIdTarget record {
    # Repository identifier for ruleset condition targeting
    @jsondata:Name {value: "repository_id"}
    RepositoryRulesetConditionsRepositoryIdTargetRepositoryId repositoryId;
};

# Code Frequency Stat
public type CodeFrequencyStat int[];

# The configuration for GitHub Pages for a repository
public type Page record {
    # Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site
    boolean 'public;
    # HTTPS certificate configuration for GitHub Pages
    @jsondata:Name {value: "https_certificate"}
    PagesHttpsCertificate httpsCertificate?;
    # Whether the Page has a custom 404 page
    @jsondata:Name {value: "custom_404"}
    boolean custom404 = false;
    # The web address the Page can be accessed from
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # The Pages site's custom domain
    string? cname;
    # Whether https is enabled on the domain
    @jsondata:Name {value: "https_enforced"}
    boolean httpsEnforced?;
    # The timestamp when a pending domain becomes unverified
    @jsondata:Name {value: "pending_domain_unverified_at"}
    string? pendingDomainUnverifiedAt?;
    # GitHub Pages source configuration with branch and path information
    PagesSourceHash 'source?;
    # The state if the domain is verified
    @jsondata:Name {value: "protected_domain_state"}
    "pending"|"verified"|"unverified"? protectedDomainState?;
    # The process in which the Page will be built
    @jsondata:Name {value: "build_type"}
    "legacy"|"workflow"? buildType?;
    # The API address for accessing this Page resource
    string url;
    # The status of the most recent build of the Page
    "built"|"building"|"errored"? status;
};

# Just-in-time configuration for GitHub Actions runners
public type JitConfig record {
    # A self hosted runner
    Runner runner;
    # The base64 encoded runner configuration
    @jsondata:Name {value: "encoded_jit_config"}
    string encodedJitConfig;
};

# Represents the Queries record for the operation: classroom/list-assignments-for-a-classroom
public type ClassroomListAssignmentsForAClassroomQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: actions/get-actions-cache-usage-by-repo-for-org
public type ActionsGetActionsCacheUsageByRepoForOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for adding a GPG key to user account
public type UserGpgKeysBody record {
    # A GPG key in ASCII-armored format
    @jsondata:Name {value: "armored_public_key"}
    string armoredPublicKey;
    # A descriptive name for the new key
    string name?;
};

# Timeline Event
public type TimelineIssueEvents LabeledIssueEvent|UnlabeledIssueEvent|MilestonedIssueEvent|DemilestonedIssueEvent|RenamedIssueEvent|ReviewRequestedIssueEvent|ReviewRequestRemovedIssueEvent|ReviewDismissedIssueEvent|LockedIssueEvent|AddedToProjectIssueEvent|MovedColumnInProjectIssueEvent|RemovedFromProjectIssueEvent|ConvertedNoteToIssueIssueEvent|TimelineCommentEvent|TimelineCrossReferencedEvent|TimelineCommittedEvent|TimelineReviewedEvent|TimelineLineCommentedEvent|TimelineCommitCommentedEvent|TimelineAssignedIssueEvent|TimelineUnassignedIssueEvent|StateChangeIssueEvent;

# Schema for configuring repository notification subscription settings
public type RepoSubscriptionBody record {
    # Determines if notifications should be received from this repository
    boolean subscribed?;
    # Determines if all notifications should be blocked from this repository
    boolean ignored?;
};

# CVSS vulnerability scoring information with score and vector string
public type GlobalAdvisoryCvss record {
    # The CVSS score
    decimal? score;
    # The CVSS vector
    @jsondata:Name {value: "vector_string"}
    string? vectorString;
};

# Represents the Queries record for the operation: security-advisories/list-org-repository-advisories
public type SecurityAdvisoriesListOrgRepositoryAdvisoriesQueries record {
    # The number of advisories to return per page
    @http:Query {name: "per_page"}
    int perPage = 30;
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor
    string before?;
    # The property to sort the results by
    "created"|"updated"|"published" sort = "created";
    # A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor
    string after?;
    # Filter by the state of the repository advisories. Only advisories of this state will be returned
    "triage"|"draft"|"published"|"closed" state?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Represents the Queries record for the operation: issues/list-milestones
public type IssuesListMilestonesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The state of the milestone. Either `open`, `closed`, or `all`
    "open"|"closed"|"all" state = "open";
    # What to sort results by. Either `due_on` or `completeness`
    "due_on"|"completeness" sort = "due_on";
    # Page number of the results to fetch
    int page = 1;
    # The direction of the sort. Either `asc` or `desc`
    "asc"|"desc" direction = "asc";
};

# Secrets for a GitHub Codespace
public type CodespacesSecret record {
    # The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The type of repositories in the organization that the secret is visible to
    "all"|"private"|"selected" visibility;
    # The name of the secret
    string name;
    # The API URL at which the list of repositories this secret is visible to can be retrieved
    @jsondata:Name {value: "selected_repositories_url"}
    string selectedRepositoriesUrl;
    # The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ
    @jsondata:Name {value: "created_at"}
    string createdAt;
};

# A collection of related issues and pull requests
public type Milestone record {
    # A GitHub user
    NullableSimpleUser? creator;
    # The date and time when the milestone was closed
    @jsondata:Name {value: "closed_at"}
    string? closedAt;
    # A description of the milestone
    string? description;
    # The date and time when the milestone was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The title of the milestone
    string title;
    # The number of closed issues associated with this milestone
    @jsondata:Name {value: "closed_issues"}
    int closedIssues;
    # The API URL for this milestone
    string url;
    # The due date for the milestone
    @jsondata:Name {value: "due_on"}
    string? dueOn;
    # The API URL for labels associated with this milestone
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # The number of the milestone
    int number;
    # The date and time when the milestone was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The web URL for this milestone
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # The unique identifier of the milestone
    int id;
    # The state of the milestone
    "open"|"closed" state = "open";
    # The number of open issues associated with this milestone
    @jsondata:Name {value: "open_issues"}
    int openIssues;
    # The GraphQL node ID of the milestone
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Stargazer
public type StargazerResponse StargazerResponseAnyOf1|StargazerResponseStargazerResponseAnyOf12;

# Request body for managing Codespaces organization secret repository access
public type SecretNameRepositoriesBody1 record {
    # An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints
    @jsondata:Name {value: "selected_repository_ids"}
    int[] selectedRepositoryIds;
};

# Request body for managing Dependabot organization secret repository access
public type SecretNameRepositoriesBody2 record {
    # An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints
    @jsondata:Name {value: "selected_repository_ids"}
    int[] selectedRepositoryIds;
};

# Request body for managing user Codespaces secret repository access
public type SecretNameRepositoriesBody3 record {
    # An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints
    @jsondata:Name {value: "selected_repository_ids"}
    int[] selectedRepositoryIds;
};

# GitHub Marketplace account information and billing details
public type MarketplaceAccount record {
    # Organization billing email address for marketplace account
    @jsondata:Name {value: "organization_billing_email"}
    string? organizationBillingEmail?;
    # Unique identifier for the marketplace account
    int id;
    # Type of the marketplace account
    string 'type;
    # Login username for the marketplace account
    string login;
    # URL of the marketplace account profile
    string url;
    # Primary email address for the marketplace account
    string? email?;
    # GraphQL node identifier for the marketplace account
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Request body for setting team repository permissions
public type OwnerrepoBody2 record {
    # The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository
    "pull"|"push"|"admin" permission?;
};

# Request body for updating repository settings and configuration
public type OwnerrepoBody1 record {
    # Either `true` to make the repository private or `false` to make it public. Default: `false`.  
    # **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private
    boolean 'private = false;
    # Either `true` to allow private forks, or `false` to prevent private forks
    @jsondata:Name {value: "allow_forking"}
    boolean allowForking = false;
    # Either `true` to make this repo available as a template repository or `false` to prevent it
    @jsondata:Name {value: "is_template"}
    boolean isTemplate = false;
    # A short description of the repository
    string description?;
    # Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging
    @jsondata:Name {value: "allow_rebase_merge"}
    boolean allowRebaseMerge = true;
    # Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects = true;
    # Whether to archive this repository. `false` will unarchive a previously archived repository
    boolean archived = false;
    # Either `true` to enable the wiki for this repository or `false` to disable it
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki = true;
    # The default value for a merge commit title.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)
    @jsondata:Name {value: "merge_commit_title"}
    "PR_TITLE"|"MERGE_MESSAGE" mergeCommitTitle?;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "squash_merge_commit_message"}
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squashMergeCommitMessage?;
    # Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion
    @jsondata:Name {value: "delete_branch_on_merge"}
    boolean deleteBranchOnMerge = false;
    # Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging
    @jsondata:Name {value: "allow_squash_merge"}
    boolean allowSquashMerge = true;
    # Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits
    @jsondata:Name {value: "allow_merge_commit"}
    boolean allowMergeCommit = true;
    # The visibility of the repository
    "public"|"private" visibility?;
    # Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise
    @jsondata:Name {value: "allow_update_branch"}
    boolean allowUpdateBranch = false;
    # Either `true` to enable issues for this repository or `false` to disable them
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues = true;
    # Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits
    @jsondata:Name {value: "web_commit_signoff_required"}
    boolean webCommitSignoffRequired = false;
    # Security and code analysis settings for the repository
    @jsondata:Name {value: "security_and_analysis"}
    ReposownerrepoSecurityAndAnalysis? securityAndAnalysis?;
    # Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge
    @jsondata:Name {value: "allow_auto_merge"}
    boolean allowAutoMerge = false;
    # Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead
    # 
    # # Deprecated
    @jsondata:Name {value: "use_squash_pr_title_as_default"}
    @deprecated
    boolean useSquashPrTitleAsDefault = false;
    # The name of the repository
    string name?;
    # Updates the default branch for this repository
    @jsondata:Name {value: "default_branch"}
    string defaultBranch?;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "merge_commit_message"}
    "PR_BODY"|"PR_TITLE"|"BLANK" mergeCommitMessage?;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)
    @jsondata:Name {value: "squash_merge_commit_title"}
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squashMergeCommitTitle?;
    # A URL with more information about the repository
    string homepage?;
};

# Protected Branch Admin Enforced
public type ProtectedBranchAdminEnforced record {
    # API endpoint URL for the admin enforcement protection rule
    string url;
    # Whether admin enforcement is enabled for the protected branch
    boolean enabled;
};

# The REST API URL of the alert resource
public type AlertUrl string;

# Set secrets for Dependabot
public type DependabotSecret record {
    # The timestamp when the Dependabot secret was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The name of the secret
    string name;
    # The timestamp when the Dependabot secret was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
};

# Issues are a great way to keep track of tasks, enhancements, and bugs for your projects
public type NullableIssue record {
    # HTML-rendered content of the issue body
    @jsondata:Name {value: "body_html"}
    string bodyHtml?;
    # Plain text content of the issue body
    @jsondata:Name {value: "body_text"}
    string bodyText?;
    # Array of users assigned to the issue
    SimpleUser[]? assignees?;
    # Timestamp when the issue was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Title of the issue
    string title;
    # Contents of the issue
    string? body?;
    # A repository on GitHub
    Repository repository?;
    # User who closed the issue
    @jsondata:Name {value: "closed_by"}
    NullableSimpleUser? closedBy?;
    # API URL for managing issue labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl;
    # Author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # Number uniquely identifying the issue within its repository
    int number;
    # Timestamp when the issue was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # GitHub App that performed the action on the issue
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp?;
    # Whether the issue is in draft state
    boolean draft?;
    # API URL for accessing issue comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # Reason why the issue is currently locked
    @jsondata:Name {value: "active_lock_reason"}
    string? activeLockReason?;
    # Unique identifier for the issue
    int id;
    # The API URL of the repository containing this issue
    @jsondata:Name {value: "repository_url"}
    string repositoryUrl;
    # State of the issue; either 'open' or 'closed'
    string state;
    # Whether the issue is locked from further comments
    boolean locked;
    # The API URL for the issue's timeline of events
    @jsondata:Name {value: "timeline_url"}
    string timelineUrl?;
    # The reason for the current state
    @jsondata:Name {value: "state_reason"}
    "completed"|"reopened"|"not_planned"? stateReason?;
    # Pull request information if this issue is associated with a PR
    @jsondata:Name {value: "pull_request"}
    IssuePullRequest pullRequest?;
    # The total number of comments on this issue
    int comments;
    # The timestamp when the issue was closed, or null if still open
    @jsondata:Name {value: "closed_at"}
    string? closedAt;
    # URL for the issue
    string url;
    # Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
    NullableIssueLabels[] labels;
    # A collection of related issues and pull requests
    NullableMilestone? milestone;
    # The API URL for retrieving issue events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # The web URL for viewing this issue on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Aggregated count of all reaction types on a GitHub item
    ReactionRollup reactions?;
    # A GitHub user
    NullableSimpleUser? assignee;
    # A GitHub user
    NullableSimpleUser? user;
    # The GraphQL node ID of the issue
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Content Traffic
public type ContentTraffic record {
    # The file path that received traffic views
    string path;
    # Total number of views for the content
    int count;
    # Number of unique visitors who viewed the content
    int uniques;
    # Title or name of the content being tracked
    string title;
};

# The author of the file. Default: The `committer` or the authenticated user if you omit `committer`
public type ReposownerrepocontentspathAuthor record {
    # Date and time when the content was authored
    string date?;
    # The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted
    string name;
    # The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted
    string email;
};

# Source information for cross-referenced timeline events
public type TimelineCrossReferencedEventSource record {
    # Issues are a great way to keep track of tasks, enhancements, and bugs for your projects
    Issue issue?;
    # Type of the cross-referenced event source
    string 'type?;
};

# Represents the Queries record for the operation: codespaces/pre-flight-with-repo-for-authenticated-user
public type CodespacesPreFlightWithRepoForAuthenticatedUserQueries record {
    # The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked
    string ref?;
    # An alternative IP for default location auto-detection, such as when proxying a request
    @http:Query {name: "client_ip"}
    string clientIp?;
};

# Represents the Queries record for the operation: repos/get-repo-rulesets
public type ReposGetRepoRulesetsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Include rulesets configured at higher levels that apply to this repository
    @http:Query {name: "includes_parents"}
    boolean includesParents = true;
};

# An identifier for the upload
public type CodeScanningAnalysisSarifId string;

# User Marketplace Purchase
public type UserMarketplacePurchase record {
    # Date and time when the free trial period expires
    @jsondata:Name {value: "free_trial_ends_on"}
    string? freeTrialEndsOn;
    # Indicates whether the user is currently on a free trial
    @jsondata:Name {value: "on_free_trial"}
    boolean onFreeTrial;
    # Date and time when the purchase was last updated
    @jsondata:Name {value: "updated_at"}
    string? updatedAt;
    # Billing frequency for the marketplace purchase
    @jsondata:Name {value: "billing_cycle"}
    string billingCycle;
    # Marketplace Listing Plan
    MarketplaceListingPlan plan;
    # Number of units purchased in the marketplace transaction
    @jsondata:Name {value: "unit_count"}
    int? unitCount;
    # GitHub Marketplace account information and billing details
    MarketplaceAccount account;
    # Date and time of the next billing cycle
    @jsondata:Name {value: "next_billing_date"}
    string? nextBillingDate;
};

# Git tag object containing SHA, type, and URL information
public type GitTagObject record {
    # Type of the Git tag object
    string 'type;
    # SHA hash identifier of the Git tag object
    string sha;
    # API URL for the Git tag object
    string url;
};

# Gist
public type Gist record {
    # A GitHub user
    NullableSimpleUser? owner?;
    # Array of gist forks
    anydata[] forks?;
    # API URL to retrieve gist commits
    @jsondata:Name {value: "commits_url"}
    string commitsUrl;
    # Number of comments on the gist
    int comments;
    # API URL to retrieve gist forks
    @jsondata:Name {value: "forks_url"}
    string forksUrl;
    # Git URL for pushing changes to the gist
    @jsondata:Name {value: "git_push_url"}
    string gitPushUrl;
    # Timestamp when the gist was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Optional description of the gist
    string? description;
    # Whether the gist content is truncated
    boolean truncated?;
    # Array of gist revision history
    anydata[] history?;
    # API URL for the gist
    string url;
    # Whether the gist is publicly visible
    boolean 'public;
    # Timestamp when the gist was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Web URL to view the gist on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Git URL for cloning the gist
    @jsondata:Name {value: "git_pull_url"}
    string gitPullUrl;
    # URL endpoint to access comments for this gist
    @jsondata:Name {value: "comments_url"}
    string commentsUrl;
    # Collection of files contained within the gist
    record {|BaseGistFiles...;|} files;
    # Unique identifier for the gist
    string id;
    # A GitHub user
    NullableSimpleUser? user;
    # Global node ID for the gist
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Request body for merging branches in a repository
public type RepoMergesBody record {
    # The head to merge. This can be a branch name or a commit SHA1
    string head;
    # Commit message to use for the merge commit. If omitted, a default message will be used
    @jsondata:Name {value: "commit_message"}
    string commitMessage?;
    # The name of the base branch that the head will be merged into
    string base;
};

# Represents the Queries record for the operation: search/users
public type SearchUsersQueries record {
    # The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers
    string q;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
    "followers"|"repositories"|"joined" sort?;
    # Page number of the results to fetch
    int page = 1;
    # Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`
    "desc"|"asc" 'order = "desc";
};

# Represents the Queries record for the operation: repos/list-commit-statuses-for-ref
public type ReposListCommitStatusesForRefQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for updating a check run
public type CheckRunscheckRunIdBody record {"completed" status?;}|record {"queued"|"in_progress" status?;};

# OAuth application information for authorization
public type AuthorizationApp record {
    # Name of the OAuth application
    string name;
    # Client ID of the OAuth application
    @jsondata:Name {value: "client_id"}
    string clientId;
    # Homepage URL of the OAuth application
    string url;
};

# Request body for creating deployment protection rules
public type EnvironmentNameDeploymentProtectionRulesBody record {
    # The ID of the custom app that will be enabled on the environment
    @jsondata:Name {value: "integration_id"}
    int integrationId?;
};

# A product affected by the vulnerability detailed in a repository security advisory
public type RepositoryAdvisoryVulnerability record {|
    # The name of the package affected by the vulnerability
    GlobalAdvisoryPackage? package;
    # The functions in the package that are affected
    @jsondata:Name {value: "vulnerable_functions"}
    string[]? vulnerableFunctions;
    # The range of the package versions affected by the vulnerability
    @jsondata:Name {value: "vulnerable_version_range"}
    string? vulnerableVersionRange;
    # The package version(s) that resolve the vulnerability
    @jsondata:Name {value: "patched_versions"}
    string? patchedVersions;
|};

# Branch protection settings for required commit signatures
public type BranchProtectionRequiredSignatures record {
    # API endpoint URL for required signatures configuration
    string url;
    # Whether required signatures protection is enabled
    boolean enabled;
};

# A repository rule with ruleset details
public type RepositoryRuleDetailed RepositoryRuleDetailedOneOf1|RepositoryRuleDetailedRepositoryRuleDetailedOneOf12|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf123|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf1234|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf12345|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf123456|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf1234567|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf12345678|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf123456789|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf12345678910|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf1234567891011|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf123456789101112|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf12345678910111213|RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf1234567891011121314;

# Configuration for required pull request reviews protection
public type ProtectionRequiredPullRequestReviewsBody record {
    # Users and teams allowed to dismiss reviews
    @jsondata:Name {value: "dismissal_restrictions"}
    ReposownerrepobranchesbranchprotectionRequiredPullRequestReviewsDismissalRestrictions dismissalRestrictions?;
    # Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers
    @jsondata:Name {value: "required_approving_review_count"}
    int requiredApprovingReviewCount?;
    # Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed
    @jsondata:Name {value: "require_code_owner_reviews"}
    boolean requireCodeOwnerReviews?;
    # Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit
    @jsondata:Name {value: "dismiss_stale_reviews"}
    boolean dismissStaleReviews?;
    # Users and teams allowed to bypass pull request requirements
    @jsondata:Name {value: "bypass_pull_request_allowances"}
    ReposownerrepobranchesbranchprotectionRequiredPullRequestReviewsBypassPullRequestAllowances bypassPullRequestAllowances?;
    # Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
    @jsondata:Name {value: "require_last_push_approval"}
    boolean requireLastPushApproval = false;
};

# Request body for creating a private vulnerability report
public type PrivateVulnerabilityReportCreate record {|
    # A short summary of the advisory
    @constraint:String {maxLength: 1024}
    string summary;
    # The severity of the advisory. You must choose between setting this field or `cvss_vector_string`
    "critical"|"high"|"medium"|"low"? severity?;
    # The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`
    @jsondata:Name {value: "cvss_vector_string"}
    string? cvssVectorString?;
    # A detailed description of what the advisory impacts
    @constraint:String {maxLength: 65535}
    string description;
    # An array of products affected by the vulnerability detailed in a repository security advisory
    RepositoryAdvisoryCreateVulnerabilities[]? vulnerabilities?;
    # A list of Common Weakness Enumeration (CWE) IDs
    @jsondata:Name {value: "cwe_ids"}
    string[]? cweIds?;
|};

# Template repository information and metadata
public type RepositoryTemplateRepository record {
    # Number of users who starred the repository
    @jsondata:Name {value: "stargazers_count"}
    int stargazersCount?;
    # Whether the repository is a template repository
    @jsondata:Name {value: "is_template"}
    boolean isTemplate?;
    # Timestamp of the last push to the repository
    @jsondata:Name {value: "pushed_at"}
    string pushedAt?;
    # API endpoint URL for repository subscription
    @jsondata:Name {value: "subscription_url"}
    string subscriptionUrl?;
    # Primary programming language of the repository
    string language?;
    # API endpoint URL template for repository branches
    @jsondata:Name {value: "branches_url"}
    string branchesUrl?;
    # API endpoint URL template for issue comments
    @jsondata:Name {value: "issue_comment_url"}
    string issueCommentUrl?;
    # Whether rebase merging is allowed for pull requests
    @jsondata:Name {value: "allow_rebase_merge"}
    boolean allowRebaseMerge?;
    # URL template for accessing repository labels
    @jsondata:Name {value: "labels_url"}
    string labelsUrl?;
    # URL for accessing repository subscribers
    @jsondata:Name {value: "subscribers_url"}
    string subscribersUrl?;
    # Permission levels for repository template access
    RepositoryTemplateRepositoryPermissions permissions?;
    # Temporary token for cloning the repository
    @jsondata:Name {value: "temp_clone_token"}
    string tempCloneToken?;
    # URL template for accessing repository releases
    @jsondata:Name {value: "releases_url"}
    string releasesUrl?;
    # Subversion URL for the repository
    @jsondata:Name {value: "svn_url"}
    string svnUrl?;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "squash_merge_commit_message"}
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squashMergeCommitMessage?;
    # Number of users subscribed to the repository
    @jsondata:Name {value: "subscribers_count"}
    int subscribersCount?;
    # Unique identifier for the template repository
    int id?;
    # URL template for downloading repository archives
    @jsondata:Name {value: "archive_url"}
    string archiveUrl?;
    # Whether merge commits are allowed for the repository
    @jsondata:Name {value: "allow_merge_commit"}
    boolean allowMergeCommit?;
    # URL template for accessing Git references
    @jsondata:Name {value: "git_refs_url"}
    string gitRefsUrl?;
    # URL for accessing repository forks
    @jsondata:Name {value: "forks_url"}
    string forksUrl?;
    # Visibility level of the repository (public, private, internal)
    string visibility?;
    # URL template for accessing commit statuses
    @jsondata:Name {value: "statuses_url"}
    string statusesUrl?;
    # Number of repositories in the network
    @jsondata:Name {value: "network_count"}
    int networkCount?;
    # SSH URL for cloning the repository
    @jsondata:Name {value: "ssh_url"}
    string sshUrl?;
    # The full name of the repository template (owner/repo format)
    @jsondata:Name {value: "full_name"}
    string fullName?;
    # The size of the repository template in kilobytes
    int size?;
    # Whether auto-merge is allowed for pull requests in this repository
    @jsondata:Name {value: "allow_auto_merge"}
    boolean allowAutoMerge?;
    # API URL to fetch the programming languages used in the repository
    @jsondata:Name {value: "languages_url"}
    string languagesUrl?;
    # The web URL of the repository template on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # API URL template to access repository collaborators
    @jsondata:Name {value: "collaborators_url"}
    string collaboratorsUrl?;
    # The HTTPS URL for cloning the repository template
    @jsondata:Name {value: "clone_url"}
    string cloneUrl?;
    # The name of the repository template
    string name?;
    # API URL template to access pull requests in the repository
    @jsondata:Name {value: "pulls_url"}
    string pullsUrl?;
    # The default branch name of the repository template
    @jsondata:Name {value: "default_branch"}
    string defaultBranch?;
    # API URL to access webhooks for the repository template
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl?;
    # API URL template to access Git trees in the repository
    @jsondata:Name {value: "trees_url"}
    string treesUrl?;
    # API URL to access tags in the repository template
    @jsondata:Name {value: "tags_url"}
    string tagsUrl?;
    # Whether the repository template is private or public
    boolean 'private?;
    # API URL to access contributors of the repository template
    @jsondata:Name {value: "contributors_url"}
    string contributorsUrl?;
    # Whether the repository has downloads enabled
    @jsondata:Name {value: "has_downloads"}
    boolean hasDownloads?;
    # URL for repository notifications
    @jsondata:Name {value: "notifications_url"}
    string notificationsUrl?;
    # Number of open issues in the repository
    @jsondata:Name {value: "open_issues_count"}
    int openIssuesCount?;
    # Repository description text
    string description?;
    # Timestamp when the repository was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # URL for repository deployments
    @jsondata:Name {value: "deployments_url"}
    string deploymentsUrl?;
    # URL for repository deploy keys
    @jsondata:Name {value: "keys_url"}
    string keysUrl?;
    # Whether the repository has projects enabled
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects?;
    # Whether the repository is archived
    boolean archived?;
    # Whether the repository has wiki enabled
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki?;
    # Timestamp when the repository was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The default value for a merge commit title.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)
    @jsondata:Name {value: "merge_commit_title"}
    "PR_TITLE"|"MERGE_MESSAGE" mergeCommitTitle?;
    # URL for repository comments
    @jsondata:Name {value: "comments_url"}
    string commentsUrl?;
    # URL for repository stargazers
    @jsondata:Name {value: "stargazers_url"}
    string stargazersUrl?;
    # Whether the repository is disabled
    boolean disabled?;
    # Whether to automatically delete head branches after merging pull requests
    @jsondata:Name {value: "delete_branch_on_merge"}
    boolean deleteBranchOnMerge?;
    # Git URL for cloning the repository template
    @jsondata:Name {value: "git_url"}
    string gitUrl?;
    # Whether GitHub Pages is enabled for the repository template
    @jsondata:Name {value: "has_pages"}
    boolean hasPages?;
    # Template repository owner information with profile and API URLs
    RepositoryTemplateRepositoryOwner owner?;
    # Whether squash merging is allowed for the repository template
    @jsondata:Name {value: "allow_squash_merge"}
    boolean allowSquashMerge?;
    # API URL template for accessing commits in the repository template
    @jsondata:Name {value: "commits_url"}
    string commitsUrl?;
    # API URL template for comparing commits in the repository template
    @jsondata:Name {value: "compare_url"}
    string compareUrl?;
    # Git API URL template for accessing commits in the repository template
    @jsondata:Name {value: "git_commits_url"}
    string gitCommitsUrl?;
    # Array of topic tags associated with the repository template
    string[] topics?;
    # API URL template for accessing blob objects in the repository template
    @jsondata:Name {value: "blobs_url"}
    string blobsUrl?;
    # Whether branch updates are allowed for the repository template
    @jsondata:Name {value: "allow_update_branch"}
    boolean allowUpdateBranch?;
    # Git API URL template for accessing tags in the repository template
    @jsondata:Name {value: "git_tags_url"}
    string gitTagsUrl?;
    # API URL for merging branches in the repository template
    @jsondata:Name {value: "merges_url"}
    string mergesUrl?;
    # API URL for accessing downloads in the repository template
    @jsondata:Name {value: "downloads_url"}
    string downloadsUrl?;
    # Whether issues are enabled for the repository template
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues?;
    # API URL of the repository template
    string url?;
    # API URL template for accessing contents in the repository template
    @jsondata:Name {value: "contents_url"}
    string contentsUrl?;
    # URL of the repository mirror
    @jsondata:Name {value: "mirror_url"}
    string mirrorUrl?;
    # API URL template for repository milestones
    @jsondata:Name {value: "milestones_url"}
    string milestonesUrl?;
    # API URL for repository teams
    @jsondata:Name {value: "teams_url"}
    string teamsUrl?;
    # Whether the repository is a fork
    boolean 'fork?;
    # API URL template for repository issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl?;
    # API URL for repository events
    @jsondata:Name {value: "events_url"}
    string eventsUrl?;
    # Whether to use PR title as default for squash commits
    @jsondata:Name {value: "use_squash_pr_title_as_default"}
    boolean useSquashPrTitleAsDefault?;
    # API URL for repository issue events
    @jsondata:Name {value: "issue_events_url"}
    string issueEventsUrl?;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "merge_commit_message"}
    "PR_BODY"|"PR_TITLE"|"BLANK" mergeCommitMessage?;
    # API URL template for repository assignees
    @jsondata:Name {value: "assignees_url"}
    string assigneesUrl?;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)
    @jsondata:Name {value: "squash_merge_commit_title"}
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squashMergeCommitTitle?;
    # Number of users watching the repository
    @jsondata:Name {value: "watchers_count"}
    int watchersCount?;
    # Global node identifier for the repository
    @jsondata:Name {value: "node_id"}
    string nodeId?;
    # Repository homepage URL
    string homepage?;
    # Number of repository forks
    @jsondata:Name {value: "forks_count"}
    int forksCount?;
};

# Represents the Queries record for the operation: orgs/list-webhooks
public type OrgsListWebhooksQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Label name string for issue labels endpoint
public type ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf112345 string;

# Enable or disable Dependabot security updates for the repository
public type SecurityAndAnalysisDependabotSecurityUpdates record {
    # The enablement status of Dependabot security updates for the repository
    "enabled"|"disabled" status?;
};

# Represents the Queries record for the operation: pulls/list-files
public type PullsListFilesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Codespace default attributes
public type CodespaceDefaultResponse record {
    # Codespace default attributes
    CodespaceDefault defaults?;
    # User account responsible for codespace billing
    @jsondata:Name {value: "billable_owner"}
    SimpleUser billableOwner?;
};

# Request body for triggering repository dispatch events with custom payloads
public type RepoDispatchesBody record {
    # A custom webhook event name. Must be 100 characters or fewer
    @jsondata:Name {value: "event_type"}
    string eventType;
    # JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10
    @jsondata:Name {value: "client_payload"}
    record {} clientPayload?;
};

# Represents the Queries record for the operation: codespaces/list-org-secrets
public type CodespacesListOrgSecretsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for removing assignees from an issue
public type IssueNumberAssigneesBody1 record {
    # Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
    string[] assignees?;
};

# The default workflow permissions granted to the GITHUB_TOKEN when running workflows
public type ActionsDefaultWorkflowPermissions "read"|"write";

# The breakdown of Copilot for Business seats for the organization
public type CopilotSeatBreakdown record {
    # The number of seats that have not used Copilot during the current billing cycle
    @jsondata:Name {value: "inactive_this_cycle"}
    int inactiveThisCycle?;
    # The total number of seats being billed for the organization as of the current billing cycle
    int total?;
    # Seats added during the current billing cycle
    @jsondata:Name {value: "added_this_cycle"}
    int addedThisCycle?;
    # The number of seats that have been assigned to users that have not yet accepted an invitation to this organization
    @jsondata:Name {value: "pending_invitation"}
    int pendingInvitation?;
    # The number of seats that have used Copilot during the current billing cycle
    @jsondata:Name {value: "active_this_cycle"}
    int activeThisCycle?;
    # The number of seats that are pending cancellation at the end of the current billing cycle
    @jsondata:Name {value: "pending_cancellation"}
    int pendingCancellation?;
};

# Represents the Queries record for the operation: packages/list-packages-for-user
public type PackagesListPackagesForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
    # 
    # The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
    # For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    "public"|"private"|"internal" visibility?;
    # Page number of the results to fetch
    int page = 1;
    # The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry
    @http:Query {name: "package_type"}
    "npm"|"maven"|"rubygems"|"docker"|"nuget"|"container" packageType;
};

# Page Build Status
public type PageBuildStatus record {
    # API URL for the page build status
    string url;
    # Current status of the page build
    string status;
};

# Docker package metadata containing tag information
public type DockerMetadata record {
    # Array of Docker tags for the package
    string[] tag?;
};

# Parameters for updating repository rule settings
public type RepositoryRuleUpdateParameters record {
    # Branch can pull changes from its upstream repository
    @jsondata:Name {value: "update_allows_fetch_and_merge"}
    boolean updateAllowsFetchAndMerge;
};

# Groups of organization members that gives permissions on specified repositories
public type TeamFull record {
    # Groups of organization members that gives permissions on specified repositories
    NullableTeamSimple? parent?;
    # API URL for accessing team repositories
    @jsondata:Name {value: "repositories_url"}
    string repositoriesUrl;
    # Number of repositories associated with the team
    @jsondata:Name {value: "repos_count"}
    int reposCount;
    # API URL template for accessing team members
    @jsondata:Name {value: "members_url"}
    string membersUrl;
    # Optional description of the team
    string? description;
    # The level of privacy this team should have
    "closed"|"secret" privacy?;
    # Timestamp when the team was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Permission that the team will have for its repositories
    string permission;
    # URL for the team
    string url;
    # The notification setting the team has set
    @jsondata:Name {value: "notification_setting"}
    "notifications_enabled"|"notifications_disabled" notificationSetting?;
    # Distinguished Name (DN) that team maps to within LDAP environment
    @jsondata:Name {value: "ldap_dn"}
    string ldapDn?;
    # Timestamp when the team was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Web URL for viewing the team on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Team Organization
    TeamOrganization organization;
    # Name of the team
    string name;
    # Number of members in the team
    @jsondata:Name {value: "members_count"}
    int membersCount;
    # Unique identifier of the team
    int id;
    # URL-friendly identifier for the team
    string slug;
    # The GraphQL Global Relay ID of the team
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Project cards represent a scope of work
public type ProjectCard record {
    # API URL of the project column containing this card
    @jsondata:Name {value: "column_url"}
    string columnUrl;
    # The note content of the project card
    string? note;
    # A GitHub user
    NullableSimpleUser? creator;
    # The name of the project column containing this card
    @jsondata:Name {value: "column_name"}
    string columnName?;
    # The timestamp when the project card was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # API URL of the project containing this card
    @jsondata:Name {value: "project_url"}
    string projectUrl;
    # API URL of the project card
    string url;
    # Whether or not the card is archived
    boolean archived?;
    # The timestamp when the project card was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The unique identifier of the project containing this card
    @jsondata:Name {value: "project_id"}
    string projectId?;
    # API URL of the content associated with this card
    @jsondata:Name {value: "content_url"}
    string contentUrl?;
    # The project card's ID
    int id;
    # The GraphQL Global Relay ID of the project card
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Request body for creating a codespace from a pull request
public type PullNumberCodespacesBody record {
    # The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated
    "EuropeWest"|"SoutheastAsia"|"UsEast"|"UsWest" geo?;
    # Path to devcontainer.json config to use for this codespace
    @jsondata:Name {value: "devcontainer_path"}
    string devcontainerPath?;
    # Whether to authorize requested permissions from devcontainer.json
    @jsondata:Name {value: "multi_repo_permissions_opt_out"}
    boolean multiRepoPermissionsOptOut?;
    # Machine type to use for this codespace
    string machine?;
    # The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided
    string location?;
    # IP for location auto-detection when proxying a request
    @jsondata:Name {value: "client_ip"}
    string clientIp?;
    # Working directory for this codespace
    @jsondata:Name {value: "working_directory"}
    string workingDirectory?;
    # Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days)
    @jsondata:Name {value: "retention_period_minutes"}
    int retentionPeriodMinutes?;
    # Display name for this codespace
    @jsondata:Name {value: "display_name"}
    string displayName?;
    # Time in minutes before codespace stops from inactivity
    @jsondata:Name {value: "idle_timeout_minutes"}
    int idleTimeoutMinutes?;
};

# A link to additional advisory information
public type DependabotAlertSecurityAdvisoryReferences record {|
    # The URL of the reference
    string url;
|};

# Represents the Queries record for the operation: code-scanning/list-recent-analyses
public type CodeScanningListRecentAnalysesQueries record {
    # The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both
    @http:Query {name: "tool_name"}
    CodeScanningAnalysisToolName toolName?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`
    CodeScanningRef ref?;
    # Filter analyses belonging to the same SARIF upload
    @http:Query {name: "sarif_id"}
    CodeScanningAnalysisSarifId sarifId?;
    # Page number of the results to fetch
    int page = 1;
    # The property by which to sort the results
    "created" sort = "created";
    # The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both
    @http:Query {name: "tool_guid"}
    CodeScanningAnalysisToolGuid? toolGuid?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Array of label names to add to an issue
@constraint:Array {minLength: 1}
public type ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf12 string[];

# Environment details for deployment approvals
public type EnvironmentApprovalsEnvironments record {
    # The time that the environment was last updated, in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # Web URL for viewing the environment's deployment activity log
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # The name of the environment
    string name?;
    # The time that the environment was created, in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The id of the environment
    int id?;
    # API URL for accessing the environment resource
    string url?;
    # GraphQL node identifier for the environment
    @jsondata:Name {value: "node_id"}
    string nodeId?;
};

# Represents the Queries record for the operation: packages/restore-package-for-org
public type PackagesRestorePackageForOrgQueries record {
    # package token
    string token?;
};

# String value for issue label operation
public type ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf12345 string;

# A migration
public type Migration record {
    # A GitHub user
    NullableSimpleUser? owner;
    # URL to download the migration archive
    @jsondata:Name {value: "archive_url"}
    string archiveUrl?;
    # Whether to exclude Git data from the migration
    @jsondata:Name {value: "exclude_git_data"}
    boolean excludeGitData;
    # Timestamp when the migration was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Whether to exclude releases from the migration
    @jsondata:Name {value: "exclude_releases"}
    boolean excludeReleases;
    # Whether to exclude owner projects from the migration
    @jsondata:Name {value: "exclude_owner_projects"}
    boolean excludeOwnerProjects;
    # Whether to lock repositories during migration
    @jsondata:Name {value: "lock_repositories"}
    boolean lockRepositories;
    # API URL for accessing the migration resource
    string url;
    # Whether to exclude metadata from the migration
    @jsondata:Name {value: "exclude_metadata"}
    boolean excludeMetadata;
    # Timestamp when the migration was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The repositories included in the migration. Only returned for export migrations
    Repository[] repositories;
    # Unique identifier for the migration
    string guid;
    # Whether to exclude attachments from the migration
    @jsondata:Name {value: "exclude_attachments"}
    boolean excludeAttachments;
    # Indicates if migration includes only organization metadata
    @jsondata:Name {value: "org_metadata_only"}
    boolean orgMetadataOnly;
    # Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`
    string[] exclude?;
    # Unique identifier for the migration
    int id;
    # Current state of the migration process
    string state;
    # Global node identifier for the migration
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Repository rule combining required status checks with ruleset info
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf12345678 record {
    *RepositoryRuleRequiredStatusChecks;
    *RepositoryRuleRulesetInfo;
};

# Identifies the variable values associated with the environment in which this analysis was performed
public type CodeScanningAnalysisEnvironment string;

# Repository rule combining commit author email pattern with ruleset info
public type RepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedRepositoryRuleDetailedOneOf1234567891011 record {
    *RepositoryRuleCommitAuthorEmailPattern;
    *RepositoryRuleRulesetInfo;
};

# Repository access permissions for different privilege levels
public type RepositoryPermissions record {
    # Permission to pull/read from the repository
    boolean pull;
    # Permission to maintain repository settings and manage issues
    boolean maintain?;
    # Administrative permission with full repository access
    boolean admin;
    # Whether the user has triage permissions on the repository
    boolean triage?;
    # Whether the user has push permissions on the repository
    boolean push;
};

# Request body for updating a variable with name and value
public type VariablesnameBody1 record {
    # The name of the variable
    string name?;
    # The value of the variable
    string value?;
};

# The dismissal comment associated with the dismissal of the alert
public type CodeScanningAlertDismissedComment string?;

# Array of label names to add to an issue
@constraint:Array {minLength: 1}
public type ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf112 string[];

# HTTPS certificate information for GitHub Pages
public type PagesHttpsCertificate record {
    # The expiration date of the HTTPS certificate
    @jsondata:Name {value: "expires_at"}
    string expiresAt?;
    # Human-readable description of the certificate status
    string description;
    # Array of the domain set and its alternate name (if it is configured)
    string[] domains;
    # Current state of the HTTPS certificate
    "new"|"authorization_created"|"authorization_pending"|"authorized"|"authorization_revoked"|"issued"|"uploaded"|"approved"|"errored"|"bad_authz"|"destroy_pending"|"dns_changed" state;
};

# Commit information from search results
public type CommitSearchResultItemCommit record {
    # Number of comments on the commit
    @jsondata:Name {value: "comment_count"}
    int commentCount;
    # Metaproperties for Git author/committer information
    NullableGitUser? committer;
    # Author information for a commit in search results
    CommitSearchResultItemCommitAuthor author;
    # Basic commit information for a branch
    ShortBranchCommit tree;
    # The commit message
    string message;
    # URL to the commit
    string url;
    # Contains verification details for signed commits or tags
    Verification verification?;
};

# Request body for creating an organization project
public type OrgProjectsBody record {
    # The name of the project
    string name;
    # The description of the project
    string body?;
};

# Combined billing usage information for storage
public type CombinedBillingUsage record {
    # Numbers of days left in billing cycle
    @jsondata:Name {value: "days_left_in_billing_cycle"}
    int daysLeftInBillingCycle;
    # Estimated storage space (GB) used in billing cycle
    @jsondata:Name {value: "estimated_paid_storage_for_month"}
    int estimatedPaidStorageForMonth;
    # Estimated sum of free and paid storage space (GB) used in billing cycle
    @jsondata:Name {value: "estimated_storage_for_month"}
    int estimatedStorageForMonth;
};

# Team Membership
public type TeamMembership record {
    # The role of the user in the team
    "member"|"maintainer" role = "member";
    # The state of the user's membership in the team
    "active"|"pending" state;
    # URL to the team membership
    string url;
};

# GitHub App manifest conversion with authentication credentials
public type ManifestConversions record {
    *Integration;
    # OAuth app client identifier
    string client_id;
    # OAuth app client secret
    string client_secret;
    # Secret for webhook payload validation
    string? webhook_secret;
    # Private key in PEM format
    string pem;
};

# Request body for creating organization teams
public type OrgTeamsBody record {
    # List GitHub IDs for organization members who will become team maintainers
    string[] maintainers?;
    # The ID of a team to set as the parent team
    @jsondata:Name {value: "parent_team_id"}
    int parentTeamId?;
    # The name of the team
    string name;
    # The full name (e.g., "organization-name/repository-name") of repositories to add the team to
    @jsondata:Name {value: "repo_names"}
    string[] repoNames?;
    # The description of the team
    string description?;
    # The level of privacy this team should have. The options are:  
    # **For a non-nested team:**  
    #  * `secret` - only visible to organization owners and members of this team.  
    #  * `closed` - visible to all members of this organization.  
    # Default: `secret`  
    # **For a parent or child team:**  
    #  * `closed` - visible to all members of this organization.  
    # Default for child team: `closed`
    "secret"|"closed" privacy?;
    # **Deprecated**. The permission that new repositories will be added to the team with when none is specified
    "pull"|"push" permission = "pull";
    # The notification setting the team has chosen. The options are:  
    #  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
    #  * `notifications_disabled` - no one receives notifications.  
    # Default: `notifications_enabled`
    @jsondata:Name {value: "notification_setting"}
    "notifications_enabled"|"notifications_disabled" notificationSetting?;
};

# The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`
public type WebhookConfigContentType string;

# Whether or not a user who created the job is prevented from approving their own job
public type PreventSelfReview boolean;

# Array of text matches found in search results
public type SearchResultTextMatches SearchResultTextMatchesInner[];

# Request body for managing codespace billing access for users
public type AccessSelectedUsersBody1 record {
    # The usernames of the organization members whose codespaces should not be billed to the organization
    @jsondata:Name {value: "selected_usernames"}
    string[] selectedUsernames;
};

# Response
public type RuleSuite record {
    # The result of the rule evaluations for rules with the `active` enforcement status
    "pass"|"fail"|"bypass" result?;
    # The first commit sha before the push evaluation
    @jsondata:Name {value: "before_sha"}
    string beforeSha?;
    # The ref name that the evaluation ran on
    string ref?;
    # The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`
    @jsondata:Name {value: "evaluation_result"}
    "pass"|"fail" evaluationResult?;
    # Details on the evaluated rules
    @jsondata:Name {value: "rule_evaluations"}
    RuleSuiteRuleEvaluations[] ruleEvaluations?;
    # Timestamp when the rule suite was pushed
    @jsondata:Name {value: "pushed_at"}
    string pushedAt?;
    # The handle for the GitHub user account
    @jsondata:Name {value: "actor_name"}
    string actorName?;
    # The ID of the repository associated with the rule evaluation
    @jsondata:Name {value: "repository_id"}
    int repositoryId?;
    # The unique identifier of the rule insight
    int id?;
    # The number that identifies the user
    @jsondata:Name {value: "actor_id"}
    int actorId?;
    # The last commit sha in the push evaluation
    @jsondata:Name {value: "after_sha"}
    string afterSha?;
    # The name of the repository without the `.git` extension
    @jsondata:Name {value: "repository_name"}
    string repositoryName?;
};

# Object containing array of label names to add to issue
public type ReposownerrepoissuesissueNumberlabelsOneOf11 record {
    # The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue)."
    @constraint:Array {minLength: 1}
    string[] labels?;
};

# Information about a Copilot for Business seat assignment for a user, team, or organization
public type CopilotSeatDetailsResponse record {
    # Total number of Copilot For Business seats for the organization currently being billed
    @jsondata:Name {value: "total_seats"}
    int totalSeats?;
    # Array of Copilot seat details
    CopilotSeatDetails[] seats?;
};

# Represents the Queries record for the operation: copilot/list-copilot-seats
public type CopilotListCopilotSeatsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 50;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for updating comment content
public type CommentscommentIdBody record {
    # The contents of the comment
    string body;
};

# Comments provide a way for people to collaborate on an issue
public type IssueComment record {
    # URL of the issue containing this comment
    @jsondata:Name {value: "issue_url"}
    string issueUrl;
    # HTML-rendered comment body content
    @jsondata:Name {value: "body_html"}
    string bodyHtml?;
    # Plain text content of the issue comment
    @jsondata:Name {value: "body_text"}
    string bodyText?;
    # Timestamp when the issue comment was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Contents of the issue comment
    string body?;
    # URL for the issue comment
    string url;
    # Author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # Timestamp when the issue comment was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # GitHub App that performed the action, if applicable
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp?;
    # URL to view the issue comment in GitHub's web interface
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Aggregated count of all reaction types on a GitHub item
    ReactionRollup reactions?;
    # Unique identifier of the issue comment
    int id;
    # A GitHub user
    NullableSimpleUser? user;
    # Global node identifier for the issue comment
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Label object with color, name, description, and ID properties
public type LabelsLabelsOneOf12 record {
    # Hexadecimal color code for the label
    string? color?;
    # Display name of the label
    string name?;
    # Optional description text for the label
    string? description?;
    # Unique identifier for the label
    int id?;
};

# Repository actions caches
public type ActionsCacheList record {
    # Total number of caches
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of caches
    @jsondata:Name {value: "actions_caches"}
    ActionsCacheListActionsCaches[] actionsCaches;
};

# A software package
public type Package record {
    # A GitHub user
    NullableSimpleUser? owner?;
    # Access level of the package (private or public)
    "private"|"public" visibility;
    # Timestamp when the package was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # URL to view the package in GitHub's web interface
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # The name of the package
    string name;
    # Timestamp when the package was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier of the package
    int id;
    # Type of package (npm, maven, rubygems, docker, nuget, container)
    @jsondata:Name {value: "package_type"}
    "npm"|"maven"|"rubygems"|"docker"|"nuget"|"container" packageType;
    # Minimal Repository
    NullableMinimalRepository? repository?;
    # The number of versions of the package
    @jsondata:Name {value: "version_count"}
    int versionCount;
    # API URL for the package
    string url;
};

# Represents the Queries record for the operation: code-scanning/list-alerts-for-repo
public type CodeScanningListAlertsForRepoQueries record {
    # The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both
    @http:Query {name: "tool_name"}
    CodeScanningAnalysisToolName toolName?;
    # If specified, only code scanning alerts with this severity will be returned
    CodeScanningAlertSeverity severity?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`
    CodeScanningRef ref?;
    # Page number of the results to fetch
    int page = 1;
    # The property by which to sort the results
    "created"|"updated" sort = "created";
    # If specified, only code scanning alerts with this state will be returned
    CodeScanningAlertStateQuery state?;
    # The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both
    @http:Query {name: "tool_guid"}
    CodeScanningAnalysisToolGuid? toolGuid?;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# Request body for updating repository invitation permissions
public type InvitationsinvitationIdBody record {
    # The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`
    "read"|"write"|"maintain"|"triage"|"admin" permissions?;
};

# Represents the Queries record for the operation: repos/list-commit-comments-for-repo
public type ReposListCommitCommentsForRepoQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Git commit signature verification details
public type GitCommitVerification record {
    # Reason for verification status
    string reason;
    # GPG signature string
    string? signature;
    # Signed payload content
    string? payload;
    # Whether the signature is verified
    boolean verified;
};

# Details of a dismissed pull request review
public type ReviewDismissedIssueEventDismissedReview record {
    # Unique identifier of the dismissed review
    @jsondata:Name {value: "review_id"}
    int reviewId;
    # State of the dismissed review
    string state;
    # Commit ID at time of review dismissal
    @jsondata:Name {value: "dismissal_commit_id"}
    string dismissalCommitId?;
    # Message explaining why the review was dismissed
    @jsondata:Name {value: "dismissal_message"}
    string? dismissalMessage;
};

# Workflow access level configuration for repository actions
public type ActionsWorkflowAccessToRepository record {
    # Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
    # repository.
    # 
    # `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repos only. `organization` level access allows sharing across the organization
    @jsondata:Name {value: "access_level"}
    "none"|"user"|"organization" accessLevel;
};

# Represents the Queries record for the operation: migrations/get-status-for-org
public type MigrationsGetStatusForOrgQueries record {
    # Exclude attributes from the API response to improve performance
    ("repositories")[] exclude?;
};

# Links object containing self and HTML URLs for branch protection
public type BranchWithProtectionLinks record {
    # API URL for the branch protection resource
    string self;
    # HTML URL for viewing the branch protection
    string html;
};

# Check suite associated with a check run
public type CheckRunCheckSuite record {
    # Unique identifier of the check suite
    int id;
};

# Array of users who starred the repository
public type StargazerResponseAnyOf1 SimpleUser[];

# Request body for updating an issue
public type IssuesissueNumberBody record {
    # The reason for the state change. Ignored unless `state` is changed
    @jsondata:Name {value: "state_reason"}
    "completed"|"not_planned"|"reopened"? stateReason?;
    # Milestone to associate with issue or null to remove
    string|int? milestone?;
    # Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped
    string[] assignees?;
    # Username to assign to this issue. **This field is deprecated.**
    string? assignee?;
    # The open or closed state of the issue
    "open"|"closed" state?;
    # The title of the issue
    string|int? title?;
    # The contents of the issue
    string? body?;
    # Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped
    ReposownerrepoissuesissueNumberLabels[] labels?;
};

# Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties
public type OrgRulesetConditions RepositoryNameAndRefName|RepositoryIdAndRefName;

# Parent commit reference with SHA and URLs
public type CommitParents record {
    # HTML URL for viewing the parent commit
    @jsondata:Name {value: "html_url"}
    string htmlUrl?;
    # SHA hash of the parent commit
    string sha;
    # API URL for the parent commit
    string url;
};

# Base branch information for a pull request
public type PullRequestBase record {
    # The branch reference name for the pull request base
    string ref;
    # Repository information for the base branch of a pull request
    PullRequestBaseRepo repo;
    # The label identifier for the pull request base branch
    string label;
    # The SHA hash of the commit at the pull request base
    string sha;
    # Owner information for the head repository in a pull request
    PullRequestHeadRepoOwner user;
};

# Renamed Issue Event
public type RenamedIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the issue rename event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed the issue rename event
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Details about an issue rename event
    RenamedIssueEventRename rename;
    # Timestamp when the issue rename event was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the issue rename event
    int id;
    # The type of event that occurred on the issue
    string event;
    # The commit ID associated with the issue rename event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # API URL for the issue rename event
    string url;
    # Global node identifier for the issue rename event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Request body schema for creating a new repository under a user account
public type UserReposBody record {
    # Whether the repository is initialized with a minimal README
    @jsondata:Name {value: "auto_init"}
    boolean autoInit = false;
    # The desired language or platform to apply to the .gitignore
    @jsondata:Name {value: "gitignore_template"}
    string gitignoreTemplate?;
    # Whether to allow squash merges for pull requests
    @jsondata:Name {value: "allow_squash_merge"}
    boolean allowSquashMerge = true;
    # Whether to allow merge commits for pull requests
    @jsondata:Name {value: "allow_merge_commit"}
    boolean allowMergeCommit = true;
    # Whether the repository is private
    boolean 'private = false;
    # Whether downloads are enabled
    @jsondata:Name {value: "has_downloads"}
    boolean hasDownloads = true;
    # Whether this repository acts as a template that can be used to generate new repositories
    @jsondata:Name {value: "is_template"}
    boolean isTemplate = false;
    # A short description of the repository
    string description?;
    # The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization
    @jsondata:Name {value: "team_id"}
    int teamId?;
    # Whether to allow rebase merges for pull requests
    @jsondata:Name {value: "allow_rebase_merge"}
    boolean allowRebaseMerge = true;
    # Whether issues are enabled
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues = true;
    # Whether projects are enabled
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects = true;
    # The license keyword of the open source license for this repository
    @jsondata:Name {value: "license_template"}
    string licenseTemplate?;
    # Whether the wiki is enabled
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki = true;
    # Whether to allow Auto-merge to be used on pull requests
    @jsondata:Name {value: "allow_auto_merge"}
    boolean allowAutoMerge = false;
    # The default value for a merge commit title.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)
    @jsondata:Name {value: "merge_commit_title"}
    "PR_TITLE"|"MERGE_MESSAGE" mergeCommitTitle?;
    # The name of the repository
    string name;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "squash_merge_commit_message"}
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squashMergeCommitMessage?;
    # Whether to delete head branches when pull requests are merged
    @jsondata:Name {value: "delete_branch_on_merge"}
    boolean deleteBranchOnMerge = false;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "merge_commit_message"}
    "PR_BODY"|"PR_TITLE"|"BLANK" mergeCommitMessage?;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)
    @jsondata:Name {value: "squash_merge_commit_title"}
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squashMergeCommitTitle?;
    # Whether discussions are enabled
    @jsondata:Name {value: "has_discussions"}
    boolean hasDiscussions = false;
    # A URL with more information about the repository
    string homepage?;
};

# Represents the Queries record for the operation: teams/list-discussions-legacy
public type TeamsListDiscussionsLegacyQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # The direction to sort the results by
    "asc"|"desc" direction = "desc";
};

# The REST API URL for fetching the list of instances for an alert
public type AlertInstancesUrl string;

# Request body schema for updating environment configuration settings
public type EnvironmentsenvironmentNameBody record {|
    # Configuration to prevent users from reviewing their own deployments
    @jsondata:Name {value: "prevent_self_review"}
    PreventSelfReview preventSelfReview?;
    # Policy settings for which branches can deploy to this environment
    @jsondata:Name {value: "deployment_branch_policy"}
    DeploymentBranchPolicySettings? deploymentBranchPolicy?;
    # Wait timer configuration for environment deployment delays
    @jsondata:Name {value: "wait_timer"}
    WaitTimer waitTimer?;
    # The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed
    ReposownerrepoenvironmentsenvironmentNameReviewers[]? reviewers?;
|};

# Request body for updating secret scanning alert state and resolution
public type AlertsalertNumberBody2 record {
    # Optional comment explaining the resolution of the secret scanning alert
    @jsondata:Name {value: "resolution_comment"}
    SecretScanningAlertResolutionComment? resolutionComment?;
    # Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`
    SecretScanningAlertState state;
    # **Required when the `state` is `resolved`.** The reason for resolving the alert
    SecretScanningAlertResolution? resolution?;
};

# Snapshot of a newly created repository's dependencies
public type SnapshotResponse record {
    # Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed
    string result;
    # The time at which the snapshot was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # ID of the created snapshot
    int id;
    # A message providing further details about the result, such as why the dependencies were not updated
    string message;
};

# Prevent users with push access from force pushing to refs
public type RepositoryRuleNonFastForward record {
    # Rule type identifier for non-fast-forward push restrictions
    "non_fast_forward" 'type;
};

# Pull request review requirements for protected branch configuration
public type ProtectedBranchRequiredPullRequestReviews record {
    # Restrictions on who can dismiss pull request reviews
    @jsondata:Name {value: "dismissal_restrictions"}
    ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions dismissalRestrictions?;
    # Number of approving reviews required before merging
    @jsondata:Name {value: "required_approving_review_count"}
    int requiredApprovingReviewCount?;
    # Whether code owner reviews are required for pull requests
    @jsondata:Name {value: "require_code_owner_reviews"}
    boolean requireCodeOwnerReviews?;
    # Whether to dismiss stale reviews when new commits are pushed
    @jsondata:Name {value: "dismiss_stale_reviews"}
    boolean dismissStaleReviews?;
    # Users and teams allowed to bypass pull request requirements
    @jsondata:Name {value: "bypass_pull_request_allowances"}
    ProtectedBranchRequiredPullRequestReviewsBypassPullRequestAllowances bypassPullRequestAllowances?;
    # Whether the most recent push must be approved by someone other than the person who pushed it
    @jsondata:Name {value: "require_last_push_approval"}
    boolean requireLastPushApproval = false;
    # API URL for the pull request review requirements configuration
    string url;
};

# Details for the vulnerable package
public type DependabotAlertPackage record {|
    # The package's language or package management ecosystem
    string ecosystem;
    # The unique package name within its ecosystem
    string name;
|};

# Request body for updating Dependabot alert state with dismissal options
public type AlertsalertNumberBody1 record {|
    # An optional comment associated with dismissing the alert
    @jsondata:Name {value: "dismissed_comment"}
    string dismissedComment?;
    # The state of the Dependabot alert.
    # A `dismissed_reason` must be provided when setting the state to `dismissed`
    "dismissed"|"open" state;
    # **Required when `state` is `dismissed`.** A reason for dismissing the alert
    @jsondata:Name {value: "dismissed_reason"}
    "fix_started"|"inaccurate"|"no_bandwidth"|"not_used"|"tolerable_risk" dismissedReason?;
|};

# The public key used for setting Dependabot Secrets
public type DependabotPublicKey record {
    # The identifier for the key
    @jsondata:Name {value: "key_id"}
    string keyId;
    # The Base64 encoded public key
    string 'key;
};

# Secrets for GitHub Actions for an organization
public type OrganizationActionsSecretResponse record {
    # Total number of organization secrets
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Array of organization action secrets
    OrganizationActionsSecret[] secrets;
};

# User email address string
public type UseremailsuseremailsuseremailsOneOf123 string;

# A check performed on the code of a given code change
public type CheckRunResponse record {
    # Array of check run objects
    @jsondata:Name {value: "check_runs"}
    CheckRun[] checkRuns;
    # Total number of check runs
    @jsondata:Name {value: "total_count"}
    int totalCount;
};

# Limit interactions to a specific type of user for a specified duration
public type InteractionLimit record {
    # The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect
    InteractionGroup 'limit;
    # The duration of the interaction restriction. Default: `one_day`
    InteractionExpiry expiry?;
};

# Represents the Queries record for the operation: codespaces/list-devcontainers-in-repository-for-authenticated-user
public type CodespacesListDevcontainersInRepositoryForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# SPDX Software Bill of Materials document with package dependencies
public type DependencyGraphSpdxSbomSbom record {
    # The license under which the SPDX document is licensed
    string dataLicense;
    # The namespace for the SPDX document
    string documentNamespace;
    # The version of the SPDX specification that this document conforms to
    string spdxVersion;
    # The SPDX identifier for the SPDX document
    @jsondata:Name {value: "SPDXID"}
    string sPDXID;
    # The name of the SPDX document
    string name;
    # The name of the repository that the SPDX document describes
    string[] documentDescribes;
    # Array of SPDX packages with metadata and version information
    DependencyGraphSpdxSbomSbomPackages[] packages;
    # SPDX SBOM creation metadata including timestamp and creator tools
    DependencyGraphSpdxSbomSbomCreationInfo creationInfo;
};

# Represents the Queries record for the operation: apps/list-accounts-for-plan
public type AppsListAccountsForPlanQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # The property to sort the results by
    "created"|"updated" sort = "created";
    # Page number of the results to fetch
    int page = 1;
    # To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter
    "asc"|"desc" direction?;
};

# File Commit
public type FileCommit record {
    # Commit information for file operations including metadata and verification
    FileCommitCommit 'commit;
    # File content information from a commit including metadata and URLs
    FileCommitContent? content;
};

# Represents the Queries record for the operation: gists/list-commits
public type GistsListCommitsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Credit attribution for repository security advisory contributors
public type RepositoryAdvisoryCreateCredits record {|
    # The username of the user credited
    string login;
    # The type of credit the user is receiving
    SecurityAdvisoryCreditTypes 'type;
|};

# Represents the Queries record for the operation: apps/list-subscriptions-for-authenticated-user
public type AppsListSubscriptionsForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Tag
public type Tag record {
    # Download URL for tag's ZIP archive
    @jsondata:Name {value: "zipball_url"}
    string zipballUrl;
    # Tag name identifier
    string name;
    # Basic commit information for a branch
    ShortBranchCommit 'commit;
    # Download URL for tag's tarball archive
    @jsondata:Name {value: "tarball_url"}
    string tarballUrl;
    # Global node identifier for the tag
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: teams/list-projects-in-org
public type TeamsListProjectsInOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Groups of organization members that gives permissions on specified repositories
public type TeamSimple record {
    # API URL for team's repositories
    @jsondata:Name {value: "repositories_url"}
    string repositoriesUrl;
    # API URL template for team members
    @jsondata:Name {value: "members_url"}
    string membersUrl;
    # Description of the team
    string? description;
    # The level of privacy this team should have
    string privacy?;
    # Permission that the team will have for its repositories
    string permission;
    # URL for the team
    string url;
    # The notification setting the team has set
    @jsondata:Name {value: "notification_setting"}
    string notificationSetting?;
    # Distinguished Name (DN) that team maps to within LDAP environment
    @jsondata:Name {value: "ldap_dn"}
    string ldapDn?;
    # The team's HTML URL on GitHub
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Name of the team
    string name;
    # Unique identifier of the team
    int id;
    # The team's URL slug identifier
    string slug;
    # The team's global node ID
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Request body for creating a discussion comment
public type DiscussionNumberCommentsBody record {
    # The discussion comment's body text
    string body;
};

# Information about the person who tagged the Git object
public type GitTagTagger record {
    # The date when the tag was created
    string date;
    # The tagger's name
    string name;
    # The tagger's email address
    string email;
};

# Details of a GitHub Marketplace purchase
public type MarketplacePurchaseMarketplacePurchase record {
    # Whether the marketplace app is installed
    @jsondata:Name {value: "is_installed"}
    boolean isInstalled?;
    # The date when the free trial ends
    @jsondata:Name {value: "free_trial_ends_on"}
    string? freeTrialEndsOn?;
    # Whether the purchase is on a free trial
    @jsondata:Name {value: "on_free_trial"}
    boolean onFreeTrial?;
    # The date when the purchase was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The billing cycle for the purchase
    @jsondata:Name {value: "billing_cycle"}
    string billingCycle?;
    # Marketplace Listing Plan
    MarketplaceListingPlan plan?;
    # The number of units purchased
    @jsondata:Name {value: "unit_count"}
    int? unitCount?;
    # The next billing date for the marketplace purchase
    @jsondata:Name {value: "next_billing_date"}
    string? nextBillingDate?;
};

# Represents the Queries record for the operation: teams/list-members-legacy
public type TeamsListMembersLegacyQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Filters members returned by their role in the team
    "member"|"maintainer"|"all" role = "all";
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: repos/list-deployment-statuses
public type ReposListDeploymentStatusesQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: users/list-gpg-keys-for-user
public type UsersListGpgKeysForUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for creating a comment on a gist
public type GistIdCommentsBody record {
    # The comment text
    @constraint:String {maxLength: 65535}
    string body;
};

# Represents the Queries record for the operation: repos/get-clones
public type ReposGetClonesQueries record {
    # The time frame to display results for
    "day"|"week" per = "day";
};

# Stargazer
public type Stargazer record {
    # The timestamp when the repository was starred
    @jsondata:Name {value: "starred_at"}
    string starredAt;
    # A GitHub user
    NullableSimpleUser? user;
};

# Protected Branch Required Status Check
public type ProtectedBranchRequiredStatusCheck record {
    # The enforcement level for required status checks
    @jsondata:Name {value: "enforcement_level"}
    string enforcementLevel?;
    # Array of required status check configurations
    ProtectedBranchRequiredStatusCheckChecks[] checks;
    # URL for accessing status check contexts
    @jsondata:Name {value: "contexts_url"}
    string contextsUrl?;
    # Array of required status check context names
    string[] contexts;
    # Whether branches must be up to date before merging
    boolean strict?;
    # URL for the required status check configuration
    string url?;
};

# Request body for creating a repository in an organization
public type OrgReposBody record {
    # Pass `true` to create an initial commit with empty README
    @jsondata:Name {value: "auto_init"}
    boolean autoInit = false;
    # Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell"
    @jsondata:Name {value: "gitignore_template"}
    string gitignoreTemplate?;
    # Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging
    @jsondata:Name {value: "allow_squash_merge"}
    boolean allowSquashMerge = true;
    # Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits
    @jsondata:Name {value: "allow_merge_commit"}
    boolean allowMergeCommit = true;
    # Whether the repository is private
    boolean 'private = false;
    # Whether downloads are enabled
    @jsondata:Name {value: "has_downloads"}
    boolean hasDownloads = true;
    # The visibility of the repository
    "public"|"private" visibility?;
    # Either `true` to make this repo available as a template repository or `false` to prevent it
    @jsondata:Name {value: "is_template"}
    boolean isTemplate = false;
    # A short description of the repository
    string description?;
    # The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization
    @jsondata:Name {value: "team_id"}
    int teamId?;
    # Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging
    @jsondata:Name {value: "allow_rebase_merge"}
    boolean allowRebaseMerge = true;
    # Either `true` to enable issues for this repository or `false` to disable them
    @jsondata:Name {value: "has_issues"}
    boolean hasIssues = true;
    # Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error
    @jsondata:Name {value: "has_projects"}
    boolean hasProjects = true;
    # Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0"
    @jsondata:Name {value: "license_template"}
    string licenseTemplate?;
    # Either `true` to enable the wiki for this repository or `false` to disable it
    @jsondata:Name {value: "has_wiki"}
    boolean hasWiki = true;
    # Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge
    @jsondata:Name {value: "allow_auto_merge"}
    boolean allowAutoMerge = false;
    # Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead
    # 
    # # Deprecated
    @jsondata:Name {value: "use_squash_pr_title_as_default"}
    @deprecated
    boolean useSquashPrTitleAsDefault = false;
    # The default value for a merge commit title.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)
    @jsondata:Name {value: "merge_commit_title"}
    "PR_TITLE"|"MERGE_MESSAGE" mergeCommitTitle?;
    # The name of the repository
    string name;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "squash_merge_commit_message"}
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squashMergeCommitMessage?;
    # Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
    @jsondata:Name {value: "delete_branch_on_merge"}
    boolean deleteBranchOnMerge = false;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message
    @jsondata:Name {value: "merge_commit_message"}
    "PR_BODY"|"PR_TITLE"|"BLANK" mergeCommitMessage?;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)
    @jsondata:Name {value: "squash_merge_commit_title"}
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squashMergeCommitTitle?;
    # A URL with more information about the repository
    string homepage?;
};

# Request body for submitting a pull request review event
public type ReviewIdEventsBody record {
    # The body text of the pull request review
    string body?;
    # The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action
    "APPROVE"|"REQUEST_CHANGES"|"COMMENT" event;
};

public type SearchResultTextMatchesInner_matches record {
    # Matched text content
    string text?;
    # Character positions of the match in the text
    int[] indices?;
};

# A repository on GitHub
public type RepositoryResponse record {
    # The repository selection type (all, selected, etc.)
    @jsondata:Name {value: "repository_selection"}
    string repositorySelection?;
    # Array of repository objects in the response
    Repository[] repositories;
    # Total number of repositories in the response
    @jsondata:Name {value: "total_count"}
    int totalCount;
};

# Represents the Queries record for the operation: orgs/list-blocked-users
public type OrgsListBlockedUsersQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Request body for creating or updating an Actions variable
public type ActionsVariablesBody record {
    # An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`
    @jsondata:Name {value: "selected_repository_ids"}
    int[] selectedRepositoryIds?;
    # The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable
    "all"|"private"|"selected" visibility;
    # The name of the variable
    string name;
    # The value of the variable
    string value;
};

# License information for the head repository in a pull request
public type PullRequestHeadRepoLicense record {
    # Human-readable name of the license
    string name;
    # SPDX license identifier
    @jsondata:Name {value: "spdx_id"}
    string? spdxId;
    # Unique key identifier for the license
    string 'key;
    # URL to the license details
    string? url;
    # GraphQL global node identifier for the license
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# A codespace
public type CodespaceWithFullRepository record {
    # UUID identifying this codespace's environment
    @jsondata:Name {value: "environment_id"}
    string? environmentId;
    # Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it
    @jsondata:Name {value: "pending_operation"}
    boolean? pendingOperation?;
    # User account responsible for billing charges
    @jsondata:Name {value: "billable_owner"}
    SimpleUser billableOwner;
    # API URL to start this codespace
    @jsondata:Name {value: "start_url"}
    string startUrl;
    # ISO 8601 timestamp when the codespace was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # API URL to stop this codespace
    @jsondata:Name {value: "stop_url"}
    string stopUrl;
    # Full Repository
    FullRepository repository;
    # Last known time this codespace was started
    @jsondata:Name {value: "last_used_at"}
    string lastUsedAt;
    # Whether the codespace was created from a prebuild
    boolean? prebuild;
    # ISO 8601 timestamp when the codespace was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
    @jsondata:Name {value: "retention_expires_at"}
    string? retentionExpiresAt?;
    # Unique identifier for the codespace
    int id;
    # State of this codespace
    "Unknown"|"Created"|"Queued"|"Provisioning"|"Available"|"Awaiting"|"Unavailable"|"Deleted"|"Moved"|"Shutdown"|"Archived"|"Starting"|"ShuttingDown"|"Failed"|"Exporting"|"Updating"|"Rebuilding" state;
    # Git repository status information for the codespace
    @jsondata:Name {value: "git_status"}
    CodespaceGitStatus gitStatus;
    # API URL to publish this codespace to a new repository
    @jsondata:Name {value: "publish_url"}
    string? publishUrl?;
    # API URL to access available alternate machine types for this codespace
    @jsondata:Name {value: "machines_url"}
    string machinesUrl;
    # A GitHub user
    SimpleUser owner;
    # Runtime constraints and limitations for the codespace
    @jsondata:Name {value: "runtime_constraints"}
    CodespaceRuntimeConstraints runtimeConstraints?;
    # Array of recently accessed folder paths in the codespace
    @jsondata:Name {value: "recent_folders"}
    string[] recentFolders;
    # Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days)
    @jsondata:Name {value: "retention_period_minutes"}
    int? retentionPeriodMinutes?;
    # Display name for this codespace
    @jsondata:Name {value: "display_name"}
    string? displayName?;
    # API URL for this codespace
    string url;
    # Path to devcontainer.json from repo root used to create Codespace
    @jsondata:Name {value: "devcontainer_path"}
    string? devcontainerPath?;
    # Text to show user when codespace is disabled by a pending operation
    @jsondata:Name {value: "pending_operation_disabled_reason"}
    string? pendingOperationDisabledReason?;
    # URL to access this codespace on the web
    @jsondata:Name {value: "web_url"}
    string webUrl;
    # A description of the machine powering a codespace
    NullableCodespaceMachine? machine;
    # Automatically generated name of this codespace
    string name;
    # API URL for the Pull Request associated with this codespace, if any
    @jsondata:Name {value: "pulls_url"}
    string? pullsUrl;
    # The initally assigned location of a new codespace
    "EastUs"|"SouthEastAsia"|"WestEurope"|"WestUs2" location;
    # Text to show user when codespace idle timeout minutes has been overriden by an organization policy
    @jsondata:Name {value: "idle_timeout_notice"}
    string? idleTimeoutNotice?;
    # The number of minutes of inactivity after which this codespace will be automatically stopped
    @jsondata:Name {value: "idle_timeout_minutes"}
    int? idleTimeoutMinutes;
};

# Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code
public type CodeScanningAnalysisCategory string;

# Request body for updating repository topics
public type RepoTopicsBody record {
    # An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters
    string[] names;
};

# Represents the Queries record for the operation: users/list-followers-for-authenticated-user
public type UsersListFollowersForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# GitHub plan information for an organization
public type OrganizationPlan record {
    # Number of private repositories allowed in the organization plan
    @jsondata:Name {value: "private_repos"}
    int privateRepos?;
    # Number of seats currently occupied in the organization plan
    @jsondata:Name {value: "filled_seats"}
    int filledSeats?;
    # Name of the organization plan
    string name?;
    # Total number of seats available in the organization plan
    int seats?;
    # Storage space allocated in the organization plan
    int space?;
};

# Represents the Queries record for the operation: teams/list-repos-in-org
public type TeamsListReposInOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: users/get-context-for-user
public type UsersGetContextForUserQueries record {
    # Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`
    @http:Query {name: "subject_id"}
    string subjectId?;
    # Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`
    @http:Query {name: "subject_type"}
    "organization"|"repository"|"issue"|"pull_request" subjectType?;
};

# Request body schema for creating or updating repository rulesets
public type RepoRulesetsBody record {
    # The actors that can bypass the rules in this ruleset
    @jsondata:Name {value: "bypass_actors"}
    RepositoryRulesetBypassActor[] bypassActors?;
    # The name of the ruleset
    string name;
    # The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise)
    RepositoryRuleEnforcement enforcement;
    # An array of rules within the ruleset
    RepositoryRule[] rules?;
    # Parameters for a repository ruleset ref name condition
    RepositoryRulesetConditions conditions?;
    # The target of the ruleset
    "branch"|"tag" target?;
};

# Represents the Queries record for the operation: gists/list-comments
public type GistsListCommentsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# An invocation of a workflow
public type WorkflowRun record {
    # The ID of the parent workflow
    @jsondata:Name {value: "workflow_id"}
    int workflowId;
    # The commit that triggered the workflow run
    @jsondata:Name {value: "head_commit"}
    NullableSimpleCommit? headCommit;
    # The start time of the latest run. Resets on re-run
    @jsondata:Name {value: "run_started_at"}
    string runStartedAt?;
    # The branch name that triggered the workflow run
    @jsondata:Name {value: "head_branch"}
    string? headBranch;
    # The URL to the associated check suite
    @jsondata:Name {value: "check_suite_url"}
    string checkSuiteUrl;
    # The URL to the artifacts for the workflow run
    @jsondata:Name {value: "artifacts_url"}
    string artifactsUrl;
    # The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow
    @jsondata:Name {value: "display_title"}
    string displayTitle;
    # The URL to download the logs for the workflow run
    @jsondata:Name {value: "logs_url"}
    string logsUrl;
    # Timestamp when the workflow run was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The URL to the jobs for the workflow run
    @jsondata:Name {value: "jobs_url"}
    string jobsUrl;
    # Minimal Repository
    MinimalRepository repository;
    # The SHA of the head commit that points to the version of the workflow being run
    @jsondata:Name {value: "head_sha"}
    string headSha;
    # The final conclusion of the workflow run
    string? conclusion;
    # The URL to rerun the workflow run
    @jsondata:Name {value: "rerun_url"}
    string rerunUrl;
    # The full path of the workflow
    string path;
    # Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run
    @jsondata:Name {value: "pull_requests"}
    PullRequestMinimal[]? pullRequests;
    # Timestamp when the workflow run was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # The URL to the previous attempted run of this workflow, if one exists
    @jsondata:Name {value: "previous_attempt_url"}
    string? previousAttemptUrl?;
    # The ID of the workflow run
    int id;
    # The repository where the workflow run's head commit exists
    @jsondata:Name {value: "head_repository"}
    MinimalRepository headRepository;
    # The event that triggered the workflow run
    string event;
    # The user who triggered the workflow run
    @jsondata:Name {value: "triggering_actor"}
    SimpleUser triggeringActor?;
    # The ID of the associated check suite
    @jsondata:Name {value: "check_suite_id"}
    int checkSuiteId?;
    # The URL to the workflow
    @jsondata:Name {value: "workflow_url"}
    string workflowUrl;
    # The node ID of the associated check suite
    @jsondata:Name {value: "check_suite_node_id"}
    string checkSuiteNodeId?;
    # The unique identifier of the head repository
    @jsondata:Name {value: "head_repository_id"}
    int headRepositoryId?;
    # The URL to the workflow run
    string url;
    # A GitHub user
    SimpleUser actor?;
    # Array of workflows referenced by this workflow run
    @jsondata:Name {value: "referenced_workflows"}
    ReferencedWorkflow[]? referencedWorkflows?;
    # HTML URL to view the workflow run in GitHub's web interface
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # The name of the workflow run
    string? name?;
    # The auto incrementing run number for the workflow run
    @jsondata:Name {value: "run_number"}
    int runNumber;
    # Attempt number of the run, 1 for first attempt and higher if the workflow was re-run
    @jsondata:Name {value: "run_attempt"}
    int runAttempt?;
    # The URL to cancel the workflow run
    @jsondata:Name {value: "cancel_url"}
    string cancelUrl;
    # Global node ID for the workflow run
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # Current status of the workflow run execution
    string? status;
};

# Represents the Queries record for the operation: apps/list-plans-stubbed
public type AppsListPlansStubbedQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Configuration settings for webhook delivery and authentication
public type HookConfig record {
    # Password for webhook authentication
    string password?;
    # Content type for webhook payload delivery
    @jsondata:Name {value: "content_type"}
    WebhookConfigContentType contentType?;
    # Whether to disable SSL certificate verification
    @jsondata:Name {value: "insecure_ssl"}
    WebhookConfigInsecureSsl insecureSsl?;
    # Digest algorithm used for webhook payload verification
    string digest?;
    # Subdomain for webhook delivery endpoint
    string subdomain?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers)
    WebhookConfigSecret secret?;
    # Email address for webhook notifications
    string email?;
    # Room or channel identifier for webhook notifications
    string room?;
    # The URL to which the payloads will be delivered
    WebhookConfigUrl url?;
    # Authentication token for webhook delivery
    string token?;
};

# Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name
public type CodeScanningAnalysisAnalysisKey string;

# Cache usage statistics for organization or enterprise
public type ActionsCacheUsageOrgEnterprise record {
    # The total size in bytes of all active cache items across all repositories of an enterprise or an organization
    @jsondata:Name {value: "total_active_caches_size_in_bytes"}
    int totalActiveCachesSizeInBytes;
    # The count of active caches across all repositories of an enterprise or an organization
    @jsondata:Name {value: "total_active_caches_count"}
    int totalActiveCachesCount;
};

# Weekly contributor activity statistics with additions, commits, deletions
public type ContributorActivityWeeks record {
    # Number of additions in the week
    int a?;
    # Number of commits in the week
    int c?;
    # Number of deletions in the week
    int d?;
    # Week timestamp (Unix epoch)
    int w?;
};

# A GitHub organization
public type OrganizationSimple record {
    # API URL for the organization's issues
    @jsondata:Name {value: "issues_url"}
    string issuesUrl;
    # API URL for the organization's repositories
    @jsondata:Name {value: "repos_url"}
    string reposUrl;
    # URL of the organization's avatar image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl;
    # API URL for the organization's events
    @jsondata:Name {value: "events_url"}
    string eventsUrl;
    # API URL template for the organization's members
    @jsondata:Name {value: "members_url"}
    string membersUrl;
    # Description of the organization
    string? description;
    # Unique identifier for the organization
    int id;
    # API URL for the organization's webhooks
    @jsondata:Name {value: "hooks_url"}
    string hooksUrl;
    # Login name of the organization
    string login;
    # API URL for the organization
    string url;
    # GraphQL node ID for the organization
    @jsondata:Name {value: "node_id"}
    string nodeId;
    # API URL template for accessing organization's public members
    @jsondata:Name {value: "public_members_url"}
    string publicMembersUrl;
};

# How the author is associated with the repository
public type AuthorAssociation "COLLABORATOR"|"CONTRIBUTOR"|"FIRST_TIMER"|"FIRST_TIME_CONTRIBUTOR"|"MANNEQUIN"|"MEMBER"|"NONE"|"OWNER";

# Details of a deployment environment
public type Environment record {
    # The time that the environment was last updated, in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # GitHub web URL for viewing the environment's deployment activity
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # The name of the environment
    string name;
    # Built-in deployment protection rules for the environment
    @jsondata:Name {value: "protection_rules"}
    EnvironmentProtectionRules[] protectionRules?;
    # Branch protection policy settings for environment deployments
    @jsondata:Name {value: "deployment_branch_policy"}
    DeploymentBranchPolicySettings? deploymentBranchPolicy?;
    # The time that the environment was created, in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # The id of the environment
    int id;
    # API URL for accessing the environment resource
    string url;
    # Global node identifier for the environment
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: packages/get-all-package-versions-for-package-owned-by-authenticated-user
public type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # The state of the package, either active or deleted
    "active"|"deleted" state = "active";
};

# Minimal pull request representation with basic properties
public type PullRequestMinimal record {
    # Head branch information for a pull request
    PullRequestMinimalHead head;
    # Pull request number identifier
    int number;
    # Unique identifier for the pull request
    int id;
    # API URL for accessing the pull request
    string url;
    # Head branch information for a pull request
    PullRequestMinimalHead base;
};

# Request body for setting issue labels with label names array
public type ReposownerrepoissuesissueNumberlabelsOneOf1 record {
    # The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue)."
    @constraint:Array {minLength: 1}
    string[] labels?;
};

public type workflowId int|string;

# Represents the Queries record for the operation: orgs/list-memberships-for-authenticated-user
public type OrgsListMembershipsForAuthenticatedUserQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships
    "active"|"pending" state?;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: activity/list-repo-notifications-for-authenticated-user
public type ActivityListRepoNotificationsForAuthenticatedUserQueries record {
    # If `true`, show notifications marked as read
    boolean all = false;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string before?;
    # If `true`, only shows notifications in which the user is directly participating or mentioned
    boolean participating = false;
    # Page number of the results to fetch
    int page = 1;
    # Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`
    string since?;
};

# Review request for custom deployment gates requiring comment
public type ReviewCustomGatesCommentRequired record {
    # Comment associated with the pending deployment protection rule. **Required when state is not provided.**
    string comment;
    # The name of the environment to approve or reject
    @jsondata:Name {value: "environment_name"}
    string environmentName;
};

# Pull Request Reviews are reviews on pull requests
public type PullRequestReview record {
    # HTML-formatted content of the pull request review
    @jsondata:Name {value: "body_html"}
    string bodyHtml?;
    # Hypermedia links related to the pull request review
    @jsondata:Name {value: "_links"}
    TimelineReviewedEventLinks links;
    # Timestamp when the pull request review was submitted
    @jsondata:Name {value: "submitted_at"}
    string submittedAt?;
    # Plain text content of the pull request review
    @jsondata:Name {value: "body_text"}
    string bodyText?;
    # API URL of the pull request being reviewed
    @jsondata:Name {value: "pull_request_url"}
    string pullRequestUrl;
    # The text of the review
    string body;
    # Author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # GitHub web URL of the pull request review
    @jsondata:Name {value: "html_url"}
    string htmlUrl;
    # Unique identifier of the review
    int id;
    # Current state of the pull request review
    string state;
    # A GitHub user
    NullableSimpleUser? user;
    # A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # Global node identifier for the pull request review
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue
public type SecretScanningLocationIssueBody record {
    # The API URL to get the issue where the secret was detected
    @jsondata:Name {value: "issue_body_url"}
    string issueBodyUrl;
};

# Protection rules configuration for deployment environments
public type EnvironmentProtectionRules ProtectionRulesAnyOf1|ProtectionRulesProtectionRulesAnyOf12|ProtectionRulesProtectionRulesProtectionRulesAnyOf123;

# Represents the Queries record for the operation: checks/list-suites-for-ref
public type ChecksListSuitesForRefQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Returns check runs with the specified `name`
    @http:Query {name: "check_name"}
    string checkName?;
    # Page number of the results to fetch
    int page = 1;
    # Filters check suites by GitHub App `id`
    @http:Query {name: "app_id"}
    int appId?;
};

# Request body for updating a discussion with title and body content
public type DiscussionsdiscussionNumberBody record {
    # The discussion post's title
    string title?;
    # The discussion post's body text
    string body?;
};

# Code Search Result Item
public type CodeSearchResultItemResponse record {
    # Total number of code search results found
    @jsondata:Name {value: "total_count"}
    int totalCount;
    # Whether the search results are incomplete due to timeout or rate limits
    @jsondata:Name {value: "incomplete_results"}
    boolean incompleteResults;
    # Array of code search result items matching the query
    CodeSearchResultItem[] items;
};

# Array of labels to assign to an issue (minimum 1 required)
@constraint:Array {minLength: 1}
public type ReposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsreposownerrepoissuesissueNumberlabelsOneOf1234 ReposownerrepoissuesissueNumberlabelsLabels[];

# A comment made to a gist
public type GistComment record {
    # Author's association with the repository
    @jsondata:Name {value: "author_association"}
    AuthorAssociation authorAssociation;
    # Timestamp when the gist comment was last updated
    @jsondata:Name {value: "updated_at"}
    string updatedAt;
    # Timestamp when the gist comment was created
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the gist comment
    int id;
    # The comment text
    @constraint:String {maxLength: 65535}
    string body;
    # A GitHub user
    NullableSimpleUser? user;
    # API URL for the gist comment
    string url;
    # Global node identifier for the gist comment
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Represents the Queries record for the operation: codespaces/repo-machines-for-authenticated-user
public type CodespacesRepoMachinesForAuthenticatedUserQueries record {
    # The branch or commit to check for prebuild availability and devcontainer restrictions
    string ref?;
    # The location to check for available machines. Assigned by IP if not provided
    string location?;
    # IP for location auto-detection when proxying a request
    @http:Query {name: "client_ip"}
    string clientIp?;
};

# Added to Project Issue Event
public type AddedToProjectIssueEvent record {
    # A GitHub user
    SimpleUser actor;
    # URL of the commit associated with the project addition event
    @jsondata:Name {value: "commit_url"}
    string? commitUrl;
    # GitHub App that performed the action to add issue to project
    @jsondata:Name {value: "performed_via_github_app"}
    NullableIntegration? performedViaGithubApp;
    # Timestamp when the issue was added to the project
    @jsondata:Name {value: "created_at"}
    string createdAt;
    # Unique identifier for the added to project event
    int id;
    # The type of event that occurred
    string event;
    # The SHA of the commit associated with the event
    @jsondata:Name {value: "commit_id"}
    string? commitId;
    # The API URL for the event
    string url;
    # The project card associated with the event
    @jsondata:Name {value: "project_card"}
    AddedToProjectIssueEventProjectCard projectCard?;
    # The GraphQL node ID of the event
    @jsondata:Name {value: "node_id"}
    string nodeId;
};

# Request body for updating webhook configuration and events
public type HookshookIdBody1 record {
    # Determines a list of events to be removed from the list of events that the Hook triggers for
    @jsondata:Name {value: "remove_events"}
    string[] removeEvents?;
    # Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications
    boolean active = true;
    # Determines a list of events to be added to the list of events that the Hook triggers for
    @jsondata:Name {value: "add_events"}
    string[] addEvents?;
    # Key/value pairs to provide settings for this webhook
    ReposownerrepohookshookIdConfig config?;
    # Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events
    string[] events = ["push"];
};

# Related URLs for the content item
public type ContentDirectoryInner__links record {
    # Git API URL for the content item
    string? git;
    # GitHub web interface URL for the content item
    string? html;
    # API URL for the content item itself
    string self;
};

# Request body for creating a Git reference
public type GitRefsBody record {
    # The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected
    string ref;
    # The SHA1 value for this reference
    string sha;
};

# The REST API URL of the analysis resource
public type CodeScanningAnalysisUrl string;

# Represents the Queries record for the operation: teams/list-child-in-org
public type TeamsListChildInOrgQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Parameters to be used for the tag_name_pattern rule
public type RepositoryRuleTagNamePattern record {
    # The type of repository rule for tag name patterns
    "tag_name_pattern" 'type;
    # Parameters for repository rule that validates commit message patterns
    RepositoryRuleCommitMessagePatternParameters parameters?;
};

# String representation of selected repository identifiers
public type SelectedRepositoryIdsSelectedRepositoryIdsAnyOf12 string;

# Represents the Queries record for the operation: orgs/list-public-members
public type OrgsListPublicMembersQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Contributor Activity
public type ContributorActivity record {
    # Total number of commits by the contributor
    int total;
    # Weekly activity data for the contributor
    ContributorActivityWeeks[] weeks;
    # A GitHub user
    NullableSimpleUser? author;
};

# Request body for creating a scoped user access token
public type TokenScopedBody record {
    # The access token used to authenticate to the GitHub API
    @jsondata:Name {value: "access_token"}
    string accessToken;
    # The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified
    @jsondata:Name {value: "repository_ids"}
    int[] repositoryIds?;
    # The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified
    string[] repositories?;
    # The permissions granted to the user access token
    AppPermissions permissions?;
    # The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified
    @jsondata:Name {value: "target_id"}
    int targetId?;
    # The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified
    string target?;
};

# Represents the Queries record for the operation: git/get-tree
public type GitGetTreeQueries record {
    # Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees
    string recursive?;
};

# Details about an issue rename event
public type RenamedIssueEventRename record {
    # The previous title of the issue
    string 'from;
    # The new title of the issue
    string to;
};

# A GitHub Classroom assignment
public type ClassroomAssignment record {
    # The selected editor for the assignment
    string editor;
    # Whether feedback pull request will be created when a student accepts the assignment
    @jsondata:Name {value: "feedback_pull_requests_enabled"}
    boolean feedbackPullRequestsEnabled;
    # Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment
    @jsondata:Name {value: "invitations_enabled"}
    boolean invitationsEnabled;
    # Whether students are admins on created repository when a student accepts the assignment
    @jsondata:Name {value: "students_are_repo_admins"}
    boolean studentsAreRepoAdmins;
    # The number of students that have accepted the assignment
    int accepted;
    # The programming language used in the assignment
    string language;
    # A GitHub Classroom classroom
    Classroom classroom;
    # Assignment title
    string title;
    # Whether it's a group assignment or individual assignment
    "individual"|"group" 'type;
    # The link that a student can use to accept the assignment
    @jsondata:Name {value: "invite_link"}
    string inviteLink;
    # Repository containing starter code for the classroom assignment
    @jsondata:Name {value: "starter_code_repository"}
    SimpleClassroomRepository starterCodeRepository;
    # The number of students that have submitted the assignment
    int submitted;
    # The maximum allowable teams for the assignment
    @jsondata:Name {value: "max_teams"}
    int? maxTeams;
    # Whether an accepted assignment creates a public repository
    @jsondata:Name {value: "public_repo"}
    boolean publicRepo;
    # The maximum allowable members per team
    @jsondata:Name {value: "max_members"}
    int? maxMembers;
    # Unique identifier of the repository
    int id;
    # The number of students that have passed the assignment
    int passing;
    # The time at which the assignment is due
    string? deadline;
    # Sluggified name of the assignment
    string slug;
};

# Represents the Queries record for the operation: teams/list-projects-legacy
public type TeamsListProjectsLegacyQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: repos/list-collaborators
public type ReposListCollaboratorsQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see
    "outside"|"direct"|"all" affiliation = "all";
    # Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned
    "pull"|"triage"|"push"|"maintain"|"admin" permission?;
    # Page number of the results to fetch
    int page = 1;
};

# Security advisory identifiers including type and value
public type GlobalAdvisoryIdentifiers record {
    # The type of identifier
    "CVE"|"GHSA" 'type;
    # The identifier value
    string value;
};

# Array of affected items with maximum 1000 string entries
@constraint:Array {maxLength: 1000}
public type AffectsAffectsOneOf12 string[];

# Community Profile
public type CommunityProfile record {
    # Repository community health score as a percentage (0-100)
    @jsondata:Name {value: "health_percentage"}
    int healthPercentage;
    # Timestamp when community profile was last updated
    @jsondata:Name {value: "updated_at"}
    string? updatedAt;
    # URL for repository documentation
    string? documentation;
    # Repository description text
    string? description;
    # Repository community health files and documentation status
    CommunityProfileFiles files;
    # Whether content reporting is enabled for the repository
    @jsondata:Name {value: "content_reports_enabled"}
    boolean contentReportsEnabled?;
};

# Represents the Queries record for the operation: repos/list-contributors
public type ReposListContributorsQueries record {
    # Set to `1` or `true` to include anonymous contributors in results
    string anon?;
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
};

# Represents the Queries record for the operation: reactions/list-for-team-discussion-legacy
public type ReactionsListForTeamDiscussionLegacyQueries record {
    # The number of results per page (max 100)
    @http:Query {name: "per_page"}
    int perPage = 30;
    # Page number of the results to fetch
    int page = 1;
    # Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion
    "+1"|"-1"|"laugh"|"confused"|"heart"|"hooray"|"rocket"|"eyes" content?;
};

# Request body for updating team settings and configuration
public type TeamsteamSlugBody record {
    # The ID of a team to set as the parent team
    @jsondata:Name {value: "parent_team_id"}
    int? parentTeamId?;
    # The name of the team
    string name?;
    # The description of the team
    string description?;
    # The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
    # **For a non-nested team:**  
    #  * `secret` - only visible to organization owners and members of this team.  
    #  * `closed` - visible to all members of this organization.  
    # **For a parent or child team:**  
    #  * `closed` - visible to all members of this organization
    "secret"|"closed" privacy?;
    # **Deprecated**. The permission that new repositories will be added to the team with when none is specified
    "pull"|"push"|"admin" permission = "pull";
    # The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
    #  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
    #  * `notifications_disabled` - no one receives notifications
    @jsondata:Name {value: "notification_setting"}
    "notifications_enabled"|"notifications_disabled" notificationSetting?;
};

# OAuth access token for GitHub API authentication
public type ClientIdGrantBody record {
    # The OAuth access token used to authenticate to the GitHub API
    @jsondata:Name {value: "access_token"}
    string accessToken;
};

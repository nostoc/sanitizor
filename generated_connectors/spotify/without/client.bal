// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/data.jsondata;
import ballerina/http;

# This is a generated connector from [Spotify API v1](https://developer.spotify.com/documentation/web-api/) OpenAPI Specification. 
# Through the Spotify Web API, external applications retrieve Spotify content such as album data and playlists.
@display {label: "Spotify", iconPath: "icon.png"}
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    # The connector initialization requires setting the API credentials. 
    # Please create a [Spotify account](www.spotify.com) and obtain tokens following [this guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/). Configure required scopes when obtaining the tokens. 
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.spotify.com/v1") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get a List of Current User's Playlists
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Please note that the access token has to be tied to a user 
    @display {label: "My Playlists"}
    resource isolated function get me/playlists(map<string|string[]> headers = {}, *GetMyPlaylistsQueries queries) returns CurrentPlaylistDetails|error {
        string resourcePath = string `/me/playlists`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Playlist
    #
    # + playlistId - The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - On success, the response body contains a [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden 
    @display {label: "Playlist By Id"}
    resource isolated function get playlists/[string playlistId](map<string|string[]> headers = {}, *GetPlaylistByIdQueries queries) returns PlaylistObject|error {
        string resourcePath = string `/playlists/${getEncodedUri(playlistId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Change a Playlist's Details
    #
    # + playlistId - The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist
    # + headers - Headers to be sent with the request 
    # + payload - Content to update the playlist 
    # + return - On success the HTTP status code in the response header is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to change a playlist when you do not have the user's authorization returns error `403` Forbidden 
    @display {label: "Update Playlist"}
    resource isolated function put playlists/[string playlistId](UpdatePlaylistHeaders headers, ChangePlayListDetails payload) returns error? {
        string resourcePath = string `/playlists/${getEncodedUri(playlistId)}`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Get a Playlist's Items
    #
    # + playlistId - The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - On success, the response body contains an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject) and [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) (depends on the `additional_types` parameter), wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden 
    @display {label: "Playlist Tracks"}
    resource isolated function get playlists/[string playlistId]/tracks(map<string|string[]> headers = {}, *GetPlaylistTracksQueries queries) returns PlaylistTrackDetails|error {
        string resourcePath = string `/playlists/${getEncodedUri(playlistId)}/tracks`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reorder or Replace a Playlist's Items
    #
    # + playlistId - The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information needed to reorder the playlist 
    # + return - On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format and the HTTP status code in the response header is `200` OK. The `snapshot_id` can be used to identify your playlist version in future requests. On a successful **replace** operation, the HTTP status code in the response header is `201` Created. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes), the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema), and the existing playlist is unmodified. Trying to set an item when you do not have the user's authorization returns error `403` Forbidden 
    @display {label: "Reorder or Replace Tracks"}
    resource isolated function put playlists/[string playlistId]/tracks(PlayListReorderDetails payload, map<string|string[]> headers = {}, *ReorderOrReplacePlaylistTracksQueries queries) returns SnapshotIdObject|error? {
        string resourcePath = string `/playlists/${getEncodedUri(playlistId)}/tracks`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get a List of a User's Playlists
    #
    # + userId - The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema) 
    @display {label: "Playlist By User Id"}
    resource isolated function get users/[string userId]/playlists(map<string|string[]> headers = {}, *GetPlayslistsByUserIDQueries queries) returns UserPlayListDetails|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/playlists`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a Playlist
    #
    # + userId - The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
    # + headers - Headers to be sent with the request 
    # + payload - Content to create playlist 
    # + return - On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject) in JSON format and the HTTP status code in the response header is `200` OK or `201` Created. There is also a `Location` response header giving the Web API endpoint for the new playlist. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden 
    @display {label: "Create Playlist"}
    resource isolated function post users/[string userId]/playlists(PlayListDetails payload, map<string|string[]> headers = {}) returns PlaylistObject|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/playlists`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get All New Releases
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and an`albums` object. The `albums` object contains an array of simplified [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Once you have retrieved the list, you can use [Get an Album's Tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-albums-tracks) to drill down further. The results are returned in an order reflected within the Spotify clients, and therefore may not be ordered by date 
    @display {label: "Get New Releases"}
    resource isolated function get browse/new\-releases(map<string|string[]> headers = {}, *GetNewRelesesQueries queries) returns NewReleasesObject|error {
        string resourcePath = string `/browse/new-releases`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get All Featured Playlists
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and a `playlists` object. The `playlists` object contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Once you have retrieved the list of playlist objects, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further 
    @display {label: "Get Featured Playlists"}
    resource isolated function get browse/featured\-playlists(map<string|string[]> headers = {}, *GetFeaturedPlaylistsQueries queries) returns FeaturedPlaylistObject|error {
        string resourcePath = string `/browse/featured-playlists`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }
}
